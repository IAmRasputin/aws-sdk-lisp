;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/servicecatalog/api
  (:use)
  (:nicknames #:aws/servicecatalog)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/servicecatalog/api)
(common-lisp:progn
 (common-lisp:defclass servicecatalog-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "servicecatalog" :protocol
                        :json))
 (common-lisp:export 'servicecatalog-request))
(common-lisp:progn
 (common-lisp:define-condition servicecatalog-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'servicecatalog-error))
(common-lisp:defvar *error-map*
  '(("DuplicateResourceException" . duplicate-resource-exception)
    ("InvalidParametersException" . invalid-parameters-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("OperationNotSupportedException" . operation-not-supported-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TagOptionNotMigratedException" . tag-option-not-migrated-exception)))
(common-lisp:deftype accept-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accept-portfolio-share-input common-lisp:nil
                       ((portfolio-share-type :initarg :portfolio-share-type
                         :type
                         (common-lisp:or portfolio-share-type common-lisp:null)
                         :accessor
                         %accept-portfolio-share-input-portfolio-share-type
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %accept-portfolio-share-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %accept-portfolio-share-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-portfolio-share-input
                    'make-accept-portfolio-share-input))
 (common-lisp:defun make-accept-portfolio-share-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-type portfolio-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'accept-portfolio-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-portfolio-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-portfolio-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-type))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-portfolio-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-portfolio-share-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-portfolio-share-output
                    'make-accept-portfolio-share-output))
 (common-lisp:defun make-accept-portfolio-share-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-portfolio-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-portfolio-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-level-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or access-level-filter-value
                                         common-lisp:null)
                         :accessor %access-level-filter-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or access-level-filter-key
                                         common-lisp:null)
                         :accessor %access-level-filter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'access-level-filter 'make-access-level-filter))
 (common-lisp:defun make-access-level-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'access-level-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-level-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-level-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-level-filter))
   common-lisp:nil))
(common-lisp:deftype access-level-filter-key () 'common-lisp:string)
(common-lisp:deftype access-level-filter-value () 'common-lisp:string)
(common-lisp:deftype access-status () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-ids () '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-account-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype add-tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-add-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype allowed-values () '(trivial-types:proper-list string))
 (common-lisp:defun |make-allowed-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype approximate-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass associate-budget-with-resource-input common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %associate-budget-with-resource-input-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (budget-name :initarg :budget-name :type
                         (common-lisp:or budget-name common-lisp:null)
                         :accessor
                         %associate-budget-with-resource-input-budget-name
                         :initform
                         (common-lisp:error ":budget-name is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-budget-with-resource-input
                    'make-associate-budget-with-resource-input))
 (common-lisp:defun make-associate-budget-with-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id budget-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-budget-with-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-budget-with-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-budget-with-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-budget-with-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-budget-with-resource-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-budget-with-resource-output
                    'make-associate-budget-with-resource-output))
 (common-lisp:defun make-associate-budget-with-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-budget-with-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-budget-with-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-budget-with-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-budget-with-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-principal-with-portfolio-input common-lisp:nil
                       ((principal-type :initarg :principal-type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor
                         %associate-principal-with-portfolio-input-principal-type
                         :initform
                         (common-lisp:error ":principal-type is required"))
                        (principal-arn :initarg :principal-arn :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor
                         %associate-principal-with-portfolio-input-principal-arn
                         :initform
                         (common-lisp:error ":principal-arn is required"))
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %associate-principal-with-portfolio-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %associate-principal-with-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-principal-with-portfolio-input
                    'make-associate-principal-with-portfolio-input))
 (common-lisp:defun make-associate-principal-with-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-type principal-arn portfolio-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-principal-with-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-principal-with-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-principal-with-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-principal-with-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-principal-with-portfolio-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-principal-with-portfolio-output
                    'make-associate-principal-with-portfolio-output))
 (common-lisp:defun make-associate-principal-with-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-principal-with-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-principal-with-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-principal-with-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-principal-with-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-product-with-portfolio-input common-lisp:nil
                       ((source-portfolio-id :initarg :source-portfolio-id
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %associate-product-with-portfolio-input-source-portfolio-id
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %associate-product-with-portfolio-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %associate-product-with-portfolio-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %associate-product-with-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-product-with-portfolio-input
                    'make-associate-product-with-portfolio-input))
 (common-lisp:defun make-associate-product-with-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-portfolio-id portfolio-id
                     product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-product-with-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-product-with-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-product-with-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-portfolio-id))
      (common-lisp:list
       (common-lisp:cons "SourcePortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-product-with-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-product-with-portfolio-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-product-with-portfolio-output
                    'make-associate-product-with-portfolio-output))
 (common-lisp:defun make-associate-product-with-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-product-with-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-product-with-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-product-with-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-product-with-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  associate-service-action-with-provisioning-artifact-input common-lisp:nil
  ((accept-language :initarg :accept-language :type
    (common-lisp:or accept-language common-lisp:null) :accessor
    %associate-service-action-with-provisioning-artifact-input-accept-language
    :initform common-lisp:nil)
   (service-action-id :initarg :service-action-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %associate-service-action-with-provisioning-artifact-input-service-action-id
    :initform (common-lisp:error ":service-action-id is required"))
   (provisioning-artifact-id :initarg :provisioning-artifact-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %associate-service-action-with-provisioning-artifact-input-provisioning-artifact-id
    :initform (common-lisp:error ":provisioning-artifact-id is required"))
   (product-id :initarg :product-id :type (common-lisp:or id common-lisp:null)
    :accessor
    %associate-service-action-with-provisioning-artifact-input-product-id
    :initform (common-lisp:error ":product-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-service-action-with-provisioning-artifact-input
                    'make-associate-service-action-with-provisioning-artifact-input))
 (common-lisp:defun make-associate-service-action-with-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language service-action-id
                     provisioning-artifact-id product-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-service-action-with-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-service-action-with-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-service-action-with-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-service-action-with-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  associate-service-action-with-provisioning-artifact-output common-lisp:nil
  common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-service-action-with-provisioning-artifact-output
                    'make-associate-service-action-with-provisioning-artifact-output))
 (common-lisp:defun make-associate-service-action-with-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-service-action-with-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-service-action-with-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-service-action-with-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-service-action-with-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-tag-option-with-resource-input common-lisp:nil
                       ((tag-option-id :initarg :tag-option-id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor
                         %associate-tag-option-with-resource-input-tag-option-id
                         :initform
                         (common-lisp:error ":tag-option-id is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %associate-tag-option-with-resource-input-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-tag-option-with-resource-input
                    'make-associate-tag-option-with-resource-input))
 (common-lisp:defun make-associate-tag-option-with-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-option-id resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-tag-option-with-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-tag-option-with-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-tag-option-with-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-id))
      (common-lisp:list
       (common-lisp:cons "TagOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-tag-option-with-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-tag-option-with-resource-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-tag-option-with-resource-output
                    'make-associate-tag-option-with-resource-output))
 (common-lisp:defun make-associate-tag-option-with-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-tag-option-with-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-tag-option-with-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-tag-option-with-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-tag-option-with-resource-output))
   common-lisp:nil))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass
  batch-associate-service-action-with-provisioning-artifact-input
  common-lisp:nil
  ((accept-language :initarg :accept-language :type
    (common-lisp:or accept-language common-lisp:null) :accessor
    %batch-associate-service-action-with-provisioning-artifact-input-accept-language
    :initform common-lisp:nil)
   (service-action-associations :initarg :service-action-associations :type
    (common-lisp:or service-action-associations common-lisp:null) :accessor
    %batch-associate-service-action-with-provisioning-artifact-input-service-action-associations
    :initform (common-lisp:error ":service-action-associations is required"))))
 (common-lisp:export
  (common-lisp:list
   'batch-associate-service-action-with-provisioning-artifact-input
   'make-batch-associate-service-action-with-provisioning-artifact-input))
 (common-lisp:defun make-batch-associate-service-action-with-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language
                     service-action-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-service-action-with-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-service-action-with-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-service-action-with-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-associations))
      (common-lisp:list
       (common-lisp:cons "ServiceActionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-service-action-with-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  batch-associate-service-action-with-provisioning-artifact-output
  common-lisp:nil
  ((failed-service-action-associations :initarg
    :failed-service-action-associations :type
    (common-lisp:or failed-service-action-associations common-lisp:null)
    :accessor
    %batch-associate-service-action-with-provisioning-artifact-output-failed-service-action-associations
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'batch-associate-service-action-with-provisioning-artifact-output
   'make-batch-associate-service-action-with-provisioning-artifact-output))
 (common-lisp:defun make-batch-associate-service-action-with-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-service-action-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-service-action-with-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-service-action-with-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-service-action-with-provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-service-action-associations))
      (common-lisp:list
       (common-lisp:cons "FailedServiceActionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-service-action-with-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  batch-disassociate-service-action-from-provisioning-artifact-input
  common-lisp:nil
  ((accept-language :initarg :accept-language :type
    (common-lisp:or accept-language common-lisp:null) :accessor
    %batch-disassociate-service-action-from-provisioning-artifact-input-accept-language
    :initform common-lisp:nil)
   (service-action-associations :initarg :service-action-associations :type
    (common-lisp:or service-action-associations common-lisp:null) :accessor
    %batch-disassociate-service-action-from-provisioning-artifact-input-service-action-associations
    :initform (common-lisp:error ":service-action-associations is required"))))
 (common-lisp:export
  (common-lisp:list
   'batch-disassociate-service-action-from-provisioning-artifact-input
   'make-batch-disassociate-service-action-from-provisioning-artifact-input))
 (common-lisp:defun make-batch-disassociate-service-action-from-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language
                     service-action-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-service-action-from-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-service-action-from-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-service-action-from-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-associations))
      (common-lisp:list
       (common-lisp:cons "ServiceActionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-service-action-from-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  batch-disassociate-service-action-from-provisioning-artifact-output
  common-lisp:nil
  ((failed-service-action-associations :initarg
    :failed-service-action-associations :type
    (common-lisp:or failed-service-action-associations common-lisp:null)
    :accessor
    %batch-disassociate-service-action-from-provisioning-artifact-output-failed-service-action-associations
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'batch-disassociate-service-action-from-provisioning-artifact-output
   'make-batch-disassociate-service-action-from-provisioning-artifact-output))
 (common-lisp:defun make-batch-disassociate-service-action-from-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-service-action-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-service-action-from-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-service-action-from-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-service-action-from-provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-service-action-associations))
      (common-lisp:list
       (common-lisp:cons "FailedServiceActionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-service-action-from-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass budget-detail common-lisp:nil
                       ((budget-name :initarg :budget-name :type
                         (common-lisp:or budget-name common-lisp:null)
                         :accessor %budget-detail-budget-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'budget-detail 'make-budget-detail))
 (common-lisp:defun make-budget-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key budget-name)
   (common-lisp:apply #'common-lisp:make-instance 'budget-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input budget-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input budget-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input budget-detail))
   common-lisp:nil))
(common-lisp:deftype budget-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype budgets () '(trivial-types:proper-list budget-detail))
 (common-lisp:defun |make-budgets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list budget-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype causing-entity () 'common-lisp:string)
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-dashboard common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or cloud-watch-dashboard-name
                                         common-lisp:null)
                         :accessor %cloud-watch-dashboard-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-dashboard 'make-cloud-watch-dashboard))
 (common-lisp:defun make-cloud-watch-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-dashboard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-dashboard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-dashboard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-dashboard))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-dashboard-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cloud-watch-dashboards ()
   '(trivial-types:proper-list cloud-watch-dashboard))
 (common-lisp:defun |make-cloud-watch-dashboards|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cloud-watch-dashboard))
   aws-sdk/generator/shape::members))
(common-lisp:deftype code-star-connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-star-parameters common-lisp:nil
                       ((artifact-path :initarg :artifact-path :type
                         (common-lisp:or repository-artifact-path
                                         common-lisp:null)
                         :accessor %code-star-parameters-artifact-path
                         :initform
                         (common-lisp:error ":artifact-path is required"))
                        (branch :initarg :branch :type
                         (common-lisp:or repository-branch common-lisp:null)
                         :accessor %code-star-parameters-branch :initform
                         (common-lisp:error ":branch is required"))
                        (repository :initarg :repository :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         %code-star-parameters-repository :initform
                         (common-lisp:error ":repository is required"))
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or code-star-connection-arn
                                         common-lisp:null)
                         :accessor %code-star-parameters-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'code-star-parameters 'make-code-star-parameters))
 (common-lisp:defun make-code-star-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key artifact-path branch repository
                     connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'code-star-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-star-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-star-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-path))
      (common-lisp:list
       (common-lisp:cons "ArtifactPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-star-parameters))
   common-lisp:nil))
(common-lisp:deftype constraint-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass constraint-detail common-lisp:nil
                       ((portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %constraint-detail-portfolio-id :initform
                         common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %constraint-detail-product-id :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %constraint-detail-owner :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or constraint-description
                                         common-lisp:null)
                         :accessor %constraint-detail-description :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or constraint-type common-lisp:null)
                         :accessor %constraint-detail-type :initform
                         common-lisp:nil)
                        (constraint-id :initarg :constraint-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %constraint-detail-constraint-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'constraint-detail 'make-constraint-detail))
 (common-lisp:defun make-constraint-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-id product-id owner description
                     type constraint-id)
   (common-lisp:apply #'common-lisp:make-instance 'constraint-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input constraint-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input constraint-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraint-id))
      (common-lisp:list
       (common-lisp:cons "ConstraintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input constraint-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype constraint-details ()
   '(trivial-types:proper-list constraint-detail))
 (common-lisp:defun |make-constraint-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list constraint-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype constraint-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype constraint-summaries ()
   '(trivial-types:proper-list constraint-summary))
 (common-lisp:defun |make-constraint-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list constraint-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass constraint-summary common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or constraint-description
                                         common-lisp:null)
                         :accessor %constraint-summary-description :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or constraint-type common-lisp:null)
                         :accessor %constraint-summary-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'constraint-summary 'make-constraint-summary))
 (common-lisp:defun make-constraint-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description type)
   (common-lisp:apply #'common-lisp:make-instance 'constraint-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input constraint-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input constraint-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input constraint-summary))
   common-lisp:nil))
(common-lisp:deftype constraint-type () 'common-lisp:string)
(common-lisp:deftype copy-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype copy-options () '(trivial-types:proper-list copy-option))
 (common-lisp:defun |make-copy-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list copy-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass copy-product-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %copy-product-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (copy-options :initarg :copy-options :type
                         (common-lisp:or copy-options common-lisp:null)
                         :accessor %copy-product-input-copy-options :initform
                         common-lisp:nil)
                        (source-provisioning-artifact-identifiers :initarg
                         :source-provisioning-artifact-identifiers :type
                         (common-lisp:or
                          source-provisioning-artifact-properties
                          common-lisp:null)
                         :accessor
                         %copy-product-input-source-provisioning-artifact-identifiers
                         :initform common-lisp:nil)
                        (target-product-name :initarg :target-product-name
                         :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %copy-product-input-target-product-name
                         :initform common-lisp:nil)
                        (target-product-id :initarg :target-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %copy-product-input-target-product-id :initform
                         common-lisp:nil)
                        (source-product-arn :initarg :source-product-arn :type
                         (common-lisp:or product-arn common-lisp:null)
                         :accessor %copy-product-input-source-product-arn
                         :initform
                         (common-lisp:error ":source-product-arn is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %copy-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-product-input 'make-copy-product-input))
 (common-lisp:defun make-copy-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token copy-options
                     source-provisioning-artifact-identifiers
                     target-product-name target-product-id source-product-arn
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'copy-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-product-arn))
      (common-lisp:list
       (common-lisp:cons "SourceProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-product-id))
      (common-lisp:list
       (common-lisp:cons "TargetProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-product-name))
      (common-lisp:list
       (common-lisp:cons "TargetProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-provisioning-artifact-identifiers))
      (common-lisp:list
       (common-lisp:cons "SourceProvisioningArtifactIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-options))
      (common-lisp:list
       (common-lisp:cons "CopyOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-product-output common-lisp:nil
                       ((copy-product-token :initarg :copy-product-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %copy-product-output-copy-product-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-product-output 'make-copy-product-output))
 (common-lisp:defun make-copy-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-product-token)
   (common-lisp:apply #'common-lisp:make-instance 'copy-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-product-token))
      (common-lisp:list
       (common-lisp:cons "CopyProductToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-product-output))
   common-lisp:nil))
(common-lisp:deftype copy-product-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-constraint-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %create-constraint-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (description :initarg :description :type
                         (common-lisp:or constraint-description
                                         common-lisp:null)
                         :accessor %create-constraint-input-description
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or constraint-type common-lisp:null)
                         :accessor %create-constraint-input-type :initform
                         (common-lisp:error ":type is required"))
                        (parameters :initarg :parameters :type
                         (common-lisp:or constraint-parameters
                                         common-lisp:null)
                         :accessor %create-constraint-input-parameters
                         :initform
                         (common-lisp:error ":parameters is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-constraint-input-product-id :initform
                         (common-lisp:error ":product-id is required"))
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-constraint-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %create-constraint-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-constraint-input 'make-create-constraint-input))
 (common-lisp:defun make-create-constraint-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token description type
                     parameters product-id portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'create-constraint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-constraint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-constraint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-constraint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-constraint-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %create-constraint-output-status :initform
                         common-lisp:nil)
                        (constraint-parameters :initarg :constraint-parameters
                         :type
                         (common-lisp:or constraint-parameters
                                         common-lisp:null)
                         :accessor
                         %create-constraint-output-constraint-parameters
                         :initform common-lisp:nil)
                        (constraint-detail :initarg :constraint-detail :type
                         (common-lisp:or constraint-detail common-lisp:null)
                         :accessor %create-constraint-output-constraint-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-constraint-output 'make-create-constraint-output))
 (common-lisp:defun make-create-constraint-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status constraint-parameters
                     constraint-detail)
   (common-lisp:apply #'common-lisp:make-instance 'create-constraint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-constraint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-constraint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraint-detail))
      (common-lisp:list
       (common-lisp:cons "ConstraintDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-parameters))
      (common-lisp:list
       (common-lisp:cons "ConstraintParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-constraint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portfolio-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %create-portfolio-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or add-tags common-lisp:null) :accessor
                         %create-portfolio-input-tags :initform
                         common-lisp:nil)
                        (provider-name :initarg :provider-name :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor %create-portfolio-input-provider-name
                         :initform
                         (common-lisp:error ":provider-name is required"))
                        (description :initarg :description :type
                         (common-lisp:or portfolio-description
                                         common-lisp:null)
                         :accessor %create-portfolio-input-description
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or portfolio-display-name
                                         common-lisp:null)
                         :accessor %create-portfolio-input-display-name
                         :initform
                         (common-lisp:error ":display-name is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %create-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-portfolio-input 'make-create-portfolio-input))
 (common-lisp:defun make-create-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token tags provider-name
                     description display-name accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'create-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portfolio-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-portfolio-output-tags :initform
                         common-lisp:nil)
                        (portfolio-detail :initarg :portfolio-detail :type
                         (common-lisp:or portfolio-detail common-lisp:null)
                         :accessor %create-portfolio-output-portfolio-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-portfolio-output 'make-create-portfolio-output))
 (common-lisp:defun make-create-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags portfolio-detail)
   (common-lisp:apply #'common-lisp:make-instance 'create-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-detail))
      (common-lisp:list
       (common-lisp:cons "PortfolioDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portfolio-share-input common-lisp:nil
                       ((share-principals :initarg :share-principals :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-portfolio-share-input-share-principals
                         :initform common-lisp:nil)
                        (share-tag-options :initarg :share-tag-options :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-portfolio-share-input-share-tag-options
                         :initform common-lisp:nil)
                        (organization-node :initarg :organization-node :type
                         (common-lisp:or organization-node common-lisp:null)
                         :accessor
                         %create-portfolio-share-input-organization-node
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-portfolio-share-input-account-id :initform
                         common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-portfolio-share-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %create-portfolio-share-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-portfolio-share-input
                    'make-create-portfolio-share-input))
 (common-lisp:defun make-create-portfolio-share-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-principals share-tag-options
                     organization-node account-id portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'create-portfolio-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-node))
      (common-lisp:list
       (common-lisp:cons "OrganizationNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-tag-options))
      (common-lisp:list
       (common-lisp:cons "ShareTagOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-principals))
      (common-lisp:list
       (common-lisp:cons "SharePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portfolio-share-output common-lisp:nil
                       ((portfolio-share-token :initarg :portfolio-share-token
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %create-portfolio-share-output-portfolio-share-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-portfolio-share-output
                    'make-create-portfolio-share-output))
 (common-lisp:defun make-create-portfolio-share-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-portfolio-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-token))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portfolio-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-product-input common-lisp:nil
                       ((source-connection :initarg :source-connection :type
                         (common-lisp:or source-connection common-lisp:null)
                         :accessor %create-product-input-source-connection
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %create-product-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (provisioning-artifact-parameters :initarg
                         :provisioning-artifact-parameters :type
                         (common-lisp:or provisioning-artifact-properties
                                         common-lisp:null)
                         :accessor
                         %create-product-input-provisioning-artifact-parameters
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or add-tags common-lisp:null) :accessor
                         %create-product-input-tags :initform common-lisp:nil)
                        (product-type :initarg :product-type :type
                         (common-lisp:or product-type common-lisp:null)
                         :accessor %create-product-input-product-type :initform
                         (common-lisp:error ":product-type is required"))
                        (support-url :initarg :support-url :type
                         (common-lisp:or support-url common-lisp:null)
                         :accessor %create-product-input-support-url :initform
                         common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or support-email common-lisp:null)
                         :accessor %create-product-input-support-email
                         :initform common-lisp:nil)
                        (support-description :initarg :support-description
                         :type
                         (common-lisp:or support-description common-lisp:null)
                         :accessor %create-product-input-support-description
                         :initform common-lisp:nil)
                        (distributor :initarg :distributor :type
                         (common-lisp:or product-view-owner common-lisp:null)
                         :accessor %create-product-input-distributor :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or product-view-short-description
                                         common-lisp:null)
                         :accessor %create-product-input-description :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or product-view-owner common-lisp:null)
                         :accessor %create-product-input-owner :initform
                         (common-lisp:error ":owner is required"))
                        (name :initarg :name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %create-product-input-name :initform
                         (common-lisp:error ":name is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %create-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-product-input 'make-create-product-input))
 (common-lisp:defun make-create-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-connection idempotency-token
                     provisioning-artifact-parameters tags product-type
                     support-url support-email support-description distributor
                     description owner name accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'create-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor))
      (common-lisp:list
       (common-lisp:cons "Distributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-description))
      (common-lisp:list
       (common-lisp:cons "SupportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-url))
      (common-lisp:list
       (common-lisp:cons "SupportUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-type))
      (common-lisp:list
       (common-lisp:cons "ProductType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-connection))
      (common-lisp:list
       (common-lisp:cons "SourceConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-product-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-product-output-tags :initform common-lisp:nil)
                        (provisioning-artifact-detail :initarg
                         :provisioning-artifact-detail :type
                         (common-lisp:or provisioning-artifact-detail
                                         common-lisp:null)
                         :accessor
                         %create-product-output-provisioning-artifact-detail
                         :initform common-lisp:nil)
                        (product-view-detail :initarg :product-view-detail
                         :type
                         (common-lisp:or product-view-detail common-lisp:null)
                         :accessor %create-product-output-product-view-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-product-output 'make-create-product-output))
 (common-lisp:defun make-create-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags provisioning-artifact-detail
                     product-view-detail)
   (common-lisp:apply #'common-lisp:make-instance 'create-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-view-detail))
      (common-lisp:list
       (common-lisp:cons "ProductViewDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-detail))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioned-product-plan-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-provisioned-product-plan-input-tags :initform
                         common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (provisioning-parameters :initarg
                         :provisioning-parameters :type
                         (common-lisp:or update-provisioning-parameters
                                         common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-provisioning-parameters
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioned-product-plan-input-provisioning-artifact-id
                         :initform
                         (common-lisp:error
                          ":provisioning-artifact-id is required"))
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-provisioned-product-name
                         :initform
                         (common-lisp:error
                          ":provisioned-product-name is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioned-product-plan-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (path-id :initarg :path-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioned-product-plan-input-path-id
                         :initform common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-notification-arns
                         :initform common-lisp:nil)
                        (plan-type :initarg :plan-type :type
                         (common-lisp:or provisioned-product-plan-type
                                         common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-plan-type
                         :initform
                         (common-lisp:error ":plan-type is required"))
                        (plan-name :initarg :plan-name :type
                         (common-lisp:or provisioned-product-plan-name
                                         common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-plan-name
                         :initform
                         (common-lisp:error ":plan-name is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-provisioned-product-plan-input
                    'make-create-provisioned-product-plan-input))
 (common-lisp:defun make-create-provisioned-product-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags idempotency-token
                     provisioning-parameters provisioning-artifact-id
                     provisioned-product-name product-id path-id
                     notification-arns plan-type plan-name accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioned-product-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioned-product-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioned-product-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-name))
      (common-lisp:list
       (common-lisp:cons "PlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-type))
      (common-lisp:list
       (common-lisp:cons "PlanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioned-product-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioned-product-plan-output common-lisp:nil
                       ((provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioned-product-plan-output-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-output-provisioned-product-name
                         :initform common-lisp:nil)
                        (provision-product-id :initarg :provision-product-id
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioned-product-plan-output-provision-product-id
                         :initform common-lisp:nil)
                        (plan-id :initarg :plan-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioned-product-plan-output-plan-id
                         :initform common-lisp:nil)
                        (plan-name :initarg :plan-name :type
                         (common-lisp:or provisioned-product-plan-name
                                         common-lisp:null)
                         :accessor
                         %create-provisioned-product-plan-output-plan-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-provisioned-product-plan-output
                    'make-create-provisioned-product-plan-output))
 (common-lisp:defun make-create-provisioned-product-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact-id
                     provisioned-product-name provision-product-id plan-id
                     plan-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioned-product-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioned-product-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioned-product-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-name))
      (common-lisp:list
       (common-lisp:cons "PlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-id))
      (common-lisp:list
       (common-lisp:cons "PlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provision-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioned-product-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-artifact-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %create-provisioning-artifact-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (parameters :initarg :parameters :type
                         (common-lisp:or provisioning-artifact-properties
                                         common-lisp:null)
                         :accessor
                         %create-provisioning-artifact-input-parameters
                         :initform
                         (common-lisp:error ":parameters is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-provisioning-artifact-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %create-provisioning-artifact-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-artifact-input
                    'make-create-provisioning-artifact-input))
 (common-lisp:defun make-create-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token parameters product-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-artifact-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %create-provisioning-artifact-output-status :initform
                         common-lisp:nil)
                        (info :initarg :info :type
                         (common-lisp:or provisioning-artifact-info
                                         common-lisp:null)
                         :accessor %create-provisioning-artifact-output-info
                         :initform common-lisp:nil)
                        (provisioning-artifact-detail :initarg
                         :provisioning-artifact-detail :type
                         (common-lisp:or provisioning-artifact-detail
                                         common-lisp:null)
                         :accessor
                         %create-provisioning-artifact-output-provisioning-artifact-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-artifact-output
                    'make-create-provisioning-artifact-output))
 (common-lisp:defun make-create-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status info provisioning-artifact-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-detail))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-action-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %create-service-action-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %create-service-action-input-accept-language
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or service-action-description
                                         common-lisp:null)
                         :accessor %create-service-action-input-description
                         :initform common-lisp:nil)
                        (definition :initarg :definition :type
                         (common-lisp:or service-action-definition-map
                                         common-lisp:null)
                         :accessor %create-service-action-input-definition
                         :initform
                         (common-lisp:error ":definition is required"))
                        (definition-type :initarg :definition-type :type
                         (common-lisp:or service-action-definition-type
                                         common-lisp:null)
                         :accessor %create-service-action-input-definition-type
                         :initform
                         (common-lisp:error ":definition-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or service-action-name common-lisp:null)
                         :accessor %create-service-action-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-service-action-input
                    'make-create-service-action-input))
 (common-lisp:defun make-create-service-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token accept-language
                     description definition definition-type name)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-type))
      (common-lisp:list
       (common-lisp:cons "DefinitionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-action-output common-lisp:nil
                       ((service-action-detail :initarg :service-action-detail
                         :type
                         (common-lisp:or service-action-detail
                                         common-lisp:null)
                         :accessor
                         %create-service-action-output-service-action-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-service-action-output
                    'make-create-service-action-output))
 (common-lisp:defun make-create-service-action-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-action-detail)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-action-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-action-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-detail))
      (common-lisp:list
       (common-lisp:cons "ServiceActionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-action-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tag-option-input common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-option-value common-lisp:null)
                         :accessor %create-tag-option-input-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-option-key common-lisp:null)
                         :accessor %create-tag-option-input-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'create-tag-option-input 'make-create-tag-option-input))
 (common-lisp:defun make-create-tag-option-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'create-tag-option-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-tag-option-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-tag-option-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-tag-option-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tag-option-output common-lisp:nil
                       ((tag-option-detail :initarg :tag-option-detail :type
                         (common-lisp:or tag-option-detail common-lisp:null)
                         :accessor %create-tag-option-output-tag-option-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-tag-option-output 'make-create-tag-option-output))
 (common-lisp:defun make-create-tag-option-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-option-detail)
   (common-lisp:apply #'common-lisp:make-instance 'create-tag-option-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-tag-option-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-tag-option-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-detail))
      (common-lisp:list
       (common-lisp:cons "TagOptionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-tag-option-output))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:deftype default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-constraint-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-constraint-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %delete-constraint-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-constraint-input 'make-delete-constraint-input))
 (common-lisp:defun make-delete-constraint-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'delete-constraint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-constraint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-constraint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-constraint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-constraint-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-constraint-output 'make-delete-constraint-output))
 (common-lisp:defun make-delete-constraint-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-constraint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-constraint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-constraint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-constraint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portfolio-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-portfolio-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %delete-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-portfolio-input 'make-delete-portfolio-input))
 (common-lisp:defun make-delete-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portfolio-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-portfolio-output 'make-delete-portfolio-output))
 (common-lisp:defun make-delete-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portfolio-share-input common-lisp:nil
                       ((organization-node :initarg :organization-node :type
                         (common-lisp:or organization-node common-lisp:null)
                         :accessor
                         %delete-portfolio-share-input-organization-node
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-portfolio-share-input-account-id :initform
                         common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-portfolio-share-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %delete-portfolio-share-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-portfolio-share-input
                    'make-delete-portfolio-share-input))
 (common-lisp:defun make-delete-portfolio-share-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organization-node account-id portfolio-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portfolio-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-node))
      (common-lisp:list
       (common-lisp:cons "OrganizationNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portfolio-share-output common-lisp:nil
                       ((portfolio-share-token :initarg :portfolio-share-token
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %delete-portfolio-share-output-portfolio-share-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-portfolio-share-output
                    'make-delete-portfolio-share-output))
 (common-lisp:defun make-delete-portfolio-share-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-portfolio-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-token))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portfolio-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-product-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-product-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %delete-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-product-input 'make-delete-product-input))
 (common-lisp:defun make-delete-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'delete-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-product-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-product-output 'make-delete-product-output))
 (common-lisp:defun make-delete-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioned-product-plan-input common-lisp:nil
                       ((ignore-errors :initarg :ignore-errors :type
                         (common-lisp:or ignore-errors common-lisp:null)
                         :accessor
                         %delete-provisioned-product-plan-input-ignore-errors
                         :initform common-lisp:nil)
                        (plan-id :initarg :plan-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-provisioned-product-plan-input-plan-id
                         :initform (common-lisp:error ":plan-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %delete-provisioned-product-plan-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-provisioned-product-plan-input
                    'make-delete-provisioned-product-plan-input))
 (common-lisp:defun make-delete-provisioned-product-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ignore-errors plan-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioned-product-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-product-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-product-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-id))
      (common-lisp:list
       (common-lisp:cons "PlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-errors))
      (common-lisp:list
       (common-lisp:cons "IgnoreErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-product-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioned-product-plan-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-provisioned-product-plan-output
                    'make-delete-provisioned-product-plan-output))
 (common-lisp:defun make-delete-provisioned-product-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioned-product-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-product-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-product-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-product-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioning-artifact-input common-lisp:nil
                       ((provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-provisioning-artifact-input-provisioning-artifact-id
                         :initform
                         (common-lisp:error
                          ":provisioning-artifact-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-provisioning-artifact-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %delete-provisioning-artifact-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-artifact-input
                    'make-delete-provisioning-artifact-input))
 (common-lisp:defun make-delete-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact-id product-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioning-artifact-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-artifact-output
                    'make-delete-provisioning-artifact-output))
 (common-lisp:defun make-delete-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-action-input common-lisp:nil
                       ((accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %delete-service-action-input-accept-language
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-service-action-input-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-service-action-input
                    'make-delete-service-action-input))
 (common-lisp:defun make-delete-service-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-action-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-service-action-output
                    'make-delete-service-action-output))
 (common-lisp:defun make-delete-service-action-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-action-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-action-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tag-option-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor %delete-tag-option-input-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tag-option-input 'make-delete-tag-option-input))
 (common-lisp:defun make-delete-tag-option-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tag-option-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tag-option-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tag-option-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tag-option-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tag-option-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-tag-option-output 'make-delete-tag-option-output))
 (common-lisp:defun make-delete-tag-option-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tag-option-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tag-option-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tag-option-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tag-option-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-constraint-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-constraint-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %describe-constraint-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-constraint-input
                    'make-describe-constraint-input))
 (common-lisp:defun make-describe-constraint-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'describe-constraint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-constraint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-constraint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-constraint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-constraint-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %describe-constraint-output-status :initform
                         common-lisp:nil)
                        (constraint-parameters :initarg :constraint-parameters
                         :type
                         (common-lisp:or constraint-parameters
                                         common-lisp:null)
                         :accessor
                         %describe-constraint-output-constraint-parameters
                         :initform common-lisp:nil)
                        (constraint-detail :initarg :constraint-detail :type
                         (common-lisp:or constraint-detail common-lisp:null)
                         :accessor
                         %describe-constraint-output-constraint-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-constraint-output
                    'make-describe-constraint-output))
 (common-lisp:defun make-describe-constraint-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status constraint-parameters
                     constraint-detail)
   (common-lisp:apply #'common-lisp:make-instance 'describe-constraint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-constraint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-constraint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraint-detail))
      (common-lisp:list
       (common-lisp:cons "ConstraintDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-parameters))
      (common-lisp:list
       (common-lisp:cons "ConstraintParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-constraint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-copy-product-status-input common-lisp:nil
                       ((copy-product-token :initarg :copy-product-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-copy-product-status-input-copy-product-token
                         :initform
                         (common-lisp:error ":copy-product-token is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-copy-product-status-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-copy-product-status-input
                    'make-describe-copy-product-status-input))
 (common-lisp:defun make-describe-copy-product-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-product-token accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-copy-product-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-product-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-product-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-product-token))
      (common-lisp:list
       (common-lisp:cons "CopyProductToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-product-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-copy-product-status-output common-lisp:nil
                       ((status-detail :initarg :status-detail :type
                         (common-lisp:or status-detail common-lisp:null)
                         :accessor
                         %describe-copy-product-status-output-status-detail
                         :initform common-lisp:nil)
                        (target-product-id :initarg :target-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-copy-product-status-output-target-product-id
                         :initform common-lisp:nil)
                        (copy-product-status :initarg :copy-product-status
                         :type
                         (common-lisp:or copy-product-status common-lisp:null)
                         :accessor
                         %describe-copy-product-status-output-copy-product-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-copy-product-status-output
                    'make-describe-copy-product-status-output))
 (common-lisp:defun make-describe-copy-product-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-detail target-product-id
                     copy-product-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-copy-product-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-product-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-product-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-product-status))
      (common-lisp:list
       (common-lisp:cons "CopyProductStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-product-id))
      (common-lisp:list
       (common-lisp:cons "TargetProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-detail))
      (common-lisp:list
       (common-lisp:cons "StatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-product-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portfolio-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-portfolio-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %describe-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-portfolio-input 'make-describe-portfolio-input))
 (common-lisp:defun make-describe-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'describe-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portfolio-output common-lisp:nil
                       ((budgets :initarg :budgets :type
                         (common-lisp:or budgets common-lisp:null) :accessor
                         %describe-portfolio-output-budgets :initform
                         common-lisp:nil)
                        (tag-options :initarg :tag-options :type
                         (common-lisp:or tag-option-details common-lisp:null)
                         :accessor %describe-portfolio-output-tag-options
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-portfolio-output-tags :initform
                         common-lisp:nil)
                        (portfolio-detail :initarg :portfolio-detail :type
                         (common-lisp:or portfolio-detail common-lisp:null)
                         :accessor %describe-portfolio-output-portfolio-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-portfolio-output
                    'make-describe-portfolio-output))
 (common-lisp:defun make-describe-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key budgets tag-options tags
                     portfolio-detail)
   (common-lisp:apply #'common-lisp:make-instance 'describe-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-detail))
      (common-lisp:list
       (common-lisp:cons "PortfolioDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-options))
      (common-lisp:list
       (common-lisp:cons "TagOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budgets))
      (common-lisp:list
       (common-lisp:cons "Budgets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portfolio-share-status-input common-lisp:nil
                       ((portfolio-share-token :initarg :portfolio-share-token
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %describe-portfolio-share-status-input-portfolio-share-token
                         :initform
                         (common-lisp:error
                          ":portfolio-share-token is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-portfolio-share-status-input
                    'make-describe-portfolio-share-status-input))
 (common-lisp:defun make-describe-portfolio-share-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-portfolio-share-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-share-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-share-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-token))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-share-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portfolio-share-status-output common-lisp:nil
                       ((share-details :initarg :share-details :type
                         (common-lisp:or share-details common-lisp:null)
                         :accessor
                         %describe-portfolio-share-status-output-share-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor
                         %describe-portfolio-share-status-output-status
                         :initform common-lisp:nil)
                        (organization-node-value :initarg
                         :organization-node-value :type
                         (common-lisp:or organization-node-value
                                         common-lisp:null)
                         :accessor
                         %describe-portfolio-share-status-output-organization-node-value
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-portfolio-share-status-output-portfolio-id
                         :initform common-lisp:nil)
                        (portfolio-share-token :initarg :portfolio-share-token
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %describe-portfolio-share-status-output-portfolio-share-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-portfolio-share-status-output
                    'make-describe-portfolio-share-status-output))
 (common-lisp:defun make-describe-portfolio-share-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-details status
                     organization-node-value portfolio-id
                     portfolio-share-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-portfolio-share-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-share-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-share-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-token))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-node-value))
      (common-lisp:list
       (common-lisp:cons "OrganizationNodeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-details))
      (common-lisp:list
       (common-lisp:cons "ShareDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-share-status-output))
   common-lisp:nil))
(common-lisp:deftype describe-portfolio-share-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-portfolio-shares-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size-max100 common-lisp:null)
                         :accessor %describe-portfolio-shares-input-page-size
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %describe-portfolio-shares-input-page-token :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or describe-portfolio-share-type
                                         common-lisp:null)
                         :accessor %describe-portfolio-shares-input-type
                         :initform (common-lisp:error ":type is required"))
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-portfolio-shares-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-portfolio-shares-input
                    'make-describe-portfolio-shares-input))
 (common-lisp:defun make-describe-portfolio-shares-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token type portfolio-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-portfolio-shares-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-shares-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-shares-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portfolio-shares-output common-lisp:nil
                       ((portfolio-share-details :initarg
                         :portfolio-share-details :type
                         (common-lisp:or portfolio-share-details
                                         common-lisp:null)
                         :accessor
                         %describe-portfolio-shares-output-portfolio-share-details
                         :initform common-lisp:nil)
                        (next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %describe-portfolio-shares-output-next-page-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-portfolio-shares-output
                    'make-describe-portfolio-shares-output))
 (common-lisp:defun make-describe-portfolio-shares-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-details next-page-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-portfolio-shares-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-details))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portfolio-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-product-as-admin-input common-lisp:nil
                       ((source-portfolio-id :initarg :source-portfolio-id
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %describe-product-as-admin-input-source-portfolio-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %describe-product-as-admin-input-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-product-as-admin-input-id :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-product-as-admin-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-product-as-admin-input
                    'make-describe-product-as-admin-input))
 (common-lisp:defun make-describe-product-as-admin-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-portfolio-id name id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-product-as-admin-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-as-admin-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-as-admin-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-portfolio-id))
      (common-lisp:list
       (common-lisp:cons "SourcePortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-as-admin-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-product-as-admin-output common-lisp:nil
                       ((budgets :initarg :budgets :type
                         (common-lisp:or budgets common-lisp:null) :accessor
                         %describe-product-as-admin-output-budgets :initform
                         common-lisp:nil)
                        (tag-options :initarg :tag-options :type
                         (common-lisp:or tag-option-details common-lisp:null)
                         :accessor
                         %describe-product-as-admin-output-tag-options
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-product-as-admin-output-tags :initform
                         common-lisp:nil)
                        (provisioning-artifact-summaries :initarg
                         :provisioning-artifact-summaries :type
                         (common-lisp:or provisioning-artifact-summaries
                                         common-lisp:null)
                         :accessor
                         %describe-product-as-admin-output-provisioning-artifact-summaries
                         :initform common-lisp:nil)
                        (product-view-detail :initarg :product-view-detail
                         :type
                         (common-lisp:or product-view-detail common-lisp:null)
                         :accessor
                         %describe-product-as-admin-output-product-view-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-product-as-admin-output
                    'make-describe-product-as-admin-output))
 (common-lisp:defun make-describe-product-as-admin-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key budgets tag-options tags
                     provisioning-artifact-summaries product-view-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-product-as-admin-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-as-admin-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-as-admin-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-view-detail))
      (common-lisp:list
       (common-lisp:cons "ProductViewDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-summaries))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-options))
      (common-lisp:list
       (common-lisp:cons "TagOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budgets))
      (common-lisp:list
       (common-lisp:cons "Budgets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-as-admin-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-product-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %describe-product-input-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-product-input-id :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %describe-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-product-input 'make-describe-product-input))
 (common-lisp:defun make-describe-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'describe-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-product-output common-lisp:nil
                       ((launch-paths :initarg :launch-paths :type
                         (common-lisp:or launch-paths common-lisp:null)
                         :accessor %describe-product-output-launch-paths
                         :initform common-lisp:nil)
                        (budgets :initarg :budgets :type
                         (common-lisp:or budgets common-lisp:null) :accessor
                         %describe-product-output-budgets :initform
                         common-lisp:nil)
                        (provisioning-artifacts :initarg
                         :provisioning-artifacts :type
                         (common-lisp:or provisioning-artifacts
                                         common-lisp:null)
                         :accessor
                         %describe-product-output-provisioning-artifacts
                         :initform common-lisp:nil)
                        (product-view-summary :initarg :product-view-summary
                         :type
                         (common-lisp:or product-view-summary common-lisp:null)
                         :accessor
                         %describe-product-output-product-view-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-product-output 'make-describe-product-output))
 (common-lisp:defun make-describe-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-paths budgets
                     provisioning-artifacts product-view-summary)
   (common-lisp:apply #'common-lisp:make-instance 'describe-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-summary))
      (common-lisp:list
       (common-lisp:cons "ProductViewSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifacts))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budgets))
      (common-lisp:list
       (common-lisp:cons "Budgets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-paths))
      (common-lisp:list
       (common-lisp:cons "LaunchPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-product-view-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-product-view-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %describe-product-view-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-product-view-input
                    'make-describe-product-view-input))
 (common-lisp:defun make-describe-product-view-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'describe-product-view-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-view-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-view-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-view-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-product-view-output common-lisp:nil
                       ((provisioning-artifacts :initarg
                         :provisioning-artifacts :type
                         (common-lisp:or provisioning-artifacts
                                         common-lisp:null)
                         :accessor
                         %describe-product-view-output-provisioning-artifacts
                         :initform common-lisp:nil)
                        (product-view-summary :initarg :product-view-summary
                         :type
                         (common-lisp:or product-view-summary common-lisp:null)
                         :accessor
                         %describe-product-view-output-product-view-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-product-view-output
                    'make-describe-product-view-output))
 (common-lisp:defun make-describe-product-view-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifacts
                     product-view-summary)
   (common-lisp:apply #'common-lisp:make-instance 'describe-product-view-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-view-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-view-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-summary))
      (common-lisp:list
       (common-lisp:cons "ProductViewSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifacts))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-product-view-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioned-product-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor %describe-provisioned-product-input-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioned-product-input-id :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-provisioned-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioned-product-input
                    'make-describe-provisioned-product-input))
 (common-lisp:defun make-describe-provisioned-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioned-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioned-product-output common-lisp:nil
                       ((cloud-watch-dashboards :initarg
                         :cloud-watch-dashboards :type
                         (common-lisp:or cloud-watch-dashboards
                                         common-lisp:null)
                         :accessor
                         %describe-provisioned-product-output-cloud-watch-dashboards
                         :initform common-lisp:nil)
                        (provisioned-product-detail :initarg
                         :provisioned-product-detail :type
                         (common-lisp:or provisioned-product-detail
                                         common-lisp:null)
                         :accessor
                         %describe-provisioned-product-output-provisioned-product-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioned-product-output
                    'make-describe-provisioned-product-output))
 (common-lisp:defun make-describe-provisioned-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-dashboards
                     provisioned-product-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioned-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-detail))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-dashboards))
      (common-lisp:list
       (common-lisp:cons "CloudWatchDashboards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioned-product-plan-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %describe-provisioned-product-plan-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-provisioned-product-plan-input-page-size
                         :initform common-lisp:nil)
                        (plan-id :initarg :plan-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioned-product-plan-input-plan-id
                         :initform (common-lisp:error ":plan-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-provisioned-product-plan-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioned-product-plan-input
                    'make-describe-provisioned-product-plan-input))
 (common-lisp:defun make-describe-provisioned-product-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size plan-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioned-product-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-id))
      (common-lisp:list
       (common-lisp:cons "PlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioned-product-plan-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %describe-provisioned-product-plan-output-next-page-token
                         :initform common-lisp:nil)
                        (resource-changes :initarg :resource-changes :type
                         (common-lisp:or resource-changes common-lisp:null)
                         :accessor
                         %describe-provisioned-product-plan-output-resource-changes
                         :initform common-lisp:nil)
                        (provisioned-product-plan-details :initarg
                         :provisioned-product-plan-details :type
                         (common-lisp:or provisioned-product-plan-details
                                         common-lisp:null)
                         :accessor
                         %describe-provisioned-product-plan-output-provisioned-product-plan-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioned-product-plan-output
                    'make-describe-provisioned-product-plan-output))
 (common-lisp:defun make-describe-provisioned-product-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token resource-changes
                     provisioned-product-plan-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioned-product-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-plan-details))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductPlanDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-changes))
      (common-lisp:list
       (common-lisp:cons "ResourceChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioned-product-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-artifact-input common-lisp:nil
                       ((verbose :initarg :verbose :type
                         (common-lisp:or verbose common-lisp:null) :accessor
                         %describe-provisioning-artifact-input-verbose
                         :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor
                         %describe-provisioning-artifact-input-product-name
                         :initform common-lisp:nil)
                        (provisioning-artifact-name :initarg
                         :provisioning-artifact-name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-artifact-input-provisioning-artifact-name
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioning-artifact-input-product-id
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioning-artifact-input-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-provisioning-artifact-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-artifact-input
                    'make-describe-provisioning-artifact-input))
 (common-lisp:defun make-describe-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key verbose product-name
                     provisioning-artifact-name product-id
                     provisioning-artifact-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-name))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verbose))
      (common-lisp:list
       (common-lisp:cons "Verbose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-artifact-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %describe-provisioning-artifact-output-status
                         :initform common-lisp:nil)
                        (info :initarg :info :type
                         (common-lisp:or provisioning-artifact-info
                                         common-lisp:null)
                         :accessor %describe-provisioning-artifact-output-info
                         :initform common-lisp:nil)
                        (provisioning-artifact-detail :initarg
                         :provisioning-artifact-detail :type
                         (common-lisp:or provisioning-artifact-detail
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-artifact-output-provisioning-artifact-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-artifact-output
                    'make-describe-provisioning-artifact-output))
 (common-lisp:defun make-describe-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status info provisioning-artifact-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-detail))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-parameters-input common-lisp:nil
                       ((path-name :initarg :path-name :type
                         (common-lisp:or portfolio-display-name
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-input-path-name
                         :initform common-lisp:nil)
                        (path-id :initarg :path-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioning-parameters-input-path-id
                         :initform common-lisp:nil)
                        (provisioning-artifact-name :initarg
                         :provisioning-artifact-name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-input-provisioning-artifact-name
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioning-parameters-input-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-input-product-name
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-provisioning-parameters-input-product-id
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-parameters-input
                    'make-describe-provisioning-parameters-input))
 (common-lisp:defun make-describe-provisioning-parameters-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path-name path-id
                     provisioning-artifact-name provisioning-artifact-id
                     product-name product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-parameters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-parameters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-parameters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-name))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-name))
      (common-lisp:list
       (common-lisp:cons "PathName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-parameters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-parameters-output common-lisp:nil
                       ((provisioning-artifact-output-keys :initarg
                         :provisioning-artifact-output-keys :type
                         (common-lisp:or provisioning-artifact-outputs
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-provisioning-artifact-output-keys
                         :initform common-lisp:nil)
                        (provisioning-artifact-outputs :initarg
                         :provisioning-artifact-outputs :type
                         (common-lisp:or provisioning-artifact-outputs
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-provisioning-artifact-outputs
                         :initform common-lisp:nil)
                        (provisioning-artifact-preferences :initarg
                         :provisioning-artifact-preferences :type
                         (common-lisp:or provisioning-artifact-preferences
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-provisioning-artifact-preferences
                         :initform common-lisp:nil)
                        (tag-options :initarg :tag-options :type
                         (common-lisp:or tag-option-summaries common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-tag-options
                         :initform common-lisp:nil)
                        (usage-instructions :initarg :usage-instructions :type
                         (common-lisp:or usage-instructions common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-usage-instructions
                         :initform common-lisp:nil)
                        (constraint-summaries :initarg :constraint-summaries
                         :type
                         (common-lisp:or constraint-summaries common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-constraint-summaries
                         :initform common-lisp:nil)
                        (provisioning-artifact-parameters :initarg
                         :provisioning-artifact-parameters :type
                         (common-lisp:or provisioning-artifact-parameters
                                         common-lisp:null)
                         :accessor
                         %describe-provisioning-parameters-output-provisioning-artifact-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-parameters-output
                    'make-describe-provisioning-parameters-output))
 (common-lisp:defun make-describe-provisioning-parameters-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact-output-keys
                     provisioning-artifact-outputs
                     provisioning-artifact-preferences tag-options
                     usage-instructions constraint-summaries
                     provisioning-artifact-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-parameters-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-parameters-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-parameters-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-summaries))
      (common-lisp:list
       (common-lisp:cons "ConstraintSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-instructions))
      (common-lisp:list
       (common-lisp:cons "UsageInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-options))
      (common-lisp:list
       (common-lisp:cons "TagOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-preferences))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-outputs))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-output-keys))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactOutputKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-parameters-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-record-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-record-input-page-size :initform
                         common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %describe-record-input-page-token :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-record-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %describe-record-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-record-input 'make-describe-record-input))
 (common-lisp:defun make-describe-record-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'describe-record-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-record-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-record-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-record-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-record-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %describe-record-output-next-page-token :initform
                         common-lisp:nil)
                        (record-outputs :initarg :record-outputs :type
                         (common-lisp:or record-outputs common-lisp:null)
                         :accessor %describe-record-output-record-outputs
                         :initform common-lisp:nil)
                        (record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor %describe-record-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-record-output 'make-describe-record-output))
 (common-lisp:defun make-describe-record-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token record-outputs
                     record-detail)
   (common-lisp:apply #'common-lisp:make-instance 'describe-record-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-record-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-outputs))
      (common-lisp:list
       (common-lisp:cons "RecordOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-record-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-action-execution-parameters-input
                       common-lisp:nil
                       ((accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-service-action-execution-parameters-input-accept-language
                         :initform common-lisp:nil)
                        (service-action-id :initarg :service-action-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-service-action-execution-parameters-input-service-action-id
                         :initform
                         (common-lisp:error ":service-action-id is required"))
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-service-action-execution-parameters-input-provisioned-product-id
                         :initform
                         (common-lisp:error
                          ":provisioned-product-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-service-action-execution-parameters-input
                    'make-describe-service-action-execution-parameters-input))
 (common-lisp:defun make-describe-service-action-execution-parameters-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language service-action-id
                     provisioned-product-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-action-execution-parameters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-execution-parameters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-execution-parameters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-execution-parameters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-action-execution-parameters-output
                       common-lisp:nil
                       ((service-action-parameters :initarg
                         :service-action-parameters :type
                         (common-lisp:or execution-parameters common-lisp:null)
                         :accessor
                         %describe-service-action-execution-parameters-output-service-action-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-service-action-execution-parameters-output
                    'make-describe-service-action-execution-parameters-output))
 (common-lisp:defun make-describe-service-action-execution-parameters-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-action-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-action-execution-parameters-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-execution-parameters-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-execution-parameters-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-parameters))
      (common-lisp:list
       (common-lisp:cons "ServiceActionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-execution-parameters-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-action-input common-lisp:nil
                       ((accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %describe-service-action-input-accept-language
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-service-action-input-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-service-action-input
                    'make-describe-service-action-input))
 (common-lisp:defun make-describe-service-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-action-output common-lisp:nil
                       ((service-action-detail :initarg :service-action-detail
                         :type
                         (common-lisp:or service-action-detail
                                         common-lisp:null)
                         :accessor
                         %describe-service-action-output-service-action-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-service-action-output
                    'make-describe-service-action-output))
 (common-lisp:defun make-describe-service-action-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-action-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-action-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-detail))
      (common-lisp:list
       (common-lisp:cons "ServiceActionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-action-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tag-option-input common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor %describe-tag-option-input-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-tag-option-input
                    'make-describe-tag-option-input))
 (common-lisp:defun make-describe-tag-option-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tag-option-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tag-option-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tag-option-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tag-option-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tag-option-output common-lisp:nil
                       ((tag-option-detail :initarg :tag-option-detail :type
                         (common-lisp:or tag-option-detail common-lisp:null)
                         :accessor
                         %describe-tag-option-output-tag-option-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tag-option-output
                    'make-describe-tag-option-output))
 (common-lisp:defun make-describe-tag-option-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-option-detail)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tag-option-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tag-option-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tag-option-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-detail))
      (common-lisp:list
       (common-lisp:cons "TagOptionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tag-option-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disable-awsorganizations-access-input common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-awsorganizations-access-input
                    'make-disable-awsorganizations-access-input))
 (common-lisp:defun make-disable-awsorganizations-access-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-awsorganizations-access-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsorganizations-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsorganizations-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsorganizations-access-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-awsorganizations-access-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-awsorganizations-access-output
                    'make-disable-awsorganizations-access-output))
 (common-lisp:defun make-disable-awsorganizations-access-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-awsorganizations-access-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsorganizations-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsorganizations-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsorganizations-access-output))
   common-lisp:nil))
(common-lisp:deftype disable-template-validation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass disassociate-budget-from-resource-input common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %disassociate-budget-from-resource-input-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (budget-name :initarg :budget-name :type
                         (common-lisp:or budget-name common-lisp:null)
                         :accessor
                         %disassociate-budget-from-resource-input-budget-name
                         :initform
                         (common-lisp:error ":budget-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-budget-from-resource-input
                    'make-disassociate-budget-from-resource-input))
 (common-lisp:defun make-disassociate-budget-from-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id budget-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-budget-from-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-budget-from-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-budget-from-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-budget-from-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-budget-from-resource-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-budget-from-resource-output
                    'make-disassociate-budget-from-resource-output))
 (common-lisp:defun make-disassociate-budget-from-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-budget-from-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-budget-from-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-budget-from-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-budget-from-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-principal-from-portfolio-input
                       common-lisp:nil
                       ((principal-type :initarg :principal-type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor
                         %disassociate-principal-from-portfolio-input-principal-type
                         :initform common-lisp:nil)
                        (principal-arn :initarg :principal-arn :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor
                         %disassociate-principal-from-portfolio-input-principal-arn
                         :initform
                         (common-lisp:error ":principal-arn is required"))
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %disassociate-principal-from-portfolio-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %disassociate-principal-from-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-principal-from-portfolio-input
                    'make-disassociate-principal-from-portfolio-input))
 (common-lisp:defun make-disassociate-principal-from-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-type principal-arn portfolio-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-principal-from-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-principal-from-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-principal-from-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-principal-from-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-principal-from-portfolio-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-principal-from-portfolio-output
                    'make-disassociate-principal-from-portfolio-output))
 (common-lisp:defun make-disassociate-principal-from-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-principal-from-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-principal-from-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-principal-from-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-principal-from-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-product-from-portfolio-input
                       common-lisp:nil
                       ((portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %disassociate-product-from-portfolio-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %disassociate-product-from-portfolio-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %disassociate-product-from-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-product-from-portfolio-input
                    'make-disassociate-product-from-portfolio-input))
 (common-lisp:defun make-disassociate-product-from-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-id product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-product-from-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-product-from-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-product-from-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-product-from-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-product-from-portfolio-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-product-from-portfolio-output
                    'make-disassociate-product-from-portfolio-output))
 (common-lisp:defun make-disassociate-product-from-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-product-from-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-product-from-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-product-from-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-product-from-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  disassociate-service-action-from-provisioning-artifact-input common-lisp:nil
  ((accept-language :initarg :accept-language :type
    (common-lisp:or accept-language common-lisp:null) :accessor
    %disassociate-service-action-from-provisioning-artifact-input-accept-language
    :initform common-lisp:nil)
   (service-action-id :initarg :service-action-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %disassociate-service-action-from-provisioning-artifact-input-service-action-id
    :initform (common-lisp:error ":service-action-id is required"))
   (provisioning-artifact-id :initarg :provisioning-artifact-id :type
    (common-lisp:or id common-lisp:null) :accessor
    %disassociate-service-action-from-provisioning-artifact-input-provisioning-artifact-id
    :initform (common-lisp:error ":provisioning-artifact-id is required"))
   (product-id :initarg :product-id :type (common-lisp:or id common-lisp:null)
    :accessor
    %disassociate-service-action-from-provisioning-artifact-input-product-id
    :initform (common-lisp:error ":product-id is required"))))
 (common-lisp:export
  (common-lisp:list
   'disassociate-service-action-from-provisioning-artifact-input
   'make-disassociate-service-action-from-provisioning-artifact-input))
 (common-lisp:defun make-disassociate-service-action-from-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language service-action-id
                     provisioning-artifact-id product-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-service-action-from-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-service-action-from-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-service-action-from-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-service-action-from-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  disassociate-service-action-from-provisioning-artifact-output common-lisp:nil
  common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'disassociate-service-action-from-provisioning-artifact-output
   'make-disassociate-service-action-from-provisioning-artifact-output))
 (common-lisp:defun make-disassociate-service-action-from-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-service-action-from-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-service-action-from-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-service-action-from-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-service-action-from-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-tag-option-from-resource-input
                       common-lisp:nil
                       ((tag-option-id :initarg :tag-option-id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor
                         %disassociate-tag-option-from-resource-input-tag-option-id
                         :initform
                         (common-lisp:error ":tag-option-id is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %disassociate-tag-option-from-resource-input-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-tag-option-from-resource-input
                    'make-disassociate-tag-option-from-resource-input))
 (common-lisp:defun make-disassociate-tag-option-from-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-option-id resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-tag-option-from-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tag-option-from-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tag-option-from-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-id))
      (common-lisp:list
       (common-lisp:cons "TagOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tag-option-from-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-tag-option-from-resource-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-tag-option-from-resource-output
                    'make-disassociate-tag-option-from-resource-output))
 (common-lisp:defun make-disassociate-tag-option-from-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-tag-option-from-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tag-option-from-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tag-option-from-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-tag-option-from-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-resource-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-resource-exception)))
(common-lisp:progn
 (common-lisp:defclass enable-awsorganizations-access-input common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-awsorganizations-access-input
                    'make-enable-awsorganizations-access-input))
 (common-lisp:defun make-enable-awsorganizations-access-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-awsorganizations-access-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsorganizations-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsorganizations-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsorganizations-access-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-awsorganizations-access-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-awsorganizations-access-output
                    'make-enable-awsorganizations-access-output))
 (common-lisp:defun make-enable-awsorganizations-access-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-awsorganizations-access-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsorganizations-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsorganizations-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsorganizations-access-output))
   common-lisp:nil))
(common-lisp:deftype engine-workflow-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass engine-workflow-resource-identifier common-lisp:nil
                       ((unique-tag :initarg :unique-tag :type
                         (common-lisp:or unique-tag-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %engine-workflow-resource-identifier-unique-tag
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'engine-workflow-resource-identifier
                    'make-engine-workflow-resource-identifier))
 (common-lisp:defun make-engine-workflow-resource-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unique-tag)
   (common-lisp:apply #'common-lisp:make-instance
                      'engine-workflow-resource-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          engine-workflow-resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          engine-workflow-resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-tag))
      (common-lisp:list
       (common-lisp:cons "UniqueTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          engine-workflow-resource-identifier))
   common-lisp:nil))
(common-lisp:deftype engine-workflow-status () 'common-lisp:string)
(common-lisp:deftype engine-workflow-token () 'common-lisp:string)
(common-lisp:deftype error () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-description () 'common-lisp:string)
(common-lisp:deftype evaluation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-provisioned-product-plan-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %execute-provisioned-product-plan-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (plan-id :initarg :plan-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %execute-provisioned-product-plan-input-plan-id
                         :initform (common-lisp:error ":plan-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %execute-provisioned-product-plan-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-provisioned-product-plan-input
                    'make-execute-provisioned-product-plan-input))
 (common-lisp:defun make-execute-provisioned-product-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token plan-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-provisioned-product-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-id))
      (common-lisp:list
       (common-lisp:cons "PlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-provisioned-product-plan-output common-lisp:nil
                       ((record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor
                         %execute-provisioned-product-plan-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-provisioned-product-plan-output
                    'make-execute-provisioned-product-plan-output))
 (common-lisp:defun make-execute-provisioned-product-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-provisioned-product-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-provisioned-product-service-action-input
                       common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or execution-parameter-map
                                         common-lisp:null)
                         :accessor
                         %execute-provisioned-product-service-action-input-parameters
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %execute-provisioned-product-service-action-input-accept-language
                         :initform common-lisp:nil)
                        (execute-token :initarg :execute-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %execute-provisioned-product-service-action-input-execute-token
                         :initform
                         (common-lisp:error ":execute-token is required"))
                        (service-action-id :initarg :service-action-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %execute-provisioned-product-service-action-input-service-action-id
                         :initform
                         (common-lisp:error ":service-action-id is required"))
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %execute-provisioned-product-service-action-input-provisioned-product-id
                         :initform
                         (common-lisp:error
                          ":provisioned-product-id is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-provisioned-product-service-action-input
                    'make-execute-provisioned-product-service-action-input))
 (common-lisp:defun make-execute-provisioned-product-service-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters accept-language execute-token
                     service-action-id provisioned-product-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-provisioned-product-service-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-service-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-service-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-token))
      (common-lisp:list
       (common-lisp:cons "ExecuteToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-service-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-provisioned-product-service-action-output
                       common-lisp:nil
                       ((record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor
                         %execute-provisioned-product-service-action-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-provisioned-product-service-action-output
                    'make-execute-provisioned-product-service-action-output))
 (common-lisp:defun make-execute-provisioned-product-service-action-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-provisioned-product-service-action-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-service-action-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-provisioned-product-service-action-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execution-parameter common-lisp:nil
                       ((default-values :initarg :default-values :type
                         (common-lisp:or execution-parameter-value-list
                                         common-lisp:null)
                         :accessor %execution-parameter-default-values
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or execution-parameter-type
                                         common-lisp:null)
                         :accessor %execution-parameter-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or execution-parameter-key
                                         common-lisp:null)
                         :accessor %execution-parameter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execution-parameter 'make-execution-parameter))
 (common-lisp:defun make-execution-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-values type name)
   (common-lisp:apply #'common-lisp:make-instance 'execution-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-values))
      (common-lisp:list
       (common-lisp:cons "DefaultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-parameter))
   common-lisp:nil))
(common-lisp:deftype execution-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype execution-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-execution-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype execution-parameter-type () 'common-lisp:string)
(common-lisp:deftype execution-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype execution-parameter-value-list ()
   '(trivial-types:proper-list execution-parameter-value))
 (common-lisp:defun |make-execution-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            execution-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype execution-parameters ()
   '(trivial-types:proper-list execution-parameter))
 (common-lisp:defun |make-execution-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-service-action-association common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or
                          service-action-association-error-message
                          common-lisp:null)
                         :accessor
                         %failed-service-action-association-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or service-action-association-error-code
                                         common-lisp:null)
                         :accessor
                         %failed-service-action-association-error-code
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %failed-service-action-association-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %failed-service-action-association-product-id
                         :initform common-lisp:nil)
                        (service-action-id :initarg :service-action-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %failed-service-action-association-service-action-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-service-action-association
                    'make-failed-service-action-association))
 (common-lisp:defun make-failed-service-action-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     provisioning-artifact-id product-id service-action-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-service-action-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-service-action-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-service-action-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-service-action-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-service-action-associations ()
   '(trivial-types:proper-list failed-service-action-association))
 (common-lisp:defun |make-failed-service-action-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-service-action-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-awsorganizations-access-status-input common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-awsorganizations-access-status-input
                    'make-get-awsorganizations-access-status-input))
 (common-lisp:defun make-get-awsorganizations-access-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-awsorganizations-access-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-awsorganizations-access-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-awsorganizations-access-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-awsorganizations-access-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-awsorganizations-access-status-output
                       common-lisp:nil
                       ((access-status :initarg :access-status :type
                         (common-lisp:or access-status common-lisp:null)
                         :accessor
                         %get-awsorganizations-access-status-output-access-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-awsorganizations-access-status-output
                    'make-get-awsorganizations-access-status-output))
 (common-lisp:defun make-get-awsorganizations-access-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-awsorganizations-access-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-awsorganizations-access-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-awsorganizations-access-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-status))
      (common-lisp:list
       (common-lisp:cons "AccessStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-awsorganizations-access-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-provisioned-product-outputs-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %get-provisioned-product-outputs-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %get-provisioned-product-outputs-input-page-size
                         :initform common-lisp:nil)
                        (output-keys :initarg :output-keys :type
                         (common-lisp:or output-keys common-lisp:null)
                         :accessor
                         %get-provisioned-product-outputs-input-output-keys
                         :initform common-lisp:nil)
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %get-provisioned-product-outputs-input-provisioned-product-name
                         :initform common-lisp:nil)
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-provisioned-product-outputs-input-provisioned-product-id
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %get-provisioned-product-outputs-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-provisioned-product-outputs-input
                    'make-get-provisioned-product-outputs-input))
 (common-lisp:defun make-get-provisioned-product-outputs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size output-keys
                     provisioned-product-name provisioned-product-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-provisioned-product-outputs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-product-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-product-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-keys))
      (common-lisp:list
       (common-lisp:cons "OutputKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-product-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-provisioned-product-outputs-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %get-provisioned-product-outputs-output-next-page-token
                         :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or record-outputs common-lisp:null)
                         :accessor
                         %get-provisioned-product-outputs-output-outputs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-provisioned-product-outputs-output
                    'make-get-provisioned-product-outputs-output))
 (common-lisp:defun make-get-provisioned-product-outputs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token outputs)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-provisioned-product-outputs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-product-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-product-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-product-outputs-output))
   common-lisp:nil))
(common-lisp:deftype has-default-path () 'common-lisp:boolean)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:deftype ignore-errors () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass import-as-provisioned-product-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %import-as-provisioned-product-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (physical-id :initarg :physical-id :type
                         (common-lisp:or physical-id common-lisp:null)
                         :accessor
                         %import-as-provisioned-product-input-physical-id
                         :initform
                         (common-lisp:error ":physical-id is required"))
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %import-as-provisioned-product-input-provisioned-product-name
                         :initform
                         (common-lisp:error
                          ":provisioned-product-name is required"))
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-as-provisioned-product-input-provisioning-artifact-id
                         :initform
                         (common-lisp:error
                          ":provisioning-artifact-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-as-provisioned-product-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %import-as-provisioned-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-as-provisioned-product-input
                    'make-import-as-provisioned-product-input))
 (common-lisp:defun make-import-as-provisioned-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token physical-id
                     provisioned-product-name provisioning-artifact-id
                     product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-as-provisioned-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-as-provisioned-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-as-provisioned-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-as-provisioned-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-as-provisioned-product-output common-lisp:nil
                       ((record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor
                         %import-as-provisioned-product-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-as-provisioned-product-output
                    'make-import-as-provisioned-product-output))
 (common-lisp:defun make-import-as-provisioned-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-as-provisioned-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-as-provisioned-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-as-provisioned-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-as-provisioned-product-output))
   common-lisp:nil))
(common-lisp:deftype instruction-type () 'common-lisp:string)
(common-lisp:deftype instruction-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameters-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameters-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-state-exception)))
(common-lisp:deftype last-request-id () 'common-lisp:string)
(common-lisp:deftype last-successful-sync-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass last-sync common-lisp:nil
                       ((last-successful-sync-provisioning-artifact-id :initarg
                         :last-successful-sync-provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %last-sync-last-successful-sync-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (last-successful-sync-time :initarg
                         :last-successful-sync-time :type
                         (common-lisp:or last-successful-sync-time
                                         common-lisp:null)
                         :accessor %last-sync-last-successful-sync-time
                         :initform common-lisp:nil)
                        (last-sync-status-message :initarg
                         :last-sync-status-message :type
                         (common-lisp:or last-sync-status-message
                                         common-lisp:null)
                         :accessor %last-sync-last-sync-status-message
                         :initform common-lisp:nil)
                        (last-sync-status :initarg :last-sync-status :type
                         (common-lisp:or last-sync-status common-lisp:null)
                         :accessor %last-sync-last-sync-status :initform
                         common-lisp:nil)
                        (last-sync-time :initarg :last-sync-time :type
                         (common-lisp:or last-sync-time common-lisp:null)
                         :accessor %last-sync-last-sync-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'last-sync 'make-last-sync))
 (common-lisp:defun make-last-sync
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     last-successful-sync-provisioning-artifact-id
                     last-successful-sync-time last-sync-status-message
                     last-sync-status last-sync-time)
   (common-lisp:apply #'common-lisp:make-instance 'last-sync
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-sync))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-sync))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-sync-time))
      (common-lisp:list
       (common-lisp:cons "LastSyncTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-sync-status))
      (common-lisp:list
       (common-lisp:cons "LastSyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-sync-status-message))
      (common-lisp:list
       (common-lisp:cons "LastSyncStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-sync-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulSyncTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-sync-provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulSyncProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-sync))
   common-lisp:nil))
(common-lisp:deftype last-sync-status () 'common-lisp:string)
(common-lisp:deftype last-sync-status-message () 'common-lisp:string)
(common-lisp:deftype last-sync-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-path common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or portfolio-name common-lisp:null)
                         :accessor %launch-path-name :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %launch-path-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'launch-path 'make-launch-path))
 (common-lisp:defun make-launch-path
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance 'launch-path
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-path-summaries ()
   '(trivial-types:proper-list launch-path-summary))
 (common-lisp:defun |make-launch-path-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-path-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-path-summary common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or portfolio-name common-lisp:null)
                         :accessor %launch-path-summary-name :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %launch-path-summary-tags :initform common-lisp:nil)
                        (constraint-summaries :initarg :constraint-summaries
                         :type
                         (common-lisp:or constraint-summaries common-lisp:null)
                         :accessor %launch-path-summary-constraint-summaries
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %launch-path-summary-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-path-summary 'make-launch-path-summary))
 (common-lisp:defun make-launch-path-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name tags constraint-summaries id)
   (common-lisp:apply #'common-lisp:make-instance 'launch-path-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-path-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-path-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-summaries))
      (common-lisp:list
       (common-lisp:cons "ConstraintSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-path-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-paths () '(trivial-types:proper-list launch-path))
 (common-lisp:defun |make-launch-paths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-accepted-portfolio-shares-input common-lisp:nil
                       ((portfolio-share-type :initarg :portfolio-share-type
                         :type
                         (common-lisp:or portfolio-share-type common-lisp:null)
                         :accessor
                         %list-accepted-portfolio-shares-input-portfolio-share-type
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size-max100 common-lisp:null)
                         :accessor
                         %list-accepted-portfolio-shares-input-page-size
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-accepted-portfolio-shares-input-page-token
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-accepted-portfolio-shares-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accepted-portfolio-shares-input
                    'make-list-accepted-portfolio-shares-input))
 (common-lisp:defun make-list-accepted-portfolio-shares-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-type page-size page-token
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-accepted-portfolio-shares-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accepted-portfolio-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accepted-portfolio-shares-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-type))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accepted-portfolio-shares-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accepted-portfolio-shares-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-accepted-portfolio-shares-output-next-page-token
                         :initform common-lisp:nil)
                        (portfolio-details :initarg :portfolio-details :type
                         (common-lisp:or portfolio-details common-lisp:null)
                         :accessor
                         %list-accepted-portfolio-shares-output-portfolio-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accepted-portfolio-shares-output
                    'make-list-accepted-portfolio-shares-output))
 (common-lisp:defun make-list-accepted-portfolio-shares-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token portfolio-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-accepted-portfolio-shares-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accepted-portfolio-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accepted-portfolio-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-details))
      (common-lisp:list
       (common-lisp:cons "PortfolioDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accepted-portfolio-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-budgets-for-resource-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-budgets-for-resource-input-page-token :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-budgets-for-resource-input-page-size :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-budgets-for-resource-input-resource-id :initform
                         (common-lisp:error ":resource-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-budgets-for-resource-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-budgets-for-resource-input
                    'make-list-budgets-for-resource-input))
 (common-lisp:defun make-list-budgets-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size resource-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-budgets-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-budgets-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-budgets-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-budgets-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-budgets-for-resource-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-budgets-for-resource-output-next-page-token
                         :initform common-lisp:nil)
                        (budgets :initarg :budgets :type
                         (common-lisp:or budgets common-lisp:null) :accessor
                         %list-budgets-for-resource-output-budgets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-budgets-for-resource-output
                    'make-list-budgets-for-resource-output))
 (common-lisp:defun make-list-budgets-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token budgets)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-budgets-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-budgets-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-budgets-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budgets))
      (common-lisp:list
       (common-lisp:cons "Budgets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-budgets-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-constraints-for-portfolio-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-constraints-for-portfolio-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-constraints-for-portfolio-input-page-size
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-constraints-for-portfolio-input-product-id
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-constraints-for-portfolio-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-constraints-for-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-constraints-for-portfolio-input
                    'make-list-constraints-for-portfolio-input))
 (common-lisp:defun make-list-constraints-for-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size product-id
                     portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-constraints-for-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-constraints-for-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-constraints-for-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-constraints-for-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-constraints-for-portfolio-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-constraints-for-portfolio-output-next-page-token
                         :initform common-lisp:nil)
                        (constraint-details :initarg :constraint-details :type
                         (common-lisp:or constraint-details common-lisp:null)
                         :accessor
                         %list-constraints-for-portfolio-output-constraint-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-constraints-for-portfolio-output
                    'make-list-constraints-for-portfolio-output))
 (common-lisp:defun make-list-constraints-for-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token constraint-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-constraints-for-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-constraints-for-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-constraints-for-portfolio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraint-details))
      (common-lisp:list
       (common-lisp:cons "ConstraintDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-constraints-for-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-paths-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-launch-paths-input-page-token :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-launch-paths-input-page-size :initform
                         common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-launch-paths-input-product-id :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %list-launch-paths-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-launch-paths-input 'make-list-launch-paths-input))
 (common-lisp:defun make-list-launch-paths-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size product-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'list-launch-paths-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-paths-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-paths-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-paths-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-paths-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-launch-paths-output-next-page-token :initform
                         common-lisp:nil)
                        (launch-path-summaries :initarg :launch-path-summaries
                         :type
                         (common-lisp:or launch-path-summaries
                                         common-lisp:null)
                         :accessor
                         %list-launch-paths-output-launch-path-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-launch-paths-output 'make-list-launch-paths-output))
 (common-lisp:defun make-list-launch-paths-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token launch-path-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-launch-paths-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-paths-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-paths-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-path-summaries))
      (common-lisp:list
       (common-lisp:cons "LaunchPathSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-paths-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-portfolio-access-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-organization-portfolio-access-input-page-size
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-organization-portfolio-access-input-page-token
                         :initform common-lisp:nil)
                        (organization-node-type :initarg
                         :organization-node-type :type
                         (common-lisp:or organization-node-type
                                         common-lisp:null)
                         :accessor
                         %list-organization-portfolio-access-input-organization-node-type
                         :initform
                         (common-lisp:error
                          ":organization-node-type is required"))
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-organization-portfolio-access-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-organization-portfolio-access-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organization-portfolio-access-input
                    'make-list-organization-portfolio-access-input))
 (common-lisp:defun make-list-organization-portfolio-access-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token
                     organization-node-type portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-portfolio-access-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-portfolio-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-portfolio-access-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-node-type))
      (common-lisp:list
       (common-lisp:cons "OrganizationNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-portfolio-access-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-portfolio-access-output
                       common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-organization-portfolio-access-output-next-page-token
                         :initform common-lisp:nil)
                        (organization-nodes :initarg :organization-nodes :type
                         (common-lisp:or organization-nodes common-lisp:null)
                         :accessor
                         %list-organization-portfolio-access-output-organization-nodes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organization-portfolio-access-output
                    'make-list-organization-portfolio-access-output))
 (common-lisp:defun make-list-organization-portfolio-access-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token organization-nodes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-portfolio-access-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-portfolio-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-portfolio-access-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-nodes))
      (common-lisp:list
       (common-lisp:cons "OrganizationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-portfolio-access-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portfolio-access-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size-max100 common-lisp:null)
                         :accessor %list-portfolio-access-input-page-size
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-portfolio-access-input-page-token :initform
                         common-lisp:nil)
                        (organization-parent-id :initarg
                         :organization-parent-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-portfolio-access-input-organization-parent-id
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-portfolio-access-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %list-portfolio-access-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portfolio-access-input
                    'make-list-portfolio-access-input))
 (common-lisp:defun make-list-portfolio-access-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token
                     organization-parent-id portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'list-portfolio-access-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolio-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolio-access-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-parent-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolio-access-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portfolio-access-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-portfolio-access-output-next-page-token
                         :initform common-lisp:nil)
                        (account-ids :initarg :account-ids :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor %list-portfolio-access-output-account-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portfolio-access-output
                    'make-list-portfolio-access-output))
 (common-lisp:defun make-list-portfolio-access-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-portfolio-access-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolio-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolio-access-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolio-access-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portfolios-for-product-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size-max100 common-lisp:null)
                         :accessor %list-portfolios-for-product-input-page-size
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-portfolios-for-product-input-page-token
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-portfolios-for-product-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-portfolios-for-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portfolios-for-product-input
                    'make-list-portfolios-for-product-input))
 (common-lisp:defun make-list-portfolios-for-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token product-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-portfolios-for-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-for-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-for-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-for-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portfolios-for-product-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-portfolios-for-product-output-next-page-token
                         :initform common-lisp:nil)
                        (portfolio-details :initarg :portfolio-details :type
                         (common-lisp:or portfolio-details common-lisp:null)
                         :accessor
                         %list-portfolios-for-product-output-portfolio-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portfolios-for-product-output
                    'make-list-portfolios-for-product-output))
 (common-lisp:defun make-list-portfolios-for-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token portfolio-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-portfolios-for-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-for-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-for-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-details))
      (common-lisp:list
       (common-lisp:cons "PortfolioDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-for-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portfolios-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size-max100 common-lisp:null)
                         :accessor %list-portfolios-input-page-size :initform
                         common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-portfolios-input-page-token :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %list-portfolios-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portfolios-input 'make-list-portfolios-input))
 (common-lisp:defun make-list-portfolios-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'list-portfolios-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portfolios-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-portfolios-output-next-page-token :initform
                         common-lisp:nil)
                        (portfolio-details :initarg :portfolio-details :type
                         (common-lisp:or portfolio-details common-lisp:null)
                         :accessor %list-portfolios-output-portfolio-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portfolios-output 'make-list-portfolios-output))
 (common-lisp:defun make-list-portfolios-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token portfolio-details)
   (common-lisp:apply #'common-lisp:make-instance 'list-portfolios-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-details))
      (common-lisp:list
       (common-lisp:cons "PortfolioDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portfolios-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-principals-for-portfolio-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-principals-for-portfolio-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-principals-for-portfolio-input-page-size
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-principals-for-portfolio-input-portfolio-id
                         :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-principals-for-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-principals-for-portfolio-input
                    'make-list-principals-for-portfolio-input))
 (common-lisp:defun make-list-principals-for-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size portfolio-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-principals-for-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principals-for-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principals-for-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principals-for-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-principals-for-portfolio-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-principals-for-portfolio-output-next-page-token
                         :initform common-lisp:nil)
                        (principals :initarg :principals :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         %list-principals-for-portfolio-output-principals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-principals-for-portfolio-output
                    'make-list-principals-for-portfolio-output))
 (common-lisp:defun make-list-principals-for-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token principals)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-principals-for-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principals-for-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principals-for-portfolio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principals-for-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioned-product-plans-input common-lisp:nil
                       ((access-level-filter :initarg :access-level-filter
                         :type
                         (common-lisp:or access-level-filter common-lisp:null)
                         :accessor
                         %list-provisioned-product-plans-input-access-level-filter
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-provisioned-product-plans-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-provisioned-product-plans-input-page-size
                         :initform common-lisp:nil)
                        (provision-product-id :initarg :provision-product-id
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %list-provisioned-product-plans-input-provision-product-id
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-provisioned-product-plans-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-provisioned-product-plans-input
                    'make-list-provisioned-product-plans-input))
 (common-lisp:defun make-list-provisioned-product-plans-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-level-filter page-token page-size
                     provision-product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioned-product-plans-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-product-plans-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-product-plans-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provision-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-level-filter))
      (common-lisp:list
       (common-lisp:cons "AccessLevelFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-product-plans-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioned-product-plans-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-provisioned-product-plans-output-next-page-token
                         :initform common-lisp:nil)
                        (provisioned-product-plans :initarg
                         :provisioned-product-plans :type
                         (common-lisp:or provisioned-product-plans
                                         common-lisp:null)
                         :accessor
                         %list-provisioned-product-plans-output-provisioned-product-plans
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-provisioned-product-plans-output
                    'make-list-provisioned-product-plans-output))
 (common-lisp:defun make-list-provisioned-product-plans-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token
                     provisioned-product-plans)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioned-product-plans-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-product-plans-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-product-plans-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-plans))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-product-plans-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-artifacts-for-service-action-input
                       common-lisp:nil
                       ((accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-provisioning-artifacts-for-service-action-input-accept-language
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-provisioning-artifacts-for-service-action-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-provisioning-artifacts-for-service-action-input-page-size
                         :initform common-lisp:nil)
                        (service-action-id :initarg :service-action-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-provisioning-artifacts-for-service-action-input-service-action-id
                         :initform
                         (common-lisp:error
                          ":service-action-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-artifacts-for-service-action-input
                    'make-list-provisioning-artifacts-for-service-action-input))
 (common-lisp:defun make-list-provisioning-artifacts-for-service-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language page-token page-size
                     service-action-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-artifacts-for-service-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-for-service-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-for-service-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-for-service-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-artifacts-for-service-action-output
                       common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-provisioning-artifacts-for-service-action-output-next-page-token
                         :initform common-lisp:nil)
                        (provisioning-artifact-views :initarg
                         :provisioning-artifact-views :type
                         (common-lisp:or provisioning-artifact-views
                                         common-lisp:null)
                         :accessor
                         %list-provisioning-artifacts-for-service-action-output-provisioning-artifact-views
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-artifacts-for-service-action-output
                    'make-list-provisioning-artifacts-for-service-action-output))
 (common-lisp:defun make-list-provisioning-artifacts-for-service-action-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token
                     provisioning-artifact-views)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-artifacts-for-service-action-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-for-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-for-service-action-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-views))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactViews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-for-service-action-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-artifacts-input common-lisp:nil
                       ((product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-provisioning-artifacts-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-provisioning-artifacts-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-artifacts-input
                    'make-list-provisioning-artifacts-input))
 (common-lisp:defun make-list-provisioning-artifacts-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-artifacts-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-artifacts-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-provisioning-artifacts-output-next-page-token
                         :initform common-lisp:nil)
                        (provisioning-artifact-details :initarg
                         :provisioning-artifact-details :type
                         (common-lisp:or provisioning-artifact-details
                                         common-lisp:null)
                         :accessor
                         %list-provisioning-artifacts-output-provisioning-artifact-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-artifacts-output
                    'make-list-provisioning-artifacts-output))
 (common-lisp:defun make-list-provisioning-artifacts-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token
                     provisioning-artifact-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-artifacts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-details))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-artifacts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-record-history-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-record-history-input-page-token :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-record-history-input-page-size :initform
                         common-lisp:nil)
                        (search-filter :initarg :search-filter :type
                         (common-lisp:or list-record-history-search-filter
                                         common-lisp:null)
                         :accessor %list-record-history-input-search-filter
                         :initform common-lisp:nil)
                        (access-level-filter :initarg :access-level-filter
                         :type
                         (common-lisp:or access-level-filter common-lisp:null)
                         :accessor
                         %list-record-history-input-access-level-filter
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %list-record-history-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-record-history-input
                    'make-list-record-history-input))
 (common-lisp:defun make-list-record-history-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size search-filter
                     access-level-filter accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'list-record-history-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-level-filter))
      (common-lisp:list
       (common-lisp:cons "AccessLevelFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-filter))
      (common-lisp:list
       (common-lisp:cons "SearchFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-record-history-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-record-history-output-next-page-token :initform
                         common-lisp:nil)
                        (record-details :initarg :record-details :type
                         (common-lisp:or record-details common-lisp:null)
                         :accessor %list-record-history-output-record-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-record-history-output
                    'make-list-record-history-output))
 (common-lisp:defun make-list-record-history-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token record-details)
   (common-lisp:apply #'common-lisp:make-instance 'list-record-history-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-details))
      (common-lisp:list
       (common-lisp:cons "RecordDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-record-history-search-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or search-filter-value common-lisp:null)
                         :accessor %list-record-history-search-filter-value
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or search-filter-key common-lisp:null)
                         :accessor %list-record-history-search-filter-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-record-history-search-filter
                    'make-list-record-history-search-filter))
 (common-lisp:defun make-list-record-history-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-record-history-search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-record-history-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-for-tag-option-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-resources-for-tag-option-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-resources-for-tag-option-input-page-size
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %list-resources-for-tag-option-input-resource-type
                         :initform common-lisp:nil)
                        (tag-option-id :initarg :tag-option-id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor
                         %list-resources-for-tag-option-input-tag-option-id
                         :initform
                         (common-lisp:error ":tag-option-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-resources-for-tag-option-input
                    'make-list-resources-for-tag-option-input))
 (common-lisp:defun make-list-resources-for-tag-option-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size resource-type
                     tag-option-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resources-for-tag-option-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-tag-option-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-tag-option-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-id))
      (common-lisp:list
       (common-lisp:cons "TagOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-tag-option-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-for-tag-option-output common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-resources-for-tag-option-output-page-token
                         :initform common-lisp:nil)
                        (resource-details :initarg :resource-details :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         %list-resources-for-tag-option-output-resource-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resources-for-tag-option-output
                    'make-list-resources-for-tag-option-output))
 (common-lisp:defun make-list-resources-for-tag-option-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token resource-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resources-for-tag-option-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-tag-option-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-tag-option-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-tag-option-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-actions-for-provisioning-artifact-input
                       common-lisp:nil
                       ((accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-service-actions-for-provisioning-artifact-input-accept-language
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-service-actions-for-provisioning-artifact-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-service-actions-for-provisioning-artifact-input-page-size
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-service-actions-for-provisioning-artifact-input-provisioning-artifact-id
                         :initform
                         (common-lisp:error
                          ":provisioning-artifact-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-service-actions-for-provisioning-artifact-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-service-actions-for-provisioning-artifact-input
                    'make-list-service-actions-for-provisioning-artifact-input))
 (common-lisp:defun make-list-service-actions-for-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language page-token page-size
                     provisioning-artifact-id product-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-actions-for-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-for-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-for-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-for-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-actions-for-provisioning-artifact-output
                       common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-service-actions-for-provisioning-artifact-output-next-page-token
                         :initform common-lisp:nil)
                        (service-action-summaries :initarg
                         :service-action-summaries :type
                         (common-lisp:or service-action-summaries
                                         common-lisp:null)
                         :accessor
                         %list-service-actions-for-provisioning-artifact-output-service-action-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-service-actions-for-provisioning-artifact-output
                    'make-list-service-actions-for-provisioning-artifact-output))
 (common-lisp:defun make-list-service-actions-for-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token service-action-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-actions-for-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-for-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-for-provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-summaries))
      (common-lisp:list
       (common-lisp:cons "ServiceActionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-for-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-actions-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-service-actions-input-page-token :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-service-actions-input-page-size :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %list-service-actions-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-service-actions-input
                    'make-list-service-actions-input))
 (common-lisp:defun make-list-service-actions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'list-service-actions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-actions-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-service-actions-output-next-page-token :initform
                         common-lisp:nil)
                        (service-action-summaries :initarg
                         :service-action-summaries :type
                         (common-lisp:or service-action-summaries
                                         common-lisp:null)
                         :accessor
                         %list-service-actions-output-service-action-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-service-actions-output
                    'make-list-service-actions-output))
 (common-lisp:defun make-list-service-actions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token service-action-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-service-actions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-summaries))
      (common-lisp:list
       (common-lisp:cons "ServiceActionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-actions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-instances-for-provisioned-product-input
                       common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-stack-instances-for-provisioned-product-input-page-size
                         :initform common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-stack-instances-for-provisioned-product-input-page-token
                         :initform common-lisp:nil)
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-stack-instances-for-provisioned-product-input-provisioned-product-id
                         :initform
                         (common-lisp:error
                          ":provisioned-product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %list-stack-instances-for-provisioned-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-instances-for-provisioned-product-input
                    'make-list-stack-instances-for-provisioned-product-input))
 (common-lisp:defun make-list-stack-instances-for-provisioned-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size page-token
                     provisioned-product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stack-instances-for-provisioned-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-for-provisioned-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-for-provisioned-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-for-provisioned-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-instances-for-provisioned-product-output
                       common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-stack-instances-for-provisioned-product-output-next-page-token
                         :initform common-lisp:nil)
                        (stack-instances :initarg :stack-instances :type
                         (common-lisp:or stack-instances common-lisp:null)
                         :accessor
                         %list-stack-instances-for-provisioned-product-output-stack-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-instances-for-provisioned-product-output
                    'make-list-stack-instances-for-provisioned-product-output))
 (common-lisp:defun make-list-stack-instances-for-provisioned-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token stack-instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stack-instances-for-provisioned-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-for-provisioned-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-for-provisioned-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-instances))
      (common-lisp:list
       (common-lisp:cons "StackInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-for-provisioned-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tag-options-filters common-lisp:nil
                       ((active :initarg :active :type
                         (common-lisp:or tag-option-active common-lisp:null)
                         :accessor %list-tag-options-filters-active :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or tag-option-value common-lisp:null)
                         :accessor %list-tag-options-filters-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-option-key common-lisp:null)
                         :accessor %list-tag-options-filters-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tag-options-filters 'make-list-tag-options-filters))
 (common-lisp:defun make-list-tag-options-filters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active value key)
   (common-lisp:apply #'common-lisp:make-instance 'list-tag-options-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tag-options-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-tag-options-input-page-token :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-tag-options-input-page-size :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or list-tag-options-filters
                                         common-lisp:null)
                         :accessor %list-tag-options-input-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tag-options-input 'make-list-tag-options-input))
 (common-lisp:defun make-list-tag-options-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-tag-options-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tag-options-output common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-tag-options-output-page-token :initform
                         common-lisp:nil)
                        (tag-option-details :initarg :tag-option-details :type
                         (common-lisp:or tag-option-details common-lisp:null)
                         :accessor %list-tag-options-output-tag-option-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tag-options-output 'make-list-tag-options-output))
 (common-lisp:defun make-list-tag-options-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token tag-option-details)
   (common-lisp:apply #'common-lisp:make-instance 'list-tag-options-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-details))
      (common-lisp:list
       (common-lisp:cons "TagOptionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tag-options-output))
   common-lisp:nil))
(common-lisp:deftype logical-resource-id () 'common-lisp:string)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype namespaces () '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-namespaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype no-echo () 'common-lisp:boolean)
(common-lisp:deftype notification-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-arns ()
   '(trivial-types:proper-list notification-arn))
 (common-lisp:defun |make-notification-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notify-provision-product-engine-workflow-result-input
                       common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %notify-provision-product-engine-workflow-result-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (outputs :initarg :outputs :type
                         (common-lisp:or record-outputs common-lisp:null)
                         :accessor
                         %notify-provision-product-engine-workflow-result-input-outputs
                         :initform common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or engine-workflow-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %notify-provision-product-engine-workflow-result-input-resource-identifier
                         :initform common-lisp:nil)
                        (failure-reason :initarg :failure-reason :type
                         (common-lisp:or engine-workflow-failure-reason
                                         common-lisp:null)
                         :accessor
                         %notify-provision-product-engine-workflow-result-input-failure-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or engine-workflow-status
                                         common-lisp:null)
                         :accessor
                         %notify-provision-product-engine-workflow-result-input-status
                         :initform (common-lisp:error ":status is required"))
                        (record-id :initarg :record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %notify-provision-product-engine-workflow-result-input-record-id
                         :initform
                         (common-lisp:error ":record-id is required"))
                        (workflow-token :initarg :workflow-token :type
                         (common-lisp:or engine-workflow-token
                                         common-lisp:null)
                         :accessor
                         %notify-provision-product-engine-workflow-result-input-workflow-token
                         :initform
                         (common-lisp:error ":workflow-token is required"))))
 (common-lisp:export
  (common-lisp:list 'notify-provision-product-engine-workflow-result-input
                    'make-notify-provision-product-engine-workflow-result-input))
 (common-lisp:defun make-notify-provision-product-engine-workflow-result-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token outputs
                     resource-identifier failure-reason status record-id
                     workflow-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-provision-product-engine-workflow-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-provision-product-engine-workflow-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-provision-product-engine-workflow-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-token))
      (common-lisp:list
       (common-lisp:cons "WorkflowToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-id))
      (common-lisp:list
       (common-lisp:cons "RecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-provision-product-engine-workflow-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notify-provision-product-engine-workflow-result-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'notify-provision-product-engine-workflow-result-output
                    'make-notify-provision-product-engine-workflow-result-output))
 (common-lisp:defun make-notify-provision-product-engine-workflow-result-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-provision-product-engine-workflow-result-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-provision-product-engine-workflow-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-provision-product-engine-workflow-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-provision-product-engine-workflow-result-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  notify-terminate-provisioned-product-engine-workflow-result-input
  common-lisp:nil
  ((idempotency-token :initarg :idempotency-token :type
    (common-lisp:or idempotency-token common-lisp:null) :accessor
    %notify-terminate-provisioned-product-engine-workflow-result-input-idempotency-token
    :initform (common-lisp:error ":idempotency-token is required"))
   (failure-reason :initarg :failure-reason :type
    (common-lisp:or engine-workflow-failure-reason common-lisp:null) :accessor
    %notify-terminate-provisioned-product-engine-workflow-result-input-failure-reason
    :initform common-lisp:nil)
   (status :initarg :status :type
    (common-lisp:or engine-workflow-status common-lisp:null) :accessor
    %notify-terminate-provisioned-product-engine-workflow-result-input-status
    :initform (common-lisp:error ":status is required"))
   (record-id :initarg :record-id :type (common-lisp:or id common-lisp:null)
    :accessor
    %notify-terminate-provisioned-product-engine-workflow-result-input-record-id
    :initform (common-lisp:error ":record-id is required"))
   (workflow-token :initarg :workflow-token :type
    (common-lisp:or engine-workflow-token common-lisp:null) :accessor
    %notify-terminate-provisioned-product-engine-workflow-result-input-workflow-token
    :initform (common-lisp:error ":workflow-token is required"))))
 (common-lisp:export
  (common-lisp:list
   'notify-terminate-provisioned-product-engine-workflow-result-input
   'make-notify-terminate-provisioned-product-engine-workflow-result-input))
 (common-lisp:defun make-notify-terminate-provisioned-product-engine-workflow-result-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token failure-reason status
                     record-id workflow-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-terminate-provisioned-product-engine-workflow-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-terminate-provisioned-product-engine-workflow-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-terminate-provisioned-product-engine-workflow-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-token))
      (common-lisp:list
       (common-lisp:cons "WorkflowToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-id))
      (common-lisp:list
       (common-lisp:cons "RecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-terminate-provisioned-product-engine-workflow-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  notify-terminate-provisioned-product-engine-workflow-result-output
  common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'notify-terminate-provisioned-product-engine-workflow-result-output
   'make-notify-terminate-provisioned-product-engine-workflow-result-output))
 (common-lisp:defun make-notify-terminate-provisioned-product-engine-workflow-result-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-terminate-provisioned-product-engine-workflow-result-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-terminate-provisioned-product-engine-workflow-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-terminate-provisioned-product-engine-workflow-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-terminate-provisioned-product-engine-workflow-result-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  notify-update-provisioned-product-engine-workflow-result-input
  common-lisp:nil
  ((idempotency-token :initarg :idempotency-token :type
    (common-lisp:or idempotency-token common-lisp:null) :accessor
    %notify-update-provisioned-product-engine-workflow-result-input-idempotency-token
    :initform (common-lisp:error ":idempotency-token is required"))
   (outputs :initarg :outputs :type
    (common-lisp:or record-outputs common-lisp:null) :accessor
    %notify-update-provisioned-product-engine-workflow-result-input-outputs
    :initform common-lisp:nil)
   (failure-reason :initarg :failure-reason :type
    (common-lisp:or engine-workflow-failure-reason common-lisp:null) :accessor
    %notify-update-provisioned-product-engine-workflow-result-input-failure-reason
    :initform common-lisp:nil)
   (status :initarg :status :type
    (common-lisp:or engine-workflow-status common-lisp:null) :accessor
    %notify-update-provisioned-product-engine-workflow-result-input-status
    :initform (common-lisp:error ":status is required"))
   (record-id :initarg :record-id :type (common-lisp:or id common-lisp:null)
    :accessor
    %notify-update-provisioned-product-engine-workflow-result-input-record-id
    :initform (common-lisp:error ":record-id is required"))
   (workflow-token :initarg :workflow-token :type
    (common-lisp:or engine-workflow-token common-lisp:null) :accessor
    %notify-update-provisioned-product-engine-workflow-result-input-workflow-token
    :initform (common-lisp:error ":workflow-token is required"))))
 (common-lisp:export
  (common-lisp:list
   'notify-update-provisioned-product-engine-workflow-result-input
   'make-notify-update-provisioned-product-engine-workflow-result-input))
 (common-lisp:defun make-notify-update-provisioned-product-engine-workflow-result-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token outputs failure-reason
                     status record-id workflow-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-update-provisioned-product-engine-workflow-result-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-update-provisioned-product-engine-workflow-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-update-provisioned-product-engine-workflow-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-token))
      (common-lisp:list
       (common-lisp:cons "WorkflowToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-id))
      (common-lisp:list
       (common-lisp:cons "RecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-update-provisioned-product-engine-workflow-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  notify-update-provisioned-product-engine-workflow-result-output
  common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'notify-update-provisioned-product-engine-workflow-result-output
   'make-notify-update-provisioned-product-engine-workflow-result-output))
 (common-lisp:defun make-notify-update-provisioned-product-engine-workflow-result-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-update-provisioned-product-engine-workflow-result-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-update-provisioned-product-engine-workflow-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-update-provisioned-product-engine-workflow-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-update-provisioned-product-engine-workflow-result-output))
   common-lisp:nil))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition operation-not-supported-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defclass organization-node common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or organization-node-value
                                         common-lisp:null)
                         :accessor %organization-node-value :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or organization-node-type
                                         common-lisp:null)
                         :accessor %organization-node-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'organization-node 'make-organization-node))
 (common-lisp:defun make-organization-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'organization-node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization-node))
   common-lisp:nil))
(common-lisp:deftype organization-node-type () 'common-lisp:string)
(common-lisp:deftype organization-node-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-nodes ()
   '(trivial-types:proper-list organization-node))
 (common-lisp:defun |make-organization-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organization-node))
   aws-sdk/generator/shape::members))
(common-lisp:deftype output-description () 'common-lisp:string)
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype output-keys () '(trivial-types:proper-list output-key))
 (common-lisp:defun |make-output-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype output-value () 'common-lisp:string)
(common-lisp:deftype owner () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype page-size-max100 () 'common-lisp:integer)
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-constraints common-lisp:nil
                       ((min-value :initarg :min-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-constraints-min-value :initform
                         common-lisp:nil)
                        (max-value :initarg :max-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-constraints-max-value :initform
                         common-lisp:nil)
                        (min-length :initarg :min-length :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-constraints-min-length :initform
                         common-lisp:nil)
                        (max-length :initarg :max-length :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-constraints-max-length :initform
                         common-lisp:nil)
                        (constraint-description :initarg
                         :constraint-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-constraints-constraint-description
                         :initform common-lisp:nil)
                        (allowed-pattern :initarg :allowed-pattern :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-constraints-allowed-pattern :initform
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :type
                         (common-lisp:or allowed-values common-lisp:null)
                         :accessor %parameter-constraints-allowed-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-constraints 'make-parameter-constraints))
 (common-lisp:defun make-parameter-constraints
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min-value max-value min-length max-length
                     constraint-description allowed-pattern allowed-values)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-pattern))
      (common-lisp:list
       (common-lisp:cons "AllowedPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-description))
      (common-lisp:list
       (common-lisp:cons "ConstraintDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "MaxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-length))
      (common-lisp:list
       (common-lisp:cons "MinLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   common-lisp:nil))
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:deftype physical-id () 'common-lisp:string)
(common-lisp:deftype physical-resource-id () 'common-lisp:string)
(common-lisp:deftype plan-resource-type () 'common-lisp:string)
(common-lisp:deftype portfolio-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portfolio-detail common-lisp:nil
                       ((provider-name :initarg :provider-name :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor %portfolio-detail-provider-name :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %portfolio-detail-created-time :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or portfolio-description
                                         common-lisp:null)
                         :accessor %portfolio-detail-description :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or portfolio-display-name
                                         common-lisp:null)
                         :accessor %portfolio-detail-display-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %portfolio-detail-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %portfolio-detail-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'portfolio-detail 'make-portfolio-detail))
 (common-lisp:defun make-portfolio-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provider-name created-time description
                     display-name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'portfolio-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portfolio-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portfolio-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portfolio-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype portfolio-details ()
   '(trivial-types:proper-list portfolio-detail))
 (common-lisp:defun |make-portfolio-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list portfolio-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype portfolio-display-name () 'common-lisp:string)
(common-lisp:deftype portfolio-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portfolio-share-detail common-lisp:nil
                       ((share-principals :initarg :share-principals :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %portfolio-share-detail-share-principals :initform
                         common-lisp:nil)
                        (share-tag-options :initarg :share-tag-options :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %portfolio-share-detail-share-tag-options :initform
                         common-lisp:nil)
                        (accepted :initarg :accepted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %portfolio-share-detail-accepted :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or describe-portfolio-share-type
                                         common-lisp:null)
                         :accessor %portfolio-share-detail-type :initform
                         common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %portfolio-share-detail-principal-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'portfolio-share-detail 'make-portfolio-share-detail))
 (common-lisp:defun make-portfolio-share-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-principals share-tag-options
                     accepted type principal-id)
   (common-lisp:apply #'common-lisp:make-instance 'portfolio-share-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          portfolio-share-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          portfolio-share-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted))
      (common-lisp:list
       (common-lisp:cons "Accepted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-tag-options))
      (common-lisp:list
       (common-lisp:cons "ShareTagOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-principals))
      (common-lisp:list
       (common-lisp:cons "SharePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          portfolio-share-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype portfolio-share-details ()
   '(trivial-types:proper-list portfolio-share-detail))
 (common-lisp:defun |make-portfolio-share-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list portfolio-share-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype portfolio-share-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass principal common-lisp:nil
                       ((principal-type :initarg :principal-type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor %principal-principal-type :initform
                         common-lisp:nil)
                        (principal-arn :initarg :principal-arn :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor %principal-principal-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defun make-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-type principal-arn)
   (common-lisp:apply #'common-lisp:make-instance 'principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal))
 (common-lisp:defun |make-principals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype product-arn () 'common-lisp:string)
(common-lisp:deftype product-source () 'common-lisp:string)
(common-lisp:deftype product-type () 'common-lisp:string)
(common-lisp:deftype product-view-aggregation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass product-view-aggregation-value common-lisp:nil
                       ((approximate-count :initarg :approximate-count :type
                         (common-lisp:or approximate-count common-lisp:null)
                         :accessor
                         %product-view-aggregation-value-approximate-count
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor %product-view-aggregation-value-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'product-view-aggregation-value
                    'make-product-view-aggregation-value))
 (common-lisp:defun make-product-view-aggregation-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key approximate-count value)
   (common-lisp:apply #'common-lisp:make-instance
                      'product-view-aggregation-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          product-view-aggregation-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          product-view-aggregation-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approximate-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          product-view-aggregation-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-view-aggregation-values ()
   '(trivial-types:proper-list product-view-aggregation-value))
 (common-lisp:defun |make-product-view-aggregation-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            product-view-aggregation-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype product-view-aggregations () 'common-lisp:hash-table)
 (common-lisp:defun |make-product-view-aggregations|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass product-view-detail common-lisp:nil
                       ((source-connection :initarg :source-connection :type
                         (common-lisp:or source-connection-detail
                                         common-lisp:null)
                         :accessor %product-view-detail-source-connection
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %product-view-detail-created-time :initform
                         common-lisp:nil)
                        (product-arn :initarg :product-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %product-view-detail-product-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %product-view-detail-status :initform common-lisp:nil)
                        (product-view-summary :initarg :product-view-summary
                         :type
                         (common-lisp:or product-view-summary common-lisp:null)
                         :accessor %product-view-detail-product-view-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'product-view-detail 'make-product-view-detail))
 (common-lisp:defun make-product-view-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-connection created-time
                     product-arn status product-view-summary)
   (common-lisp:apply #'common-lisp:make-instance 'product-view-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-view-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-view-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-summary))
      (common-lisp:list
       (common-lisp:cons "ProductViewSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-connection))
      (common-lisp:list
       (common-lisp:cons "SourceConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-view-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-view-details ()
   '(trivial-types:proper-list product-view-detail))
 (common-lisp:defun |make-product-view-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-view-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype product-view-distributor () 'common-lisp:string)
(common-lisp:deftype product-view-filter-by () 'common-lisp:string)
(common-lisp:deftype product-view-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype product-view-filter-values ()
   '(trivial-types:proper-list product-view-filter-value))
 (common-lisp:defun |make-product-view-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            product-view-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype product-view-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-product-view-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype product-view-name () 'common-lisp:string)
(common-lisp:deftype product-view-owner () 'common-lisp:string)
(common-lisp:deftype product-view-short-description () 'common-lisp:string)
(common-lisp:deftype product-view-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype product-view-summaries ()
   '(trivial-types:proper-list product-view-summary))
 (common-lisp:defun |make-product-view-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-view-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass product-view-summary common-lisp:nil
                       ((support-url :initarg :support-url :type
                         (common-lisp:or support-url common-lisp:null)
                         :accessor %product-view-summary-support-url :initform
                         common-lisp:nil)
                        (support-description :initarg :support-description
                         :type
                         (common-lisp:or support-description common-lisp:null)
                         :accessor %product-view-summary-support-description
                         :initform common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or support-email common-lisp:null)
                         :accessor %product-view-summary-support-email
                         :initform common-lisp:nil)
                        (has-default-path :initarg :has-default-path :type
                         (common-lisp:or has-default-path common-lisp:null)
                         :accessor %product-view-summary-has-default-path
                         :initform common-lisp:nil)
                        (distributor :initarg :distributor :type
                         (common-lisp:or product-view-distributor
                                         common-lisp:null)
                         :accessor %product-view-summary-distributor :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or product-type common-lisp:null)
                         :accessor %product-view-summary-type :initform
                         common-lisp:nil)
                        (short-description :initarg :short-description :type
                         (common-lisp:or product-view-short-description
                                         common-lisp:null)
                         :accessor %product-view-summary-short-description
                         :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or product-view-owner common-lisp:null)
                         :accessor %product-view-summary-owner :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %product-view-summary-name :initform
                         common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %product-view-summary-product-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %product-view-summary-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'product-view-summary 'make-product-view-summary))
 (common-lisp:defun make-product-view-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key support-url support-description
                     support-email has-default-path distributor type
                     short-description owner name product-id id)
   (common-lisp:apply #'common-lisp:make-instance 'product-view-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-view-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-view-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor))
      (common-lisp:list
       (common-lisp:cons "Distributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-default-path))
      (common-lisp:list
       (common-lisp:cons "HasDefaultPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-description))
      (common-lisp:list
       (common-lisp:cons "SupportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-url))
      (common-lisp:list
       (common-lisp:cons "SupportUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-view-summary))
   common-lisp:nil))
(common-lisp:deftype property-key () 'common-lisp:string)
(common-lisp:deftype property-name () 'common-lisp:string)
(common-lisp:deftype property-value () 'common-lisp:string)
(common-lisp:deftype provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provision-product-input common-lisp:nil
                       ((provision-token :initarg :provision-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %provision-product-input-provision-token
                         :initform
                         (common-lisp:error ":provision-token is required"))
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor %provision-product-input-notification-arns
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %provision-product-input-tags :initform
                         common-lisp:nil)
                        (provisioning-preferences :initarg
                         :provisioning-preferences :type
                         (common-lisp:or provisioning-preferences
                                         common-lisp:null)
                         :accessor
                         %provision-product-input-provisioning-preferences
                         :initform common-lisp:nil)
                        (provisioning-parameters :initarg
                         :provisioning-parameters :type
                         (common-lisp:or provisioning-parameters
                                         common-lisp:null)
                         :accessor
                         %provision-product-input-provisioning-parameters
                         :initform common-lisp:nil)
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %provision-product-input-provisioned-product-name
                         :initform
                         (common-lisp:error
                          ":provisioned-product-name is required"))
                        (path-name :initarg :path-name :type
                         (common-lisp:or portfolio-display-name
                                         common-lisp:null)
                         :accessor %provision-product-input-path-name :initform
                         common-lisp:nil)
                        (path-id :initarg :path-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provision-product-input-path-id :initform
                         common-lisp:nil)
                        (provisioning-artifact-name :initarg
                         :provisioning-artifact-name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor
                         %provision-product-input-provisioning-artifact-name
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provision-product-input-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %provision-product-input-product-name
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provision-product-input-product-id :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %provision-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provision-product-input 'make-provision-product-input))
 (common-lisp:defun make-provision-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provision-token notification-arns tags
                     provisioning-preferences provisioning-parameters
                     provisioned-product-name path-name path-id
                     provisioning-artifact-name provisioning-artifact-id
                     product-name product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'provision-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-name))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-name))
      (common-lisp:list
       (common-lisp:cons "PathName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-preferences))
      (common-lisp:list
       (common-lisp:cons "ProvisioningPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provision-token))
      (common-lisp:list
       (common-lisp:cons "ProvisionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provision-product-output common-lisp:nil
                       ((record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor %provision-product-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provision-product-output 'make-provision-product-output))
 (common-lisp:defun make-provision-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-detail)
   (common-lisp:apply #'common-lisp:make-instance 'provision-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioned-product-attribute common-lisp:nil
                       ((user-arn-session :initarg :user-arn-session :type
                         (common-lisp:or user-arn-session common-lisp:null)
                         :accessor
                         %provisioned-product-attribute-user-arn-session
                         :initform common-lisp:nil)
                        (user-arn :initarg :user-arn :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         %provisioned-product-attribute-user-arn :initform
                         common-lisp:nil)
                        (provisioning-artifact-name :initarg
                         :provisioning-artifact-name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor
                         %provisioned-product-attribute-provisioning-artifact-name
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-attribute-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %provisioned-product-attribute-product-name
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-attribute-product-id :initform
                         common-lisp:nil)
                        (physical-id :initarg :physical-id :type
                         (common-lisp:or physical-id common-lisp:null)
                         :accessor %provisioned-product-attribute-physical-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %provisioned-product-attribute-tags :initform
                         common-lisp:nil)
                        (last-successful-provisioning-record-id :initarg
                         :last-successful-provisioning-record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-attribute-last-successful-provisioning-record-id
                         :initform common-lisp:nil)
                        (last-provisioning-record-id :initarg
                         :last-provisioning-record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-attribute-last-provisioning-record-id
                         :initform common-lisp:nil)
                        (last-record-id :initarg :last-record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-attribute-last-record-id
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %provisioned-product-attribute-idempotency-token
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %provisioned-product-attribute-created-time
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or provisioned-product-status-message
                                         common-lisp:null)
                         :accessor
                         %provisioned-product-attribute-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or provisioned-product-status
                                         common-lisp:null)
                         :accessor %provisioned-product-attribute-status
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-attribute-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or provisioned-product-type
                                         common-lisp:null)
                         :accessor %provisioned-product-attribute-type
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or provisioned-product-name-or-arn
                                         common-lisp:null)
                         :accessor %provisioned-product-attribute-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioned-product-name-or-arn
                                         common-lisp:null)
                         :accessor %provisioned-product-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioned-product-attribute
                    'make-provisioned-product-attribute))
 (common-lisp:defun make-provisioned-product-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-arn-session user-arn
                     provisioning-artifact-name provisioning-artifact-id
                     product-name product-id physical-id tags
                     last-successful-provisioning-record-id
                     last-provisioning-record-id last-record-id
                     idempotency-token created-time status-message status id
                     type arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioned-product-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-record-id))
      (common-lisp:list
       (common-lisp:cons "LastRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-provisioning-record-id))
      (common-lisp:list
       (common-lisp:cons "LastProvisioningRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-provisioning-record-id))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulProvisioningRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'physical-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-name))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn-session))
      (common-lisp:list
       (common-lisp:cons "UserArnSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioned-product-attributes ()
   '(trivial-types:proper-list provisioned-product-attribute))
 (common-lisp:defun |make-provisioned-product-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioned-product-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioned-product-detail common-lisp:nil
                       ((launch-role-arn :initarg :launch-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %provisioned-product-detail-launch-role-arn :initform
                         common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-detail-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-detail-product-id :initform
                         common-lisp:nil)
                        (last-successful-provisioning-record-id :initarg
                         :last-successful-provisioning-record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-detail-last-successful-provisioning-record-id
                         :initform common-lisp:nil)
                        (last-provisioning-record-id :initarg
                         :last-provisioning-record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-detail-last-provisioning-record-id
                         :initform common-lisp:nil)
                        (last-record-id :initarg :last-record-id :type
                         (common-lisp:or last-request-id common-lisp:null)
                         :accessor %provisioned-product-detail-last-record-id
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %provisioned-product-detail-idempotency-token
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %provisioned-product-detail-created-time
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or provisioned-product-status-message
                                         common-lisp:null)
                         :accessor %provisioned-product-detail-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or provisioned-product-status
                                         common-lisp:null)
                         :accessor %provisioned-product-detail-status :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or provisioned-product-id
                                         common-lisp:null)
                         :accessor %provisioned-product-detail-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or provisioned-product-type
                                         common-lisp:null)
                         :accessor %provisioned-product-detail-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or provisioned-product-name-or-arn
                                         common-lisp:null)
                         :accessor %provisioned-product-detail-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioned-product-name-or-arn
                                         common-lisp:null)
                         :accessor %provisioned-product-detail-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioned-product-detail
                    'make-provisioned-product-detail))
 (common-lisp:defun make-provisioned-product-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-role-arn provisioning-artifact-id
                     product-id last-successful-provisioning-record-id
                     last-provisioning-record-id last-record-id
                     idempotency-token created-time status-message status id
                     type arn name)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned-product-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-record-id))
      (common-lisp:list
       (common-lisp:cons "LastRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-provisioning-record-id))
      (common-lisp:list
       (common-lisp:cons "LastProvisioningRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-provisioning-record-id))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulProvisioningRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-role-arn))
      (common-lisp:list
       (common-lisp:cons "LaunchRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioned-product-details ()
   '(trivial-types:proper-list provisioned-product-detail))
 (common-lisp:defun |make-provisioned-product-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioned-product-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype provisioned-product-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-provisioned-product-filters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype provisioned-product-id () 'common-lisp:string)
(common-lisp:deftype provisioned-product-name () 'common-lisp:string)
(common-lisp:deftype provisioned-product-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioned-product-plan-details common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %provisioned-product-plan-details-status-message
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %provisioned-product-plan-details-tags :initform
                         common-lisp:nil)
                        (provisioning-parameters :initarg
                         :provisioning-parameters :type
                         (common-lisp:or update-provisioning-parameters
                                         common-lisp:null)
                         :accessor
                         %provisioned-product-plan-details-provisioning-parameters
                         :initform common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor
                         %provisioned-product-plan-details-notification-arns
                         :initform common-lisp:nil)
                        (updated-time :initarg :updated-time :type
                         (common-lisp:or updated-time common-lisp:null)
                         :accessor
                         %provisioned-product-plan-details-updated-time
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or provisioned-product-plan-status
                                         common-lisp:null)
                         :accessor %provisioned-product-plan-details-status
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-details-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (plan-type :initarg :plan-type :type
                         (common-lisp:or provisioned-product-plan-type
                                         common-lisp:null)
                         :accessor %provisioned-product-plan-details-plan-type
                         :initform common-lisp:nil)
                        (provision-product-name :initarg
                         :provision-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %provisioned-product-plan-details-provision-product-name
                         :initform common-lisp:nil)
                        (provision-product-id :initarg :provision-product-id
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-details-provision-product-id
                         :initform common-lisp:nil)
                        (plan-id :initarg :plan-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-details-plan-id :initform
                         common-lisp:nil)
                        (plan-name :initarg :plan-name :type
                         (common-lisp:or provisioned-product-plan-name
                                         common-lisp:null)
                         :accessor %provisioned-product-plan-details-plan-name
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-details-product-id :initform
                         common-lisp:nil)
                        (path-id :initarg :path-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-details-path-id :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor
                         %provisioned-product-plan-details-created-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioned-product-plan-details
                    'make-provisioned-product-plan-details))
 (common-lisp:defun make-provisioned-product-plan-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message tags
                     provisioning-parameters notification-arns updated-time
                     status provisioning-artifact-id plan-type
                     provision-product-name provision-product-id plan-id
                     plan-name product-id path-id created-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioned-product-plan-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-plan-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-plan-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-name))
      (common-lisp:list
       (common-lisp:cons "PlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-id))
      (common-lisp:list
       (common-lisp:cons "PlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provision-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provision-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-type))
      (common-lisp:list
       (common-lisp:cons "PlanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-plan-details))
   common-lisp:nil))
(common-lisp:deftype provisioned-product-plan-name () 'common-lisp:string)
(common-lisp:deftype provisioned-product-plan-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioned-product-plan-summary common-lisp:nil
                       ((provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-summary-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (plan-type :initarg :plan-type :type
                         (common-lisp:or provisioned-product-plan-type
                                         common-lisp:null)
                         :accessor %provisioned-product-plan-summary-plan-type
                         :initform common-lisp:nil)
                        (provision-product-name :initarg
                         :provision-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor
                         %provisioned-product-plan-summary-provision-product-name
                         :initform common-lisp:nil)
                        (provision-product-id :initarg :provision-product-id
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-summary-provision-product-id
                         :initform common-lisp:nil)
                        (plan-id :initarg :plan-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioned-product-plan-summary-plan-id :initform
                         common-lisp:nil)
                        (plan-name :initarg :plan-name :type
                         (common-lisp:or provisioned-product-plan-name
                                         common-lisp:null)
                         :accessor %provisioned-product-plan-summary-plan-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioned-product-plan-summary
                    'make-provisioned-product-plan-summary))
 (common-lisp:defun make-provisioned-product-plan-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact-id plan-type
                     provision-product-name provision-product-id plan-id
                     plan-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioned-product-plan-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-plan-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-plan-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-name))
      (common-lisp:list
       (common-lisp:cons "PlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-id))
      (common-lisp:list
       (common-lisp:cons "PlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provision-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provision-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan-type))
      (common-lisp:list
       (common-lisp:cons "PlanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-product-plan-summary))
   common-lisp:nil))
(common-lisp:deftype provisioned-product-plan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioned-product-plans ()
   '(trivial-types:proper-list provisioned-product-plan-summary))
 (common-lisp:defun |make-provisioned-product-plans|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioned-product-plan-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype provisioned-product-properties ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-provisioned-product-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype provisioned-product-status () 'common-lisp:string)
(common-lisp:deftype provisioned-product-status-message () 'common-lisp:string)
(common-lisp:deftype provisioned-product-type () 'common-lisp:string)
(common-lisp:deftype provisioned-product-view-filter-by () 'common-lisp:string)
(common-lisp:deftype provisioned-product-view-filter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioned-product-view-filter-values ()
   '(trivial-types:proper-list provisioned-product-view-filter-value))
 (common-lisp:defun |make-provisioned-product-view-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioned-product-view-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact common-lisp:nil
                       ((guidance :initarg :guidance :type
                         (common-lisp:or provisioning-artifact-guidance
                                         common-lisp:null)
                         :accessor %provisioning-artifact-guidance :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or provisioning-artifact-created-time
                                         common-lisp:null)
                         :accessor %provisioning-artifact-created-time
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or provisioning-artifact-description
                                         common-lisp:null)
                         :accessor %provisioning-artifact-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor %provisioning-artifact-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioning-artifact-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact 'make-provisioning-artifact))
 (common-lisp:defun make-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key guidance created-time description name
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'guidance))
      (common-lisp:list
       (common-lisp:cons "Guidance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact))
   common-lisp:nil))
(common-lisp:deftype provisioning-artifact-active () 'common-lisp:boolean)
(common-lisp:deftype provisioning-artifact-created-time () 'common-lisp:string)
(common-lisp:deftype provisioning-artifact-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-detail common-lisp:nil
                       ((source-revision :initarg :source-revision :type
                         (common-lisp:or source-revision common-lisp:null)
                         :accessor
                         %provisioning-artifact-detail-source-revision
                         :initform common-lisp:nil)
                        (guidance :initarg :guidance :type
                         (common-lisp:or provisioning-artifact-guidance
                                         common-lisp:null)
                         :accessor %provisioning-artifact-detail-guidance
                         :initform common-lisp:nil)
                        (active :initarg :active :type
                         (common-lisp:or provisioning-artifact-active
                                         common-lisp:null)
                         :accessor %provisioning-artifact-detail-active
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %provisioning-artifact-detail-created-time
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or provisioning-artifact-type
                                         common-lisp:null)
                         :accessor %provisioning-artifact-detail-type :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor %provisioning-artifact-detail-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor %provisioning-artifact-detail-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioning-artifact-detail-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-detail
                    'make-provisioning-artifact-detail))
 (common-lisp:defun make-provisioning-artifact-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-revision guidance active
                     created-time type description name id)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-artifact-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'guidance))
      (common-lisp:list
       (common-lisp:cons "Guidance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-revision))
      (common-lisp:list
       (common-lisp:cons "SourceRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-artifact-details ()
   '(trivial-types:proper-list provisioning-artifact-detail))
 (common-lisp:defun |make-provisioning-artifact-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-artifact-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provisioning-artifact-guidance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioning-artifact-info () 'common-lisp:hash-table)
 (common-lisp:defun |make-provisioning-artifact-info|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype provisioning-artifact-info-key () 'common-lisp:string)
(common-lisp:deftype provisioning-artifact-info-value () 'common-lisp:string)
(common-lisp:deftype provisioning-artifact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-output common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or output-description common-lisp:null)
                         :accessor %provisioning-artifact-output-description
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or provisioning-artifact-output-key
                                         common-lisp:null)
                         :accessor %provisioning-artifact-output-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-output
                    'make-provisioning-artifact-output))
 (common-lisp:defun make-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description key)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:deftype provisioning-artifact-output-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioning-artifact-outputs ()
   '(trivial-types:proper-list provisioning-artifact-output))
 (common-lisp:defun |make-provisioning-artifact-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-artifact-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-parameter common-lisp:nil
                       ((parameter-constraints :initarg :parameter-constraints
                         :type
                         (common-lisp:or parameter-constraints
                                         common-lisp:null)
                         :accessor
                         %provisioning-artifact-parameter-parameter-constraints
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %provisioning-artifact-parameter-description
                         :initform common-lisp:nil)
                        (is-no-echo :initarg :is-no-echo :type
                         (common-lisp:or no-echo common-lisp:null) :accessor
                         %provisioning-artifact-parameter-is-no-echo :initform
                         common-lisp:nil)
                        (parameter-type :initarg :parameter-type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor
                         %provisioning-artifact-parameter-parameter-type
                         :initform common-lisp:nil)
                        (default-value :initarg :default-value :type
                         (common-lisp:or default-value common-lisp:null)
                         :accessor
                         %provisioning-artifact-parameter-default-value
                         :initform common-lisp:nil)
                        (parameter-key :initarg :parameter-key :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor
                         %provisioning-artifact-parameter-parameter-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-parameter
                    'make-provisioning-artifact-parameter))
 (common-lisp:defun make-provisioning-artifact-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-constraints description
                     is-no-echo parameter-type default-value parameter-key)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioning-artifact-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-type))
      (common-lisp:list
       (common-lisp:cons "ParameterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-no-echo))
      (common-lisp:list
       (common-lisp:cons "IsNoEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-constraints))
      (common-lisp:list
       (common-lisp:cons "ParameterConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-artifact-parameters ()
   '(trivial-types:proper-list provisioning-artifact-parameter))
 (common-lisp:defun |make-provisioning-artifact-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-artifact-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-preferences common-lisp:nil
                       ((stack-set-regions :initarg :stack-set-regions :type
                         (common-lisp:or stack-set-regions common-lisp:null)
                         :accessor
                         %provisioning-artifact-preferences-stack-set-regions
                         :initform common-lisp:nil)
                        (stack-set-accounts :initarg :stack-set-accounts :type
                         (common-lisp:or stack-set-accounts common-lisp:null)
                         :accessor
                         %provisioning-artifact-preferences-stack-set-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-preferences
                    'make-provisioning-artifact-preferences))
 (common-lisp:defun make-provisioning-artifact-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-set-regions stack-set-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioning-artifact-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-accounts))
      (common-lisp:list
       (common-lisp:cons "StackSetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-regions))
      (common-lisp:list
       (common-lisp:cons "StackSetRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-preferences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-properties common-lisp:nil
                       ((disable-template-validation :initarg
                         :disable-template-validation :type
                         (common-lisp:or disable-template-validation
                                         common-lisp:null)
                         :accessor
                         %provisioning-artifact-properties-disable-template-validation
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or provisioning-artifact-type
                                         common-lisp:null)
                         :accessor %provisioning-artifact-properties-type
                         :initform common-lisp:nil)
                        (info :initarg :info :type
                         (common-lisp:or provisioning-artifact-info
                                         common-lisp:null)
                         :accessor %provisioning-artifact-properties-info
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or provisioning-artifact-description
                                         common-lisp:null)
                         :accessor
                         %provisioning-artifact-properties-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor %provisioning-artifact-properties-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-properties
                    'make-provisioning-artifact-properties))
 (common-lisp:defun make-provisioning-artifact-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disable-template-validation type info
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioning-artifact-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-template-validation))
      (common-lisp:list
       (common-lisp:cons "DisableTemplateValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-properties))
   common-lisp:nil))
(common-lisp:deftype provisioning-artifact-property-name () 'common-lisp:string)
(common-lisp:deftype provisioning-artifact-property-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioning-artifact-summaries ()
   '(trivial-types:proper-list provisioning-artifact-summary))
 (common-lisp:defun |make-provisioning-artifact-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-artifact-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-summary common-lisp:nil
                       ((provisioning-artifact-metadata :initarg
                         :provisioning-artifact-metadata :type
                         (common-lisp:or provisioning-artifact-info
                                         common-lisp:null)
                         :accessor
                         %provisioning-artifact-summary-provisioning-artifact-metadata
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or provisioning-artifact-created-time
                                         common-lisp:null)
                         :accessor %provisioning-artifact-summary-created-time
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or provisioning-artifact-description
                                         common-lisp:null)
                         :accessor %provisioning-artifact-summary-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor %provisioning-artifact-summary-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %provisioning-artifact-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-summary
                    'make-provisioning-artifact-summary))
 (common-lisp:defun make-provisioning-artifact-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact-metadata
                     created-time description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioning-artifact-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-metadata))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-summary))
   common-lisp:nil))
(common-lisp:deftype provisioning-artifact-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioning-artifact-view common-lisp:nil
                       ((provisioning-artifact :initarg :provisioning-artifact
                         :type
                         (common-lisp:or provisioning-artifact
                                         common-lisp:null)
                         :accessor
                         %provisioning-artifact-view-provisioning-artifact
                         :initform common-lisp:nil)
                        (product-view-summary :initarg :product-view-summary
                         :type
                         (common-lisp:or product-view-summary common-lisp:null)
                         :accessor
                         %provisioning-artifact-view-product-view-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-artifact-view
                    'make-provisioning-artifact-view))
 (common-lisp:defun make-provisioning-artifact-view
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact
                     product-view-summary)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-artifact-view
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-view))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-view))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-summary))
      (common-lisp:list
       (common-lisp:cons "ProductViewSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-artifact-view))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-artifact-views ()
   '(trivial-types:proper-list provisioning-artifact-view))
 (common-lisp:defun |make-provisioning-artifact-views|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-artifact-view))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype provisioning-artifacts ()
   '(trivial-types:proper-list provisioning-artifact))
 (common-lisp:defun |make-provisioning-artifacts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provisioning-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-parameter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %provisioning-parameter-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor %provisioning-parameter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-parameter 'make-provisioning-parameter))
 (common-lisp:defun make-provisioning-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-parameters ()
   '(trivial-types:proper-list provisioning-parameter))
 (common-lisp:defun |make-provisioning-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provisioning-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-preferences common-lisp:nil
                       ((stack-set-max-concurrency-percentage :initarg
                         :stack-set-max-concurrency-percentage :type
                         (common-lisp:or stack-set-max-concurrency-percentage
                                         common-lisp:null)
                         :accessor
                         %provisioning-preferences-stack-set-max-concurrency-percentage
                         :initform common-lisp:nil)
                        (stack-set-max-concurrency-count :initarg
                         :stack-set-max-concurrency-count :type
                         (common-lisp:or stack-set-max-concurrency-count
                                         common-lisp:null)
                         :accessor
                         %provisioning-preferences-stack-set-max-concurrency-count
                         :initform common-lisp:nil)
                        (stack-set-failure-tolerance-percentage :initarg
                         :stack-set-failure-tolerance-percentage :type
                         (common-lisp:or stack-set-failure-tolerance-percentage
                                         common-lisp:null)
                         :accessor
                         %provisioning-preferences-stack-set-failure-tolerance-percentage
                         :initform common-lisp:nil)
                        (stack-set-failure-tolerance-count :initarg
                         :stack-set-failure-tolerance-count :type
                         (common-lisp:or stack-set-failure-tolerance-count
                                         common-lisp:null)
                         :accessor
                         %provisioning-preferences-stack-set-failure-tolerance-count
                         :initform common-lisp:nil)
                        (stack-set-regions :initarg :stack-set-regions :type
                         (common-lisp:or stack-set-regions common-lisp:null)
                         :accessor %provisioning-preferences-stack-set-regions
                         :initform common-lisp:nil)
                        (stack-set-accounts :initarg :stack-set-accounts :type
                         (common-lisp:or stack-set-accounts common-lisp:null)
                         :accessor %provisioning-preferences-stack-set-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioning-preferences 'make-provisioning-preferences))
 (common-lisp:defun make-provisioning-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-set-max-concurrency-percentage
                     stack-set-max-concurrency-count
                     stack-set-failure-tolerance-percentage
                     stack-set-failure-tolerance-count stack-set-regions
                     stack-set-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-accounts))
      (common-lisp:list
       (common-lisp:cons "StackSetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-regions))
      (common-lisp:list
       (common-lisp:cons "StackSetRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-failure-tolerance-count))
      (common-lisp:list
       (common-lisp:cons "StackSetFailureToleranceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-failure-tolerance-percentage))
      (common-lisp:list
       (common-lisp:cons "StackSetFailureTolerancePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-max-concurrency-count))
      (common-lisp:list
       (common-lisp:cons "StackSetMaxConcurrencyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-max-concurrency-percentage))
      (common-lisp:list
       (common-lisp:cons "StackSetMaxConcurrencyPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-preferences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass record-detail common-lisp:nil
                       ((launch-role-arn :initarg :launch-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %record-detail-launch-role-arn :initform
                         common-lisp:nil)
                        (record-tags :initarg :record-tags :type
                         (common-lisp:or record-tags common-lisp:null)
                         :accessor %record-detail-record-tags :initform
                         common-lisp:nil)
                        (record-errors :initarg :record-errors :type
                         (common-lisp:or record-errors common-lisp:null)
                         :accessor %record-detail-record-errors :initform
                         common-lisp:nil)
                        (path-id :initarg :path-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %record-detail-path-id :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %record-detail-provisioning-artifact-id :initform
                         common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %record-detail-product-id :initform common-lisp:nil)
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %record-detail-provisioned-product-id :initform
                         common-lisp:nil)
                        (record-type :initarg :record-type :type
                         (common-lisp:or record-type common-lisp:null)
                         :accessor %record-detail-record-type :initform
                         common-lisp:nil)
                        (provisioned-product-type :initarg
                         :provisioned-product-type :type
                         (common-lisp:or provisioned-product-type
                                         common-lisp:null)
                         :accessor %record-detail-provisioned-product-type
                         :initform common-lisp:nil)
                        (updated-time :initarg :updated-time :type
                         (common-lisp:or updated-time common-lisp:null)
                         :accessor %record-detail-updated-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %record-detail-created-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or record-status common-lisp:null)
                         :accessor %record-detail-status :initform
                         common-lisp:nil)
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name
                                         common-lisp:null)
                         :accessor %record-detail-provisioned-product-name
                         :initform common-lisp:nil)
                        (record-id :initarg :record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %record-detail-record-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record-detail 'make-record-detail))
 (common-lisp:defun make-record-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-role-arn record-tags record-errors
                     path-id provisioning-artifact-id product-id
                     provisioned-product-id record-type
                     provisioned-product-type updated-time created-time status
                     provisioned-product-name record-id)
   (common-lisp:apply #'common-lisp:make-instance 'record-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-id))
      (common-lisp:list
       (common-lisp:cons "RecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-type))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-type))
      (common-lisp:list
       (common-lisp:cons "RecordType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-errors))
      (common-lisp:list
       (common-lisp:cons "RecordErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-tags))
      (common-lisp:list
       (common-lisp:cons "RecordTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-role-arn))
      (common-lisp:list
       (common-lisp:cons "LaunchRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-details ()
   '(trivial-types:proper-list record-detail))
 (common-lisp:defun |make-record-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass record-error common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or error-description common-lisp:null)
                         :accessor %record-error-description :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %record-error-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record-error 'make-record-error))
 (common-lisp:defun make-record-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description code)
   (common-lisp:apply #'common-lisp:make-instance 'record-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-errors ()
   '(trivial-types:proper-list record-error))
 (common-lisp:defun |make-record-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass record-output common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %record-output-description :initform
                         common-lisp:nil)
                        (output-value :initarg :output-value :type
                         (common-lisp:or output-value common-lisp:null)
                         :accessor %record-output-output-value :initform
                         common-lisp:nil)
                        (output-key :initarg :output-key :type
                         (common-lisp:or output-key common-lisp:null) :accessor
                         %record-output-output-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record-output 'make-record-output))
 (common-lisp:defun make-record-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description output-value output-key)
   (common-lisp:apply #'common-lisp:make-instance 'record-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-value))
      (common-lisp:list
       (common-lisp:cons "OutputValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-outputs ()
   '(trivial-types:proper-list record-output))
 (common-lisp:defun |make-record-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record-tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or record-tag-value common-lisp:null)
                         :accessor %record-tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or record-tag-key common-lisp:null)
                         :accessor %record-tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record-tag 'make-record-tag))
 (common-lisp:defun make-record-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'record-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-tag))
   common-lisp:nil))
(common-lisp:deftype record-tag-key () 'common-lisp:string)
(common-lisp:deftype record-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-tags () '(trivial-types:proper-list record-tag))
 (common-lisp:defun |make-record-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-type () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-portfolio-share-input common-lisp:nil
                       ((portfolio-share-type :initarg :portfolio-share-type
                         :type
                         (common-lisp:or portfolio-share-type common-lisp:null)
                         :accessor
                         %reject-portfolio-share-input-portfolio-share-type
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %reject-portfolio-share-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %reject-portfolio-share-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reject-portfolio-share-input
                    'make-reject-portfolio-share-input))
 (common-lisp:defun make-reject-portfolio-share-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portfolio-share-type portfolio-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'reject-portfolio-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-portfolio-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-portfolio-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-type))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-portfolio-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-portfolio-share-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reject-portfolio-share-output
                    'make-reject-portfolio-share-output))
 (common-lisp:defun make-reject-portfolio-share-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-portfolio-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-portfolio-share-output))
   common-lisp:nil))
(common-lisp:deftype replacement () 'common-lisp:string)
(common-lisp:deftype repository () 'common-lisp:string)
(common-lisp:deftype repository-artifact-path () 'common-lisp:string)
(common-lisp:deftype repository-branch () 'common-lisp:string)
(common-lisp:deftype requires-recreation () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-change common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or resource-change-details
                                         common-lisp:null)
                         :accessor %resource-change-details :initform
                         common-lisp:nil)
                        (scope :initarg :scope :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         %resource-change-scope :initform common-lisp:nil)
                        (replacement :initarg :replacement :type
                         (common-lisp:or replacement common-lisp:null)
                         :accessor %resource-change-replacement :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or plan-resource-type common-lisp:null)
                         :accessor %resource-change-resource-type :initform
                         common-lisp:nil)
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %resource-change-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %resource-change-logical-resource-id
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or change-action common-lisp:null)
                         :accessor %resource-change-action :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-change 'make-resource-change))
 (common-lisp:defun make-resource-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details scope replacement resource-type
                     physical-resource-id logical-resource-id action)
   (common-lisp:apply #'common-lisp:make-instance 'resource-change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement))
      (common-lisp:list
       (common-lisp:cons "Replacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-change-detail common-lisp:nil
                       ((causing-entity :initarg :causing-entity :type
                         (common-lisp:or causing-entity common-lisp:null)
                         :accessor %resource-change-detail-causing-entity
                         :initform common-lisp:nil)
                        (evaluation :initarg :evaluation :type
                         (common-lisp:or evaluation-type common-lisp:null)
                         :accessor %resource-change-detail-evaluation :initform
                         common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or resource-target-definition
                                         common-lisp:null)
                         :accessor %resource-change-detail-target :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-change-detail 'make-resource-change-detail))
 (common-lisp:defun make-resource-change-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key causing-entity evaluation target)
   (common-lisp:apply #'common-lisp:make-instance 'resource-change-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation))
      (common-lisp:list
       (common-lisp:cons "Evaluation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causing-entity))
      (common-lisp:list
       (common-lisp:cons "CausingEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-change-details ()
   '(trivial-types:proper-list resource-change-detail))
 (common-lisp:defun |make-resource-change-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-change-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-changes ()
   '(trivial-types:proper-list resource-change))
 (common-lisp:defun |make-resource-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-detail common-lisp:nil
                       ((created-time :initarg :created-time :type
                         (common-lisp:or resource-detail-created-time
                                         common-lisp:null)
                         :accessor %resource-detail-created-time :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or resource-detail-description
                                         common-lisp:null)
                         :accessor %resource-detail-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-detail-name common-lisp:null)
                         :accessor %resource-detail-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or resource-detail-arn common-lisp:null)
                         :accessor %resource-detail-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or resource-detail-id common-lisp:null)
                         :accessor %resource-detail-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-detail 'make-resource-detail))
 (common-lisp:defun make-resource-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time description name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'resource-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-detail))
   common-lisp:nil))
(common-lisp:deftype resource-detail-arn () 'common-lisp:string)
(common-lisp:deftype resource-detail-created-time () 'common-lisp:string)
(common-lisp:deftype resource-detail-description () 'common-lisp:string)
(common-lisp:deftype resource-detail-id () 'common-lisp:string)
(common-lisp:deftype resource-detail-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-details ()
   '(trivial-types:proper-list resource-detail))
 (common-lisp:defun |make-resource-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass resource-target-definition common-lisp:nil
                       ((requires-recreation :initarg :requires-recreation
                         :type
                         (common-lisp:or requires-recreation common-lisp:null)
                         :accessor
                         %resource-target-definition-requires-recreation
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or property-name common-lisp:null)
                         :accessor %resource-target-definition-name :initform
                         common-lisp:nil)
                        (attribute :initarg :attribute :type
                         (common-lisp:or resource-attribute common-lisp:null)
                         :accessor %resource-target-definition-attribute
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-target-definition
                    'make-resource-target-definition))
 (common-lisp:defun make-resource-target-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key requires-recreation name attribute)
   (common-lisp:apply #'common-lisp:make-instance 'resource-target-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires-recreation))
      (common-lisp:list
       (common-lisp:cons "RequiresRecreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retain-physical-resources () 'common-lisp:boolean)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scan-provisioned-products-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %scan-provisioned-products-input-page-token :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %scan-provisioned-products-input-page-size :initform
                         common-lisp:nil)
                        (access-level-filter :initarg :access-level-filter
                         :type
                         (common-lisp:or access-level-filter common-lisp:null)
                         :accessor
                         %scan-provisioned-products-input-access-level-filter
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %scan-provisioned-products-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scan-provisioned-products-input
                    'make-scan-provisioned-products-input))
 (common-lisp:defun make-scan-provisioned-products-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size access-level-filter
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'scan-provisioned-products-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scan-provisioned-products-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scan-provisioned-products-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-level-filter))
      (common-lisp:list
       (common-lisp:cons "AccessLevelFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scan-provisioned-products-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-provisioned-products-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %scan-provisioned-products-output-next-page-token
                         :initform common-lisp:nil)
                        (provisioned-products :initarg :provisioned-products
                         :type
                         (common-lisp:or provisioned-product-details
                                         common-lisp:null)
                         :accessor
                         %scan-provisioned-products-output-provisioned-products
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scan-provisioned-products-output
                    'make-scan-provisioned-products-output))
 (common-lisp:defun make-scan-provisioned-products-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token provisioned-products)
   (common-lisp:apply #'common-lisp:make-instance
                      'scan-provisioned-products-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scan-provisioned-products-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scan-provisioned-products-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-products))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scan-provisioned-products-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scope () '(trivial-types:proper-list resource-attribute))
 (common-lisp:defun |make-scope|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-filter-key () 'common-lisp:string)
(common-lisp:deftype search-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-products-as-admin-input common-lisp:nil
                       ((product-source :initarg :product-source :type
                         (common-lisp:or product-source common-lisp:null)
                         :accessor
                         %search-products-as-admin-input-product-source
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %search-products-as-admin-input-page-size :initform
                         common-lisp:nil)
                        (page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %search-products-as-admin-input-page-token :initform
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %search-products-as-admin-input-sort-order :initform
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or product-view-sort-by common-lisp:null)
                         :accessor %search-products-as-admin-input-sort-by
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or product-view-filters common-lisp:null)
                         :accessor %search-products-as-admin-input-filters
                         :initform common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %search-products-as-admin-input-portfolio-id :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %search-products-as-admin-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-products-as-admin-input
                    'make-search-products-as-admin-input))
 (common-lisp:defun make-search-products-as-admin-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-source page-size page-token
                     sort-order sort-by filters portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-products-as-admin-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-products-as-admin-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-products-as-admin-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-source))
      (common-lisp:list
       (common-lisp:cons "ProductSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-products-as-admin-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-products-as-admin-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %search-products-as-admin-output-next-page-token
                         :initform common-lisp:nil)
                        (product-view-details :initarg :product-view-details
                         :type
                         (common-lisp:or product-view-details common-lisp:null)
                         :accessor
                         %search-products-as-admin-output-product-view-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-products-as-admin-output
                    'make-search-products-as-admin-output))
 (common-lisp:defun make-search-products-as-admin-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token product-view-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-products-as-admin-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-products-as-admin-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-products-as-admin-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-details))
      (common-lisp:list
       (common-lisp:cons "ProductViewDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-products-as-admin-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-products-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %search-products-input-page-token :initform
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %search-products-input-sort-order :initform
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or product-view-sort-by common-lisp:null)
                         :accessor %search-products-input-sort-by :initform
                         common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size-max100 common-lisp:null)
                         :accessor %search-products-input-page-size :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or product-view-filters common-lisp:null)
                         :accessor %search-products-input-filters :initform
                         common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %search-products-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-products-input 'make-search-products-input))
 (common-lisp:defun make-search-products-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token sort-order sort-by page-size
                     filters accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'search-products-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-products-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-products-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-products-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-products-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %search-products-output-next-page-token :initform
                         common-lisp:nil)
                        (product-view-aggregations :initarg
                         :product-view-aggregations :type
                         (common-lisp:or product-view-aggregations
                                         common-lisp:null)
                         :accessor
                         %search-products-output-product-view-aggregations
                         :initform common-lisp:nil)
                        (product-view-summaries :initarg
                         :product-view-summaries :type
                         (common-lisp:or product-view-summaries
                                         common-lisp:null)
                         :accessor
                         %search-products-output-product-view-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-products-output 'make-search-products-output))
 (common-lisp:defun make-search-products-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token product-view-aggregations
                     product-view-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'search-products-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-products-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-products-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-summaries))
      (common-lisp:list
       (common-lisp:cons "ProductViewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-view-aggregations))
      (common-lisp:list
       (common-lisp:cons "ProductViewAggregations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-products-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-provisioned-products-input common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %search-provisioned-products-input-page-token
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or search-provisioned-products-page-size
                                         common-lisp:null)
                         :accessor %search-provisioned-products-input-page-size
                         :initform common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %search-provisioned-products-input-sort-order
                         :initform common-lisp:nil)
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or sort-field common-lisp:null) :accessor
                         %search-provisioned-products-input-sort-by :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or provisioned-product-filters
                                         common-lisp:null)
                         :accessor %search-provisioned-products-input-filters
                         :initform common-lisp:nil)
                        (access-level-filter :initarg :access-level-filter
                         :type
                         (common-lisp:or access-level-filter common-lisp:null)
                         :accessor
                         %search-provisioned-products-input-access-level-filter
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %search-provisioned-products-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-provisioned-products-input
                    'make-search-provisioned-products-input))
 (common-lisp:defun make-search-provisioned-products-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token page-size sort-order sort-by
                     filters access-level-filter accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-provisioned-products-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-provisioned-products-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-provisioned-products-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-level-filter))
      (common-lisp:list
       (common-lisp:cons "AccessLevelFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "PageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-provisioned-products-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-provisioned-products-output common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %search-provisioned-products-output-next-page-token
                         :initform common-lisp:nil)
                        (total-results-count :initarg :total-results-count
                         :type
                         (common-lisp:or total-results-count common-lisp:null)
                         :accessor
                         %search-provisioned-products-output-total-results-count
                         :initform common-lisp:nil)
                        (provisioned-products :initarg :provisioned-products
                         :type
                         (common-lisp:or provisioned-product-attributes
                                         common-lisp:null)
                         :accessor
                         %search-provisioned-products-output-provisioned-products
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-provisioned-products-output
                    'make-search-provisioned-products-output))
 (common-lisp:defun make-search-provisioned-products-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token total-results-count
                     provisioned-products)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-provisioned-products-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-provisioned-products-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-provisioned-products-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-products))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-results-count))
      (common-lisp:list
       (common-lisp:cons "TotalResultsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-provisioned-products-output))
   common-lisp:nil))
(common-lisp:deftype search-provisioned-products-page-size ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass service-action-association common-lisp:nil
                       ((provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %service-action-association-provisioning-artifact-id
                         :initform
                         (common-lisp:error
                          ":provisioning-artifact-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %service-action-association-product-id :initform
                         (common-lisp:error ":product-id is required"))
                        (service-action-id :initarg :service-action-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %service-action-association-service-action-id
                         :initform
                         (common-lisp:error
                          ":service-action-id is required"))))
 (common-lisp:export
  (common-lisp:list 'service-action-association
                    'make-service-action-association))
 (common-lisp:defun make-service-action-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioning-artifact-id product-id
                     service-action-id)
   (common-lisp:apply #'common-lisp:make-instance 'service-action-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-action-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-action-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-action-id))
      (common-lisp:list
       (common-lisp:cons "ServiceActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-action-association))
   common-lisp:nil))
(common-lisp:deftype service-action-association-error-code ()
  'common-lisp:string)
(common-lisp:deftype service-action-association-error-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-action-associations ()
   '(trivial-types:proper-list service-action-association))
 (common-lisp:defun |make-service-action-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-action-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-action-definition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-action-definition-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-service-action-definition-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype service-action-definition-type () 'common-lisp:string)
(common-lisp:deftype service-action-definition-value () 'common-lisp:string)
(common-lisp:deftype service-action-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-action-detail common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or service-action-definition-map
                                         common-lisp:null)
                         :accessor %service-action-detail-definition :initform
                         common-lisp:nil)
                        (service-action-summary :initarg
                         :service-action-summary :type
                         (common-lisp:or service-action-summary
                                         common-lisp:null)
                         :accessor
                         %service-action-detail-service-action-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-action-detail 'make-service-action-detail))
 (common-lisp:defun make-service-action-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition service-action-summary)
   (common-lisp:apply #'common-lisp:make-instance 'service-action-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-action-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-action-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-summary))
      (common-lisp:list
       (common-lisp:cons "ServiceActionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-action-detail))
   common-lisp:nil))
(common-lisp:deftype service-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-action-summaries ()
   '(trivial-types:proper-list service-action-summary))
 (common-lisp:defun |make-service-action-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-action-summary common-lisp:nil
                       ((definition-type :initarg :definition-type :type
                         (common-lisp:or service-action-definition-type
                                         common-lisp:null)
                         :accessor %service-action-summary-definition-type
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or service-action-description
                                         common-lisp:null)
                         :accessor %service-action-summary-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or service-action-name common-lisp:null)
                         :accessor %service-action-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %service-action-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-action-summary 'make-service-action-summary))
 (common-lisp:defun make-service-action-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition-type description name id)
   (common-lisp:apply #'common-lisp:make-instance 'service-action-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-type))
      (common-lisp:list
       (common-lisp:cons "DefinitionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-action-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass share-details common-lisp:nil
                       ((share-errors :initarg :share-errors :type
                         (common-lisp:or share-errors common-lisp:null)
                         :accessor %share-details-share-errors :initform
                         common-lisp:nil)
                        (successful-shares :initarg :successful-shares :type
                         (common-lisp:or successful-shares common-lisp:null)
                         :accessor %share-details-successful-shares :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'share-details 'make-share-details))
 (common-lisp:defun make-share-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-errors successful-shares)
   (common-lisp:apply #'common-lisp:make-instance 'share-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-shares))
      (common-lisp:list
       (common-lisp:cons "SuccessfulShares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-errors))
      (common-lisp:list
       (common-lisp:cons "ShareErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass share-error common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or error common-lisp:null) :accessor
                         %share-error-error :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %share-error-message :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or namespaces common-lisp:null) :accessor
                         %share-error-accounts :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'share-error 'make-share-error))
 (common-lisp:defun make-share-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error message accounts)
   (common-lisp:apply #'common-lisp:make-instance 'share-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-errors () '(trivial-types:proper-list share-error))
 (common-lisp:defun |make-share-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype share-status () 'common-lisp:string)
(common-lisp:deftype sort-field () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-connection common-lisp:nil
                       ((connection-parameters :initarg :connection-parameters
                         :type
                         (common-lisp:or source-connection-parameters
                                         common-lisp:null)
                         :accessor %source-connection-connection-parameters
                         :initform
                         (common-lisp:error
                          ":connection-parameters is required"))
                        (type :initarg :type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %source-connection-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-connection 'make-source-connection))
 (common-lisp:defun make-source-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-parameters type)
   (common-lisp:apply #'common-lisp:make-instance 'source-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-parameters))
      (common-lisp:list
       (common-lisp:cons "ConnectionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-connection-detail common-lisp:nil
                       ((last-sync :initarg :last-sync :type
                         (common-lisp:or last-sync common-lisp:null) :accessor
                         %source-connection-detail-last-sync :initform
                         common-lisp:nil)
                        (connection-parameters :initarg :connection-parameters
                         :type
                         (common-lisp:or source-connection-parameters
                                         common-lisp:null)
                         :accessor
                         %source-connection-detail-connection-parameters
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %source-connection-detail-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-connection-detail 'make-source-connection-detail))
 (common-lisp:defun make-source-connection-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-sync connection-parameters type)
   (common-lisp:apply #'common-lisp:make-instance 'source-connection-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-connection-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-connection-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-parameters))
      (common-lisp:list
       (common-lisp:cons "ConnectionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-sync))
      (common-lisp:list
       (common-lisp:cons "LastSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-connection-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-connection-parameters common-lisp:nil
                       ((code-star :initarg :code-star :type
                         (common-lisp:or code-star-parameters common-lisp:null)
                         :accessor %source-connection-parameters-code-star
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-connection-parameters
                    'make-source-connection-parameters))
 (common-lisp:defun make-source-connection-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-star)
   (common-lisp:apply #'common-lisp:make-instance 'source-connection-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-connection-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-connection-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-star))
      (common-lisp:list
       (common-lisp:cons "CodeStar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-connection-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-provisioning-artifact-properties ()
   '(trivial-types:proper-list source-provisioning-artifact-properties-map))
 (common-lisp:defun |make-source-provisioning-artifact-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            source-provisioning-artifact-properties-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype source-provisioning-artifact-properties-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-source-provisioning-artifact-properties-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype source-revision () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-instance common-lisp:nil
                       ((stack-instance-status :initarg :stack-instance-status
                         :type
                         (common-lisp:or stack-instance-status
                                         common-lisp:null)
                         :accessor %stack-instance-stack-instance-status
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %stack-instance-region :initform common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %stack-instance-account :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack-instance 'make-stack-instance))
 (common-lisp:defun make-stack-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-instance-status region account)
   (common-lisp:apply #'common-lisp:make-instance 'stack-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-status))
      (common-lisp:list
       (common-lisp:cons "StackInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-instance))
   common-lisp:nil))
(common-lisp:deftype stack-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-instances ()
   '(trivial-types:proper-list stack-instance))
 (common-lisp:defun |make-stack-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stack-set-accounts ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-stack-set-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stack-set-failure-tolerance-count () 'common-lisp:integer)
(common-lisp:deftype stack-set-failure-tolerance-percentage ()
  'common-lisp:integer)
(common-lisp:deftype stack-set-max-concurrency-count () 'common-lisp:integer)
(common-lisp:deftype stack-set-max-concurrency-percentage ()
  'common-lisp:integer)
(common-lisp:deftype stack-set-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-regions () '(trivial-types:proper-list region))
 (common-lisp:defun |make-stack-set-regions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-detail () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype successful-shares ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-successful-shares|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype support-description () 'common-lisp:string)
(common-lisp:deftype support-email () 'common-lisp:string)
(common-lisp:deftype support-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-option-active () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass tag-option-detail common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %tag-option-detail-owner :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor %tag-option-detail-id :initform
                         common-lisp:nil)
                        (active :initarg :active :type
                         (common-lisp:or tag-option-active common-lisp:null)
                         :accessor %tag-option-detail-active :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or tag-option-value common-lisp:null)
                         :accessor %tag-option-detail-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-option-key common-lisp:null)
                         :accessor %tag-option-detail-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-option-detail 'make-tag-option-detail))
 (common-lisp:defun make-tag-option-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner id active value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-option-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-option-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-option-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-option-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-option-details ()
   '(trivial-types:proper-list tag-option-detail))
 (common-lisp:defun |make-tag-option-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-option-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-option-id () 'common-lisp:string)
(common-lisp:deftype tag-option-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition tag-option-not-migrated-exception
     (servicecatalog-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-option-not-migrated-exception)))
(common-lisp:progn
 (common-lisp:deftype tag-option-summaries ()
   '(trivial-types:proper-list tag-option-summary))
 (common-lisp:defun |make-tag-option-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-option-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-option-summary common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or tag-option-values common-lisp:null)
                         :accessor %tag-option-summary-values :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-option-key common-lisp:null)
                         :accessor %tag-option-summary-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-option-summary 'make-tag-option-summary))
 (common-lisp:defun make-tag-option-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-option-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-option-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-option-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-option-summary))
   common-lisp:nil))
(common-lisp:deftype tag-option-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-option-values ()
   '(trivial-types:proper-list tag-option-value))
 (common-lisp:defun |make-tag-option-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-option-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass terminate-provisioned-product-input common-lisp:nil
                       ((retain-physical-resources :initarg
                         :retain-physical-resources :type
                         (common-lisp:or retain-physical-resources
                                         common-lisp:null)
                         :accessor
                         %terminate-provisioned-product-input-retain-physical-resources
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %terminate-provisioned-product-input-accept-language
                         :initform common-lisp:nil)
                        (ignore-errors :initarg :ignore-errors :type
                         (common-lisp:or ignore-errors common-lisp:null)
                         :accessor
                         %terminate-provisioned-product-input-ignore-errors
                         :initform common-lisp:nil)
                        (terminate-token :initarg :terminate-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %terminate-provisioned-product-input-terminate-token
                         :initform
                         (common-lisp:error ":terminate-token is required"))
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %terminate-provisioned-product-input-provisioned-product-id
                         :initform common-lisp:nil)
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %terminate-provisioned-product-input-provisioned-product-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-provisioned-product-input
                    'make-terminate-provisioned-product-input))
 (common-lisp:defun make-terminate-provisioned-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retain-physical-resources accept-language
                     ignore-errors terminate-token provisioned-product-id
                     provisioned-product-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-provisioned-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-provisioned-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-provisioned-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-token))
      (common-lisp:list
       (common-lisp:cons "TerminateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-errors))
      (common-lisp:list
       (common-lisp:cons "IgnoreErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-physical-resources))
      (common-lisp:list
       (common-lisp:cons "RetainPhysicalResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-provisioned-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-provisioned-product-output common-lisp:nil
                       ((record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor
                         %terminate-provisioned-product-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-provisioned-product-output
                    'make-terminate-provisioned-product-output))
 (common-lisp:defun make-terminate-provisioned-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-provisioned-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-provisioned-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-provisioned-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-provisioned-product-output))
   common-lisp:nil))
(common-lisp:deftype total-results-count () 'common-lisp:integer)
(common-lisp:deftype unique-tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unique-tag-resource-identifier common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or unique-tag-value common-lisp:null)
                         :accessor %unique-tag-resource-identifier-value
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or unique-tag-key common-lisp:null)
                         :accessor %unique-tag-resource-identifier-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unique-tag-resource-identifier
                    'make-unique-tag-resource-identifier))
 (common-lisp:defun make-unique-tag-resource-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'unique-tag-resource-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unique-tag-resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unique-tag-resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unique-tag-resource-identifier))
   common-lisp:nil))
(common-lisp:deftype unique-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-constraint-input common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or constraint-parameters
                                         common-lisp:null)
                         :accessor %update-constraint-input-parameters
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or constraint-description
                                         common-lisp:null)
                         :accessor %update-constraint-input-description
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-constraint-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %update-constraint-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-constraint-input 'make-update-constraint-input))
 (common-lisp:defun make-update-constraint-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters description id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'update-constraint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-constraint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-constraint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-constraint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-constraint-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %update-constraint-output-status :initform
                         common-lisp:nil)
                        (constraint-parameters :initarg :constraint-parameters
                         :type
                         (common-lisp:or constraint-parameters
                                         common-lisp:null)
                         :accessor
                         %update-constraint-output-constraint-parameters
                         :initform common-lisp:nil)
                        (constraint-detail :initarg :constraint-detail :type
                         (common-lisp:or constraint-detail common-lisp:null)
                         :accessor %update-constraint-output-constraint-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-constraint-output 'make-update-constraint-output))
 (common-lisp:defun make-update-constraint-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status constraint-parameters
                     constraint-detail)
   (common-lisp:apply #'common-lisp:make-instance 'update-constraint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-constraint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-constraint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraint-detail))
      (common-lisp:list
       (common-lisp:cons "ConstraintDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-parameters))
      (common-lisp:list
       (common-lisp:cons "ConstraintParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-constraint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portfolio-input common-lisp:nil
                       ((remove-tags :initarg :remove-tags :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %update-portfolio-input-remove-tags :initform
                         common-lisp:nil)
                        (add-tags :initarg :add-tags :type
                         (common-lisp:or add-tags common-lisp:null) :accessor
                         %update-portfolio-input-add-tags :initform
                         common-lisp:nil)
                        (provider-name :initarg :provider-name :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor %update-portfolio-input-provider-name
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or portfolio-description
                                         common-lisp:null)
                         :accessor %update-portfolio-input-description
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or portfolio-display-name
                                         common-lisp:null)
                         :accessor %update-portfolio-input-display-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-portfolio-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %update-portfolio-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-portfolio-input 'make-update-portfolio-input))
 (common-lisp:defun make-update-portfolio-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-tags add-tags provider-name
                     description display-name id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'update-portfolio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-tags))
      (common-lisp:list
       (common-lisp:cons "AddTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-tags))
      (common-lisp:list
       (common-lisp:cons "RemoveTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portfolio-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-portfolio-output-tags :initform
                         common-lisp:nil)
                        (portfolio-detail :initarg :portfolio-detail :type
                         (common-lisp:or portfolio-detail common-lisp:null)
                         :accessor %update-portfolio-output-portfolio-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-portfolio-output 'make-update-portfolio-output))
 (common-lisp:defun make-update-portfolio-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags portfolio-detail)
   (common-lisp:apply #'common-lisp:make-instance 'update-portfolio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-detail))
      (common-lisp:list
       (common-lisp:cons "PortfolioDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portfolio-share-input common-lisp:nil
                       ((share-principals :initarg :share-principals :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %update-portfolio-share-input-share-principals
                         :initform common-lisp:nil)
                        (share-tag-options :initarg :share-tag-options :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %update-portfolio-share-input-share-tag-options
                         :initform common-lisp:nil)
                        (organization-node :initarg :organization-node :type
                         (common-lisp:or organization-node common-lisp:null)
                         :accessor
                         %update-portfolio-share-input-organization-node
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-portfolio-share-input-account-id :initform
                         common-lisp:nil)
                        (portfolio-id :initarg :portfolio-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-portfolio-share-input-portfolio-id :initform
                         (common-lisp:error ":portfolio-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %update-portfolio-share-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-portfolio-share-input
                    'make-update-portfolio-share-input))
 (common-lisp:defun make-update-portfolio-share-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-principals share-tag-options
                     organization-node account-id portfolio-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'update-portfolio-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portfolio-id))
      (common-lisp:list
       (common-lisp:cons "PortfolioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-node))
      (common-lisp:list
       (common-lisp:cons "OrganizationNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-tag-options))
      (common-lisp:list
       (common-lisp:cons "ShareTagOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-principals))
      (common-lisp:list
       (common-lisp:cons "SharePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portfolio-share-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor %update-portfolio-share-output-status
                         :initform common-lisp:nil)
                        (portfolio-share-token :initarg :portfolio-share-token
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %update-portfolio-share-output-portfolio-share-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-portfolio-share-output
                    'make-update-portfolio-share-output))
 (common-lisp:defun make-update-portfolio-share-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status portfolio-share-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-portfolio-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portfolio-share-token))
      (common-lisp:list
       (common-lisp:cons "PortfolioShareToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portfolio-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-product-input common-lisp:nil
                       ((source-connection :initarg :source-connection :type
                         (common-lisp:or source-connection common-lisp:null)
                         :accessor %update-product-input-source-connection
                         :initform common-lisp:nil)
                        (remove-tags :initarg :remove-tags :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %update-product-input-remove-tags :initform
                         common-lisp:nil)
                        (add-tags :initarg :add-tags :type
                         (common-lisp:or add-tags common-lisp:null) :accessor
                         %update-product-input-add-tags :initform
                         common-lisp:nil)
                        (support-url :initarg :support-url :type
                         (common-lisp:or support-url common-lisp:null)
                         :accessor %update-product-input-support-url :initform
                         common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or support-email common-lisp:null)
                         :accessor %update-product-input-support-email
                         :initform common-lisp:nil)
                        (support-description :initarg :support-description
                         :type
                         (common-lisp:or support-description common-lisp:null)
                         :accessor %update-product-input-support-description
                         :initform common-lisp:nil)
                        (distributor :initarg :distributor :type
                         (common-lisp:or product-view-owner common-lisp:null)
                         :accessor %update-product-input-distributor :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or product-view-short-description
                                         common-lisp:null)
                         :accessor %update-product-input-description :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or product-view-owner common-lisp:null)
                         :accessor %update-product-input-owner :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor %update-product-input-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-product-input-id :initform
                         (common-lisp:error ":id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %update-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-product-input 'make-update-product-input))
 (common-lisp:defun make-update-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-connection remove-tags add-tags
                     support-url support-email support-description distributor
                     description owner name id accept-language)
   (common-lisp:apply #'common-lisp:make-instance 'update-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor))
      (common-lisp:list
       (common-lisp:cons "Distributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-description))
      (common-lisp:list
       (common-lisp:cons "SupportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-url))
      (common-lisp:list
       (common-lisp:cons "SupportUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-tags))
      (common-lisp:list
       (common-lisp:cons "AddTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-tags))
      (common-lisp:list
       (common-lisp:cons "RemoveTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-connection))
      (common-lisp:list
       (common-lisp:cons "SourceConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-product-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-product-output-tags :initform common-lisp:nil)
                        (product-view-detail :initarg :product-view-detail
                         :type
                         (common-lisp:or product-view-detail common-lisp:null)
                         :accessor %update-product-output-product-view-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-product-output 'make-update-product-output))
 (common-lisp:defun make-update-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags product-view-detail)
   (common-lisp:apply #'common-lisp:make-instance 'update-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-view-detail))
      (common-lisp:list
       (common-lisp:cons "ProductViewDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioned-product-input common-lisp:nil
                       ((update-token :initarg :update-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-update-token
                         :initform
                         (common-lisp:error ":update-token is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-provisioned-product-input-tags :initform
                         common-lisp:nil)
                        (provisioning-preferences :initarg
                         :provisioning-preferences :type
                         (common-lisp:or update-provisioning-preferences
                                         common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-provisioning-preferences
                         :initform common-lisp:nil)
                        (provisioning-parameters :initarg
                         :provisioning-parameters :type
                         (common-lisp:or update-provisioning-parameters
                                         common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-provisioning-parameters
                         :initform common-lisp:nil)
                        (path-name :initarg :path-name :type
                         (common-lisp:or portfolio-display-name
                                         common-lisp:null)
                         :accessor %update-provisioned-product-input-path-name
                         :initform common-lisp:nil)
                        (path-id :initarg :path-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-input-path-id :initform
                         common-lisp:nil)
                        (provisioning-artifact-name :initarg
                         :provisioning-artifact-name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-provisioning-artifact-name
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-input-provisioning-artifact-id
                         :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or product-view-name common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-product-name
                         :initform common-lisp:nil)
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-input-product-id :initform
                         common-lisp:nil)
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-input-provisioned-product-id
                         :initform common-lisp:nil)
                        (provisioned-product-name :initarg
                         :provisioned-product-name :type
                         (common-lisp:or provisioned-product-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-provisioned-product-name
                         :initform common-lisp:nil)
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %update-provisioned-product-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioned-product-input
                    'make-update-provisioned-product-input))
 (common-lisp:defun make-update-provisioned-product-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-token tags
                     provisioning-preferences provisioning-parameters path-name
                     path-id provisioning-artifact-name
                     provisioning-artifact-id product-name product-id
                     provisioned-product-id provisioned-product-name
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioned-product-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-name))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-name))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-name))
      (common-lisp:list
       (common-lisp:cons "PathName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-preferences))
      (common-lisp:list
       (common-lisp:cons "ProvisioningPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-token))
      (common-lisp:list
       (common-lisp:cons "UpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioned-product-output common-lisp:nil
                       ((record-detail :initarg :record-detail :type
                         (common-lisp:or record-detail common-lisp:null)
                         :accessor
                         %update-provisioned-product-output-record-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioned-product-output
                    'make-update-provisioned-product-output))
 (common-lisp:defun make-update-provisioned-product-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioned-product-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-detail))
      (common-lisp:list
       (common-lisp:cons "RecordDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioned-product-properties-input
                       common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %update-provisioned-product-properties-input-idempotency-token
                         :initform
                         (common-lisp:error ":idempotency-token is required"))
                        (provisioned-product-properties :initarg
                         :provisioned-product-properties :type
                         (common-lisp:or provisioned-product-properties
                                         common-lisp:null)
                         :accessor
                         %update-provisioned-product-properties-input-provisioned-product-properties
                         :initform
                         (common-lisp:error
                          ":provisioned-product-properties is required"))
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-properties-input-provisioned-product-id
                         :initform
                         (common-lisp:error
                          ":provisioned-product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %update-provisioned-product-properties-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioned-product-properties-input
                    'make-update-provisioned-product-properties-input))
 (common-lisp:defun make-update-provisioned-product-properties-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token
                     provisioned-product-properties provisioned-product-id
                     accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioned-product-properties-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-properties-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-properties-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-properties))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-properties-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioned-product-properties-output
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or record-status common-lisp:null)
                         :accessor
                         %update-provisioned-product-properties-output-status
                         :initform common-lisp:nil)
                        (record-id :initarg :record-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-properties-output-record-id
                         :initform common-lisp:nil)
                        (provisioned-product-properties :initarg
                         :provisioned-product-properties :type
                         (common-lisp:or provisioned-product-properties
                                         common-lisp:null)
                         :accessor
                         %update-provisioned-product-properties-output-provisioned-product-properties
                         :initform common-lisp:nil)
                        (provisioned-product-id :initarg
                         :provisioned-product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioned-product-properties-output-provisioned-product-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioned-product-properties-output
                    'make-update-provisioned-product-properties-output))
 (common-lisp:defun make-update-provisioned-product-properties-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status record-id
                     provisioned-product-properties provisioned-product-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioned-product-properties-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-properties-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-properties-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-properties))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-id))
      (common-lisp:list
       (common-lisp:cons "RecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioned-product-properties-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioning-artifact-input common-lisp:nil
                       ((guidance :initarg :guidance :type
                         (common-lisp:or provisioning-artifact-guidance
                                         common-lisp:null)
                         :accessor %update-provisioning-artifact-input-guidance
                         :initform common-lisp:nil)
                        (active :initarg :active :type
                         (common-lisp:or provisioning-artifact-active
                                         common-lisp:null)
                         :accessor %update-provisioning-artifact-input-active
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or provisioning-artifact-description
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-artifact-input-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or provisioning-artifact-name
                                         common-lisp:null)
                         :accessor %update-provisioning-artifact-input-name
                         :initform common-lisp:nil)
                        (provisioning-artifact-id :initarg
                         :provisioning-artifact-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioning-artifact-input-provisioning-artifact-id
                         :initform
                         (common-lisp:error
                          ":provisioning-artifact-id is required"))
                        (product-id :initarg :product-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-provisioning-artifact-input-product-id
                         :initform
                         (common-lisp:error ":product-id is required"))
                        (accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor
                         %update-provisioning-artifact-input-accept-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-artifact-input
                    'make-update-provisioning-artifact-input))
 (common-lisp:defun make-update-provisioning-artifact-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key guidance active description name
                     provisioning-artifact-id product-id accept-language)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioning-artifact-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-artifact-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-artifact-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'guidance))
      (common-lisp:list
       (common-lisp:cons "Guidance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-artifact-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioning-artifact-output common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %update-provisioning-artifact-output-status :initform
                         common-lisp:nil)
                        (info :initarg :info :type
                         (common-lisp:or provisioning-artifact-info
                                         common-lisp:null)
                         :accessor %update-provisioning-artifact-output-info
                         :initform common-lisp:nil)
                        (provisioning-artifact-detail :initarg
                         :provisioning-artifact-detail :type
                         (common-lisp:or provisioning-artifact-detail
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-artifact-output-provisioning-artifact-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-artifact-output
                    'make-update-provisioning-artifact-output))
 (common-lisp:defun make-update-provisioning-artifact-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status info provisioning-artifact-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioning-artifact-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-artifact-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-artifact-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-detail))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-artifact-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioning-parameter common-lisp:nil
                       ((use-previous-value :initarg :use-previous-value :type
                         (common-lisp:or use-previous-value common-lisp:null)
                         :accessor
                         %update-provisioning-parameter-use-previous-value
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %update-provisioning-parameter-value
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor %update-provisioning-parameter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-parameter
                    'make-update-provisioning-parameter))
 (common-lisp:defun make-update-provisioning-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-previous-value value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioning-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-previous-value))
      (common-lisp:list
       (common-lisp:cons "UsePreviousValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-provisioning-parameters ()
   '(trivial-types:proper-list update-provisioning-parameter))
 (common-lisp:defun |make-update-provisioning-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-provisioning-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-provisioning-preferences common-lisp:nil
                       ((stack-set-operation-type :initarg
                         :stack-set-operation-type :type
                         (common-lisp:or stack-set-operation-type
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-operation-type
                         :initform common-lisp:nil)
                        (stack-set-max-concurrency-percentage :initarg
                         :stack-set-max-concurrency-percentage :type
                         (common-lisp:or stack-set-max-concurrency-percentage
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-max-concurrency-percentage
                         :initform common-lisp:nil)
                        (stack-set-max-concurrency-count :initarg
                         :stack-set-max-concurrency-count :type
                         (common-lisp:or stack-set-max-concurrency-count
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-max-concurrency-count
                         :initform common-lisp:nil)
                        (stack-set-failure-tolerance-percentage :initarg
                         :stack-set-failure-tolerance-percentage :type
                         (common-lisp:or stack-set-failure-tolerance-percentage
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-failure-tolerance-percentage
                         :initform common-lisp:nil)
                        (stack-set-failure-tolerance-count :initarg
                         :stack-set-failure-tolerance-count :type
                         (common-lisp:or stack-set-failure-tolerance-count
                                         common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-failure-tolerance-count
                         :initform common-lisp:nil)
                        (stack-set-regions :initarg :stack-set-regions :type
                         (common-lisp:or stack-set-regions common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-regions
                         :initform common-lisp:nil)
                        (stack-set-accounts :initarg :stack-set-accounts :type
                         (common-lisp:or stack-set-accounts common-lisp:null)
                         :accessor
                         %update-provisioning-preferences-stack-set-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-preferences
                    'make-update-provisioning-preferences))
 (common-lisp:defun make-update-provisioning-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-set-operation-type
                     stack-set-max-concurrency-percentage
                     stack-set-max-concurrency-count
                     stack-set-failure-tolerance-percentage
                     stack-set-failure-tolerance-count stack-set-regions
                     stack-set-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioning-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-accounts))
      (common-lisp:list
       (common-lisp:cons "StackSetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-regions))
      (common-lisp:list
       (common-lisp:cons "StackSetRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-failure-tolerance-count))
      (common-lisp:list
       (common-lisp:cons "StackSetFailureToleranceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-failure-tolerance-percentage))
      (common-lisp:list
       (common-lisp:cons "StackSetFailureTolerancePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-max-concurrency-count))
      (common-lisp:list
       (common-lisp:cons "StackSetMaxConcurrencyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-max-concurrency-percentage))
      (common-lisp:list
       (common-lisp:cons "StackSetMaxConcurrencyPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-operation-type))
      (common-lisp:list
       (common-lisp:cons "StackSetOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-preferences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-action-input common-lisp:nil
                       ((accept-language :initarg :accept-language :type
                         (common-lisp:or accept-language common-lisp:null)
                         :accessor %update-service-action-input-accept-language
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or service-action-description
                                         common-lisp:null)
                         :accessor %update-service-action-input-description
                         :initform common-lisp:nil)
                        (definition :initarg :definition :type
                         (common-lisp:or service-action-definition-map
                                         common-lisp:null)
                         :accessor %update-service-action-input-definition
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or service-action-name common-lisp:null)
                         :accessor %update-service-action-input-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-service-action-input-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-service-action-input
                    'make-update-service-action-input))
 (common-lisp:defun make-update-service-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-language description definition
                     name id)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-language))
      (common-lisp:list
       (common-lisp:cons "AcceptLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-action-output common-lisp:nil
                       ((service-action-detail :initarg :service-action-detail
                         :type
                         (common-lisp:or service-action-detail
                                         common-lisp:null)
                         :accessor
                         %update-service-action-output-service-action-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-service-action-output
                    'make-update-service-action-output))
 (common-lisp:defun make-update-service-action-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-action-detail)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-action-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-action-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-action-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-action-detail))
      (common-lisp:list
       (common-lisp:cons "ServiceActionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-action-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-tag-option-input common-lisp:nil
                       ((active :initarg :active :type
                         (common-lisp:or tag-option-active common-lisp:null)
                         :accessor %update-tag-option-input-active :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or tag-option-value common-lisp:null)
                         :accessor %update-tag-option-input-value :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or tag-option-id common-lisp:null)
                         :accessor %update-tag-option-input-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-tag-option-input 'make-update-tag-option-input))
 (common-lisp:defun make-update-tag-option-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active value id)
   (common-lisp:apply #'common-lisp:make-instance 'update-tag-option-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-option-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-option-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-option-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-tag-option-output common-lisp:nil
                       ((tag-option-detail :initarg :tag-option-detail :type
                         (common-lisp:or tag-option-detail common-lisp:null)
                         :accessor %update-tag-option-output-tag-option-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-tag-option-output 'make-update-tag-option-output))
 (common-lisp:defun make-update-tag-option-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-option-detail)
   (common-lisp:apply #'common-lisp:make-instance 'update-tag-option-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-option-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-option-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-option-detail))
      (common-lisp:list
       (common-lisp:cons "TagOptionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-option-output))
   common-lisp:nil))
(common-lisp:deftype updated-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-instruction common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or instruction-value common-lisp:null)
                         :accessor %usage-instruction-value :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or instruction-type common-lisp:null)
                         :accessor %usage-instruction-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'usage-instruction 'make-usage-instruction))
 (common-lisp:defun make-usage-instruction
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'usage-instruction
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-instruction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-instruction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-instruction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-instructions ()
   '(trivial-types:proper-list usage-instruction))
 (common-lisp:defun |make-usage-instructions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-instruction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype use-previous-value () 'common-lisp:boolean)
(common-lisp:deftype user-arn () 'common-lisp:string)
(common-lisp:deftype user-arn-session () 'common-lisp:string)
(common-lisp:deftype verbose () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun accept-portfolio-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id
                     portfolio-share-type)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id portfolio-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-portfolio-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AcceptPortfolioShare"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-portfolio-share))
(common-lisp:progn
 (common-lisp:defun associate-budget-with-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key budget-name resource-id)
   (common-lisp:declare (common-lisp:ignorable budget-name resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-budget-with-resource-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateBudgetWithResource"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-budget-with-resource))
(common-lisp:progn
 (common-lisp:defun associate-principal-with-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id
                     principal-arn principal-type)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id principal-arn
     principal-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-principal-with-portfolio-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociatePrincipalWithPortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-principal-with-portfolio))
(common-lisp:progn
 (common-lisp:defun associate-product-with-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id portfolio-id
                     source-portfolio-id)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id portfolio-id
     source-portfolio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-product-with-portfolio-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateProductWithPortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-product-with-portfolio))
(common-lisp:progn
 (common-lisp:defun associate-service-action-with-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-id provisioning-artifact-id
                     service-action-id accept-language)
   (common-lisp:declare
    (common-lisp:ignorable product-id provisioning-artifact-id
     service-action-id accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-service-action-with-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateServiceActionWithProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-service-action-with-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun associate-tag-option-with-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-option-id)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-option-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-tag-option-with-resource-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateTagOptionWithResource"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-tag-option-with-resource))
(common-lisp:progn
 (common-lisp:defun batch-associate-service-action-with-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-action-associations
                     accept-language)
   (common-lisp:declare
    (common-lisp:ignorable service-action-associations accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-service-action-with-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchAssociateServiceActionWithProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export
  'batch-associate-service-action-with-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-service-action-from-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-action-associations
                     accept-language)
   (common-lisp:declare
    (common-lisp:ignorable service-action-associations accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-service-action-from-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchDisassociateServiceActionFromProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export
  'batch-disassociate-service-action-from-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun copy-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language source-product-arn
                     target-product-id target-product-name
                     source-provisioning-artifact-identifiers copy-options
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language source-product-arn target-product-id
     target-product-name source-provisioning-artifact-identifiers copy-options
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CopyProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-product))
(common-lisp:progn
 (common-lisp:defun create-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id product-id
                     parameters type description idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id product-id parameters
     type description idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-constraint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConstraint"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-constraint))
(common-lisp:progn
 (common-lisp:defun create-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language display-name description
                     provider-name tags idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language display-name description
     provider-name tags idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-portfolio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-portfolio))
(common-lisp:progn
 (common-lisp:defun create-portfolio-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id account-id
                     organization-node share-tag-options share-principals)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id account-id
     organization-node share-tag-options share-principals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-portfolio-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePortfolioShare"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-portfolio-share))
(common-lisp:progn
 (common-lisp:defun create-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language name owner description
                     distributor support-description support-email support-url
                     product-type tags provisioning-artifact-parameters
                     idempotency-token source-connection)
   (common-lisp:declare
    (common-lisp:ignorable accept-language name owner description distributor
     support-description support-email support-url product-type tags
     provisioning-artifact-parameters idempotency-token source-connection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-product))
(common-lisp:progn
 (common-lisp:defun create-provisioned-product-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language plan-name plan-type
                     notification-arns path-id product-id
                     provisioned-product-name provisioning-artifact-id
                     provisioning-parameters idempotency-token tags)
   (common-lisp:declare
    (common-lisp:ignorable accept-language plan-name plan-type
     notification-arns path-id product-id provisioned-product-name
     provisioning-artifact-id provisioning-parameters idempotency-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioned-product-plan-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateProvisionedProductPlan"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-provisioned-product-plan))
(common-lisp:progn
 (common-lisp:defun create-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id parameters
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id parameters
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun create-service-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name definition-type definition
                     description accept-language idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable name definition-type definition description
     accept-language idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-action-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateServiceAction"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-action))
(common-lisp:progn
 (common-lisp:defun create-tag-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key value)
   (common-lisp:declare (common-lisp:ignorable key value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tag-option-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateTagOption"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tag-option))
(common-lisp:progn
 (common-lisp:defun delete-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id)
   (common-lisp:declare (common-lisp:ignorable accept-language id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-constraint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConstraint"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-constraint))
(common-lisp:progn
 (common-lisp:defun delete-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id)
   (common-lisp:declare (common-lisp:ignorable accept-language id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-portfolio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-portfolio))
(common-lisp:progn
 (common-lisp:defun delete-portfolio-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id account-id
                     organization-node)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id account-id
     organization-node))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-portfolio-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePortfolioShare"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-portfolio-share))
(common-lisp:progn
 (common-lisp:defun delete-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id)
   (common-lisp:declare (common-lisp:ignorable accept-language id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-product))
(common-lisp:progn
 (common-lisp:defun delete-provisioned-product-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language plan-id ignore-errors)
   (common-lisp:declare
    (common-lisp:ignorable accept-language plan-id ignore-errors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioned-product-plan-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteProvisionedProductPlan"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-provisioned-product-plan))
(common-lisp:progn
 (common-lisp:defun delete-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id
                     provisioning-artifact-id)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id
     provisioning-artifact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun delete-service-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id accept-language)
   (common-lisp:declare (common-lisp:ignorable id accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-action-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteServiceAction"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-action))
(common-lisp:progn
 (common-lisp:defun delete-tag-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tag-option-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTagOption"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tag-option))
(common-lisp:progn
 (common-lisp:defun describe-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id)
   (common-lisp:declare (common-lisp:ignorable accept-language id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-constraint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConstraint"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-constraint))
(common-lisp:progn
 (common-lisp:defun describe-copy-product-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language copy-product-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language copy-product-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-copy-product-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCopyProductStatus"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-copy-product-status))
(common-lisp:progn
 (common-lisp:defun describe-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id)
   (common-lisp:declare (common-lisp:ignorable accept-language id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-portfolio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-portfolio))
(common-lisp:progn
 (common-lisp:defun describe-portfolio-share-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portfolio-share-token)
   (common-lisp:declare (common-lisp:ignorable portfolio-share-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-portfolio-share-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePortfolioShareStatus"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-portfolio-share-status))
(common-lisp:progn
 (common-lisp:defun describe-portfolio-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portfolio-id type page-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable portfolio-id type page-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-portfolio-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePortfolioShares"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-portfolio-shares))
(common-lisp:progn
 (common-lisp:defun describe-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id name)
   (common-lisp:declare (common-lisp:ignorable accept-language id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-product))
(common-lisp:progn
 (common-lisp:defun describe-product-as-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id name
                     source-portfolio-id)
   (common-lisp:declare
    (common-lisp:ignorable accept-language id name source-portfolio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-product-as-admin-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProductAsAdmin"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-product-as-admin))
(common-lisp:progn
 (common-lisp:defun describe-product-view
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id)
   (common-lisp:declare (common-lisp:ignorable accept-language id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-product-view-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProductView"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-product-view))
(common-lisp:progn
 (common-lisp:defun describe-provisioned-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id name)
   (common-lisp:declare (common-lisp:ignorable accept-language id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioned-product-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProvisionedProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-provisioned-product))
(common-lisp:progn
 (common-lisp:defun describe-provisioned-product-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language plan-id page-size
                     page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language plan-id page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioned-product-plan-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProvisionedProductPlan"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-provisioned-product-plan))
(common-lisp:progn
 (common-lisp:defun describe-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language provisioning-artifact-id
                     product-id provisioning-artifact-name product-name
                     verbose)
   (common-lisp:declare
    (common-lisp:ignorable accept-language provisioning-artifact-id product-id
     provisioning-artifact-name product-name verbose))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun describe-provisioning-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id product-name
                     provisioning-artifact-id provisioning-artifact-name
                     path-id path-name)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id product-name
     provisioning-artifact-id provisioning-artifact-name path-id path-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioning-parameters-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProvisioningParameters"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-provisioning-parameters))
(common-lisp:progn
 (common-lisp:defun describe-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id page-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable accept-language id page-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-record-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeRecord"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-record))
(common-lisp:progn
 (common-lisp:defun describe-service-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id accept-language)
   (common-lisp:declare (common-lisp:ignorable id accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-action-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeServiceAction"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-service-action))
(common-lisp:progn
 (common-lisp:defun describe-service-action-execution-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provisioned-product-id service-action-id
                     accept-language)
   (common-lisp:declare
    (common-lisp:ignorable provisioned-product-id service-action-id
     accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-service-action-execution-parameters-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeServiceActionExecutionParameters"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-service-action-execution-parameters))
(common-lisp:progn
 (common-lisp:defun describe-tag-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tag-option-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTagOption"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tag-option))
(common-lisp:progn
 (common-lisp:defun disable-awsorganizations-access ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'servicecatalog-request :method "POST" :path
                                "/" :protocol :json :operation
                                "DisableAWSOrganizationsAccess" :params
                                `(("Action" ,@"DisableAWSOrganizationsAccess")
                                  ("Version" ,@"2015-12-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-awsorganizations-access))
(common-lisp:progn
 (common-lisp:defun disassociate-budget-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key budget-name resource-id)
   (common-lisp:declare (common-lisp:ignorable budget-name resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-budget-from-resource-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateBudgetFromResource"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-budget-from-resource))
(common-lisp:progn
 (common-lisp:defun disassociate-principal-from-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id
                     principal-arn principal-type)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id principal-arn
     principal-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-principal-from-portfolio-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociatePrincipalFromPortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-principal-from-portfolio))
(common-lisp:progn
 (common-lisp:defun disassociate-product-from-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id portfolio-id)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id portfolio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-product-from-portfolio-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateProductFromPortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-product-from-portfolio))
(common-lisp:progn
 (common-lisp:defun disassociate-service-action-from-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-id provisioning-artifact-id
                     service-action-id accept-language)
   (common-lisp:declare
    (common-lisp:ignorable product-id provisioning-artifact-id
     service-action-id accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-service-action-from-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateServiceActionFromProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-service-action-from-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun disassociate-tag-option-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-option-id)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-option-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-tag-option-from-resource-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateTagOptionFromResource"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-tag-option-from-resource))
(common-lisp:progn
 (common-lisp:defun enable-awsorganizations-access ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'servicecatalog-request :method "POST" :path
                                "/" :protocol :json :operation
                                "EnableAWSOrganizationsAccess" :params
                                `(("Action" ,@"EnableAWSOrganizationsAccess")
                                  ("Version" ,@"2015-12-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'enable-awsorganizations-access))
(common-lisp:progn
 (common-lisp:defun execute-provisioned-product-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language plan-id
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language plan-id idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-execute-provisioned-product-plan-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ExecuteProvisionedProductPlan"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-provisioned-product-plan))
(common-lisp:progn
 (common-lisp:defun execute-provisioned-product-service-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provisioned-product-id service-action-id
                     execute-token accept-language parameters)
   (common-lisp:declare
    (common-lisp:ignorable provisioned-product-id service-action-id
     execute-token accept-language parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-execute-provisioned-product-service-action-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ExecuteProvisionedProductServiceAction"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-provisioned-product-service-action))
(common-lisp:progn
 (common-lisp:defun get-awsorganizations-access-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'servicecatalog-request :method "POST" :path
                                "/" :protocol :json :operation
                                "GetAWSOrganizationsAccessStatus" :params
                                `(("Action"
                                   ,@"GetAWSOrganizationsAccessStatus")
                                  ("Version" ,@"2015-12-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-awsorganizations-access-status))
(common-lisp:progn
 (common-lisp:defun get-provisioned-product-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language provisioned-product-id
                     provisioned-product-name output-keys page-size page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language provisioned-product-id
     provisioned-product-name output-keys page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-provisioned-product-outputs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetProvisionedProductOutputs"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-provisioned-product-outputs))
(common-lisp:progn
 (common-lisp:defun import-as-provisioned-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id
                     provisioning-artifact-id provisioned-product-name
                     physical-id idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id provisioning-artifact-id
     provisioned-product-name physical-id idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-import-as-provisioned-product-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportAsProvisionedProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-as-provisioned-product))
(common-lisp:progn
 (common-lisp:defun list-accepted-portfolio-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language page-token page-size
                     portfolio-share-type)
   (common-lisp:declare
    (common-lisp:ignorable accept-language page-token page-size
     portfolio-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-accepted-portfolio-shares-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAcceptedPortfolioShares"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accepted-portfolio-shares))
(common-lisp:progn
 (common-lisp:defun list-budgets-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language resource-id page-size
                     page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language resource-id page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-budgets-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListBudgetsForResource"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-budgets-for-resource))
(common-lisp:progn
 (common-lisp:defun list-constraints-for-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id product-id
                     page-size page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id product-id page-size
     page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-constraints-for-portfolio-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListConstraintsForPortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-constraints-for-portfolio))
(common-lisp:progn
 (common-lisp:defun list-launch-paths
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id page-size
                     page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-launch-paths-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListLaunchPaths"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launch-paths))
(common-lisp:progn
 (common-lisp:defun list-organization-portfolio-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id
                     organization-node-type page-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id organization-node-type
     page-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-portfolio-access-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOrganizationPortfolioAccess"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organization-portfolio-access))
(common-lisp:progn
 (common-lisp:defun list-portfolio-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id
                     organization-parent-id page-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id organization-parent-id
     page-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-portfolio-access-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPortfolioAccess"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-portfolio-access))
(common-lisp:progn
 (common-lisp:defun list-portfolios
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language page-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable accept-language page-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-portfolios-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPortfolios"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-portfolios))
(common-lisp:progn
 (common-lisp:defun list-portfolios-for-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id page-token
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id page-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-portfolios-for-product-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPortfoliosForProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-portfolios-for-product))
(common-lisp:progn
 (common-lisp:defun list-principals-for-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id page-size
                     page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-principals-for-portfolio-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPrincipalsForPortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-principals-for-portfolio))
(common-lisp:progn
 (common-lisp:defun list-provisioned-product-plans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language provision-product-id
                     page-size page-token access-level-filter)
   (common-lisp:declare
    (common-lisp:ignorable accept-language provision-product-id page-size
     page-token access-level-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioned-product-plans-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListProvisionedProductPlans"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-provisioned-product-plans))
(common-lisp:progn
 (common-lisp:defun list-provisioning-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id)
   (common-lisp:declare (common-lisp:ignorable accept-language product-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioning-artifacts-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListProvisioningArtifacts"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-provisioning-artifacts))
(common-lisp:progn
 (common-lisp:defun list-provisioning-artifacts-for-service-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-action-id page-size page-token
                     accept-language)
   (common-lisp:declare
    (common-lisp:ignorable service-action-id page-size page-token
     accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioning-artifacts-for-service-action-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListProvisioningArtifactsForServiceAction"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-provisioning-artifacts-for-service-action))
(common-lisp:progn
 (common-lisp:defun list-record-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language access-level-filter
                     search-filter page-size page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language access-level-filter search-filter
     page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-record-history-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRecordHistory"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-record-history))
(common-lisp:progn
 (common-lisp:defun list-resources-for-tag-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tag-option-id resource-type page-size
                     page-token)
   (common-lisp:declare
    (common-lisp:ignorable tag-option-id resource-type page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resources-for-tag-option-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListResourcesForTagOption"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resources-for-tag-option))
(common-lisp:progn
 (common-lisp:defun list-service-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language page-size page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-actions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServiceActions"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-actions))
(common-lisp:progn
 (common-lisp:defun list-service-actions-for-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-id provisioning-artifact-id
                     page-size page-token accept-language)
   (common-lisp:declare
    (common-lisp:ignorable product-id provisioning-artifact-id page-size
     page-token accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-actions-for-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServiceActionsForProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-actions-for-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun list-stack-instances-for-provisioned-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language provisioned-product-id
                     page-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable accept-language provisioned-product-id page-token
     page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-stack-instances-for-provisioned-product-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListStackInstancesForProvisionedProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-stack-instances-for-provisioned-product))
(common-lisp:progn
 (common-lisp:defun list-tag-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters page-size page-token)
   (common-lisp:declare (common-lisp:ignorable filters page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tag-options-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagOptions"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tag-options))
(common-lisp:progn
 (common-lisp:defun notify-provision-product-engine-workflow-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-token record-id status
                     failure-reason resource-identifier outputs
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable workflow-token record-id status failure-reason
     resource-identifier outputs idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-provision-product-engine-workflow-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "NotifyProvisionProductEngineWorkflowResult"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'notify-provision-product-engine-workflow-result))
(common-lisp:progn
 (common-lisp:defun notify-terminate-provisioned-product-engine-workflow-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-token record-id status
                     failure-reason idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable workflow-token record-id status failure-reason
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-terminate-provisioned-product-engine-workflow-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "NotifyTerminateProvisionedProductEngineWorkflowResult"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export
  'notify-terminate-provisioned-product-engine-workflow-result))
(common-lisp:progn
 (common-lisp:defun notify-update-provisioned-product-engine-workflow-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-token record-id status
                     failure-reason outputs idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable workflow-token record-id status failure-reason
     outputs idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-update-provisioned-product-engine-workflow-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "NotifyUpdateProvisionedProductEngineWorkflowResult"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'notify-update-provisioned-product-engine-workflow-result))
(common-lisp:progn
 (common-lisp:defun provision-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id product-name
                     provisioning-artifact-id provisioning-artifact-name
                     path-id path-name provisioned-product-name
                     provisioning-parameters provisioning-preferences tags
                     notification-arns provision-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id product-name
     provisioning-artifact-id provisioning-artifact-name path-id path-name
     provisioned-product-name provisioning-parameters provisioning-preferences
     tags notification-arns provision-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provision-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ProvisionProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'provision-product))
(common-lisp:progn
 (common-lisp:defun reject-portfolio-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id
                     portfolio-share-type)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id portfolio-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-portfolio-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RejectPortfolioShare"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-portfolio-share))
(common-lisp:progn
 (common-lisp:defun scan-provisioned-products
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language access-level-filter
                     page-size page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language access-level-filter page-size
     page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-scan-provisioned-products-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ScanProvisionedProducts"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'scan-provisioned-products))
(common-lisp:progn
 (common-lisp:defun search-products
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language filters page-size sort-by
                     sort-order page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language filters page-size sort-by sort-order
     page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-products-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SearchProducts"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-products))
(common-lisp:progn
 (common-lisp:defun search-products-as-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id filters
                     sort-by sort-order page-token page-size product-source)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id filters sort-by
     sort-order page-token page-size product-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-products-as-admin-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SearchProductsAsAdmin"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-products-as-admin))
(common-lisp:progn
 (common-lisp:defun search-provisioned-products
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language access-level-filter
                     filters sort-by sort-order page-size page-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language access-level-filter filters sort-by
     sort-order page-size page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-provisioned-products-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SearchProvisionedProducts"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-provisioned-products))
(common-lisp:progn
 (common-lisp:defun terminate-provisioned-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provisioned-product-name
                     provisioned-product-id terminate-token ignore-errors
                     accept-language retain-physical-resources)
   (common-lisp:declare
    (common-lisp:ignorable provisioned-product-name provisioned-product-id
     terminate-token ignore-errors accept-language retain-physical-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-provisioned-product-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TerminateProvisionedProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-provisioned-product))
(common-lisp:progn
 (common-lisp:defun update-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id description
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable accept-language id description parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-constraint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateConstraint"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-constraint))
(common-lisp:progn
 (common-lisp:defun update-portfolio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id display-name
                     description provider-name add-tags remove-tags)
   (common-lisp:declare
    (common-lisp:ignorable accept-language id display-name description
     provider-name add-tags remove-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-portfolio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdatePortfolio"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-portfolio))
(common-lisp:progn
 (common-lisp:defun update-portfolio-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language portfolio-id account-id
                     organization-node share-tag-options share-principals)
   (common-lisp:declare
    (common-lisp:ignorable accept-language portfolio-id account-id
     organization-node share-tag-options share-principals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-portfolio-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdatePortfolioShare"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-portfolio-share))
(common-lisp:progn
 (common-lisp:defun update-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language id name owner description
                     distributor support-description support-email support-url
                     add-tags remove-tags source-connection)
   (common-lisp:declare
    (common-lisp:ignorable accept-language id name owner description
     distributor support-description support-email support-url add-tags
     remove-tags source-connection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-product))
(common-lisp:progn
 (common-lisp:defun update-provisioned-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language provisioned-product-name
                     provisioned-product-id product-id product-name
                     provisioning-artifact-id provisioning-artifact-name
                     path-id path-name provisioning-parameters
                     provisioning-preferences tags update-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language provisioned-product-name
     provisioned-product-id product-id product-name provisioning-artifact-id
     provisioning-artifact-name path-id path-name provisioning-parameters
     provisioning-preferences tags update-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-provisioned-product-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateProvisionedProduct"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-provisioned-product))
(common-lisp:progn
 (common-lisp:defun update-provisioned-product-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language provisioned-product-id
                     provisioned-product-properties idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accept-language provisioned-product-id
     provisioned-product-properties idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-provisioned-product-properties-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateProvisionedProductProperties"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-provisioned-product-properties))
(common-lisp:progn
 (common-lisp:defun update-provisioning-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-language product-id
                     provisioning-artifact-id name description active guidance)
   (common-lisp:declare
    (common-lisp:ignorable accept-language product-id provisioning-artifact-id
     name description active guidance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-provisioning-artifact-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateProvisioningArtifact"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-provisioning-artifact))
(common-lisp:progn
 (common-lisp:defun update-service-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name definition description
                     accept-language)
   (common-lisp:declare
    (common-lisp:ignorable id name definition description accept-language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-action-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateServiceAction"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-action))
(common-lisp:progn
 (common-lisp:defun update-tag-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id value active)
   (common-lisp:declare (common-lisp:ignorable id value active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-tag-option-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'servicecatalog-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateTagOption"
                                                        "2015-12-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-tag-option))
