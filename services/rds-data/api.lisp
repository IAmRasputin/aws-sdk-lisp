;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rds-data/api
  (:use)
  (:nicknames #:aws/rds-data)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/rds-data/api)
(common-lisp:progn
 (common-lisp:defclass rds-data-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "rds-data" :protocol
                        :rest-json))
 (common-lisp:export 'rds-data-request))
(common-lisp:progn
 (common-lisp:define-condition rds-data-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'rds-data-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableError" . service-unavailable-error)
    ("StatementTimeoutException" . statement-timeout-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (rds-data-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype array-of-array ()
   '(trivial-types:proper-list array-value))
 (common-lisp:defun |make-array-of-array|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list array-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass array-value common-lisp:nil
                       ((array-values :initarg :|arrayValues| :type
                         (common-lisp:or array-of-array common-lisp:null)
                         :accessor %array-value-array-values :initform
                         common-lisp:nil)
                        (string-values :initarg :|stringValues| :type
                         (common-lisp:or string-array common-lisp:null)
                         :accessor %array-value-string-values :initform
                         common-lisp:nil)
                        (double-values :initarg :|doubleValues| :type
                         (common-lisp:or double-array common-lisp:null)
                         :accessor %array-value-double-values :initform
                         common-lisp:nil)
                        (long-values :initarg :|longValues| :type
                         (common-lisp:or long-array common-lisp:null) :accessor
                         %array-value-long-values :initform common-lisp:nil)
                        (boolean-values :initarg :|booleanValues| :type
                         (common-lisp:or boolean-array common-lisp:null)
                         :accessor %array-value-boolean-values :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'array-value 'make-array-value))
 (common-lisp:defun make-array-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key array-values string-values double-values
                     long-values boolean-values)
   (common-lisp:apply #'common-lisp:make-instance 'array-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input array-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input array-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-values))
      (common-lisp:list
       (common-lisp:cons "booleanValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-values))
      (common-lisp:list
       (common-lisp:cons "longValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-values))
      (common-lisp:list
       (common-lisp:cons "doubleValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-values))
      (common-lisp:list
       (common-lisp:cons "arrayValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input array-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype array-value-list () '(trivial-types:proper-list value))
 (common-lisp:defun |make-array-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (rds-data-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-execute-statement-request common-lisp:nil
                       ((transaction-id :initarg :|transactionId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-execute-statement-request-transaction-id
                         :initform common-lisp:nil)
                        (parameter-sets :initarg :|parameterSets| :type
                         (common-lisp:or sql-parameter-sets common-lisp:null)
                         :accessor
                         %batch-execute-statement-request-parameter-sets
                         :initform common-lisp:nil)
                        (schema :initarg :|schema| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %batch-execute-statement-request-schema :initform
                         common-lisp:nil)
                        (database :initarg :|database| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %batch-execute-statement-request-database :initform
                         common-lisp:nil)
                        (sql :initarg :|sql| :type
                         (common-lisp:or sql-statement common-lisp:null)
                         :accessor %batch-execute-statement-request-sql
                         :initform (common-lisp:error ":sql is required"))
                        (secret-arn :initarg :|secretArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %batch-execute-statement-request-secret-arn :initform
                         (common-lisp:error ":secretarn is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %batch-execute-statement-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-request
                    'make-batch-execute-statement-request))
 (common-lisp:defun make-batch-execute-statement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id parameter-sets schema
                     database sql secret-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-execute-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-sets))
      (common-lisp:list
       (common-lisp:cons "parameterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-execute-statement-response common-lisp:nil
                       ((update-results :initarg :|updateResults| :type
                         (common-lisp:or update-results common-lisp:null)
                         :accessor
                         %batch-execute-statement-response-update-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-response
                    'make-batch-execute-statement-response))
 (common-lisp:defun make-batch-execute-statement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-execute-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-results))
      (common-lisp:list
       (common-lisp:cons "updateResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass begin-transaction-request common-lisp:nil
                       ((schema :initarg :|schema| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %begin-transaction-request-schema :initform
                         common-lisp:nil)
                        (database :initarg :|database| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %begin-transaction-request-database :initform
                         common-lisp:nil)
                        (secret-arn :initarg :|secretArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %begin-transaction-request-secret-arn :initform
                         (common-lisp:error ":secretarn is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %begin-transaction-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'begin-transaction-request
                    'make-begin-transaction-request))
 (common-lisp:defun make-begin-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema database secret-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'begin-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass begin-transaction-response common-lisp:nil
                       ((transaction-id :initarg :|transactionId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %begin-transaction-response-transaction-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'begin-transaction-response
                    'make-begin-transaction-response))
 (common-lisp:defun make-begin-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'begin-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-response))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype boolean-array ()
   '(trivial-types:proper-list boxed-boolean))
 (common-lisp:defun |make-boolean-array|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boxed-boolean))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-double () 'common-lisp:double-float)
(common-lisp:deftype boxed-float () 'common-lisp:single-float)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype boxed-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass column-metadata common-lisp:nil
                       ((array-base-column-type :initarg :|arrayBaseColumnType|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %column-metadata-array-base-column-type
                         :initform common-lisp:nil)
                        (scale :initarg :|scale| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %column-metadata-scale :initform common-lisp:nil)
                        (precision :initarg :|precision| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %column-metadata-precision :initform common-lisp:nil)
                        (nullable :initarg :|nullable| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %column-metadata-nullable :initform common-lisp:nil)
                        (is-case-sensitive :initarg :|isCaseSensitive| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %column-metadata-is-case-sensitive :initform
                         common-lisp:nil)
                        (is-currency :initarg :|isCurrency| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %column-metadata-is-currency :initform
                         common-lisp:nil)
                        (is-signed :initarg :|isSigned| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %column-metadata-is-signed :initform common-lisp:nil)
                        (is-auto-increment :initarg :|isAutoIncrement| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %column-metadata-is-auto-increment :initform
                         common-lisp:nil)
                        (table-name :initarg :|tableName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-metadata-table-name :initform common-lisp:nil)
                        (schema-name :initarg :|schemaName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-metadata-schema-name :initform
                         common-lisp:nil)
                        (label :initarg :|label| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-metadata-label :initform common-lisp:nil)
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-metadata-type-name :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %column-metadata-type :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-metadata-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-metadata 'make-column-metadata))
 (common-lisp:defun make-column-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key array-base-column-type scale precision
                     nullable is-case-sensitive is-currency is-signed
                     is-auto-increment table-name schema-name label type-name
                     type name)
   (common-lisp:apply #'common-lisp:make-instance 'column-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-auto-increment))
      (common-lisp:list
       (common-lisp:cons "isAutoIncrement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-signed))
      (common-lisp:list
       (common-lisp:cons "isSigned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-currency))
      (common-lisp:list
       (common-lisp:cons "isCurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-case-sensitive))
      (common-lisp:list
       (common-lisp:cons "isCaseSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nullable))
      (common-lisp:list
       (common-lisp:cons "nullable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'array-base-column-type))
      (common-lisp:list
       (common-lisp:cons "arrayBaseColumnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-request common-lisp:nil
                       ((transaction-id :initarg :|transactionId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %commit-transaction-request-transaction-id :initform
                         (common-lisp:error ":transactionid is required"))
                        (secret-arn :initarg :|secretArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %commit-transaction-request-secret-arn :initform
                         (common-lisp:error ":secretarn is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %commit-transaction-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-request
                    'make-commit-transaction-request))
 (common-lisp:defun make-commit-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id secret-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-response common-lisp:nil
                       ((transaction-status :initarg :|transactionStatus| :type
                         (common-lisp:or transaction-status common-lisp:null)
                         :accessor
                         %commit-transaction-response-transaction-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-response
                    'make-commit-transaction-response))
 (common-lisp:defun make-commit-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-status)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "transactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   common-lisp:nil))
(common-lisp:deftype db-name () 'common-lisp:string)
(common-lisp:deftype decimal-return-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype double-array ()
   '(trivial-types:proper-list boxed-double))
 (common-lisp:defun |make-double-array|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boxed-double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-sql-request common-lisp:nil
                       ((schema :initarg :|schema| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %execute-sql-request-schema :initform common-lisp:nil)
                        (database :initarg :|database| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %execute-sql-request-database :initform
                         common-lisp:nil)
                        (sql-statements :initarg :|sqlStatements| :type
                         (common-lisp:or sql-statement common-lisp:null)
                         :accessor %execute-sql-request-sql-statements
                         :initform
                         (common-lisp:error ":sqlstatements is required"))
                        (aws-secret-store-arn :initarg :|awsSecretStoreArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %execute-sql-request-aws-secret-store-arn :initform
                         (common-lisp:error ":awssecretstorearn is required"))
                        (db-cluster-or-instance-arn :initarg
                         :|dbClusterOrInstanceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %execute-sql-request-db-cluster-or-instance-arn
                         :initform
                         (common-lisp:error
                          ":dbclusterorinstancearn is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-sql-request 'make-execute-sql-request))
 (common-lisp:defun make-execute-sql-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema database sql-statements
                     aws-secret-store-arn db-cluster-or-instance-arn)
   (common-lisp:apply #'common-lisp:make-instance 'execute-sql-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execute-sql-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execute-sql-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-or-instance-arn))
      (common-lisp:list
       (common-lisp:cons "dbClusterOrInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-secret-store-arn))
      (common-lisp:list
       (common-lisp:cons "awsSecretStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-statements))
      (common-lisp:list
       (common-lisp:cons "sqlStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execute-sql-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-sql-response common-lisp:nil
                       ((sql-statement-results :initarg :|sqlStatementResults|
                         :type
                         (common-lisp:or sql-statement-results
                                         common-lisp:null)
                         :accessor %execute-sql-response-sql-statement-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-sql-response 'make-execute-sql-response))
 (common-lisp:defun make-execute-sql-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sql-statement-results)
   (common-lisp:apply #'common-lisp:make-instance 'execute-sql-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execute-sql-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execute-sql-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-statement-results))
      (common-lisp:list
       (common-lisp:cons "sqlStatementResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execute-sql-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-statement-request common-lisp:nil
                       ((format-records-as :initarg :|formatRecordsAs| :type
                         (common-lisp:or records-format-type common-lisp:null)
                         :accessor %execute-statement-request-format-records-as
                         :initform common-lisp:nil)
                        (result-set-options :initarg :|resultSetOptions| :type
                         (common-lisp:or result-set-options common-lisp:null)
                         :accessor
                         %execute-statement-request-result-set-options
                         :initform common-lisp:nil)
                        (continue-after-timeout :initarg
                         :|continueAfterTimeout| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %execute-statement-request-continue-after-timeout
                         :initform common-lisp:nil)
                        (include-result-metadata :initarg
                         :|includeResultMetadata| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %execute-statement-request-include-result-metadata
                         :initform common-lisp:nil)
                        (transaction-id :initarg :|transactionId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %execute-statement-request-transaction-id :initform
                         common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or sql-parameters-list common-lisp:null)
                         :accessor %execute-statement-request-parameters
                         :initform common-lisp:nil)
                        (schema :initarg :|schema| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %execute-statement-request-schema :initform
                         common-lisp:nil)
                        (database :initarg :|database| :type
                         (common-lisp:or db-name common-lisp:null) :accessor
                         %execute-statement-request-database :initform
                         common-lisp:nil)
                        (sql :initarg :|sql| :type
                         (common-lisp:or sql-statement common-lisp:null)
                         :accessor %execute-statement-request-sql :initform
                         (common-lisp:error ":sql is required"))
                        (secret-arn :initarg :|secretArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %execute-statement-request-secret-arn :initform
                         (common-lisp:error ":secretarn is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %execute-statement-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-statement-request
                    'make-execute-statement-request))
 (common-lisp:defun make-execute-statement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format-records-as result-set-options
                     continue-after-timeout include-result-metadata
                     transaction-id parameters schema database sql secret-arn
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-result-metadata))
      (common-lisp:list
       (common-lisp:cons "includeResultMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continue-after-timeout))
      (common-lisp:list
       (common-lisp:cons "continueAfterTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set-options))
      (common-lisp:list
       (common-lisp:cons "resultSetOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-records-as))
      (common-lisp:list
       (common-lisp:cons "formatRecordsAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-statement-response common-lisp:nil
                       ((formatted-records :initarg :|formattedRecords| :type
                         (common-lisp:or formatted-sql-records
                                         common-lisp:null)
                         :accessor
                         %execute-statement-response-formatted-records
                         :initform common-lisp:nil)
                        (generated-fields :initarg :|generatedFields| :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         %execute-statement-response-generated-fields :initform
                         common-lisp:nil)
                        (number-of-records-updated :initarg
                         :|numberOfRecordsUpdated| :type
                         (common-lisp:or records-updated common-lisp:null)
                         :accessor
                         %execute-statement-response-number-of-records-updated
                         :initform common-lisp:nil)
                        (column-metadata :initarg :|columnMetadata| :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %execute-statement-response-column-metadata :initform
                         common-lisp:nil)
                        (records :initarg :|records| :type
                         (common-lisp:or sql-records common-lisp:null)
                         :accessor %execute-statement-response-records
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-statement-response
                    'make-execute-statement-response))
 (common-lisp:defun make-execute-statement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key formatted-records generated-fields
                     number-of-records-updated column-metadata records)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-metadata))
      (common-lisp:list
       (common-lisp:cons "columnMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-updated))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-fields))
      (common-lisp:list
       (common-lisp:cons "generatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted-records))
      (common-lisp:list
       (common-lisp:cons "formattedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field common-lisp:nil
                       ((array-value :initarg :|arrayValue| :type
                         (common-lisp:or array-value common-lisp:null)
                         :accessor %field-array-value :initform
                         common-lisp:nil)
                        (blob-value :initarg :|blobValue| :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         %field-blob-value :initform common-lisp:nil)
                        (string-value :initarg :|stringValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-string-value :initform common-lisp:nil)
                        (double-value :initarg :|doubleValue| :type
                         (common-lisp:or boxed-double common-lisp:null)
                         :accessor %field-double-value :initform
                         common-lisp:nil)
                        (long-value :initarg :|longValue| :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         %field-long-value :initform common-lisp:nil)
                        (boolean-value :initarg :|booleanValue| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %field-boolean-value :initform
                         common-lisp:nil)
                        (is-null :initarg :|isNull| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %field-is-null :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defun make-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key array-value blob-value string-value
                     double-value long-value boolean-value is-null)
   (common-lisp:apply #'common-lisp:make-instance 'field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null))
      (common-lisp:list
       (common-lisp:cons "isNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-value))
      (common-lisp:list
       (common-lisp:cons "blobValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-value))
      (common-lisp:list
       (common-lisp:cons "arrayValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-list () '(trivial-types:proper-list field))
 (common-lisp:defun |make-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (rds-data-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:deftype formatted-sql-records () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (rds-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-server-error-exception)))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype long-array () '(trivial-types:proper-list boxed-long))
 (common-lisp:defun |make-long-array|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boxed-long))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long-return-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata () '(trivial-types:proper-list column-metadata))
 (common-lisp:defun |make-metadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (rds-data-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or row common-lisp:null) :accessor
                         %record-values :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defun make-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun |make-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype records-format-type () 'common-lisp:string)
(common-lisp:deftype records-updated () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass result-frame common-lisp:nil
                       ((records :initarg :|records| :type
                         (common-lisp:or records common-lisp:null) :accessor
                         %result-frame-records :initform common-lisp:nil)
                        (result-set-metadata :initarg :|resultSetMetadata|
                         :type
                         (common-lisp:or result-set-metadata common-lisp:null)
                         :accessor %result-frame-result-set-metadata :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'result-frame 'make-result-frame))
 (common-lisp:defun make-result-frame
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key records result-set-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'result-frame
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-frame))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-frame))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set-metadata))
      (common-lisp:list
       (common-lisp:cons "resultSetMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-frame))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set-metadata common-lisp:nil
                       ((column-metadata :initarg :|columnMetadata| :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %result-set-metadata-column-metadata :initform
                         common-lisp:nil)
                        (column-count :initarg :|columnCount| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %result-set-metadata-column-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'result-set-metadata 'make-result-set-metadata))
 (common-lisp:defun make-result-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key column-metadata column-count)
   (common-lisp:apply #'common-lisp:make-instance 'result-set-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-count))
      (common-lisp:list
       (common-lisp:cons "columnCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-metadata))
      (common-lisp:list
       (common-lisp:cons "columnMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set-options common-lisp:nil
                       ((long-return-type :initarg :|longReturnType| :type
                         (common-lisp:or long-return-type common-lisp:null)
                         :accessor %result-set-options-long-return-type
                         :initform common-lisp:nil)
                        (decimal-return-type :initarg :|decimalReturnType|
                         :type
                         (common-lisp:or decimal-return-type common-lisp:null)
                         :accessor %result-set-options-decimal-return-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'result-set-options 'make-result-set-options))
 (common-lisp:defun make-result-set-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key long-return-type decimal-return-type)
   (common-lisp:apply #'common-lisp:make-instance 'result-set-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-return-type))
      (common-lisp:list
       (common-lisp:cons "decimalReturnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-return-type))
      (common-lisp:list
       (common-lisp:cons "longReturnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-transaction-request common-lisp:nil
                       ((transaction-id :initarg :|transactionId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %rollback-transaction-request-transaction-id :initform
                         (common-lisp:error ":transactionid is required"))
                        (secret-arn :initarg :|secretArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %rollback-transaction-request-secret-arn :initform
                         (common-lisp:error ":secretarn is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %rollback-transaction-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'rollback-transaction-request
                    'make-rollback-transaction-request))
 (common-lisp:defun make-rollback-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-id secret-arn resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-transaction-response common-lisp:nil
                       ((transaction-status :initarg :|transactionStatus| :type
                         (common-lisp:or transaction-status common-lisp:null)
                         :accessor
                         %rollback-transaction-response-transaction-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rollback-transaction-response
                    'make-rollback-transaction-response))
 (common-lisp:defun make-rollback-transaction-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transaction-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'rollback-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "transactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row () '(trivial-types:proper-list value))
 (common-lisp:defun |make-row|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-error
     (rds-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-unavailable-error)))
(common-lisp:progn
 (common-lisp:defclass sql-parameter common-lisp:nil
                       ((type-hint :initarg :|typeHint| :type
                         (common-lisp:or type-hint common-lisp:null) :accessor
                         %sql-parameter-type-hint :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or field common-lisp:null) :accessor
                         %sql-parameter-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %sql-parameter-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sql-parameter 'make-sql-parameter))
 (common-lisp:defun make-sql-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-hint value name)
   (common-lisp:apply #'common-lisp:make-instance 'sql-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-hint))
      (common-lisp:list
       (common-lisp:cons "typeHint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-parameter-sets ()
   '(trivial-types:proper-list sql-parameters-list))
 (common-lisp:defun |make-sql-parameter-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-parameters-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sql-parameters-list ()
   '(trivial-types:proper-list sql-parameter))
 (common-lisp:defun |make-sql-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sql-records () '(trivial-types:proper-list field-list))
 (common-lisp:defun |make-sql-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sql-statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sql-statement-result common-lisp:nil
                       ((number-of-records-updated :initarg
                         :|numberOfRecordsUpdated| :type
                         (common-lisp:or records-updated common-lisp:null)
                         :accessor
                         %sql-statement-result-number-of-records-updated
                         :initform common-lisp:nil)
                        (result-frame :initarg :|resultFrame| :type
                         (common-lisp:or result-frame common-lisp:null)
                         :accessor %sql-statement-result-result-frame :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sql-statement-result 'make-sql-statement-result))
 (common-lisp:defun make-sql-statement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-of-records-updated result-frame)
   (common-lisp:apply #'common-lisp:make-instance 'sql-statement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-statement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-statement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-frame))
      (common-lisp:list
       (common-lisp:cons "resultFrame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-updated))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-statement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-statement-results ()
   '(trivial-types:proper-list sql-statement-result))
 (common-lisp:defun |make-sql-statement-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-statement-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition statement-timeout-exception
     (rds-data-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       statement-timeout-exception-message)
      (db-connection-id :initarg :|dbConnectionId| :initform common-lisp:nil
       :reader statement-timeout-exception-db-connection-id)))
 (common-lisp:export
  (common-lisp:list 'statement-timeout-exception
                    'statement-timeout-exception-message
                    'statement-timeout-exception-db-connection-id)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-array () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-array|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass struct-value common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or array-value-list common-lisp:null)
                         :accessor %struct-value-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'struct-value 'make-struct-value))
 (common-lisp:defun make-struct-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance 'struct-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input struct-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input struct-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input struct-value))
   common-lisp:nil))
(common-lisp:deftype transaction-status () 'common-lisp:string)
(common-lisp:deftype type-hint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-result common-lisp:nil
                       ((generated-fields :initarg :|generatedFields| :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         %update-result-generated-fields :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-result 'make-update-result))
 (common-lisp:defun make-update-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generated-fields)
   (common-lisp:apply #'common-lisp:make-instance 'update-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-fields))
      (common-lisp:list
       (common-lisp:cons "generatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-results ()
   '(trivial-types:proper-list update-result))
 (common-lisp:defun |make-update-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass value common-lisp:nil
                       ((struct-value :initarg :|structValue| :type
                         (common-lisp:or struct-value common-lisp:null)
                         :accessor %value-struct-value :initform
                         common-lisp:nil)
                        (array-values :initarg :|arrayValues| :type
                         (common-lisp:or array-value-list common-lisp:null)
                         :accessor %value-array-values :initform
                         common-lisp:nil)
                        (blob-value :initarg :|blobValue| :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         %value-blob-value :initform common-lisp:nil)
                        (string-value :initarg :|stringValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %value-string-value :initform common-lisp:nil)
                        (real-value :initarg :|realValue| :type
                         (common-lisp:or boxed-float common-lisp:null)
                         :accessor %value-real-value :initform common-lisp:nil)
                        (double-value :initarg :|doubleValue| :type
                         (common-lisp:or boxed-double common-lisp:null)
                         :accessor %value-double-value :initform
                         common-lisp:nil)
                        (int-value :initarg :|intValue| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %value-int-value :initform common-lisp:nil)
                        (big-int-value :initarg :|bigIntValue| :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         %value-big-int-value :initform common-lisp:nil)
                        (bit-value :initarg :|bitValue| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %value-bit-value :initform common-lisp:nil)
                        (is-null :initarg :|isNull| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %value-is-null :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'value 'make-value))
 (common-lisp:defun make-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key struct-value array-values blob-value
                     string-value real-value double-value int-value
                     big-int-value bit-value is-null)
   (common-lisp:apply #'common-lisp:make-instance 'value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null))
      (common-lisp:list
       (common-lisp:cons "isNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-value))
      (common-lisp:list
       (common-lisp:cons "bitValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'big-int-value))
      (common-lisp:list
       (common-lisp:cons "bigIntValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'int-value))
      (common-lisp:list
       (common-lisp:cons "intValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'real-value))
      (common-lisp:list
       (common-lisp:cons "realValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-value))
      (common-lisp:list
       (common-lisp:cons "blobValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-values))
      (common-lisp:list
       (common-lisp:cons "arrayValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'struct-value))
      (common-lisp:list
       (common-lisp:cons "structValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun batch-execute-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn sql database
                     schema parameter-sets transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn sql database schema
     parameter-sets transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-execute-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/BatchExecute"
                                                        "BatchExecuteStatement"
                                                        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-execute-statement))
(common-lisp:progn
 (common-lisp:defun begin-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn database schema)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn database schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-begin-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/BeginTransaction"
                                                        "BeginTransaction"
                                                        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'begin-transaction))
(common-lisp:progn
 (common-lisp:defun commit-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-commit-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/CommitTransaction"
                                                        "CommitTransaction"
                                                        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'commit-transaction))
(common-lisp:progn
 (common-lisp:defun execute-sql
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-cluster-or-instance-arn
                     aws-secret-store-arn sql-statements database schema)
   (common-lisp:declare
    (common-lisp:ignorable db-cluster-or-instance-arn aws-secret-store-arn
     sql-statements database schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-sql-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ExecuteSql"
                                                        "ExecuteSql"
                                                        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-sql))
(common-lisp:progn
 (common-lisp:defun execute-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn sql database
                     schema parameters transaction-id include-result-metadata
                     continue-after-timeout result-set-options
                     format-records-as)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn sql database schema
     parameters transaction-id include-result-metadata continue-after-timeout
     result-set-options format-records-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/Execute"
                                                        "ExecuteStatement"
                                                        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-statement))
(common-lisp:progn
 (common-lisp:defun rollback-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rollback-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/RollbackTransaction"
                                                        "RollbackTransaction"
                                                        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rollback-transaction))
