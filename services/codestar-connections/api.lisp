;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codestar-connections/api
  (:use)
  (:nicknames #:aws/codestar-connections)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codestar-connections/api)
(common-lisp:progn
 (common-lisp:defclass codestar-connections-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codestar-connections"
                        :protocol :json))
 (common-lisp:export 'codestar-connections-request))
(common-lisp:progn
 (common-lisp:define-condition codestar-connections-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codestar-connections-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %connection-host-arn :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor %connection-connection-status :initform
                         common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %connection-owner-account-id :initform
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %connection-provider-type :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %connection-connection-arn :initform
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %connection-connection-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defun make-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-arn connection-status
                     owner-account-id provider-type connection-arn
                     connection-name)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun |make-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-connection-input common-lisp:nil
                       ((host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %create-connection-input-host-arn :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-connection-input-tags :initform
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %create-connection-input-connection-name
                         :initform
                         (common-lisp:error ":connection-name is required"))
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %create-connection-input-provider-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-connection-input 'make-create-connection-input))
 (common-lisp:defun make-create-connection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-arn tags connection-name
                     provider-type)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-connection-output-tags :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %create-connection-output-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-output 'make-create-connection-output))
 (common-lisp:defun make-create-connection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-host-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-host-input-tags :initform common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %create-host-input-vpc-configuration
                         :initform common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %create-host-input-provider-endpoint :initform
                         (common-lisp:error ":provider-endpoint is required"))
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %create-host-input-provider-type :initform
                         (common-lisp:error ":provider-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         %create-host-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-host-input 'make-create-host-input))
 (common-lisp:defun make-create-host-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags vpc-configuration provider-endpoint
                     provider-type name)
   (common-lisp:apply #'common-lisp:make-instance 'create-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-host-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-host-output-tags :initform common-lisp:nil)
                        (host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %create-host-output-host-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-host-output 'make-create-host-output))
 (common-lisp:defun make-create-host-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags host-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-host-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-host-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %delete-connection-input-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connection-input 'make-delete-connection-input))
 (common-lisp:defun make-delete-connection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-connection-output 'make-delete-connection-output))
 (common-lisp:defun make-delete-connection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-host-input common-lisp:nil
                       ((host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %delete-host-input-host-arn :initform
                         (common-lisp:error ":host-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-host-input 'make-delete-host-input))
 (common-lisp:defun make-delete-host-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-host-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-host-output 'make-delete-host-output))
 (common-lisp:defun make-delete-host-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-host-output))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-connection-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %get-connection-input-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-connection-input 'make-get-connection-input))
 (common-lisp:defun make-get-connection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-output common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         %get-connection-output-connection :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-connection-output 'make-get-connection-output))
 (common-lisp:defun make-get-connection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-host-input common-lisp:nil
                       ((host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %get-host-input-host-arn :initform
                         (common-lisp:error ":host-arn is required"))))
 (common-lisp:export (common-lisp:list 'get-host-input 'make-get-host-input))
 (common-lisp:defun make-get-host-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-host-output common-lisp:nil
                       ((vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %get-host-output-vpc-configuration :initform
                         common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %get-host-output-provider-endpoint :initform
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %get-host-output-provider-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or host-status common-lisp:null)
                         :accessor %get-host-output-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         %get-host-output-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'get-host-output 'make-get-host-output))
 (common-lisp:defun make-get-host-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-configuration provider-endpoint
                     provider-type status name)
   (common-lisp:apply #'common-lisp:make-instance 'get-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-host-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-host-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass host common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or host-status-message common-lisp:null)
                         :accessor %host-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or host-status common-lisp:null)
                         :accessor %host-status :initform common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %host-vpc-configuration :initform
                         common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %host-provider-endpoint :initform common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %host-provider-type :initform
                         common-lisp:nil)
                        (host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %host-host-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         %host-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'host 'make-host))
 (common-lisp:defun make-host
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status vpc-configuration
                     provider-endpoint provider-type host-arn name)
   (common-lisp:apply #'common-lisp:make-instance 'host
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host))
   common-lisp:nil))
(common-lisp:deftype host-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype host-list () '(trivial-types:proper-list host))
 (common-lisp:defun |make-host-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host))
   aws-sdk/generator/shape::members))
(common-lisp:deftype host-name () 'common-lisp:string)
(common-lisp:deftype host-status () 'common-lisp:string)
(common-lisp:deftype host-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-connections-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connections-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-connections-input-max-results
                         :initform common-lisp:nil)
                        (host-arn-filter :initarg :host-arn-filter :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %list-connections-input-host-arn-filter :initform
                         common-lisp:nil)
                        (provider-type-filter :initarg :provider-type-filter
                         :type (common-lisp:or provider-type common-lisp:null)
                         :accessor %list-connections-input-provider-type-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connections-input 'make-list-connections-input))
 (common-lisp:defun make-list-connections-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results host-arn-filter
                     provider-type-filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-type-filter))
      (common-lisp:list
       (common-lisp:cons "ProviderTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn-filter))
      (common-lisp:list
       (common-lisp:cons "HostArnFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connections-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connections-output-next-token :initform
                         common-lisp:nil)
                        (connections :initarg :connections :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor %list-connections-output-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connections-output 'make-list-connections-output))
 (common-lisp:defun make-list-connections-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connections)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hosts-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-hosts-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-hosts-input-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-hosts-input 'make-list-hosts-input))
 (common-lisp:defun make-list-hosts-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-hosts-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hosts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hosts-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hosts-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hosts-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-hosts-output-next-token :initform
                         common-lisp:nil)
                        (hosts :initarg :hosts :type
                         (common-lisp:or host-list common-lisp:null) :accessor
                         %list-hosts-output-hosts :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-hosts-output 'make-list-hosts-output))
 (common-lisp:defun make-list-hosts-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token hosts)
   (common-lisp:apply #'common-lisp:make-instance 'list-hosts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hosts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hosts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosts))
      (common-lisp:list
       (common-lisp:cons "Hosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hosts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defun make-list-tags-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-output-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defun make-list-tags-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message)))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defun make-tag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tls-certificate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-input-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defun make-untag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-host-input common-lisp:nil
                       ((vpc-configuration :initarg :vpc-configuration :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor %update-host-input-vpc-configuration
                         :initform common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %update-host-input-provider-endpoint :initform
                         common-lisp:nil)
                        (host-arn :initarg :host-arn :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         %update-host-input-host-arn :initform
                         (common-lisp:error ":host-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-host-input 'make-update-host-input))
 (common-lisp:defun make-update-host-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-configuration provider-endpoint
                     host-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-host-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-host-output 'make-update-host-output))
 (common-lisp:defun make-update-host-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-host-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((tls-certificate :initarg :tls-certificate :type
                         (common-lisp:or tls-certificate common-lisp:null)
                         :accessor %vpc-configuration-tls-certificate :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor %vpc-configuration-security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required"))
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %vpc-configuration-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %vpc-configuration-vpc-id :initform
                         (common-lisp:error ":vpc-id is required"))))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defun make-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls-certificate security-group-ids
                     subnet-ids vpc-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-certificate))
      (common-lisp:list
       (common-lisp:cons "TlsCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-type connection-name tags
                     host-arn)
   (common-lisp:declare
    (common-lisp:ignorable provider-type connection-name tags host-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateConnection" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name provider-type provider-endpoint
                     vpc-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable name provider-type provider-endpoint
     vpc-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateHost" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-host))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn)
   (common-lisp:declare (common-lisp:ignorable connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteConnection" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-arn)
   (common-lisp:declare (common-lisp:ignorable host-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteHost" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-host))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn)
   (common-lisp:declare (common-lisp:ignorable connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetConnection" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun get-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-arn)
   (common-lisp:declare (common-lisp:ignorable host-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetHost" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-host))
(common-lisp:progn
 (common-lisp:defun list-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-type-filter host-arn-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable provider-type-filter host-arn-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connections-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListConnections" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connections))
(common-lisp:progn
 (common-lisp:defun list-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hosts-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListHosts" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-hosts))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-arn provider-endpoint
                     vpc-configuration)
   (common-lisp:declare
    (common-lisp:ignorable host-arn provider-endpoint vpc-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateHost" "2019-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-host))
