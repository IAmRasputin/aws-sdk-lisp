;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/fis/api
  (:use)
  (:nicknames #:aws/fis)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/fis/api)
(common-lisp:progn
 (common-lisp:defclass fis-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "fis"))
 (common-lisp:export 'fis-request))
(common-lisp:progn
 (common-lisp:define-condition fis-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'fis-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (action (:copier common-lisp:nil) (:conc-name "struct-shape-action-"))
   (id common-lisp:nil :type (common-lisp:or action-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or action-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or action-parameter-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or action-target-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:deftype action-description () 'common-lisp:string)
(common-lisp:deftype action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-parameter-"))
   (description common-lisp:nil :type
    (common-lisp:or action-parameter-description common-lisp:null))
   (required common-lisp:nil :type
    (common-lisp:or action-parameter-required common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-parameter 'make-action-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-parameter))
   common-lisp:nil))
(common-lisp:deftype action-parameter-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-action-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype action-parameter-name () 'common-lisp:string)
(common-lisp:deftype action-parameter-required () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (action-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-summary-"))
   (id common-lisp:nil :type (common-lisp:or action-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or action-description common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or action-target-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-summary 'make-action-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-summary-list ()
   '(trivial-types:proper-list action-summary))
 (common-lisp:defun |make-action-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-target-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or target-resource-type-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-target 'make-action-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-action-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype action-target-name () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype cloud-watch-log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (fis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-template-action-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-template-action-input-"))
   (action-id (common-lisp:error ":actionid is required") :type
    (common-lisp:or action-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-template-action-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-template-action-parameter-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or experiment-template-action-target-map common-lisp:null))
   (start-after common-lisp:nil :type
    (common-lisp:or experiment-template-action-start-after-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-action-input
                    'make-create-experiment-template-action-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-experiment-template-action-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-create-experiment-template-action-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-template-log-configuration-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-experiment-template-log-configuration-input-"))
   (cloud-watch-logs-configuration common-lisp:nil :type
    (common-lisp:or
     experiment-template-cloud-watch-logs-log-configuration-input
     common-lisp:null))
   (s3configuration common-lisp:nil :type
    (common-lisp:or experiment-template-s3log-configuration-input
                    common-lisp:null))
   (log-schema-version (common-lisp:error ":logschemaversion is required")
    :type (common-lisp:or log-schema-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-log-configuration-input
                    'make-create-experiment-template-log-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-log-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-template-request-"))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or experiment-template-description common-lisp:null))
   (stop-conditions (common-lisp:error ":stopconditions is required") :type
    (common-lisp:or create-experiment-template-stop-condition-input-list
                    common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or create-experiment-template-target-input-map
                    common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or create-experiment-template-action-input-map
                    common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (log-configuration common-lisp:nil :type
    (common-lisp:or create-experiment-template-log-configuration-input
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-request
                    'make-create-experiment-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-template-response-"))
   (experiment-template common-lisp:nil :type
    (common-lisp:or experiment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-response
                    'make-create-experiment-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-template-stop-condition-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-experiment-template-stop-condition-input-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or stop-condition-source common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or stop-condition-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-stop-condition-input
                    'make-create-experiment-template-stop-condition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-stop-condition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-stop-condition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-stop-condition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-experiment-template-stop-condition-input-list ()
   '(trivial-types:proper-list
     create-experiment-template-stop-condition-input))
 (common-lisp:defun |make-create-experiment-template-stop-condition-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-experiment-template-stop-condition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-template-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-template-target-input-"))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or target-resource-type-id common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arn-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or experiment-template-target-filter-input-list
                    common-lisp:null))
   (selection-mode (common-lisp:error ":selectionmode is required") :type
    (common-lisp:or experiment-template-target-selection-mode
                    common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-template-target-parameter-map
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-target-input
                    'make-create-experiment-template-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-experiment-template-target-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-create-experiment-template-target-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experiment-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experiment-template-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experiment-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-template-request
                    'make-delete-experiment-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experiment-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experiment-template-response-"))
   (experiment-template common-lisp:nil :type
    (common-lisp:or experiment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-template-response
                    'make-delete-experiment-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-response))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-"))
   (id common-lisp:nil :type (common-lisp:or experiment-id common-lisp:null))
   (experiment-template-id common-lisp:nil :type
    (common-lisp:or experiment-template-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or experiment-state common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or experiment-target-map common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or experiment-action-map common-lisp:null))
   (stop-conditions common-lisp:nil :type
    (common-lisp:or experiment-stop-condition-list common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or experiment-start-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or experiment-end-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (log-configuration common-lisp:nil :type
    (common-lisp:or experiment-log-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'experiment 'make-experiment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-template-id))
      (common-lisp:list
       (common-lisp:cons "experimentTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-action-"))
   (action-id common-lisp:nil :type
    (common-lisp:or action-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-action-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-action-parameter-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or experiment-action-target-map common-lisp:null))
   (start-after common-lisp:nil :type
    (common-lisp:or experiment-action-start-after-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or experiment-action-state common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or experiment-action-start-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or experiment-action-end-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-action 'make-experiment-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-action))
   common-lisp:nil))
(common-lisp:deftype experiment-action-description () 'common-lisp:string)
(common-lisp:deftype experiment-action-end-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-action-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-action-name () 'common-lisp:string)
(common-lisp:deftype experiment-action-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-action-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-action-parameter-name () 'common-lisp:string)
(common-lisp:deftype experiment-action-start-after () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-start-after-list ()
   '(trivial-types:proper-list experiment-action-start-after))
 (common-lisp:defun |make-experiment-action-start-after-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-action-start-after))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-action-start-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-action-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-action-state-"))
   (status common-lisp:nil :type
    (common-lisp:or experiment-action-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or experiment-action-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-action-state 'make-experiment-action-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-action-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-action-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-action-state))
   common-lisp:nil))
(common-lisp:deftype experiment-action-status () 'common-lisp:string)
(common-lisp:deftype experiment-action-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-action-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-action-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-cloud-watch-logs-log-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-experiment-cloud-watch-logs-log-configuration-"))
   (log-group-arn common-lisp:nil :type
    (common-lisp:or cloud-watch-log-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-cloud-watch-logs-log-configuration
                    'make-experiment-cloud-watch-logs-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-cloud-watch-logs-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-cloud-watch-logs-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-cloud-watch-logs-log-configuration))
   common-lisp:nil))
(common-lisp:deftype experiment-end-time () 'common-lisp:string)
(common-lisp:deftype experiment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-log-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-log-configuration-"))
   (cloud-watch-logs-configuration common-lisp:nil :type
    (common-lisp:or experiment-cloud-watch-logs-log-configuration
                    common-lisp:null))
   (s3configuration common-lisp:nil :type
    (common-lisp:or experiment-s3log-configuration common-lisp:null))
   (log-schema-version common-lisp:nil :type
    (common-lisp:or log-schema-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-log-configuration
                    'make-experiment-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-s3log-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-s3log-configuration-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-s3log-configuration
                    'make-experiment-s3log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-s3log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-s3log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-s3log-configuration))
   common-lisp:nil))
(common-lisp:deftype experiment-start-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-state-"))
   (status common-lisp:nil :type
    (common-lisp:or experiment-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or experiment-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-state 'make-experiment-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-state))
   common-lisp:nil))
(common-lisp:deftype experiment-status () 'common-lisp:string)
(common-lisp:deftype experiment-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-stop-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-stop-condition-"))
   (source common-lisp:nil :type
    (common-lisp:or stop-condition-source common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or stop-condition-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-stop-condition
                    'make-experiment-stop-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-stop-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-stop-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-stop-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-stop-condition-list ()
   '(trivial-types:proper-list experiment-stop-condition))
 (common-lisp:defun |make-experiment-stop-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-stop-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-summary-"))
   (id common-lisp:nil :type (common-lisp:or experiment-id common-lisp:null))
   (experiment-template-id common-lisp:nil :type
    (common-lisp:or experiment-template-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or experiment-state common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-summary 'make-experiment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-template-id))
      (common-lisp:list
       (common-lisp:cons "experimentTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-summary-list ()
   '(trivial-types:proper-list experiment-summary))
 (common-lisp:defun |make-experiment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-target-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or target-resource-type-id common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arn-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or experiment-target-filter-list common-lisp:null))
   (selection-mode common-lisp:nil :type
    (common-lisp:or experiment-target-selection-mode common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-target-parameter-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-target 'make-experiment-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-target-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-target-filter-"))
   (path common-lisp:nil :type
    (common-lisp:or experiment-target-filter-path common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or experiment-target-filter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-target-filter 'make-experiment-target-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-target-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-target-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-target-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-target-filter-list ()
   '(trivial-types:proper-list experiment-target-filter))
 (common-lisp:defun |make-experiment-target-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-target-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-target-filter-path () 'common-lisp:string)
(common-lisp:deftype experiment-target-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-target-filter-values ()
   '(trivial-types:proper-list experiment-target-filter-value))
 (common-lisp:defun |make-experiment-target-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-target-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype experiment-target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-target-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-target-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-target-parameter-name () 'common-lisp:string)
(common-lisp:deftype experiment-target-parameter-value () 'common-lisp:string)
(common-lisp:deftype experiment-target-selection-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-"))
   (id common-lisp:nil :type
    (common-lisp:or experiment-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-template-description common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or experiment-template-target-map common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or experiment-template-action-map common-lisp:null))
   (stop-conditions common-lisp:nil :type
    (common-lisp:or experiment-template-stop-condition-list common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or last-update-time common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (log-configuration common-lisp:nil :type
    (common-lisp:or experiment-template-log-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template 'make-experiment-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-action-"))
   (action-id common-lisp:nil :type
    (common-lisp:or action-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-template-action-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-template-action-parameter-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or experiment-template-action-target-map common-lisp:null))
   (start-after common-lisp:nil :type
    (common-lisp:or experiment-template-action-start-after-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-action
                    'make-experiment-template-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-action))
   common-lisp:nil))
(common-lisp:deftype experiment-template-action-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-action-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-action-name () 'common-lisp:string)
(common-lisp:deftype experiment-template-action-parameter ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-action-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-action-parameter-name ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-action-start-after ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-start-after-list ()
   '(trivial-types:proper-list experiment-template-action-start-after))
 (common-lisp:defun |make-experiment-template-action-start-after-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-action-start-after))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-target-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-action-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-action-target-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-cloud-watch-logs-log-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-experiment-template-cloud-watch-logs-log-configuration-"))
   (log-group-arn common-lisp:nil :type
    (common-lisp:or cloud-watch-log-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-cloud-watch-logs-log-configuration
                    'make-experiment-template-cloud-watch-logs-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-cloud-watch-logs-log-configuration-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-experiment-template-cloud-watch-logs-log-configuration-input-"))
   (log-group-arn (common-lisp:error ":loggrouparn is required") :type
    (common-lisp:or cloud-watch-log-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'experiment-template-cloud-watch-logs-log-configuration-input
   'make-experiment-template-cloud-watch-logs-log-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration-input))
   common-lisp:nil))
(common-lisp:deftype experiment-template-description () 'common-lisp:string)
(common-lisp:deftype experiment-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-log-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-log-configuration-"))
   (cloud-watch-logs-configuration common-lisp:nil :type
    (common-lisp:or experiment-template-cloud-watch-logs-log-configuration
                    common-lisp:null))
   (s3configuration common-lisp:nil :type
    (common-lisp:or experiment-template-s3log-configuration common-lisp:null))
   (log-schema-version common-lisp:nil :type
    (common-lisp:or log-schema-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-log-configuration
                    'make-experiment-template-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-s3log-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-s3log-configuration-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-s3log-configuration
                    'make-experiment-template-s3log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-s3log-configuration-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-experiment-template-s3log-configuration-input-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-s3log-configuration-input
                    'make-experiment-template-s3log-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-stop-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-stop-condition-"))
   (source common-lisp:nil :type
    (common-lisp:or stop-condition-source common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or stop-condition-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-stop-condition
                    'make-experiment-template-stop-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-stop-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-stop-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-stop-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-stop-condition-list ()
   '(trivial-types:proper-list experiment-template-stop-condition))
 (common-lisp:defun |make-experiment-template-stop-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-stop-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or experiment-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-template-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or last-update-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-summary
                    'make-experiment-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-summary-list ()
   '(trivial-types:proper-list experiment-template-summary))
 (common-lisp:defun |make-experiment-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-target-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or target-resource-type-id common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arn-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or experiment-template-target-filter-list common-lisp:null))
   (selection-mode common-lisp:nil :type
    (common-lisp:or experiment-template-target-selection-mode
                    common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-template-target-parameter-map
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-target
                    'make-experiment-template-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-target-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-target-filter-"))
   (path common-lisp:nil :type
    (common-lisp:or experiment-template-target-filter-path common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or experiment-template-target-filter-values
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-target-filter
                    'make-experiment-template-target-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-filter-input-list ()
   '(trivial-types:proper-list experiment-template-target-input-filter))
 (common-lisp:defun |make-experiment-template-target-filter-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-target-input-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-filter-list ()
   '(trivial-types:proper-list experiment-template-target-filter))
 (common-lisp:defun |make-experiment-template-target-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-target-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-template-target-filter-path ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-target-filter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-filter-values ()
   '(trivial-types:proper-list experiment-template-target-filter-value))
 (common-lisp:defun |make-experiment-template-target-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-target-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-template-target-input-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-template-target-input-filter-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or experiment-template-target-filter-path common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or experiment-template-target-filter-values
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-target-input-filter
                    'make-experiment-template-target-input-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-input-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-input-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-input-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-target-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-target-parameter-name ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-target-parameter-value ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-target-selection-mode ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-action-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or action-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-action-request 'make-get-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-action-response-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-action-response 'make-get-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experiment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-request 'make-get-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-response-"))
   (experiment common-lisp:nil :type
    (common-lisp:or experiment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-response 'make-get-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-template-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experiment-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-template-request
                    'make-get-experiment-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-experiment-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-experiment-template-response-"))
   (experiment-template common-lisp:nil :type
    (common-lisp:or experiment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-template-response
                    'make-get-experiment-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-target-resource-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-target-resource-type-request-"))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or target-resource-type-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-target-resource-type-request
                    'make-get-target-resource-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-target-resource-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-target-resource-type-response-"))
   (target-resource-type common-lisp:nil :type
    (common-lisp:or target-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-target-resource-type-response
                    'make-get-target-resource-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-type))
      (common-lisp:list
       (common-lisp:cons "targetResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-response))
   common-lisp:nil))
(common-lisp:deftype last-update-time () 'common-lisp:string)
(common-lisp:deftype list-actions-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-actions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-actions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-actions-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-actions-request 'make-list-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-actions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-actions-response-"))
   (actions common-lisp:nil :type
    (common-lisp:or action-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-actions-response 'make-list-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   common-lisp:nil))
(common-lisp:deftype list-experiment-templates-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiment-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiment-templates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-experiment-templates-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiment-templates-request
                    'make-list-experiment-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiment-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiment-templates-response-"))
   (experiment-templates common-lisp:nil :type
    (common-lisp:or experiment-template-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiment-templates-response
                    'make-list-experiment-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-templates))
      (common-lisp:list
       (common-lisp:cons "experimentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-response))
   common-lisp:nil))
(common-lisp:deftype list-experiments-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiments-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-experiments-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-request 'make-list-experiments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiments-response-"))
   (experiments common-lisp:nil :type
    (common-lisp:or experiment-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-response
                    'make-list-experiments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiments))
      (common-lisp:list
       (common-lisp:cons "experiments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype list-target-resource-types-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-target-resource-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-target-resource-types-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-target-resource-types-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-target-resource-types-request
                    'make-list-target-resource-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-target-resource-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-target-resource-types-response-"))
   (target-resource-types common-lisp:nil :type
    (common-lisp:or target-resource-type-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-target-resource-types-response
                    'make-list-target-resource-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-types))
      (common-lisp:list
       (common-lisp:cons "targetResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-response))
   common-lisp:nil))
(common-lisp:deftype log-schema-version () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arn-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-resource-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (fis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (fis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-experiment-request-"))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (experiment-template-id
    (common-lisp:error ":experimenttemplateid is required") :type
    (common-lisp:or experiment-template-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-experiment-request 'make-start-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-template-id))
      (common-lisp:list
       (common-lisp:cons "experimentTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-experiment-response-"))
   (experiment common-lisp:nil :type
    (common-lisp:or experiment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-experiment-response
                    'make-start-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   common-lisp:nil))
(common-lisp:deftype stop-condition-source () 'common-lisp:string)
(common-lisp:deftype stop-condition-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-experiment-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experiment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-experiment-request 'make-stop-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-experiment-response-"))
   (experiment common-lisp:nil :type
    (common-lisp:or experiment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-experiment-response 'make-stop-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-resource-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-resource-type-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or target-resource-type-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or target-resource-type-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or target-resource-type-parameter-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-resource-type 'make-target-resource-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-resource-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-resource-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-resource-type))
   common-lisp:nil))
(common-lisp:deftype target-resource-type-description () 'common-lisp:string)
(common-lisp:deftype target-resource-type-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-resource-type-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-resource-type-parameter-"))
   (description common-lisp:nil :type
    (common-lisp:or target-resource-type-parameter-description
                    common-lisp:null))
   (required common-lisp:nil :type
    (common-lisp:or target-resource-type-parameter-required common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-resource-type-parameter
                    'make-target-resource-type-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-parameter))
   common-lisp:nil))
(common-lisp:deftype target-resource-type-parameter-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-resource-type-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-target-resource-type-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-resource-type-parameter-name () 'common-lisp:string)
(common-lisp:deftype target-resource-type-parameter-required ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (target-resource-type-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-resource-type-summary-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or target-resource-type-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or target-resource-type-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-resource-type-summary
                    'make-target-resource-type-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-resource-type-summary-list ()
   '(trivial-types:proper-list target-resource-type-summary))
 (common-lisp:defun |make-target-resource-type-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-resource-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-template-action-input-item (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-experiment-template-action-input-item-"))
   (action-id common-lisp:nil :type
    (common-lisp:or action-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-template-action-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-template-action-parameter-map common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or experiment-template-action-target-map common-lisp:null))
   (start-after common-lisp:nil :type
    (common-lisp:or experiment-template-action-start-after-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-action-input-item
                    'make-update-experiment-template-action-input-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-action-input-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-action-input-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-action-input-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-experiment-template-action-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-update-experiment-template-action-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-template-log-configuration-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-experiment-template-log-configuration-input-"))
   (cloud-watch-logs-configuration common-lisp:nil :type
    (common-lisp:or
     experiment-template-cloud-watch-logs-log-configuration-input
     common-lisp:null))
   (s3configuration common-lisp:nil :type
    (common-lisp:or experiment-template-s3log-configuration-input
                    common-lisp:null))
   (log-schema-version common-lisp:nil :type
    (common-lisp:or log-schema-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-log-configuration-input
                    'make-update-experiment-template-log-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-log-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-template-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experiment-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-template-description common-lisp:null))
   (stop-conditions common-lisp:nil :type
    (common-lisp:or update-experiment-template-stop-condition-input-list
                    common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or update-experiment-template-target-input-map
                    common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or update-experiment-template-action-input-map
                    common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (log-configuration common-lisp:nil :type
    (common-lisp:or update-experiment-template-log-configuration-input
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-request
                    'make-update-experiment-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-template-response-"))
   (experiment-template common-lisp:nil :type
    (common-lisp:or experiment-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-response
                    'make-update-experiment-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-template-stop-condition-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-experiment-template-stop-condition-input-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or stop-condition-source common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or stop-condition-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-stop-condition-input
                    'make-update-experiment-template-stop-condition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-stop-condition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-stop-condition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-stop-condition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-experiment-template-stop-condition-input-list ()
   '(trivial-types:proper-list
     update-experiment-template-stop-condition-input))
 (common-lisp:defun |make-update-experiment-template-stop-condition-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-experiment-template-stop-condition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-template-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-template-target-input-"))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or target-resource-type-id common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arn-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or tag-map common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or experiment-template-target-filter-input-list
                    common-lisp:null))
   (selection-mode (common-lisp:error ":selectionmode is required") :type
    (common-lisp:or experiment-template-target-selection-mode
                    common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or experiment-template-target-parameter-map
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-target-input
                    'make-update-experiment-template-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-experiment-template-target-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-update-experiment-template-target-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (fis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description stop-conditions
                     targets actions role-arn tags log-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-token description stop-conditions targets
     actions role-arn tags log-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-experiment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/experimentTemplates"
                                                        "CreateExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-experiment-template))
(common-lisp:progn
 (common-lisp:defun delete-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-experiment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experimentTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-experiment-template))
(common-lisp:progn
 (common-lisp:defun get-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetAction"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-action))
(common-lisp:progn
 (common-lisp:defun get-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetExperiment"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-experiment))
(common-lisp:progn
 (common-lisp:defun get-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-experiment-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experimentTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-experiment-template))
(common-lisp:progn
 (common-lisp:defun get-target-resource-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type)
   (common-lisp:declare (common-lisp:ignorable resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-target-resource-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/targetResourceTypes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-type))))
                                                        "GetTargetResourceType"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-target-resource-type))
(common-lisp:progn
 (common-lisp:defun list-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/actions"
                                                        "ListActions"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-actions))
(common-lisp:progn
 (common-lisp:defun list-experiment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-experiment-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/experimentTemplates"
                                                        "ListExperimentTemplates"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiment-templates))
(common-lisp:progn
 (common-lisp:defun list-experiments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-experiments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/experiments"
                                                        "ListExperiments"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiments))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-target-resource-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-target-resource-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/targetResourceTypes"
                                                        "ListTargetResourceTypes"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-target-resource-types))
(common-lisp:progn
 (common-lisp:defun start-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token experiment-template-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token experiment-template-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/experiments"
                                                        "StartExperiment"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-experiment))
(common-lisp:progn
 (common-lisp:defun stop-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StopExperiment"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-experiment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id description stop-conditions targets
                     actions role-arn log-configuration)
   (common-lisp:declare
    (common-lisp:ignorable id description stop-conditions targets actions
     role-arn log-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-experiment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experimentTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-experiment-template))
