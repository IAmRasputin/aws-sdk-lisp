;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/fis/api
  (:use)
  (:nicknames #:aws/fis)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/fis/api)
(common-lisp:progn
 (common-lisp:defclass fis-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "fis" :protocol :rest-json))
 (common-lisp:export 'fis-request))
(common-lisp:progn
 (common-lisp:define-condition fis-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'fis-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %action-tags :initform common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or action-target-map common-lisp:null)
                         :accessor %action-targets :initform common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or action-parameter-map common-lisp:null)
                         :accessor %action-parameters :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or action-description common-lisp:null)
                         :accessor %action-description :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %action-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defun make-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags targets parameters description id)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:deftype action-description () 'common-lisp:string)
(common-lisp:deftype action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action-parameter common-lisp:nil
                       ((required :initarg :|required| :type
                         (common-lisp:or action-parameter-required
                                         common-lisp:null)
                         :accessor %action-parameter-required :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or action-parameter-description
                                         common-lisp:null)
                         :accessor %action-parameter-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-parameter 'make-action-parameter))
 (common-lisp:defun make-action-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key required description)
   (common-lisp:apply #'common-lisp:make-instance 'action-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-parameter))
   common-lisp:nil))
(common-lisp:deftype action-parameter-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-action-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype action-parameter-name () 'common-lisp:string)
(common-lisp:deftype action-parameter-required () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass action-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %action-summary-tags :initform common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or action-target-map common-lisp:null)
                         :accessor %action-summary-targets :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or action-description common-lisp:null)
                         :accessor %action-summary-description :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %action-summary-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action-summary 'make-action-summary))
 (common-lisp:defun make-action-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags targets description id)
   (common-lisp:apply #'common-lisp:make-instance 'action-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-summary-list ()
   '(trivial-types:proper-list action-summary))
 (common-lisp:defun |make-action-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass action-target common-lisp:nil
                       ((resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor %action-target-resource-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action-target 'make-action-target))
 (common-lisp:defun make-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'action-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-action-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype action-target-name () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype cloud-watch-log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (fis-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-experiment-template-action-input common-lisp:nil
                       ((start-after :initarg :|startAfter| :type
                         (common-lisp:or
                          experiment-template-action-start-after-list
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-action-input-start-after
                         :initform common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or experiment-template-action-target-map
                                         common-lisp:null)
                         :accessor
                         %create-experiment-template-action-input-targets
                         :initform common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or
                          experiment-template-action-parameter-map
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-action-input-parameters
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-action-description
                                         common-lisp:null)
                         :accessor
                         %create-experiment-template-action-input-description
                         :initform common-lisp:nil)
                        (action-id :initarg :|actionId| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %create-experiment-template-action-input-action-id
                         :initform
                         (common-lisp:error ":actionid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-action-input
                    'make-create-experiment-template-action-input))
 (common-lisp:defun make-create-experiment-template-action-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-after targets parameters
                     description action-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-experiment-template-action-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-action-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-action-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-action-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-experiment-template-action-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-create-experiment-template-action-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass create-experiment-template-log-configuration-input
                       common-lisp:nil
                       ((log-schema-version :initarg :|logSchemaVersion| :type
                         (common-lisp:or log-schema-version common-lisp:null)
                         :accessor
                         %create-experiment-template-log-configuration-input-log-schema-version
                         :initform
                         (common-lisp:error ":logschemaversion is required"))
                        (s3configuration :initarg :|s3Configuration| :type
                         (common-lisp:or
                          experiment-template-s3log-configuration-input
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-log-configuration-input-s3configuration
                         :initform common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :|cloudWatchLogsConfiguration| :type
                         (common-lisp:or
                          experiment-template-cloud-watch-logs-log-configuration-input
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-log-configuration-input-cloud-watch-logs-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-log-configuration-input
                    'make-create-experiment-template-log-configuration-input))
 (common-lisp:defun make-create-experiment-template-log-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-schema-version s3configuration
                     cloud-watch-logs-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-experiment-template-log-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-log-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-experiment-template-request common-lisp:nil
                       ((log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or
                          create-experiment-template-log-configuration-input
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-request-log-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-experiment-template-request-tags :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-experiment-template-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (actions :initarg :|actions| :type
                         (common-lisp:or
                          create-experiment-template-action-input-map
                          common-lisp:null)
                         :accessor %create-experiment-template-request-actions
                         :initform (common-lisp:error ":actions is required"))
                        (targets :initarg :|targets| :type
                         (common-lisp:or
                          create-experiment-template-target-input-map
                          common-lisp:null)
                         :accessor %create-experiment-template-request-targets
                         :initform common-lisp:nil)
                        (stop-conditions :initarg :|stopConditions| :type
                         (common-lisp:or
                          create-experiment-template-stop-condition-input-list
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-request-stop-conditions
                         :initform
                         (common-lisp:error ":stopconditions is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-description
                                         common-lisp:null)
                         :accessor
                         %create-experiment-template-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-experiment-template-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-request
                    'make-create-experiment-template-request))
 (common-lisp:defun make-create-experiment-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration tags role-arn actions
                     targets stop-conditions description client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-experiment-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-experiment-template-response common-lisp:nil
                       ((experiment-template :initarg :|experimentTemplate|
                         :type
                         (common-lisp:or experiment-template common-lisp:null)
                         :accessor
                         %create-experiment-template-response-experiment-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-response
                    'make-create-experiment-template-response))
 (common-lisp:defun make-create-experiment-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment-template)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-experiment-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-experiment-template-stop-condition-input
                       common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or stop-condition-value common-lisp:null)
                         :accessor
                         %create-experiment-template-stop-condition-input-value
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or stop-condition-source
                                         common-lisp:null)
                         :accessor
                         %create-experiment-template-stop-condition-input-source
                         :initform (common-lisp:error ":source is required"))))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-stop-condition-input
                    'make-create-experiment-template-stop-condition-input))
 (common-lisp:defun make-create-experiment-template-stop-condition-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value source)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-experiment-template-stop-condition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-stop-condition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-stop-condition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-stop-condition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-experiment-template-stop-condition-input-list ()
   '(trivial-types:proper-list
     create-experiment-template-stop-condition-input))
 (common-lisp:defun |make-create-experiment-template-stop-condition-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-experiment-template-stop-condition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-experiment-template-target-input common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or
                          experiment-template-target-parameter-map
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-target-input-parameters
                         :initform common-lisp:nil)
                        (selection-mode :initarg :|selectionMode| :type
                         (common-lisp:or
                          experiment-template-target-selection-mode
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-target-input-selection-mode
                         :initform
                         (common-lisp:error ":selectionmode is required"))
                        (filters :initarg :|filters| :type
                         (common-lisp:or
                          experiment-template-target-filter-input-list
                          common-lisp:null)
                         :accessor
                         %create-experiment-template-target-input-filters
                         :initform common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-experiment-template-target-input-resource-tags
                         :initform common-lisp:nil)
                        (resource-arns :initarg :|resourceArns| :type
                         (common-lisp:or resource-arn-list common-lisp:null)
                         :accessor
                         %create-experiment-template-target-input-resource-arns
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor
                         %create-experiment-template-target-input-resource-type
                         :initform
                         (common-lisp:error ":resourcetype is required"))))
 (common-lisp:export
  (common-lisp:list 'create-experiment-template-target-input
                    'make-create-experiment-template-target-input))
 (common-lisp:defun make-create-experiment-template-target-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters selection-mode filters
                     resource-tags resource-arns resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-experiment-template-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-template-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-experiment-template-target-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-create-experiment-template-target-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-experiment-template-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %delete-experiment-template-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-template-request
                    'make-delete-experiment-template-request))
 (common-lisp:defun make-delete-experiment-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-experiment-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-experiment-template-response common-lisp:nil
                       ((experiment-template :initarg :|experimentTemplate|
                         :type
                         (common-lisp:or experiment-template common-lisp:null)
                         :accessor
                         %delete-experiment-template-response-experiment-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-template-response
                    'make-delete-experiment-template-response))
 (common-lisp:defun make-delete-experiment-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment-template)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-experiment-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-template-response))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment common-lisp:nil
                       ((log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or experiment-log-configuration
                                         common-lisp:null)
                         :accessor %experiment-log-configuration :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %experiment-tags :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or experiment-end-time common-lisp:null)
                         :accessor %experiment-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or experiment-start-time
                                         common-lisp:null)
                         :accessor %experiment-start-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %experiment-creation-time :initform
                         common-lisp:nil)
                        (stop-conditions :initarg :|stopConditions| :type
                         (common-lisp:or experiment-stop-condition-list
                                         common-lisp:null)
                         :accessor %experiment-stop-conditions :initform
                         common-lisp:nil)
                        (actions :initarg :|actions| :type
                         (common-lisp:or experiment-action-map
                                         common-lisp:null)
                         :accessor %experiment-actions :initform
                         common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or experiment-target-map
                                         common-lisp:null)
                         :accessor %experiment-targets :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or experiment-state common-lisp:null)
                         :accessor %experiment-state :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %experiment-role-arn :initform common-lisp:nil)
                        (experiment-template-id :initarg
                         :|experimentTemplateId| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %experiment-experiment-template-id :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or experiment-id common-lisp:null)
                         :accessor %experiment-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'experiment 'make-experiment))
 (common-lisp:defun make-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration tags end-time
                     start-time creation-time stop-conditions actions targets
                     state role-arn experiment-template-id id)
   (common-lisp:apply #'common-lisp:make-instance 'experiment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-template-id))
      (common-lisp:list
       (common-lisp:cons "experimentTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-action common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or experiment-action-end-time
                                         common-lisp:null)
                         :accessor %experiment-action-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or experiment-action-start-time
                                         common-lisp:null)
                         :accessor %experiment-action-start-time :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or experiment-action-state
                                         common-lisp:null)
                         :accessor %experiment-action-state :initform
                         common-lisp:nil)
                        (start-after :initarg :|startAfter| :type
                         (common-lisp:or experiment-action-start-after-list
                                         common-lisp:null)
                         :accessor %experiment-action-start-after :initform
                         common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or experiment-action-target-map
                                         common-lisp:null)
                         :accessor %experiment-action-targets :initform
                         common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or experiment-action-parameter-map
                                         common-lisp:null)
                         :accessor %experiment-action-parameters :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-action-description
                                         common-lisp:null)
                         :accessor %experiment-action-description :initform
                         common-lisp:nil)
                        (action-id :initarg :|actionId| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %experiment-action-action-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-action 'make-experiment-action))
 (common-lisp:defun make-experiment-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time state start-after
                     targets parameters description action-id)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-action))
   common-lisp:nil))
(common-lisp:deftype experiment-action-description () 'common-lisp:string)
(common-lisp:deftype experiment-action-end-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-action-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-action-name () 'common-lisp:string)
(common-lisp:deftype experiment-action-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-action-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-action-parameter-name () 'common-lisp:string)
(common-lisp:deftype experiment-action-start-after () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-start-after-list ()
   '(trivial-types:proper-list experiment-action-start-after))
 (common-lisp:defun |make-experiment-action-start-after-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-action-start-after))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-action-start-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-action-state common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or experiment-action-status-reason
                                         common-lisp:null)
                         :accessor %experiment-action-state-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or experiment-action-status
                                         common-lisp:null)
                         :accessor %experiment-action-state-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-action-state 'make-experiment-action-state))
 (common-lisp:defun make-experiment-action-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason status)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-action-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-action-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-action-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-action-state))
   common-lisp:nil))
(common-lisp:deftype experiment-action-status () 'common-lisp:string)
(common-lisp:deftype experiment-action-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-action-target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-action-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-action-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-cloud-watch-logs-log-configuration
                       common-lisp:nil
                       ((log-group-arn :initarg :|logGroupArn| :type
                         (common-lisp:or cloud-watch-log-group-arn
                                         common-lisp:null)
                         :accessor
                         %experiment-cloud-watch-logs-log-configuration-log-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-cloud-watch-logs-log-configuration
                    'make-experiment-cloud-watch-logs-log-configuration))
 (common-lisp:defun make-experiment-cloud-watch-logs-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-cloud-watch-logs-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-cloud-watch-logs-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-cloud-watch-logs-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-cloud-watch-logs-log-configuration))
   common-lisp:nil))
(common-lisp:deftype experiment-end-time () 'common-lisp:string)
(common-lisp:deftype experiment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-log-configuration common-lisp:nil
                       ((log-schema-version :initarg :|logSchemaVersion| :type
                         (common-lisp:or log-schema-version common-lisp:null)
                         :accessor
                         %experiment-log-configuration-log-schema-version
                         :initform common-lisp:nil)
                        (s3configuration :initarg :|s3Configuration| :type
                         (common-lisp:or experiment-s3log-configuration
                                         common-lisp:null)
                         :accessor
                         %experiment-log-configuration-s3configuration
                         :initform common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :|cloudWatchLogsConfiguration| :type
                         (common-lisp:or
                          experiment-cloud-watch-logs-log-configuration
                          common-lisp:null)
                         :accessor
                         %experiment-log-configuration-cloud-watch-logs-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-log-configuration
                    'make-experiment-log-configuration))
 (common-lisp:defun make-experiment-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-schema-version s3configuration
                     cloud-watch-logs-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-s3log-configuration common-lisp:nil
                       ((prefix :initarg :|prefix| :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor %experiment-s3log-configuration-prefix
                         :initform common-lisp:nil)
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %experiment-s3log-configuration-bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-s3log-configuration
                    'make-experiment-s3log-configuration))
 (common-lisp:defun make-experiment-s3log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-s3log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-s3log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-s3log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-s3log-configuration))
   common-lisp:nil))
(common-lisp:deftype experiment-start-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-state common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or experiment-status-reason
                                         common-lisp:null)
                         :accessor %experiment-state-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or experiment-status common-lisp:null)
                         :accessor %experiment-state-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-state 'make-experiment-state))
 (common-lisp:defun make-experiment-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason status)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-state))
   common-lisp:nil))
(common-lisp:deftype experiment-status () 'common-lisp:string)
(common-lisp:deftype experiment-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-stop-condition common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or stop-condition-value common-lisp:null)
                         :accessor %experiment-stop-condition-value :initform
                         common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or stop-condition-source
                                         common-lisp:null)
                         :accessor %experiment-stop-condition-source :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-stop-condition
                    'make-experiment-stop-condition))
 (common-lisp:defun make-experiment-stop-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value source)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-stop-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-stop-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-stop-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-stop-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-stop-condition-list ()
   '(trivial-types:proper-list experiment-stop-condition))
 (common-lisp:defun |make-experiment-stop-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-stop-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass experiment-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %experiment-summary-tags :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %experiment-summary-creation-time :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or experiment-state common-lisp:null)
                         :accessor %experiment-summary-state :initform
                         common-lisp:nil)
                        (experiment-template-id :initarg
                         :|experimentTemplateId| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %experiment-summary-experiment-template-id
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or experiment-id common-lisp:null)
                         :accessor %experiment-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-summary 'make-experiment-summary))
 (common-lisp:defun make-experiment-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags creation-time state
                     experiment-template-id id)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-template-id))
      (common-lisp:list
       (common-lisp:cons "experimentTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-summary-list ()
   '(trivial-types:proper-list experiment-summary))
 (common-lisp:defun |make-experiment-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass experiment-target common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or experiment-target-parameter-map
                                         common-lisp:null)
                         :accessor %experiment-target-parameters :initform
                         common-lisp:nil)
                        (selection-mode :initarg :|selectionMode| :type
                         (common-lisp:or experiment-target-selection-mode
                                         common-lisp:null)
                         :accessor %experiment-target-selection-mode :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or experiment-target-filter-list
                                         common-lisp:null)
                         :accessor %experiment-target-filters :initform
                         common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %experiment-target-resource-tags :initform
                         common-lisp:nil)
                        (resource-arns :initarg :|resourceArns| :type
                         (common-lisp:or resource-arn-list common-lisp:null)
                         :accessor %experiment-target-resource-arns :initform
                         common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor %experiment-target-resource-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-target 'make-experiment-target))
 (common-lisp:defun make-experiment-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters selection-mode filters
                     resource-tags resource-arns resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-target-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or experiment-target-filter-values
                                         common-lisp:null)
                         :accessor %experiment-target-filter-values :initform
                         common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or experiment-target-filter-path
                                         common-lisp:null)
                         :accessor %experiment-target-filter-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-target-filter 'make-experiment-target-filter))
 (common-lisp:defun make-experiment-target-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values path)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-target-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-target-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-target-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-target-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-target-filter-list ()
   '(trivial-types:proper-list experiment-target-filter))
 (common-lisp:defun |make-experiment-target-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-target-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-target-filter-path () 'common-lisp:string)
(common-lisp:deftype experiment-target-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-target-filter-values ()
   '(trivial-types:proper-list experiment-target-filter-value))
 (common-lisp:defun |make-experiment-target-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-target-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype experiment-target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-target-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-target-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-target-parameter-name () 'common-lisp:string)
(common-lisp:deftype experiment-target-parameter-value () 'common-lisp:string)
(common-lisp:deftype experiment-target-selection-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-template common-lisp:nil
                       ((log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or experiment-template-log-configuration
                                         common-lisp:null)
                         :accessor %experiment-template-log-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %experiment-template-tags :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %experiment-template-role-arn :initform
                         common-lisp:nil)
                        (last-update-time :initarg :|lastUpdateTime| :type
                         (common-lisp:or last-update-time common-lisp:null)
                         :accessor %experiment-template-last-update-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %experiment-template-creation-time :initform
                         common-lisp:nil)
                        (stop-conditions :initarg :|stopConditions| :type
                         (common-lisp:or
                          experiment-template-stop-condition-list
                          common-lisp:null)
                         :accessor %experiment-template-stop-conditions
                         :initform common-lisp:nil)
                        (actions :initarg :|actions| :type
                         (common-lisp:or experiment-template-action-map
                                         common-lisp:null)
                         :accessor %experiment-template-actions :initform
                         common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or experiment-template-target-map
                                         common-lisp:null)
                         :accessor %experiment-template-targets :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-description
                                         common-lisp:null)
                         :accessor %experiment-template-description :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %experiment-template-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template 'make-experiment-template))
 (common-lisp:defun make-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration tags role-arn
                     last-update-time creation-time stop-conditions actions
                     targets description id)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-template-action common-lisp:nil
                       ((start-after :initarg :|startAfter| :type
                         (common-lisp:or
                          experiment-template-action-start-after-list
                          common-lisp:null)
                         :accessor %experiment-template-action-start-after
                         :initform common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or experiment-template-action-target-map
                                         common-lisp:null)
                         :accessor %experiment-template-action-targets
                         :initform common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or
                          experiment-template-action-parameter-map
                          common-lisp:null)
                         :accessor %experiment-template-action-parameters
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-action-description
                                         common-lisp:null)
                         :accessor %experiment-template-action-description
                         :initform common-lisp:nil)
                        (action-id :initarg :|actionId| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %experiment-template-action-action-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-action
                    'make-experiment-template-action))
 (common-lisp:defun make-experiment-template-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-after targets parameters
                     description action-id)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-template-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-action))
   common-lisp:nil))
(common-lisp:deftype experiment-template-action-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-action-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-action-name () 'common-lisp:string)
(common-lisp:deftype experiment-template-action-parameter ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-action-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-action-parameter-name ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-action-start-after ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-start-after-list ()
   '(trivial-types:proper-list experiment-template-action-start-after))
 (common-lisp:defun |make-experiment-template-action-start-after-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-action-start-after))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype experiment-template-action-target-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-action-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-action-target-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-template-cloud-watch-logs-log-configuration
                       common-lisp:nil
                       ((log-group-arn :initarg :|logGroupArn| :type
                         (common-lisp:or cloud-watch-log-group-arn
                                         common-lisp:null)
                         :accessor
                         %experiment-template-cloud-watch-logs-log-configuration-log-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-cloud-watch-logs-log-configuration
                    'make-experiment-template-cloud-watch-logs-log-configuration))
 (common-lisp:defun make-experiment-template-cloud-watch-logs-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-cloud-watch-logs-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  experiment-template-cloud-watch-logs-log-configuration-input common-lisp:nil
  ((log-group-arn :initarg :|logGroupArn| :type
    (common-lisp:or cloud-watch-log-group-arn common-lisp:null) :accessor
    %experiment-template-cloud-watch-logs-log-configuration-input-log-group-arn
    :initform (common-lisp:error ":loggrouparn is required"))))
 (common-lisp:export
  (common-lisp:list
   'experiment-template-cloud-watch-logs-log-configuration-input
   'make-experiment-template-cloud-watch-logs-log-configuration-input))
 (common-lisp:defun make-experiment-template-cloud-watch-logs-log-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-cloud-watch-logs-log-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-cloud-watch-logs-log-configuration-input))
   common-lisp:nil))
(common-lisp:deftype experiment-template-description () 'common-lisp:string)
(common-lisp:deftype experiment-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass experiment-template-log-configuration common-lisp:nil
                       ((log-schema-version :initarg :|logSchemaVersion| :type
                         (common-lisp:or log-schema-version common-lisp:null)
                         :accessor
                         %experiment-template-log-configuration-log-schema-version
                         :initform common-lisp:nil)
                        (s3configuration :initarg :|s3Configuration| :type
                         (common-lisp:or
                          experiment-template-s3log-configuration
                          common-lisp:null)
                         :accessor
                         %experiment-template-log-configuration-s3configuration
                         :initform common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :|cloudWatchLogsConfiguration| :type
                         (common-lisp:or
                          experiment-template-cloud-watch-logs-log-configuration
                          common-lisp:null)
                         :accessor
                         %experiment-template-log-configuration-cloud-watch-logs-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-log-configuration
                    'make-experiment-template-log-configuration))
 (common-lisp:defun make-experiment-template-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-schema-version s3configuration
                     cloud-watch-logs-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-template-s3log-configuration common-lisp:nil
                       ((prefix :initarg :|prefix| :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         %experiment-template-s3log-configuration-prefix
                         :initform common-lisp:nil)
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         %experiment-template-s3log-configuration-bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-s3log-configuration
                    'make-experiment-template-s3log-configuration))
 (common-lisp:defun make-experiment-template-s3log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-s3log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-template-s3log-configuration-input
                       common-lisp:nil
                       ((prefix :initarg :|prefix| :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         %experiment-template-s3log-configuration-input-prefix
                         :initform common-lisp:nil)
                        (bucket-name :initarg :|bucketName| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         %experiment-template-s3log-configuration-input-bucket-name
                         :initform
                         (common-lisp:error ":bucketname is required"))))
 (common-lisp:export
  (common-lisp:list 'experiment-template-s3log-configuration-input
                    'make-experiment-template-s3log-configuration-input))
 (common-lisp:defun make-experiment-template-s3log-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-s3log-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-s3log-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-template-stop-condition common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or stop-condition-value common-lisp:null)
                         :accessor %experiment-template-stop-condition-value
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or stop-condition-source
                                         common-lisp:null)
                         :accessor %experiment-template-stop-condition-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-stop-condition
                    'make-experiment-template-stop-condition))
 (common-lisp:defun make-experiment-template-stop-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value source)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-stop-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-stop-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-stop-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-stop-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-stop-condition-list ()
   '(trivial-types:proper-list experiment-template-stop-condition))
 (common-lisp:defun |make-experiment-template-stop-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-stop-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass experiment-template-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %experiment-template-summary-tags :initform
                         common-lisp:nil)
                        (last-update-time :initarg :|lastUpdateTime| :type
                         (common-lisp:or last-update-time common-lisp:null)
                         :accessor
                         %experiment-template-summary-last-update-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %experiment-template-summary-creation-time
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-description
                                         common-lisp:null)
                         :accessor %experiment-template-summary-description
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %experiment-template-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-summary
                    'make-experiment-template-summary))
 (common-lisp:defun make-experiment-template-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags last-update-time creation-time
                     description id)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-summary-list ()
   '(trivial-types:proper-list experiment-template-summary))
 (common-lisp:defun |make-experiment-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass experiment-template-target common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or
                          experiment-template-target-parameter-map
                          common-lisp:null)
                         :accessor %experiment-template-target-parameters
                         :initform common-lisp:nil)
                        (selection-mode :initarg :|selectionMode| :type
                         (common-lisp:or
                          experiment-template-target-selection-mode
                          common-lisp:null)
                         :accessor %experiment-template-target-selection-mode
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or experiment-template-target-filter-list
                                         common-lisp:null)
                         :accessor %experiment-template-target-filters
                         :initform common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %experiment-template-target-resource-tags :initform
                         common-lisp:nil)
                        (resource-arns :initarg :|resourceArns| :type
                         (common-lisp:or resource-arn-list common-lisp:null)
                         :accessor %experiment-template-target-resource-arns
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor %experiment-template-target-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-target
                    'make-experiment-template-target))
 (common-lisp:defun make-experiment-template-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters selection-mode filters
                     resource-tags resource-arns resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'experiment-template-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass experiment-template-target-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or
                          experiment-template-target-filter-values
                          common-lisp:null)
                         :accessor %experiment-template-target-filter-values
                         :initform common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or experiment-template-target-filter-path
                                         common-lisp:null)
                         :accessor %experiment-template-target-filter-path
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'experiment-template-target-filter
                    'make-experiment-template-target-filter))
 (common-lisp:defun make-experiment-template-target-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values path)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-target-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-filter-input-list ()
   '(trivial-types:proper-list experiment-template-target-input-filter))
 (common-lisp:defun |make-experiment-template-target-filter-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-target-input-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-filter-list ()
   '(trivial-types:proper-list experiment-template-target-filter))
 (common-lisp:defun |make-experiment-template-target-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-target-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experiment-template-target-filter-path ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-target-filter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-filter-values ()
   '(trivial-types:proper-list experiment-template-target-filter-value))
 (common-lisp:defun |make-experiment-template-target-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experiment-template-target-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass experiment-template-target-input-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or
                          experiment-template-target-filter-values
                          common-lisp:null)
                         :accessor
                         %experiment-template-target-input-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (path :initarg :|path| :type
                         (common-lisp:or experiment-template-target-filter-path
                                         common-lisp:null)
                         :accessor
                         %experiment-template-target-input-filter-path
                         :initform (common-lisp:error ":path is required"))))
 (common-lisp:export
  (common-lisp:list 'experiment-template-target-input-filter
                    'make-experiment-template-target-input-filter))
 (common-lisp:defun make-experiment-template-target-input-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values path)
   (common-lisp:apply #'common-lisp:make-instance
                      'experiment-template-target-input-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-input-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-input-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experiment-template-target-input-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-target-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-template-target-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-experiment-template-target-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype experiment-template-target-parameter-name ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-target-parameter-value ()
  'common-lisp:string)
(common-lisp:deftype experiment-template-target-selection-mode ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-action-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %get-action-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-action-request 'make-get-action-request))
 (common-lisp:defun make-get-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-action-response common-lisp:nil
                       ((action :initarg :|action| :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %get-action-response-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-action-response 'make-get-action-response))
 (common-lisp:defun make-get-action-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action)
   (common-lisp:apply #'common-lisp:make-instance 'get-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-experiment-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or experiment-id common-lisp:null)
                         :accessor %get-experiment-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-experiment-request 'make-get-experiment-request))
 (common-lisp:defun make-get-experiment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-experiment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-experiment-response common-lisp:nil
                       ((experiment :initarg :|experiment| :type
                         (common-lisp:or experiment common-lisp:null) :accessor
                         %get-experiment-response-experiment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-response 'make-get-experiment-response))
 (common-lisp:defun make-get-experiment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment)
   (common-lisp:apply #'common-lisp:make-instance 'get-experiment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-experiment-template-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %get-experiment-template-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-experiment-template-request
                    'make-get-experiment-template-request))
 (common-lisp:defun make-get-experiment-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-experiment-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-experiment-template-response common-lisp:nil
                       ((experiment-template :initarg :|experimentTemplate|
                         :type
                         (common-lisp:or experiment-template common-lisp:null)
                         :accessor
                         %get-experiment-template-response-experiment-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-experiment-template-response
                    'make-get-experiment-template-response))
 (common-lisp:defun make-get-experiment-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment-template)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-experiment-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-experiment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-target-resource-type-request common-lisp:nil
                       ((resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor
                         %get-target-resource-type-request-resource-type
                         :initform
                         (common-lisp:error ":resourcetype is required"))))
 (common-lisp:export
  (common-lisp:list 'get-target-resource-type-request
                    'make-get-target-resource-type-request))
 (common-lisp:defun make-get-target-resource-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-target-resource-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-target-resource-type-response common-lisp:nil
                       ((target-resource-type :initarg :|targetResourceType|
                         :type
                         (common-lisp:or target-resource-type common-lisp:null)
                         :accessor
                         %get-target-resource-type-response-target-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-target-resource-type-response
                    'make-get-target-resource-type-response))
 (common-lisp:defun make-get-target-resource-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-target-resource-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-type))
      (common-lisp:list
       (common-lisp:cons "targetResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-target-resource-type-response))
   common-lisp:nil))
(common-lisp:deftype last-update-time () 'common-lisp:string)
(common-lisp:deftype list-actions-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-actions-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-actions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-actions-max-results
                                         common-lisp:null)
                         :accessor %list-actions-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-actions-request 'make-list-actions-request))
 (common-lisp:defun make-list-actions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-actions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-actions-response-next-token :initform
                         common-lisp:nil)
                        (actions :initarg :|actions| :type
                         (common-lisp:or action-summary-list common-lisp:null)
                         :accessor %list-actions-response-actions :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-actions-response 'make-list-actions-response))
 (common-lisp:defun make-list-actions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token actions)
   (common-lisp:apply #'common-lisp:make-instance 'list-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   common-lisp:nil))
(common-lisp:deftype list-experiment-templates-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-experiment-templates-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-experiment-templates-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-experiment-templates-max-results
                                         common-lisp:null)
                         :accessor
                         %list-experiment-templates-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-experiment-templates-request
                    'make-list-experiment-templates-request))
 (common-lisp:defun make-list-experiment-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-experiment-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-experiment-templates-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-experiment-templates-response-next-token
                         :initform common-lisp:nil)
                        (experiment-templates :initarg :|experimentTemplates|
                         :type
                         (common-lisp:or experiment-template-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-experiment-templates-response-experiment-templates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-experiment-templates-response
                    'make-list-experiment-templates-response))
 (common-lisp:defun make-list-experiment-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token experiment-templates)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-experiment-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-templates))
      (common-lisp:list
       (common-lisp:cons "experimentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiment-templates-response))
   common-lisp:nil))
(common-lisp:deftype list-experiments-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-experiments-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-experiments-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-experiments-max-results
                                         common-lisp:null)
                         :accessor %list-experiments-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-request 'make-list-experiments-request))
 (common-lisp:defun make-list-experiments-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-experiments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-experiments-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-experiments-response-next-token :initform
                         common-lisp:nil)
                        (experiments :initarg :|experiments| :type
                         (common-lisp:or experiment-summary-list
                                         common-lisp:null)
                         :accessor %list-experiments-response-experiments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-response
                    'make-list-experiments-response))
 (common-lisp:defun make-list-experiments-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token experiments)
   (common-lisp:apply #'common-lisp:make-instance 'list-experiments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiments))
      (common-lisp:list
       (common-lisp:cons "experiments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype list-target-resource-types-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-target-resource-types-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-target-resource-types-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-target-resource-types-max-results
                                         common-lisp:null)
                         :accessor
                         %list-target-resource-types-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-target-resource-types-request
                    'make-list-target-resource-types-request))
 (common-lisp:defun make-list-target-resource-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-target-resource-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-target-resource-types-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-target-resource-types-response-next-token
                         :initform common-lisp:nil)
                        (target-resource-types :initarg :|targetResourceTypes|
                         :type
                         (common-lisp:or target-resource-type-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-target-resource-types-response-target-resource-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-target-resource-types-response
                    'make-list-target-resource-types-response))
 (common-lisp:defun make-list-target-resource-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token target-resource-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-target-resource-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-types))
      (common-lisp:list
       (common-lisp:cons "targetResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-target-resource-types-response))
   common-lisp:nil))
(common-lisp:deftype log-schema-version () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arn-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-resource-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (fis-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (fis-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-experiment-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-experiment-request-tags :initform
                         common-lisp:nil)
                        (experiment-template-id :initarg
                         :|experimentTemplateId| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor
                         %start-experiment-request-experiment-template-id
                         :initform
                         (common-lisp:error
                          ":experimenttemplateid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %start-experiment-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))))
 (common-lisp:export
  (common-lisp:list 'start-experiment-request 'make-start-experiment-request))
 (common-lisp:defun make-start-experiment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags experiment-template-id client-token)
   (common-lisp:apply #'common-lisp:make-instance 'start-experiment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-template-id))
      (common-lisp:list
       (common-lisp:cons "experimentTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-experiment-response common-lisp:nil
                       ((experiment :initarg :|experiment| :type
                         (common-lisp:or experiment common-lisp:null) :accessor
                         %start-experiment-response-experiment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-experiment-response
                    'make-start-experiment-response))
 (common-lisp:defun make-start-experiment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment)
   (common-lisp:apply #'common-lisp:make-instance 'start-experiment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-experiment-response))
   common-lisp:nil))
(common-lisp:deftype stop-condition-source () 'common-lisp:string)
(common-lisp:deftype stop-condition-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-experiment-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or experiment-id common-lisp:null)
                         :accessor %stop-experiment-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-experiment-request 'make-stop-experiment-request))
 (common-lisp:defun make-stop-experiment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-experiment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-experiment-response common-lisp:nil
                       ((experiment :initarg :|experiment| :type
                         (common-lisp:or experiment common-lisp:null) :accessor
                         %stop-experiment-response-experiment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-experiment-response 'make-stop-experiment-response))
 (common-lisp:defun make-stop-experiment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment)
   (common-lisp:apply #'common-lisp:make-instance 'stop-experiment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-experiment-response))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-resource-type common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or target-resource-type-parameter-map
                                         common-lisp:null)
                         :accessor %target-resource-type-parameters :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or target-resource-type-description
                                         common-lisp:null)
                         :accessor %target-resource-type-description :initform
                         common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor %target-resource-type-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-resource-type 'make-target-resource-type))
 (common-lisp:defun make-target-resource-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters description resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'target-resource-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-resource-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-resource-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-resource-type))
   common-lisp:nil))
(common-lisp:deftype target-resource-type-description () 'common-lisp:string)
(common-lisp:deftype target-resource-type-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-resource-type-parameter common-lisp:nil
                       ((required :initarg :|required| :type
                         (common-lisp:or
                          target-resource-type-parameter-required
                          common-lisp:null)
                         :accessor %target-resource-type-parameter-required
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or
                          target-resource-type-parameter-description
                          common-lisp:null)
                         :accessor %target-resource-type-parameter-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-resource-type-parameter
                    'make-target-resource-type-parameter))
 (common-lisp:defun make-target-resource-type-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key required description)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-resource-type-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-parameter))
   common-lisp:nil))
(common-lisp:deftype target-resource-type-parameter-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-resource-type-parameter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-target-resource-type-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-resource-type-parameter-name () 'common-lisp:string)
(common-lisp:deftype target-resource-type-parameter-required ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass target-resource-type-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or target-resource-type-description
                                         common-lisp:null)
                         :accessor %target-resource-type-summary-description
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor %target-resource-type-summary-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-resource-type-summary
                    'make-target-resource-type-summary))
 (common-lisp:defun make-target-resource-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'target-resource-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-resource-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-resource-type-summary-list ()
   '(trivial-types:proper-list target-resource-type-summary))
 (common-lisp:defun |make-target-resource-type-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-resource-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-experiment-template-action-input-item
                       common-lisp:nil
                       ((start-after :initarg :|startAfter| :type
                         (common-lisp:or
                          experiment-template-action-start-after-list
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-action-input-item-start-after
                         :initform common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or experiment-template-action-target-map
                                         common-lisp:null)
                         :accessor
                         %update-experiment-template-action-input-item-targets
                         :initform common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or
                          experiment-template-action-parameter-map
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-action-input-item-parameters
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-action-description
                                         common-lisp:null)
                         :accessor
                         %update-experiment-template-action-input-item-description
                         :initform common-lisp:nil)
                        (action-id :initarg :|actionId| :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         %update-experiment-template-action-input-item-action-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-action-input-item
                    'make-update-experiment-template-action-input-item))
 (common-lisp:defun make-update-experiment-template-action-input-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-after targets parameters
                     description action-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-experiment-template-action-input-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-action-input-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-action-input-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "startAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-action-input-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-experiment-template-action-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-update-experiment-template-action-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass update-experiment-template-log-configuration-input
                       common-lisp:nil
                       ((log-schema-version :initarg :|logSchemaVersion| :type
                         (common-lisp:or log-schema-version common-lisp:null)
                         :accessor
                         %update-experiment-template-log-configuration-input-log-schema-version
                         :initform common-lisp:nil)
                        (s3configuration :initarg :|s3Configuration| :type
                         (common-lisp:or
                          experiment-template-s3log-configuration-input
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-log-configuration-input-s3configuration
                         :initform common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :|cloudWatchLogsConfiguration| :type
                         (common-lisp:or
                          experiment-template-cloud-watch-logs-log-configuration-input
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-log-configuration-input-cloud-watch-logs-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-log-configuration-input
                    'make-update-experiment-template-log-configuration-input))
 (common-lisp:defun make-update-experiment-template-log-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-schema-version s3configuration
                     cloud-watch-logs-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-experiment-template-log-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-log-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-log-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-schema-version))
      (common-lisp:list
       (common-lisp:cons "logSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-log-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-experiment-template-request common-lisp:nil
                       ((log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or
                          update-experiment-template-log-configuration-input
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-request-log-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-experiment-template-request-role-arn :initform
                         common-lisp:nil)
                        (actions :initarg :|actions| :type
                         (common-lisp:or
                          update-experiment-template-action-input-map
                          common-lisp:null)
                         :accessor %update-experiment-template-request-actions
                         :initform common-lisp:nil)
                        (targets :initarg :|targets| :type
                         (common-lisp:or
                          update-experiment-template-target-input-map
                          common-lisp:null)
                         :accessor %update-experiment-template-request-targets
                         :initform common-lisp:nil)
                        (stop-conditions :initarg :|stopConditions| :type
                         (common-lisp:or
                          update-experiment-template-stop-condition-input-list
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-request-stop-conditions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or experiment-template-description
                                         common-lisp:null)
                         :accessor
                         %update-experiment-template-request-description
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or experiment-template-id
                                         common-lisp:null)
                         :accessor %update-experiment-template-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-request
                    'make-update-experiment-template-request))
 (common-lisp:defun make-update-experiment-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration role-arn actions
                     targets stop-conditions description id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-experiment-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-conditions))
      (common-lisp:list
       (common-lisp:cons "stopConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-experiment-template-response common-lisp:nil
                       ((experiment-template :initarg :|experimentTemplate|
                         :type
                         (common-lisp:or experiment-template common-lisp:null)
                         :accessor
                         %update-experiment-template-response-experiment-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-response
                    'make-update-experiment-template-response))
 (common-lisp:defun make-update-experiment-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key experiment-template)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-experiment-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-template))
      (common-lisp:list
       (common-lisp:cons "experimentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-experiment-template-stop-condition-input
                       common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or stop-condition-value common-lisp:null)
                         :accessor
                         %update-experiment-template-stop-condition-input-value
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or stop-condition-source
                                         common-lisp:null)
                         :accessor
                         %update-experiment-template-stop-condition-input-source
                         :initform (common-lisp:error ":source is required"))))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-stop-condition-input
                    'make-update-experiment-template-stop-condition-input))
 (common-lisp:defun make-update-experiment-template-stop-condition-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value source)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-experiment-template-stop-condition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-stop-condition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-stop-condition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-stop-condition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-experiment-template-stop-condition-input-list ()
   '(trivial-types:proper-list
     update-experiment-template-stop-condition-input))
 (common-lisp:defun |make-update-experiment-template-stop-condition-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-experiment-template-stop-condition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-experiment-template-target-input common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or
                          experiment-template-target-parameter-map
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-target-input-parameters
                         :initform common-lisp:nil)
                        (selection-mode :initarg :|selectionMode| :type
                         (common-lisp:or
                          experiment-template-target-selection-mode
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-target-input-selection-mode
                         :initform
                         (common-lisp:error ":selectionmode is required"))
                        (filters :initarg :|filters| :type
                         (common-lisp:or
                          experiment-template-target-filter-input-list
                          common-lisp:null)
                         :accessor
                         %update-experiment-template-target-input-filters
                         :initform common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %update-experiment-template-target-input-resource-tags
                         :initform common-lisp:nil)
                        (resource-arns :initarg :|resourceArns| :type
                         (common-lisp:or resource-arn-list common-lisp:null)
                         :accessor
                         %update-experiment-template-target-input-resource-arns
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or target-resource-type-id
                                         common-lisp:null)
                         :accessor
                         %update-experiment-template-target-input-resource-type
                         :initform
                         (common-lisp:error ":resourcetype is required"))))
 (common-lisp:export
  (common-lisp:list 'update-experiment-template-target-input
                    'make-update-experiment-template-target-input))
 (common-lisp:defun make-update-experiment-template-target-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters selection-mode filters
                     resource-tags resource-arns resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-experiment-template-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-mode))
      (common-lisp:list
       (common-lisp:cons "selectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-template-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-experiment-template-target-input-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-update-experiment-template-target-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (fis-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description stop-conditions
                     targets actions role-arn tags log-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-token description stop-conditions targets
     actions role-arn tags log-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-experiment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/experimentTemplates"
                                                        "CreateExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-experiment-template))
(common-lisp:progn
 (common-lisp:defun delete-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-experiment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experimentTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-experiment-template))
(common-lisp:progn
 (common-lisp:defun get-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetAction"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-action))
(common-lisp:progn
 (common-lisp:defun get-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetExperiment"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-experiment))
(common-lisp:progn
 (common-lisp:defun get-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-experiment-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experimentTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-experiment-template))
(common-lisp:progn
 (common-lisp:defun get-target-resource-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type)
   (common-lisp:declare (common-lisp:ignorable resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-target-resource-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/targetResourceTypes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-type))))
                                                        "GetTargetResourceType"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-target-resource-type))
(common-lisp:progn
 (common-lisp:defun list-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/actions"
                                                        "ListActions"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-actions))
(common-lisp:progn
 (common-lisp:defun list-experiment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-experiment-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/experimentTemplates"
                                                        "ListExperimentTemplates"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiment-templates))
(common-lisp:progn
 (common-lisp:defun list-experiments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-experiments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/experiments"
                                                        "ListExperiments"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiments))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-target-resource-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-target-resource-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/targetResourceTypes"
                                                        "ListTargetResourceTypes"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-target-resource-types))
(common-lisp:progn
 (common-lisp:defun start-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token experiment-template-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token experiment-template-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/experiments"
                                                        "StartExperiment"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-experiment))
(common-lisp:progn
 (common-lisp:defun stop-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experiments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StopExperiment"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-experiment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-experiment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id description stop-conditions targets
                     actions role-arn log-configuration)
   (common-lisp:declare
    (common-lisp:ignorable id description stop-conditions targets actions
     role-arn log-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-experiment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fis-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/experimentTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateExperimentTemplate"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-experiment-template))
