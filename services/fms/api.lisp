;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/fms/api
  (:use)
  (:nicknames #:aws/fms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/fms/api)
(common-lisp:progn
 (common-lisp:defclass fms-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "fms" :protocol :json))
 (common-lisp:export 'fms-request))
(common-lisp:progn
 (common-lisp:define-condition fms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'fms-error))
(common-lisp:defvar *error-map*
  '(("InternalErrorException" . internal-error-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidTypeException" . invalid-type-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:deftype awsaccount-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype awsaccount-id-list ()
   '(trivial-types:proper-list awsaccount-id))
 (common-lisp:defun |make-awsaccount-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype awsregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype awsregion-list () '(trivial-types:proper-list awsregion))
 (common-lisp:defun |make-awsregion-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsregion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list awsaccount-id))
 (common-lisp:defun |make-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-role-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-scope common-lisp:nil
                       ((exclude-specified-accounts :initarg
                         :exclude-specified-accounts :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %account-scope-exclude-specified-accounts :initform
                         common-lisp:nil)
                        (all-accounts-enabled :initarg :all-accounts-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %account-scope-all-accounts-enabled
                         :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %account-scope-accounts :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'account-scope 'make-account-scope))
 (common-lisp:defun make-account-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exclude-specified-accounts
                     all-accounts-enabled accounts)
   (common-lisp:apply #'common-lisp:make-instance 'account-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-accounts-enabled))
      (common-lisp:list
       (common-lisp:cons "AllAccountsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-specified-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludeSpecifiedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-target common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %action-target-description :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %action-target-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action-target 'make-action-target))
 (common-lisp:defun make-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'action-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-account-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or organization-status common-lisp:null)
                         :accessor %admin-account-summary-status :initform
                         common-lisp:nil)
                        (default-admin :initarg :default-admin :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %admin-account-summary-default-admin :initform
                         common-lisp:nil)
                        (admin-account :initarg :admin-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %admin-account-summary-admin-account
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'admin-account-summary 'make-admin-account-summary))
 (common-lisp:defun make-admin-account-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status default-admin admin-account)
   (common-lisp:apply #'common-lisp:make-instance 'admin-account-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-account-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-account-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-admin))
      (common-lisp:list
       (common-lisp:cons "DefaultAdmin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-account-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype admin-account-summary-list ()
   '(trivial-types:proper-list admin-account-summary))
 (common-lisp:defun |make-admin-account-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass admin-scope common-lisp:nil
                       ((policy-type-scope :initarg :policy-type-scope :type
                         (common-lisp:or policy-type-scope common-lisp:null)
                         :accessor %admin-scope-policy-type-scope :initform
                         common-lisp:nil)
                        (region-scope :initarg :region-scope :type
                         (common-lisp:or region-scope common-lisp:null)
                         :accessor %admin-scope-region-scope :initform
                         common-lisp:nil)
                        (organizational-unit-scope :initarg
                         :organizational-unit-scope :type
                         (common-lisp:or organizational-unit-scope
                                         common-lisp:null)
                         :accessor %admin-scope-organizational-unit-scope
                         :initform common-lisp:nil)
                        (account-scope :initarg :account-scope :type
                         (common-lisp:or account-scope common-lisp:null)
                         :accessor %admin-scope-account-scope :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'admin-scope 'make-admin-scope))
 (common-lisp:defun make-admin-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type-scope region-scope
                     organizational-unit-scope account-scope)
   (common-lisp:apply #'common-lisp:make-instance 'admin-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-scope))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-scope))
      (common-lisp:list
       (common-lisp:cons "RegionScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-scope))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass app common-lisp:nil
                       ((port :initarg :port :type
                         (common-lisp:or ipport-number common-lisp:null)
                         :accessor %app-port :initform
                         (common-lisp:error ":port is required"))
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %app-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (app-name :initarg :app-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %app-app-name :initform
                         (common-lisp:error ":app-name is required"))))
 (common-lisp:export (common-lisp:list 'app 'make-app))
 (common-lisp:defun make-app
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port protocol app-name)
   (common-lisp:apply #'common-lisp:make-instance 'app
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype apps-list () '(trivial-types:proper-list app))
 (common-lisp:defun |make-apps-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass apps-list-data common-lisp:nil
                       ((previous-apps-list :initarg :previous-apps-list :type
                         (common-lisp:or previous-apps-list common-lisp:null)
                         :accessor %apps-list-data-previous-apps-list :initform
                         common-lisp:nil)
                        (apps-list :initarg :apps-list :type
                         (common-lisp:or apps-list common-lisp:null) :accessor
                         %apps-list-data-apps-list :initform
                         (common-lisp:error ":apps-list is required"))
                        (last-update-time :initarg :last-update-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %apps-list-data-last-update-time :initform
                         common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %apps-list-data-create-time :initform common-lisp:nil)
                        (list-update-token :initarg :list-update-token :type
                         (common-lisp:or update-token common-lisp:null)
                         :accessor %apps-list-data-list-update-token :initform
                         common-lisp:nil)
                        (list-name :initarg :list-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %apps-list-data-list-name :initform
                         (common-lisp:error ":list-name is required"))
                        (list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %apps-list-data-list-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'apps-list-data 'make-apps-list-data))
 (common-lisp:defun make-apps-list-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key previous-apps-list apps-list
                     last-update-time create-time list-update-token list-name
                     list-id)
   (common-lisp:apply #'common-lisp:make-instance 'apps-list-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apps-list-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apps-list-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-update-token))
      (common-lisp:list
       (common-lisp:cons "ListUpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-apps-list))
      (common-lisp:list
       (common-lisp:cons "PreviousAppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apps-list-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apps-list-data-summary common-lisp:nil
                       ((apps-list :initarg :apps-list :type
                         (common-lisp:or apps-list common-lisp:null) :accessor
                         %apps-list-data-summary-apps-list :initform
                         common-lisp:nil)
                        (list-name :initarg :list-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %apps-list-data-summary-list-name :initform
                         common-lisp:nil)
                        (list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %apps-list-data-summary-list-id :initform
                         common-lisp:nil)
                        (list-arn :initarg :list-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %apps-list-data-summary-list-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'apps-list-data-summary 'make-apps-list-data-summary))
 (common-lisp:defun make-apps-list-data-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key apps-list list-name list-id list-arn)
   (common-lisp:apply #'common-lisp:make-instance 'apps-list-data-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apps-list-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apps-list-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-arn))
      (common-lisp:list
       (common-lisp:cons "ListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apps-list-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype apps-lists-data ()
   '(trivial-types:proper-list apps-list-data-summary))
 (common-lisp:defun |make-apps-lists-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list apps-list-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-admin-account-request common-lisp:nil
                       ((admin-account :initarg :admin-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         %associate-admin-account-request-admin-account
                         :initform
                         (common-lisp:error ":admin-account is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-admin-account-request
                    'make-associate-admin-account-request))
 (common-lisp:defun make-associate-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key admin-account)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-third-party-firewall-request common-lisp:nil
                       ((third-party-firewall :initarg :third-party-firewall
                         :type
                         (common-lisp:or third-party-firewall common-lisp:null)
                         :accessor
                         %associate-third-party-firewall-request-third-party-firewall
                         :initform
                         (common-lisp:error
                          ":third-party-firewall is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-third-party-firewall-request
                    'make-associate-third-party-firewall-request))
 (common-lisp:defun make-associate-third-party-firewall-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-third-party-firewall-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-third-party-firewall-response common-lisp:nil
                       ((third-party-firewall-status :initarg
                         :third-party-firewall-status :type
                         (common-lisp:or
                          third-party-firewall-association-status
                          common-lisp:null)
                         :accessor
                         %associate-third-party-firewall-response-third-party-firewall-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-third-party-firewall-response
                    'make-associate-third-party-firewall-response))
 (common-lisp:defun make-associate-third-party-firewall-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key third-party-firewall-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-third-party-firewall-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-status))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2instance-violation common-lisp:nil
                       ((aws-ec2network-interface-violations :initarg
                         :aws-ec2network-interface-violations :type
                         (common-lisp:or aws-ec2network-interface-violations
                                         common-lisp:null)
                         :accessor
                         %aws-ec2instance-violation-aws-ec2network-interface-violations
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor %aws-ec2instance-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-violation
                    'make-aws-ec2instance-violation))
 (common-lisp:defun make-aws-ec2instance-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-ec2network-interface-violations
                     violation-target)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2instance-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2network-interface-violations))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkInterfaceViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-interface-violation common-lisp:nil
                       ((violating-security-groups :initarg
                         :violating-security-groups :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-violation-violating-security-groups
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-violation
                    'make-aws-ec2network-interface-violation))
 (common-lisp:defun make-aws-ec2network-interface-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violating-security-groups
                     violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-interface-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violating-security-groups))
      (common-lisp:list
       (common-lisp:cons "ViolatingSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-violations ()
   '(trivial-types:proper-list aws-ec2network-interface-violation))
 (common-lisp:defun |make-aws-ec2network-interface-violations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-violation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-vpcsecurity-group-violation common-lisp:nil
                       ((possible-security-group-remediation-actions :initarg
                         :possible-security-group-remediation-actions :type
                         (common-lisp:or security-group-remediation-actions
                                         common-lisp:null)
                         :accessor
                         %aws-vpcsecurity-group-violation-possible-security-group-remediation-actions
                         :initform common-lisp:nil)
                        (partial-matches :initarg :partial-matches :type
                         (common-lisp:or partial-matches common-lisp:null)
                         :accessor
                         %aws-vpcsecurity-group-violation-partial-matches
                         :initform common-lisp:nil)
                        (violation-target-description :initarg
                         :violation-target-description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %aws-vpcsecurity-group-violation-violation-target-description
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %aws-vpcsecurity-group-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-vpcsecurity-group-violation
                    'make-aws-vpcsecurity-group-violation))
 (common-lisp:defun make-aws-vpcsecurity-group-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     possible-security-group-remediation-actions
                     partial-matches violation-target-description
                     violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-vpcsecurity-group-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpcsecurity-group-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpcsecurity-group-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partial-matches))
      (common-lisp:list
       (common-lisp:cons "PartialMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'possible-security-group-remediation-actions))
      (common-lisp:list
       (common-lisp:cons "PossibleSecurityGroupRemediationActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpcsecurity-group-violation))
   common-lisp:nil))
(common-lisp:deftype base62id () 'common-lisp:string)
(common-lisp:deftype basic-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-associate-resource-request common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or identifier-list common-lisp:null)
                         :accessor %batch-associate-resource-request-items
                         :initform (common-lisp:error ":items is required"))
                        (resource-set-identifier :initarg
                         :resource-set-identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %batch-associate-resource-request-resource-set-identifier
                         :initform
                         (common-lisp:error
                          ":resource-set-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-associate-resource-request
                    'make-batch-associate-resource-request))
 (common-lisp:defun make-batch-associate-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items resource-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-resource-response common-lisp:nil
                       ((failed-items :initarg :failed-items :type
                         (common-lisp:or failed-item-list common-lisp:null)
                         :accessor
                         %batch-associate-resource-response-failed-items
                         :initform
                         (common-lisp:error ":failed-items is required"))
                        (resource-set-identifier :initarg
                         :resource-set-identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %batch-associate-resource-response-resource-set-identifier
                         :initform
                         (common-lisp:error
                          ":resource-set-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-associate-resource-response
                    'make-batch-associate-resource-response))
 (common-lisp:defun make-batch-associate-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items resource-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-resource-request common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or identifier-list common-lisp:null)
                         :accessor %batch-disassociate-resource-request-items
                         :initform (common-lisp:error ":items is required"))
                        (resource-set-identifier :initarg
                         :resource-set-identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %batch-disassociate-resource-request-resource-set-identifier
                         :initform
                         (common-lisp:error
                          ":resource-set-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-resource-request
                    'make-batch-disassociate-resource-request))
 (common-lisp:defun make-batch-disassociate-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items resource-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-resource-response common-lisp:nil
                       ((failed-items :initarg :failed-items :type
                         (common-lisp:or failed-item-list common-lisp:null)
                         :accessor
                         %batch-disassociate-resource-response-failed-items
                         :initform
                         (common-lisp:error ":failed-items is required"))
                        (resource-set-identifier :initarg
                         :resource-set-identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %batch-disassociate-resource-response-resource-set-identifier
                         :initform
                         (common-lisp:error
                          ":resource-set-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-resource-response
                    'make-batch-disassociate-resource-response))
 (common-lisp:defun make-batch-disassociate-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items resource-set-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compliance-violator common-lisp:nil
                       ((metadata :initarg :metadata :type
                         (common-lisp:or compliance-violator-metadata
                                         common-lisp:null)
                         :accessor %compliance-violator-metadata :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %compliance-violator-resource-type :initform
                         common-lisp:nil)
                        (violation-reason :initarg :violation-reason :type
                         (common-lisp:or violation-reason common-lisp:null)
                         :accessor %compliance-violator-violation-reason
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %compliance-violator-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compliance-violator 'make-compliance-violator))
 (common-lisp:defun make-compliance-violator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata resource-type violation-reason
                     resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-violator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance-violator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance-violator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-reason))
      (common-lisp:list
       (common-lisp:cons "ViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance-violator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-violator-metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-compliance-violator-metadata|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype compliance-violators ()
   '(trivial-types:proper-list compliance-violator))
 (common-lisp:defun |make-compliance-violators|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-violator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-policy-scope-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-policy-scope-id-list ()
   '(trivial-types:proper-list customer-policy-scope-id))
 (common-lisp:defun |make-customer-policy-scope-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            customer-policy-scope-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-policy-scope-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-policy-scope-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-customer-policy-scope-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype customer-policy-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-apps-list-request common-lisp:nil
                       ((list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %delete-apps-list-request-list-id :initform
                         (common-lisp:error ":list-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-apps-list-request 'make-delete-apps-list-request))
 (common-lisp:defun make-delete-apps-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key list-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-apps-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apps-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apps-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apps-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notification-channel-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-notification-channel-request
                    'make-delete-notification-channel-request))
 (common-lisp:defun make-delete-notification-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-notification-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-request common-lisp:nil
                       ((delete-all-policy-resources :initarg
                         :delete-all-policy-resources :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-policy-request-delete-all-policy-resources
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %delete-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defun make-delete-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-all-policy-resources policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-all-policy-resources))
      (common-lisp:list
       (common-lisp:cons "DeleteAllPolicyResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-protocols-list-request common-lisp:nil
                       ((list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %delete-protocols-list-request-list-id :initform
                         (common-lisp:error ":list-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-protocols-list-request
                    'make-delete-protocols-list-request))
 (common-lisp:defun make-delete-protocols-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key list-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-protocols-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-protocols-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-protocols-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-protocols-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-set-request common-lisp:nil
                       ((identifier :initarg :identifier :type
                         (common-lisp:or base62id common-lisp:null) :accessor
                         %delete-resource-set-request-identifier :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-set-request
                    'make-delete-resource-set-request))
 (common-lisp:defun make-delete-resource-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resource-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-set-request))
   common-lisp:nil))
(common-lisp:deftype dependent-service-name () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:deftype detailed-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-admin-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-admin-account-request
                    'make-disassociate-admin-account-request))
 (common-lisp:defun make-disassociate-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-third-party-firewall-request
                       common-lisp:nil
                       ((third-party-firewall :initarg :third-party-firewall
                         :type
                         (common-lisp:or third-party-firewall common-lisp:null)
                         :accessor
                         %disassociate-third-party-firewall-request-third-party-firewall
                         :initform
                         (common-lisp:error
                          ":third-party-firewall is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-third-party-firewall-request
                    'make-disassociate-third-party-firewall-request))
 (common-lisp:defun make-disassociate-third-party-firewall-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-third-party-firewall-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-third-party-firewall-response
                       common-lisp:nil
                       ((third-party-firewall-status :initarg
                         :third-party-firewall-status :type
                         (common-lisp:or
                          third-party-firewall-association-status
                          common-lisp:null)
                         :accessor
                         %disassociate-third-party-firewall-response-third-party-firewall-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-third-party-firewall-response
                    'make-disassociate-third-party-firewall-response))
 (common-lisp:defun make-disassociate-third-party-firewall-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key third-party-firewall-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-third-party-firewall-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-status))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass discovered-resource common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %discovered-resource-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %discovered-resource-type :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %discovered-resource-account-id :initform
                         common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %discovered-resource-uri :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'discovered-resource 'make-discovered-resource))
 (common-lisp:defun make-discovered-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name type account-id uri)
   (common-lisp:apply #'common-lisp:make-instance 'discovered-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input discovered-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input discovered-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input discovered-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype discovered-resource-list ()
   '(trivial-types:proper-list discovered-resource))
 (common-lisp:defun |make-discovered-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list discovered-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dns-duplicate-rule-group-violation common-lisp:nil
                       ((violation-target-description :initarg
                         :violation-target-description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %dns-duplicate-rule-group-violation-violation-target-description
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %dns-duplicate-rule-group-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dns-duplicate-rule-group-violation
                    'make-dns-duplicate-rule-group-violation))
 (common-lisp:defun make-dns-duplicate-rule-group-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violation-target-description
                     violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'dns-duplicate-rule-group-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-duplicate-rule-group-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-duplicate-rule-group-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-duplicate-rule-group-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dns-rule-group-limit-exceeded-violation common-lisp:nil
                       ((number-of-rule-groups-already-associated :initarg
                         :number-of-rule-groups-already-associated :type
                         (common-lisp:or basic-integer common-lisp:null)
                         :accessor
                         %dns-rule-group-limit-exceeded-violation-number-of-rule-groups-already-associated
                         :initform common-lisp:nil)
                        (violation-target-description :initarg
                         :violation-target-description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %dns-rule-group-limit-exceeded-violation-violation-target-description
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %dns-rule-group-limit-exceeded-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dns-rule-group-limit-exceeded-violation
                    'make-dns-rule-group-limit-exceeded-violation))
 (common-lisp:defun make-dns-rule-group-limit-exceeded-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-of-rule-groups-already-associated
                     violation-target-description violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'dns-rule-group-limit-exceeded-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-limit-exceeded-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-limit-exceeded-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-rule-groups-already-associated))
      (common-lisp:list
       (common-lisp:cons "NumberOfRuleGroupsAlreadyAssociated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-limit-exceeded-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dns-rule-group-priorities ()
   '(trivial-types:proper-list dns-rule-group-priority))
 (common-lisp:defun |make-dns-rule-group-priorities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns-rule-group-priority))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dns-rule-group-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass dns-rule-group-priority-conflict-violation
                       common-lisp:nil
                       ((unavailable-priorities :initarg
                         :unavailable-priorities :type
                         (common-lisp:or dns-rule-group-priorities
                                         common-lisp:null)
                         :accessor
                         %dns-rule-group-priority-conflict-violation-unavailable-priorities
                         :initform common-lisp:nil)
                        (conflicting-policy-id :initarg :conflicting-policy-id
                         :type (common-lisp:or policy-id common-lisp:null)
                         :accessor
                         %dns-rule-group-priority-conflict-violation-conflicting-policy-id
                         :initform common-lisp:nil)
                        (conflicting-priority :initarg :conflicting-priority
                         :type
                         (common-lisp:or dns-rule-group-priority
                                         common-lisp:null)
                         :accessor
                         %dns-rule-group-priority-conflict-violation-conflicting-priority
                         :initform common-lisp:nil)
                        (violation-target-description :initarg
                         :violation-target-description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %dns-rule-group-priority-conflict-violation-violation-target-description
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %dns-rule-group-priority-conflict-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dns-rule-group-priority-conflict-violation
                    'make-dns-rule-group-priority-conflict-violation))
 (common-lisp:defun make-dns-rule-group-priority-conflict-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unavailable-priorities
                     conflicting-policy-id conflicting-priority
                     violation-target-description violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'dns-rule-group-priority-conflict-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-priority-conflict-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-priority-conflict-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflicting-priority))
      (common-lisp:list
       (common-lisp:cons "ConflictingPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflicting-policy-id))
      (common-lisp:list
       (common-lisp:cons "ConflictingPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unavailable-priorities))
      (common-lisp:list
       (common-lisp:cons "UnavailablePriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-priority-conflict-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2associate-route-table-action common-lisp:nil
                       ((gateway-id :initarg :gateway-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2associate-route-table-action-gateway-id
                         :initform common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2associate-route-table-action-subnet-id
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor
                         %ec2associate-route-table-action-route-table-id
                         :initform
                         (common-lisp:error ":route-table-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %ec2associate-route-table-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2associate-route-table-action
                    'make-ec2associate-route-table-action))
 (common-lisp:defun make-ec2associate-route-table-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-id subnet-id route-table-id
                     description)
   (common-lisp:apply #'common-lisp:make-instance
                      'ec2associate-route-table-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2associate-route-table-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2associate-route-table-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2associate-route-table-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2copy-route-table-action common-lisp:nil
                       ((route-table-id :initarg :route-table-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2copy-route-table-action-route-table-id
                         :initform
                         (common-lisp:error ":route-table-id is required"))
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2copy-route-table-action-vpc-id :initform
                         (common-lisp:error ":vpc-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %ec2copy-route-table-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2copy-route-table-action
                    'make-ec2copy-route-table-action))
 (common-lisp:defun make-ec2copy-route-table-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-table-id vpc-id description)
   (common-lisp:apply #'common-lisp:make-instance 'ec2copy-route-table-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2copy-route-table-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2copy-route-table-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2copy-route-table-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2create-route-action common-lisp:nil
                       ((route-table-id :initarg :route-table-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2create-route-action-route-table-id
                         :initform
                         (common-lisp:error ":route-table-id is required"))
                        (gateway-id :initarg :gateway-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2create-route-action-gateway-id :initform
                         common-lisp:nil)
                        (vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2create-route-action-vpc-endpoint-id
                         :initform common-lisp:nil)
                        (destination-ipv6cidr-block :initarg
                         :destination-ipv6cidr-block :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %ec2create-route-action-destination-ipv6cidr-block
                         :initform common-lisp:nil)
                        (destination-prefix-list-id :initarg
                         :destination-prefix-list-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %ec2create-route-action-destination-prefix-list-id
                         :initform common-lisp:nil)
                        (destination-cidr-block :initarg
                         :destination-cidr-block :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %ec2create-route-action-destination-cidr-block
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %ec2create-route-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2create-route-action 'make-ec2create-route-action))
 (common-lisp:defun make-ec2create-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-table-id gateway-id vpc-endpoint-id
                     destination-ipv6cidr-block destination-prefix-list-id
                     destination-cidr-block description)
   (common-lisp:apply #'common-lisp:make-instance 'ec2create-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2create-route-table-action common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2create-route-table-action-vpc-id
                         :initform (common-lisp:error ":vpc-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %ec2create-route-table-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2create-route-table-action
                    'make-ec2create-route-table-action))
 (common-lisp:defun make-ec2create-route-table-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id description)
   (common-lisp:apply #'common-lisp:make-instance 'ec2create-route-table-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-table-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-table-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-table-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2delete-route-action common-lisp:nil
                       ((route-table-id :initarg :route-table-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2delete-route-action-route-table-id
                         :initform
                         (common-lisp:error ":route-table-id is required"))
                        (destination-ipv6cidr-block :initarg
                         :destination-ipv6cidr-block :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %ec2delete-route-action-destination-ipv6cidr-block
                         :initform common-lisp:nil)
                        (destination-prefix-list-id :initarg
                         :destination-prefix-list-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %ec2delete-route-action-destination-prefix-list-id
                         :initform common-lisp:nil)
                        (destination-cidr-block :initarg
                         :destination-cidr-block :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %ec2delete-route-action-destination-cidr-block
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %ec2delete-route-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2delete-route-action 'make-ec2delete-route-action))
 (common-lisp:defun make-ec2delete-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-table-id destination-ipv6cidr-block
                     destination-prefix-list-id destination-cidr-block
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'ec2delete-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2delete-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2delete-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2delete-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2replace-route-action common-lisp:nil
                       ((route-table-id :initarg :route-table-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2replace-route-action-route-table-id
                         :initform
                         (common-lisp:error ":route-table-id is required"))
                        (gateway-id :initarg :gateway-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor %ec2replace-route-action-gateway-id
                         :initform common-lisp:nil)
                        (destination-ipv6cidr-block :initarg
                         :destination-ipv6cidr-block :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %ec2replace-route-action-destination-ipv6cidr-block
                         :initform common-lisp:nil)
                        (destination-prefix-list-id :initarg
                         :destination-prefix-list-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %ec2replace-route-action-destination-prefix-list-id
                         :initform common-lisp:nil)
                        (destination-cidr-block :initarg
                         :destination-cidr-block :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %ec2replace-route-action-destination-cidr-block
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %ec2replace-route-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2replace-route-action 'make-ec2replace-route-action))
 (common-lisp:defun make-ec2replace-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-table-id gateway-id
                     destination-ipv6cidr-block destination-prefix-list-id
                     destination-cidr-block description)
   (common-lisp:apply #'common-lisp:make-instance 'ec2replace-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2replace-route-table-association-action
                       common-lisp:nil
                       ((route-table-id :initarg :route-table-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor
                         %ec2replace-route-table-association-action-route-table-id
                         :initform
                         (common-lisp:error ":route-table-id is required"))
                        (association-id :initarg :association-id :type
                         (common-lisp:or action-target common-lisp:null)
                         :accessor
                         %ec2replace-route-table-association-action-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %ec2replace-route-table-association-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2replace-route-table-association-action
                    'make-ec2replace-route-table-association-action))
 (common-lisp:defun make-ec2replace-route-table-association-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-table-id association-id
                     description)
   (common-lisp:apply #'common-lisp:make-instance
                      'ec2replace-route-table-association-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-table-association-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-table-association-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-table-association-action))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluation-result common-lisp:nil
                       ((evaluation-limit-exceeded :initarg
                         :evaluation-limit-exceeded :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %evaluation-result-evaluation-limit-exceeded :initform
                         common-lisp:nil)
                        (violator-count :initarg :violator-count :type
                         (common-lisp:or resource-count common-lisp:null)
                         :accessor %evaluation-result-violator-count :initform
                         common-lisp:nil)
                        (compliance-status :initarg :compliance-status :type
                         (common-lisp:or policy-compliance-status-type
                                         common-lisp:null)
                         :accessor %evaluation-result-compliance-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defun make-evaluation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key evaluation-limit-exceeded violator-count
                     compliance-status)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "ComplianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violator-count))
      (common-lisp:list
       (common-lisp:cons "ViolatorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-limit-exceeded))
      (common-lisp:list
       (common-lisp:cons "EvaluationLimitExceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-results ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun |make-evaluation-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass expected-route common-lisp:nil
                       ((route-table-id :initarg :route-table-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %expected-route-route-table-id :initform
                         common-lisp:nil)
                        (allowed-targets :initarg :allowed-targets :type
                         (common-lisp:or length-bounded-string-list
                                         common-lisp:null)
                         :accessor %expected-route-allowed-targets :initform
                         common-lisp:nil)
                        (contributing-subnets :initarg :contributing-subnets
                         :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor %expected-route-contributing-subnets
                         :initform common-lisp:nil)
                        (ip-v6cidr :initarg :ip-v6cidr :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %expected-route-ip-v6cidr :initform common-lisp:nil)
                        (prefix-list-id :initarg :prefix-list-id :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %expected-route-prefix-list-id :initform
                         common-lisp:nil)
                        (ip-v4cidr :initarg :ip-v4cidr :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %expected-route-ip-v4cidr :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'expected-route 'make-expected-route))
 (common-lisp:defun make-expected-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route-table-id allowed-targets
                     contributing-subnets ip-v6cidr prefix-list-id ip-v4cidr)
   (common-lisp:apply #'common-lisp:make-instance 'expected-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expected-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expected-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v4cidr))
      (common-lisp:list
       (common-lisp:cons "IpV4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6cidr))
      (common-lisp:list
       (common-lisp:cons "IpV6Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contributing-subnets))
      (common-lisp:list
       (common-lisp:cons "ContributingSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-targets))
      (common-lisp:list
       (common-lisp:cons "AllowedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expected-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expected-routes ()
   '(trivial-types:proper-list expected-route))
 (common-lisp:defun |make-expected-routes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expected-route))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fmspolicy-update-firewall-creation-config-action
                       common-lisp:nil
                       ((firewall-creation-config :initarg
                         :firewall-creation-config :type
                         (common-lisp:or managed-service-data common-lisp:null)
                         :accessor
                         %fmspolicy-update-firewall-creation-config-action-firewall-creation-config
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %fmspolicy-update-firewall-creation-config-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fmspolicy-update-firewall-creation-config-action
                    'make-fmspolicy-update-firewall-creation-config-action))
 (common-lisp:defun make-fmspolicy-update-firewall-creation-config-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key firewall-creation-config description)
   (common-lisp:apply #'common-lisp:make-instance
                      'fmspolicy-update-firewall-creation-config-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fmspolicy-update-firewall-creation-config-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fmspolicy-update-firewall-creation-config-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-creation-config))
      (common-lisp:list
       (common-lisp:cons "FirewallCreationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fmspolicy-update-firewall-creation-config-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failed-item common-lisp:nil
                       ((reason :initarg :reason :type
                         (common-lisp:or failed-item-reason common-lisp:null)
                         :accessor %failed-item-reason :initform
                         common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %failed-item-uri :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'failed-item 'make-failed-item))
 (common-lisp:defun make-failed-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason uri)
   (common-lisp:apply #'common-lisp:make-instance 'failed-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-item-list ()
   '(trivial-types:proper-list failed-item))
 (common-lisp:defun |make-failed-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failed-item-reason () 'common-lisp:string)
(common-lisp:deftype firewall-deployment-model () 'common-lisp:string)
(common-lisp:deftype firewall-policy-id () 'common-lisp:string)
(common-lisp:deftype firewall-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass firewall-subnet-is-out-of-scope-violation
                       common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %firewall-subnet-is-out-of-scope-violation-vpc-endpoint-id
                         :initform common-lisp:nil)
                        (subnet-availability-zone-id :initarg
                         :subnet-availability-zone-id :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %firewall-subnet-is-out-of-scope-violation-subnet-availability-zone-id
                         :initform common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %firewall-subnet-is-out-of-scope-violation-subnet-availability-zone
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %firewall-subnet-is-out-of-scope-violation-vpc-id
                         :initform common-lisp:nil)
                        (firewall-subnet-id :initarg :firewall-subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %firewall-subnet-is-out-of-scope-violation-firewall-subnet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'firewall-subnet-is-out-of-scope-violation
                    'make-firewall-subnet-is-out-of-scope-violation))
 (common-lisp:defun make-firewall-subnet-is-out-of-scope-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-id
                     subnet-availability-zone-id subnet-availability-zone
                     vpc-id firewall-subnet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-subnet-is-out-of-scope-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-is-out-of-scope-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-is-out-of-scope-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-is-out-of-scope-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firewall-subnet-missing-vpcendpoint-violation
                       common-lisp:nil
                       ((subnet-availability-zone-id :initarg
                         :subnet-availability-zone-id :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %firewall-subnet-missing-vpcendpoint-violation-subnet-availability-zone-id
                         :initform common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %firewall-subnet-missing-vpcendpoint-violation-subnet-availability-zone
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %firewall-subnet-missing-vpcendpoint-violation-vpc-id
                         :initform common-lisp:nil)
                        (firewall-subnet-id :initarg :firewall-subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %firewall-subnet-missing-vpcendpoint-violation-firewall-subnet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'firewall-subnet-missing-vpcendpoint-violation
                    'make-firewall-subnet-missing-vpcendpoint-violation))
 (common-lisp:defun make-firewall-subnet-missing-vpcendpoint-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-availability-zone-id
                     subnet-availability-zone vpc-id firewall-subnet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-subnet-missing-vpcendpoint-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-missing-vpcendpoint-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-missing-vpcendpoint-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-missing-vpcendpoint-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-admin-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-admin-account-request
                    'make-get-admin-account-request))
 (common-lisp:defun make-get-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-admin-account-response common-lisp:nil
                       ((role-status :initarg :role-status :type
                         (common-lisp:or account-role-status common-lisp:null)
                         :accessor %get-admin-account-response-role-status
                         :initform common-lisp:nil)
                        (admin-account :initarg :admin-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %get-admin-account-response-admin-account
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-admin-account-response
                    'make-get-admin-account-response))
 (common-lisp:defun make-get-admin-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-status admin-account)
   (common-lisp:apply #'common-lisp:make-instance 'get-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-status))
      (common-lisp:list
       (common-lisp:cons "RoleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-admin-scope-request common-lisp:nil
                       ((admin-account :initarg :admin-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %get-admin-scope-request-admin-account
                         :initform
                         (common-lisp:error ":admin-account is required"))))
 (common-lisp:export
  (common-lisp:list 'get-admin-scope-request 'make-get-admin-scope-request))
 (common-lisp:defun make-get-admin-scope-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key admin-account)
   (common-lisp:apply #'common-lisp:make-instance 'get-admin-scope-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-admin-scope-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or organization-status common-lisp:null)
                         :accessor %get-admin-scope-response-status :initform
                         common-lisp:nil)
                        (admin-scope :initarg :admin-scope :type
                         (common-lisp:or admin-scope common-lisp:null)
                         :accessor %get-admin-scope-response-admin-scope
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-admin-scope-response 'make-get-admin-scope-response))
 (common-lisp:defun make-get-admin-scope-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status admin-scope)
   (common-lisp:apply #'common-lisp:make-instance 'get-admin-scope-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-scope))
      (common-lisp:list
       (common-lisp:cons "AdminScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-apps-list-request common-lisp:nil
                       ((default-list :initarg :default-list :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-apps-list-request-default-list :initform
                         common-lisp:nil)
                        (list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %get-apps-list-request-list-id :initform
                         (common-lisp:error ":list-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-apps-list-request 'make-get-apps-list-request))
 (common-lisp:defun make-get-apps-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-list list-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-apps-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-list))
      (common-lisp:list
       (common-lisp:cons "DefaultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-apps-list-response common-lisp:nil
                       ((apps-list-arn :initarg :apps-list-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-apps-list-response-apps-list-arn
                         :initform common-lisp:nil)
                        (apps-list :initarg :apps-list :type
                         (common-lisp:or apps-list-data common-lisp:null)
                         :accessor %get-apps-list-response-apps-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-apps-list-response 'make-get-apps-list-response))
 (common-lisp:defun make-get-apps-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key apps-list-arn apps-list)
   (common-lisp:apply #'common-lisp:make-instance 'get-apps-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list-arn))
      (common-lisp:list
       (common-lisp:cons "AppsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-detail-request common-lisp:nil
                       ((member-account :initarg :member-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         %get-compliance-detail-request-member-account
                         :initform
                         (common-lisp:error ":member-account is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %get-compliance-detail-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-compliance-detail-request
                    'make-get-compliance-detail-request))
 (common-lisp:defun make-get-compliance-detail-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-account policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-detail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-detail-response common-lisp:nil
                       ((policy-compliance-detail :initarg
                         :policy-compliance-detail :type
                         (common-lisp:or policy-compliance-detail
                                         common-lisp:null)
                         :accessor
                         %get-compliance-detail-response-policy-compliance-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compliance-detail-response
                    'make-get-compliance-detail-response))
 (common-lisp:defun make-get-compliance-detail-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-compliance-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-detail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-compliance-detail))
      (common-lisp:list
       (common-lisp:cons "PolicyComplianceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notification-channel-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-notification-channel-request
                    'make-get-notification-channel-request))
 (common-lisp:defun make-get-notification-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-notification-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notification-channel-response common-lisp:nil
                       ((sns-role-name :initarg :sns-role-name :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %get-notification-channel-response-sns-role-name
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %get-notification-channel-response-sns-topic-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-notification-channel-response
                    'make-get-notification-channel-response))
 (common-lisp:defun make-get-notification-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-role-name sns-topic-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-notification-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-role-name))
      (common-lisp:list
       (common-lisp:cons "SnsRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %get-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defun make-get-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy-arn :initarg :policy-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-policy-response-policy-arn :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defun make-get-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-arn policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protection-status-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %get-protection-status-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %get-protection-status-request-next-token
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %get-protection-status-request-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %get-protection-status-request-start-time :initform
                         common-lisp:nil)
                        (member-account-id :initarg :member-account-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         %get-protection-status-request-member-account-id
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %get-protection-status-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-protection-status-request
                    'make-get-protection-status-request))
 (common-lisp:defun make-get-protection-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token end-time
                     start-time member-account-id policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-protection-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account-id))
      (common-lisp:list
       (common-lisp:cons "MemberAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protection-status-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %get-protection-status-response-next-token
                         :initform common-lisp:nil)
                        (data :initarg :data :type
                         (common-lisp:or protection-data common-lisp:null)
                         :accessor %get-protection-status-response-data
                         :initform common-lisp:nil)
                        (service-type :initarg :service-type :type
                         (common-lisp:or security-service-type
                                         common-lisp:null)
                         :accessor %get-protection-status-response-service-type
                         :initform common-lisp:nil)
                        (admin-account-id :initarg :admin-account-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         %get-protection-status-response-admin-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-protection-status-response
                    'make-get-protection-status-response))
 (common-lisp:defun make-get-protection-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token data service-type
                     admin-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-protection-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protocols-list-request common-lisp:nil
                       ((default-list :initarg :default-list :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-protocols-list-request-default-list :initform
                         common-lisp:nil)
                        (list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %get-protocols-list-request-list-id :initform
                         (common-lisp:error ":list-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-protocols-list-request
                    'make-get-protocols-list-request))
 (common-lisp:defun make-get-protocols-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-list list-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-protocols-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-list))
      (common-lisp:list
       (common-lisp:cons "DefaultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protocols-list-response common-lisp:nil
                       ((protocols-list-arn :initarg :protocols-list-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %get-protocols-list-response-protocols-list-arn
                         :initform common-lisp:nil)
                        (protocols-list :initarg :protocols-list :type
                         (common-lisp:or protocols-list-data common-lisp:null)
                         :accessor %get-protocols-list-response-protocols-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-protocols-list-response
                    'make-get-protocols-list-response))
 (common-lisp:defun make-get-protocols-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocols-list-arn protocols-list)
   (common-lisp:apply #'common-lisp:make-instance 'get-protocols-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list-arn))
      (common-lisp:list
       (common-lisp:cons "ProtocolsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-set-request common-lisp:nil
                       ((identifier :initarg :identifier :type
                         (common-lisp:or base62id common-lisp:null) :accessor
                         %get-resource-set-request-identifier :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-set-request 'make-get-resource-set-request))
 (common-lisp:defun make-get-resource-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-set-response common-lisp:nil
                       ((resource-set-arn :initarg :resource-set-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-resource-set-response-resource-set-arn
                         :initform
                         (common-lisp:error ":resource-set-arn is required"))
                        (resource-set :initarg :resource-set :type
                         (common-lisp:or resource-set common-lisp:null)
                         :accessor %get-resource-set-response-resource-set
                         :initform
                         (common-lisp:error ":resource-set is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-set-response
                    'make-get-resource-set-response))
 (common-lisp:defun make-get-resource-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-set-arn resource-set)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set))
      (common-lisp:list
       (common-lisp:cons "ResourceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-third-party-firewall-association-status-request
                       common-lisp:nil
                       ((third-party-firewall :initarg :third-party-firewall
                         :type
                         (common-lisp:or third-party-firewall common-lisp:null)
                         :accessor
                         %get-third-party-firewall-association-status-request-third-party-firewall
                         :initform
                         (common-lisp:error
                          ":third-party-firewall is required"))))
 (common-lisp:export
  (common-lisp:list 'get-third-party-firewall-association-status-request
                    'make-get-third-party-firewall-association-status-request))
 (common-lisp:defun make-get-third-party-firewall-association-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-third-party-firewall-association-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-third-party-firewall-association-status-response
                       common-lisp:nil
                       ((marketplace-onboarding-status :initarg
                         :marketplace-onboarding-status :type
                         (common-lisp:or
                          marketplace-subscription-onboarding-status
                          common-lisp:null)
                         :accessor
                         %get-third-party-firewall-association-status-response-marketplace-onboarding-status
                         :initform common-lisp:nil)
                        (third-party-firewall-status :initarg
                         :third-party-firewall-status :type
                         (common-lisp:or
                          third-party-firewall-association-status
                          common-lisp:null)
                         :accessor
                         %get-third-party-firewall-association-status-response-third-party-firewall-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-firewall-association-status-response
                    'make-get-third-party-firewall-association-status-response))
 (common-lisp:defun make-get-third-party-firewall-association-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marketplace-onboarding-status
                     third-party-firewall-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-third-party-firewall-association-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-status))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-onboarding-status))
      (common-lisp:list
       (common-lisp:cons "MarketplaceOnboardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-violation-details-request common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %get-violation-details-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-violation-details-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (member-account :initarg :member-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         %get-violation-details-request-member-account
                         :initform
                         (common-lisp:error ":member-account is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %get-violation-details-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-violation-details-request
                    'make-get-violation-details-request))
 (common-lisp:defun make-get-violation-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-id member-account
                     policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-violation-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-violation-details-response common-lisp:nil
                       ((violation-detail :initarg :violation-detail :type
                         (common-lisp:or violation-detail common-lisp:null)
                         :accessor
                         %get-violation-details-response-violation-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-violation-details-response
                    'make-get-violation-details-response))
 (common-lisp:defun make-get-violation-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violation-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-violation-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-detail))
      (common-lisp:list
       (common-lisp:cons "ViolationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-response))
   common-lisp:nil))
(common-lisp:deftype ipport-number () 'common-lisp:integer)
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identifier-list ()
   '(trivial-types:proper-list identifier))
 (common-lisp:defun |make-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-error-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error-exception
                    'internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-operation-exception
                    'invalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-type-exception 'invalid-type-exception-message)))
(common-lisp:progn
 (common-lisp:deftype issue-info-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-issue-info-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype length-bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype length-bounded-string-list ()
   '(trivial-types:proper-list length-bounded-string))
 (common-lisp:defun |make-length-bounded-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list length-bounded-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-admin-accounts-for-organization-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor
                         %list-admin-accounts-for-organization-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-admin-accounts-for-organization-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-admin-accounts-for-organization-request
                    'make-list-admin-accounts-for-organization-request))
 (common-lisp:defun make-list-admin-accounts-for-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-admin-accounts-for-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-admin-accounts-for-organization-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-admin-accounts-for-organization-response-next-token
                         :initform common-lisp:nil)
                        (admin-accounts :initarg :admin-accounts :type
                         (common-lisp:or admin-account-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-admin-accounts-for-organization-response-admin-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-admin-accounts-for-organization-response
                    'make-list-admin-accounts-for-organization-response))
 (common-lisp:defun make-list-admin-accounts-for-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token admin-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-admin-accounts-for-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-admins-managing-account-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor
                         %list-admins-managing-account-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-admins-managing-account-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-admins-managing-account-request
                    'make-list-admins-managing-account-request))
 (common-lisp:defun make-list-admins-managing-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-admins-managing-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-admins-managing-account-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-admins-managing-account-response-next-token
                         :initform common-lisp:nil)
                        (admin-accounts :initarg :admin-accounts :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor
                         %list-admins-managing-account-response-admin-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-admins-managing-account-response
                    'make-list-admins-managing-account-response))
 (common-lisp:defun make-list-admins-managing-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token admin-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-admins-managing-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-apps-lists-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-apps-lists-request-max-results
                         :initform
                         (common-lisp:error ":max-results is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-apps-lists-request-next-token
                         :initform common-lisp:nil)
                        (default-lists :initarg :default-lists :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-apps-lists-request-default-lists :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-apps-lists-request 'make-list-apps-lists-request))
 (common-lisp:defun make-list-apps-lists-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token default-lists)
   (common-lisp:apply #'common-lisp:make-instance 'list-apps-lists-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-lists))
      (common-lisp:list
       (common-lisp:cons "DefaultLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-apps-lists-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-apps-lists-response-next-token
                         :initform common-lisp:nil)
                        (apps-lists :initarg :apps-lists :type
                         (common-lisp:or apps-lists-data common-lisp:null)
                         :accessor %list-apps-lists-response-apps-lists
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-apps-lists-response 'make-list-apps-lists-response))
 (common-lisp:defun make-list-apps-lists-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token apps-lists)
   (common-lisp:apply #'common-lisp:make-instance 'list-apps-lists-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-lists))
      (common-lisp:list
       (common-lisp:cons "AppsLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compliance-status-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-compliance-status-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-compliance-status-request-next-token
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %list-compliance-status-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-compliance-status-request
                    'make-list-compliance-status-request))
 (common-lisp:defun make-list-compliance-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compliance-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compliance-status-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-compliance-status-response-next-token
                         :initform common-lisp:nil)
                        (policy-compliance-status-list :initarg
                         :policy-compliance-status-list :type
                         (common-lisp:or policy-compliance-status-list
                                         common-lisp:null)
                         :accessor
                         %list-compliance-status-response-policy-compliance-status-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-status-response
                    'make-list-compliance-status-response))
 (common-lisp:defun make-list-compliance-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token policy-compliance-status-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compliance-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-compliance-status-list))
      (common-lisp:list
       (common-lisp:cons "PolicyComplianceStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-discovered-resources-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-discovered-resources-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor
                         %list-discovered-resources-request-max-results
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %list-discovered-resources-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (member-account-ids :initarg :member-account-ids :type
                         (common-lisp:or awsaccount-id-list common-lisp:null)
                         :accessor
                         %list-discovered-resources-request-member-account-ids
                         :initform
                         (common-lisp:error
                          ":member-account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'list-discovered-resources-request
                    'make-list-discovered-resources-request))
 (common-lisp:defun make-list-discovered-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-type
                     member-account-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-discovered-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account-ids))
      (common-lisp:list
       (common-lisp:cons "MemberAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-discovered-resources-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-discovered-resources-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or discovered-resource-list
                                         common-lisp:null)
                         :accessor %list-discovered-resources-response-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-discovered-resources-response
                    'make-list-discovered-resources-response))
 (common-lisp:defun make-list-discovered-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-discovered-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   common-lisp:nil))
(common-lisp:deftype list-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-member-accounts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-member-accounts-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-member-accounts-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-member-accounts-request
                    'make-list-member-accounts-request))
 (common-lisp:defun make-list-member-accounts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-member-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-member-accounts-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-member-accounts-response-next-token
                         :initform common-lisp:nil)
                        (member-accounts :initarg :member-accounts :type
                         (common-lisp:or member-accounts common-lisp:null)
                         :accessor
                         %list-member-accounts-response-member-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-member-accounts-response
                    'make-list-member-accounts-response))
 (common-lisp:defun make-list-member-accounts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token member-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-member-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-accounts))
      (common-lisp:list
       (common-lisp:cons "MemberAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-policies-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-policies-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defun make-list-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-policies-response-next-token :initform
                         common-lisp:nil)
                        (policy-list :initarg :policy-list :type
                         (common-lisp:or policy-summary-list common-lisp:null)
                         :accessor %list-policies-response-policy-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defun make-list-policies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token policy-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-list))
      (common-lisp:list
       (common-lisp:cons "PolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protocols-lists-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-protocols-lists-request-max-results
                         :initform
                         (common-lisp:error ":max-results is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-protocols-lists-request-next-token
                         :initform common-lisp:nil)
                        (default-lists :initarg :default-lists :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-protocols-lists-request-default-lists :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-protocols-lists-request
                    'make-list-protocols-lists-request))
 (common-lisp:defun make-list-protocols-lists-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token default-lists)
   (common-lisp:apply #'common-lisp:make-instance 'list-protocols-lists-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-lists))
      (common-lisp:list
       (common-lisp:cons "DefaultLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protocols-lists-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-protocols-lists-response-next-token
                         :initform common-lisp:nil)
                        (protocols-lists :initarg :protocols-lists :type
                         (common-lisp:or protocols-lists-data common-lisp:null)
                         :accessor
                         %list-protocols-lists-response-protocols-lists
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-protocols-lists-response
                    'make-list-protocols-lists-response))
 (common-lisp:defun make-list-protocols-lists-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token protocols-lists)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-protocols-lists-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-lists))
      (common-lisp:list
       (common-lisp:cons "ProtocolsLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-set-resources-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-resource-set-resources-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor
                         %list-resource-set-resources-request-max-results
                         :initform common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %list-resource-set-resources-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'list-resource-set-resources-request
                    'make-list-resource-set-resources-request))
 (common-lisp:defun make-list-resource-set-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-set-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-set-resources-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-resource-set-resources-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor %list-resource-set-resources-response-items
                         :initform (common-lisp:error ":items is required"))))
 (common-lisp:export
  (common-lisp:list 'list-resource-set-resources-response
                    'make-list-resource-set-resources-response))
 (common-lisp:defun make-list-resource-set-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-set-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-sets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-resource-sets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-resource-sets-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-sets-request
                    'make-list-resource-sets-request))
 (common-lisp:defun make-list-resource-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-resource-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-sets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-resource-sets-response-next-token
                         :initform common-lisp:nil)
                        (resource-sets :initarg :resource-sets :type
                         (common-lisp:or resource-set-summary-list
                                         common-lisp:null)
                         :accessor %list-resource-sets-response-resource-sets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-sets-response
                    'make-list-resource-sets-response))
 (common-lisp:defun make-list-resource-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-sets)
   (common-lisp:apply #'common-lisp:make-instance 'list-resource-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-sets))
      (common-lisp:list
       (common-lisp:cons "ResourceSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-third-party-firewall-firewall-policies-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor
                         %list-third-party-firewall-firewall-policies-request-max-results
                         :initform
                         (common-lisp:error ":max-results is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-third-party-firewall-firewall-policies-request-next-token
                         :initform common-lisp:nil)
                        (third-party-firewall :initarg :third-party-firewall
                         :type
                         (common-lisp:or third-party-firewall common-lisp:null)
                         :accessor
                         %list-third-party-firewall-firewall-policies-request-third-party-firewall
                         :initform
                         (common-lisp:error
                          ":third-party-firewall is required"))))
 (common-lisp:export
  (common-lisp:list 'list-third-party-firewall-firewall-policies-request
                    'make-list-third-party-firewall-firewall-policies-request))
 (common-lisp:defun make-list-third-party-firewall-firewall-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     third-party-firewall)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-third-party-firewall-firewall-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-third-party-firewall-firewall-policies-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-third-party-firewall-firewall-policies-response-next-token
                         :initform common-lisp:nil)
                        (third-party-firewall-firewall-policies :initarg
                         :third-party-firewall-firewall-policies :type
                         (common-lisp:or third-party-firewall-firewall-policies
                                         common-lisp:null)
                         :accessor
                         %list-third-party-firewall-firewall-policies-response-third-party-firewall-firewall-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-third-party-firewall-firewall-policies-response
                    'make-list-third-party-firewall-firewall-policies-response))
 (common-lisp:defun make-list-third-party-firewall-firewall-policies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     third-party-firewall-firewall-policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-third-party-firewall-firewall-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-firewall-policies))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallFirewallPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-response))
   common-lisp:nil))
(common-lisp:deftype managed-service-data () 'common-lisp:string)
(common-lisp:deftype marketplace-subscription-onboarding-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype member-accounts ()
   '(trivial-types:proper-list awsaccount-id))
 (common-lisp:defun |make-member-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype network-firewall-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-firewall-action-list ()
   '(trivial-types:proper-list network-firewall-action))
 (common-lisp:defun |make-network-firewall-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-firewall-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-firewall-black-hole-route-detected-violation
                       common-lisp:nil
                       ((violating-routes :initarg :violating-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %network-firewall-black-hole-route-detected-violation-violating-routes
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-black-hole-route-detected-violation-vpc-id
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-black-hole-route-detected-violation-route-table-id
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %network-firewall-black-hole-route-detected-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-black-hole-route-detected-violation
                    'make-network-firewall-black-hole-route-detected-violation))
 (common-lisp:defun make-network-firewall-black-hole-route-detected-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key violating-routes vpc-id route-table-id
                     violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-black-hole-route-detected-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-black-hole-route-detected-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-black-hole-route-detected-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-black-hole-route-detected-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  network-firewall-internet-traffic-not-inspected-violation common-lisp:nil
  ((vpc-id :initarg :vpc-id :type (common-lisp:or resource-id common-lisp:null)
    :accessor %network-firewall-internet-traffic-not-inspected-violation-vpc-id
    :initform common-lisp:nil)
   (actual-internet-gateway-routes :initarg :actual-internet-gateway-routes
    :type (common-lisp:or routes common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-actual-internet-gateway-routes
    :initform common-lisp:nil)
   (expected-internet-gateway-routes :initarg :expected-internet-gateway-routes
    :type (common-lisp:or expected-routes common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-expected-internet-gateway-routes
    :initform common-lisp:nil)
   (current-internet-gateway-route-table :initarg
    :current-internet-gateway-route-table :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-current-internet-gateway-route-table
    :initform common-lisp:nil)
   (internet-gateway-id :initarg :internet-gateway-id :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-internet-gateway-id
    :initform common-lisp:nil)
   (actual-firewall-subnet-routes :initarg :actual-firewall-subnet-routes :type
    (common-lisp:or routes common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-actual-firewall-subnet-routes
    :initform common-lisp:nil)
   (expected-firewall-subnet-routes :initarg :expected-firewall-subnet-routes
    :type (common-lisp:or expected-routes common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-expected-firewall-subnet-routes
    :initform common-lisp:nil)
   (firewall-subnet-id :initarg :firewall-subnet-id :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-firewall-subnet-id
    :initform common-lisp:nil)
   (expected-firewall-endpoint :initarg :expected-firewall-endpoint :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-expected-firewall-endpoint
    :initform common-lisp:nil)
   (current-firewall-subnet-route-table :initarg
    :current-firewall-subnet-route-table :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-current-firewall-subnet-route-table
    :initform common-lisp:nil)
   (is-route-table-used-in-different-az :initarg
    :is-route-table-used-in-different-az :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-is-route-table-used-in-different-az
    :initform common-lisp:nil)
   (violating-routes :initarg :violating-routes :type
    (common-lisp:or routes common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-violating-routes
    :initform common-lisp:nil)
   (route-table-id :initarg :route-table-id :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-route-table-id
    :initform common-lisp:nil)
   (subnet-availability-zone :initarg :subnet-availability-zone :type
    (common-lisp:or length-bounded-string common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-subnet-availability-zone
    :initform common-lisp:nil)
   (subnet-id :initarg :subnet-id :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %network-firewall-internet-traffic-not-inspected-violation-subnet-id
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-internet-traffic-not-inspected-violation
                    'make-network-firewall-internet-traffic-not-inspected-violation))
 (common-lisp:defun make-network-firewall-internet-traffic-not-inspected-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id actual-internet-gateway-routes
                     expected-internet-gateway-routes
                     current-internet-gateway-route-table internet-gateway-id
                     actual-firewall-subnet-routes
                     expected-firewall-subnet-routes firewall-subnet-id
                     expected-firewall-endpoint
                     current-firewall-subnet-route-table
                     is-route-table-used-in-different-az violating-routes
                     route-table-id subnet-availability-zone subnet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-internet-traffic-not-inspected-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-internet-traffic-not-inspected-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-internet-traffic-not-inspected-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-route-table-used-in-different-az))
      (common-lisp:list
       (common-lisp:cons "IsRouteTableUsedInDifferentAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-firewall-subnet-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentFirewallSubnetRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-internet-gateway-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentInternetGatewayRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ActualInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-internet-traffic-not-inspected-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-invalid-route-configuration-violation
                       common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-vpc-id
                         :initform common-lisp:nil)
                        (actual-internet-gateway-routes :initarg
                         :actual-internet-gateway-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %network-firewall-invalid-route-configuration-violation-actual-internet-gateway-routes
                         :initform common-lisp:nil)
                        (expected-internet-gateway-routes :initarg
                         :expected-internet-gateway-routes :type
                         (common-lisp:or expected-routes common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-expected-internet-gateway-routes
                         :initform common-lisp:nil)
                        (current-internet-gateway-route-table :initarg
                         :current-internet-gateway-route-table :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-current-internet-gateway-route-table
                         :initform common-lisp:nil)
                        (internet-gateway-id :initarg :internet-gateway-id
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-internet-gateway-id
                         :initform common-lisp:nil)
                        (actual-firewall-subnet-routes :initarg
                         :actual-firewall-subnet-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %network-firewall-invalid-route-configuration-violation-actual-firewall-subnet-routes
                         :initform common-lisp:nil)
                        (expected-firewall-subnet-routes :initarg
                         :expected-firewall-subnet-routes :type
                         (common-lisp:or expected-routes common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-expected-firewall-subnet-routes
                         :initform common-lisp:nil)
                        (actual-firewall-subnet-id :initarg
                         :actual-firewall-subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-actual-firewall-subnet-id
                         :initform common-lisp:nil)
                        (expected-firewall-subnet-id :initarg
                         :expected-firewall-subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-expected-firewall-subnet-id
                         :initform common-lisp:nil)
                        (actual-firewall-endpoint :initarg
                         :actual-firewall-endpoint :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-actual-firewall-endpoint
                         :initform common-lisp:nil)
                        (expected-firewall-endpoint :initarg
                         :expected-firewall-endpoint :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-expected-firewall-endpoint
                         :initform common-lisp:nil)
                        (current-firewall-subnet-route-table :initarg
                         :current-firewall-subnet-route-table :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-current-firewall-subnet-route-table
                         :initform common-lisp:nil)
                        (violating-route :initarg :violating-route :type
                         (common-lisp:or route common-lisp:null) :accessor
                         %network-firewall-invalid-route-configuration-violation-violating-route
                         :initform common-lisp:nil)
                        (is-route-table-used-in-different-az :initarg
                         :is-route-table-used-in-different-az :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %network-firewall-invalid-route-configuration-violation-is-route-table-used-in-different-az
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-route-table-id
                         :initform common-lisp:nil)
                        (affected-subnets :initarg :affected-subnets :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor
                         %network-firewall-invalid-route-configuration-violation-affected-subnets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-invalid-route-configuration-violation
                    'make-network-firewall-invalid-route-configuration-violation))
 (common-lisp:defun make-network-firewall-invalid-route-configuration-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id actual-internet-gateway-routes
                     expected-internet-gateway-routes
                     current-internet-gateway-route-table internet-gateway-id
                     actual-firewall-subnet-routes
                     expected-firewall-subnet-routes actual-firewall-subnet-id
                     expected-firewall-subnet-id actual-firewall-endpoint
                     expected-firewall-endpoint
                     current-firewall-subnet-route-table violating-route
                     is-route-table-used-in-different-az route-table-id
                     affected-subnets)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-invalid-route-configuration-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-invalid-route-configuration-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-invalid-route-configuration-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-subnets))
      (common-lisp:list
       (common-lisp:cons "AffectedSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-route-table-used-in-different-az))
      (common-lisp:list
       (common-lisp:cons "IsRouteTableUsedInDifferentAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-route))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-firewall-subnet-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentFirewallSubnetRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-internet-gateway-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentInternetGatewayRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ActualInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-invalid-route-configuration-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-missing-expected-rtviolation
                       common-lisp:nil
                       ((expected-route-table :initarg :expected-route-table
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-rtviolation-expected-route-table
                         :initform common-lisp:nil)
                        (current-route-table :initarg :current-route-table
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-rtviolation-current-route-table
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-rtviolation-availability-zone
                         :initform common-lisp:nil)
                        (vpc :initarg :vpc :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-rtviolation-vpc
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-rtviolation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-expected-rtviolation
                    'make-network-firewall-missing-expected-rtviolation))
 (common-lisp:defun make-network-firewall-missing-expected-rtviolation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-route-table current-route-table
                     availability-zone vpc violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-missing-expected-rtviolation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-rtviolation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-rtviolation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-route-table))
      (common-lisp:list
       (common-lisp:cons "ExpectedRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-rtviolation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-missing-expected-routes-violation
                       common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-routes-violation-vpc-id
                         :initform common-lisp:nil)
                        (expected-routes :initarg :expected-routes :type
                         (common-lisp:or expected-routes common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-routes-violation-expected-routes
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %network-firewall-missing-expected-routes-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-expected-routes-violation
                    'make-network-firewall-missing-expected-routes-violation))
 (common-lisp:defun make-network-firewall-missing-expected-routes-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id expected-routes violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-missing-expected-routes-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-routes-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-routes-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-routes-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-missing-firewall-violation
                       common-lisp:nil
                       ((target-violation-reason :initarg
                         :target-violation-reason :type
                         (common-lisp:or target-violation-reason
                                         common-lisp:null)
                         :accessor
                         %network-firewall-missing-firewall-violation-target-violation-reason
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %network-firewall-missing-firewall-violation-availability-zone
                         :initform common-lisp:nil)
                        (vpc :initarg :vpc :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-missing-firewall-violation-vpc
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %network-firewall-missing-firewall-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-firewall-violation
                    'make-network-firewall-missing-firewall-violation))
 (common-lisp:defun make-network-firewall-missing-firewall-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-violation-reason availability-zone
                     vpc violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-missing-firewall-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-firewall-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-firewall-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-firewall-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-missing-subnet-violation
                       common-lisp:nil
                       ((target-violation-reason :initarg
                         :target-violation-reason :type
                         (common-lisp:or target-violation-reason
                                         common-lisp:null)
                         :accessor
                         %network-firewall-missing-subnet-violation-target-violation-reason
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %network-firewall-missing-subnet-violation-availability-zone
                         :initform common-lisp:nil)
                        (vpc :initarg :vpc :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-missing-subnet-violation-vpc
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %network-firewall-missing-subnet-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-subnet-violation
                    'make-network-firewall-missing-subnet-violation))
 (common-lisp:defun make-network-firewall-missing-subnet-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-violation-reason availability-zone
                     vpc violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-missing-subnet-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-subnet-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-subnet-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-subnet-violation))
   common-lisp:nil))
(common-lisp:deftype network-firewall-override-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-firewall-policy common-lisp:nil
                       ((firewall-deployment-model :initarg
                         :firewall-deployment-model :type
                         (common-lisp:or firewall-deployment-model
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-firewall-deployment-model
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-policy 'make-network-firewall-policy))
 (common-lisp:defun make-network-firewall-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key firewall-deployment-model)
   (common-lisp:apply #'common-lisp:make-instance 'network-firewall-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-deployment-model))
      (common-lisp:list
       (common-lisp:cons "FirewallDeploymentModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-policy-description common-lisp:nil
                       ((stateful-engine-options :initarg
                         :stateful-engine-options :type
                         (common-lisp:or stateful-engine-options
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateful-engine-options
                         :initform common-lisp:nil)
                        (stateful-default-actions :initarg
                         :stateful-default-actions :type
                         (common-lisp:or network-firewall-action-list
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateful-default-actions
                         :initform common-lisp:nil)
                        (stateful-rule-groups :initarg :stateful-rule-groups
                         :type
                         (common-lisp:or stateful-rule-group-list
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateful-rule-groups
                         :initform common-lisp:nil)
                        (stateless-custom-actions :initarg
                         :stateless-custom-actions :type
                         (common-lisp:or network-firewall-action-list
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateless-custom-actions
                         :initform common-lisp:nil)
                        (stateless-fragment-default-actions :initarg
                         :stateless-fragment-default-actions :type
                         (common-lisp:or network-firewall-action-list
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateless-fragment-default-actions
                         :initform common-lisp:nil)
                        (stateless-default-actions :initarg
                         :stateless-default-actions :type
                         (common-lisp:or network-firewall-action-list
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateless-default-actions
                         :initform common-lisp:nil)
                        (stateless-rule-groups :initarg :stateless-rule-groups
                         :type
                         (common-lisp:or stateless-rule-group-list
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-description-stateless-rule-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-policy-description
                    'make-network-firewall-policy-description))
 (common-lisp:defun make-network-firewall-policy-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stateful-engine-options
                     stateful-default-actions stateful-rule-groups
                     stateless-custom-actions
                     stateless-fragment-default-actions
                     stateless-default-actions stateless-rule-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-policy-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-rule-groups))
      (common-lisp:list
       (common-lisp:cons "StatelessRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-fragment-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessFragmentDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-custom-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessCustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-rule-groups))
      (common-lisp:list
       (common-lisp:cons "StatefulRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatefulDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-engine-options))
      (common-lisp:list
       (common-lisp:cons "StatefulEngineOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-policy-modified-violation
                       common-lisp:nil
                       ((expected-policy-description :initarg
                         :expected-policy-description :type
                         (common-lisp:or network-firewall-policy-description
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-modified-violation-expected-policy-description
                         :initform common-lisp:nil)
                        (current-policy-description :initarg
                         :current-policy-description :type
                         (common-lisp:or network-firewall-policy-description
                                         common-lisp:null)
                         :accessor
                         %network-firewall-policy-modified-violation-current-policy-description
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %network-firewall-policy-modified-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-policy-modified-violation
                    'make-network-firewall-policy-modified-violation))
 (common-lisp:defun make-network-firewall-policy-modified-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-policy-description
                     current-policy-description violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-policy-modified-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-modified-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-modified-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-policy-description))
      (common-lisp:list
       (common-lisp:cons "CurrentPolicyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-policy-description))
      (common-lisp:list
       (common-lisp:cons "ExpectedPolicyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-modified-violation))
   common-lisp:nil))
(common-lisp:deftype network-firewall-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-firewall-stateful-rule-group-override
                       common-lisp:nil
                       ((action :initarg :action :type
                         (common-lisp:or network-firewall-override-action
                                         common-lisp:null)
                         :accessor
                         %network-firewall-stateful-rule-group-override-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-stateful-rule-group-override
                    'make-network-firewall-stateful-rule-group-override))
 (common-lisp:defun make-network-firewall-stateful-rule-group-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-stateful-rule-group-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-stateful-rule-group-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-stateful-rule-group-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-stateful-rule-group-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-unexpected-firewall-routes-violation
                       common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-firewall-routes-violation-vpc-id
                         :initform common-lisp:nil)
                        (firewall-endpoint :initarg :firewall-endpoint :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-firewall-routes-violation-firewall-endpoint
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-firewall-routes-violation-route-table-id
                         :initform common-lisp:nil)
                        (violating-routes :initarg :violating-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %network-firewall-unexpected-firewall-routes-violation-violating-routes
                         :initform common-lisp:nil)
                        (firewall-subnet-id :initarg :firewall-subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-firewall-routes-violation-firewall-subnet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-unexpected-firewall-routes-violation
                    'make-network-firewall-unexpected-firewall-routes-violation))
 (common-lisp:defun make-network-firewall-unexpected-firewall-routes-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id firewall-endpoint route-table-id
                     violating-routes firewall-subnet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-unexpected-firewall-routes-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-firewall-routes-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-firewall-routes-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "FirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-firewall-routes-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-firewall-unexpected-gateway-routes-violation
                       common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-gateway-routes-violation-vpc-id
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-gateway-routes-violation-route-table-id
                         :initform common-lisp:nil)
                        (violating-routes :initarg :violating-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %network-firewall-unexpected-gateway-routes-violation-violating-routes
                         :initform common-lisp:nil)
                        (gateway-id :initarg :gateway-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %network-firewall-unexpected-gateway-routes-violation-gateway-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-unexpected-gateway-routes-violation
                    'make-network-firewall-unexpected-gateway-routes-violation))
 (common-lisp:defun make-network-firewall-unexpected-gateway-routes-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id route-table-id violating-routes
                     gateway-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-firewall-unexpected-gateway-routes-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-gateway-routes-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-gateway-routes-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-gateway-routes-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ordered-remediation-actions ()
   '(trivial-types:proper-list remediation-action-with-order))
 (common-lisp:defun |make-ordered-remediation-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remediation-action-with-order))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organization-status () 'common-lisp:string)
(common-lisp:deftype organizational-unit-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-id-list ()
   '(trivial-types:proper-list organizational-unit-id))
 (common-lisp:defun |make-organizational-unit-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organizational-unit-scope common-lisp:nil
                       ((exclude-specified-organizational-units :initarg
                         :exclude-specified-organizational-units :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %organizational-unit-scope-exclude-specified-organizational-units
                         :initform common-lisp:nil)
                        (all-organizational-units-enabled :initarg
                         :all-organizational-units-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %organizational-unit-scope-all-organizational-units-enabled
                         :initform common-lisp:nil)
                        (organizational-units :initarg :organizational-units
                         :type
                         (common-lisp:or organizational-unit-id-list
                                         common-lisp:null)
                         :accessor
                         %organizational-unit-scope-organizational-units
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'organizational-unit-scope
                    'make-organizational-unit-scope))
 (common-lisp:defun make-organizational-unit-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exclude-specified-organizational-units
                     all-organizational-units-enabled organizational-units)
   (common-lisp:apply #'common-lisp:make-instance 'organizational-unit-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organizational-unit-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organizational-unit-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-units))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-organizational-units-enabled))
      (common-lisp:list
       (common-lisp:cons "AllOrganizationalUnitsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-specified-organizational-units))
      (common-lisp:list
       (common-lisp:cons "ExcludeSpecifiedOrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organizational-unit-scope))
   common-lisp:nil))
(common-lisp:deftype pagination-max-results () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partial-match common-lisp:nil
                       ((target-violation-reasons :initarg
                         :target-violation-reasons :type
                         (common-lisp:or target-violation-reasons
                                         common-lisp:null)
                         :accessor %partial-match-target-violation-reasons
                         :initform common-lisp:nil)
                        (reference :initarg :reference :type
                         (common-lisp:or reference-rule common-lisp:null)
                         :accessor %partial-match-reference :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'partial-match 'make-partial-match))
 (common-lisp:defun make-partial-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-violation-reasons reference)
   (common-lisp:apply #'common-lisp:make-instance 'partial-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partial-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partial-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "Reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reasons))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partial-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partial-matches ()
   '(trivial-types:proper-list partial-match))
 (common-lisp:defun |make-partial-matches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partial-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy common-lisp:nil
                       ((policy-status :initarg :policy-status :type
                         (common-lisp:or customer-policy-status
                                         common-lisp:null)
                         :accessor %policy-policy-status :initform
                         common-lisp:nil)
                        (policy-description :initarg :policy-description :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor %policy-policy-description :initform
                         common-lisp:nil)
                        (resource-set-ids :initarg :resource-set-ids :type
                         (common-lisp:or resource-set-ids common-lisp:null)
                         :accessor %policy-resource-set-ids :initform
                         common-lisp:nil)
                        (exclude-map :initarg :exclude-map :type
                         (common-lisp:or customer-policy-scope-map
                                         common-lisp:null)
                         :accessor %policy-exclude-map :initform
                         common-lisp:nil)
                        (include-map :initarg :include-map :type
                         (common-lisp:or customer-policy-scope-map
                                         common-lisp:null)
                         :accessor %policy-include-map :initform
                         common-lisp:nil)
                        (delete-unused-fmmanaged-resources :initarg
                         :delete-unused-fmmanaged-resources :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %policy-delete-unused-fmmanaged-resources :initform
                         common-lisp:nil)
                        (remediation-enabled :initarg :remediation-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %policy-remediation-enabled :initform
                         (common-lisp:error
                          ":remediation-enabled is required"))
                        (exclude-resource-tags :initarg :exclude-resource-tags
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %policy-exclude-resource-tags :initform
                         (common-lisp:error
                          ":exclude-resource-tags is required"))
                        (resource-tags :initarg :resource-tags :type
                         (common-lisp:or resource-tags common-lisp:null)
                         :accessor %policy-resource-tags :initform
                         common-lisp:nil)
                        (resource-type-list :initarg :resource-type-list :type
                         (common-lisp:or resource-type-list common-lisp:null)
                         :accessor %policy-resource-type-list :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %policy-resource-type :initform
                         (common-lisp:error ":resource-type is required"))
                        (security-service-policy-data :initarg
                         :security-service-policy-data :type
                         (common-lisp:or security-service-policy-data
                                         common-lisp:null)
                         :accessor %policy-security-service-policy-data
                         :initform
                         (common-lisp:error
                          ":security-service-policy-data is required"))
                        (policy-update-token :initarg :policy-update-token
                         :type
                         (common-lisp:or policy-update-token common-lisp:null)
                         :accessor %policy-policy-update-token :initform
                         common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %policy-policy-name :initform
                         (common-lisp:error ":policy-name is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %policy-policy-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defun make-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-status policy-description
                     resource-set-ids exclude-map include-map
                     delete-unused-fmmanaged-resources remediation-enabled
                     exclude-resource-tags resource-tags resource-type-list
                     resource-type security-service-policy-data
                     policy-update-token policy-name policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-update-token))
      (common-lisp:list
       (common-lisp:cons "PolicyUpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-service-policy-data))
      (common-lisp:list
       (common-lisp:cons "SecurityServicePolicyData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type-list))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-resource-tags))
      (common-lisp:list
       (common-lisp:cons "ExcludeResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-enabled))
      (common-lisp:list
       (common-lisp:cons "RemediationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-unused-fmmanaged-resources))
      (common-lisp:list
       (common-lisp:cons "DeleteUnusedFMManagedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-map))
      (common-lisp:list
       (common-lisp:cons "IncludeMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-map))
      (common-lisp:list
       (common-lisp:cons "ExcludeMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-description))
      (common-lisp:list
       (common-lisp:cons "PolicyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-compliance-detail common-lisp:nil
                       ((issue-info-map :initarg :issue-info-map :type
                         (common-lisp:or issue-info-map common-lisp:null)
                         :accessor %policy-compliance-detail-issue-info-map
                         :initform common-lisp:nil)
                        (expired-at :initarg :expired-at :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %policy-compliance-detail-expired-at :initform
                         common-lisp:nil)
                        (evaluation-limit-exceeded :initarg
                         :evaluation-limit-exceeded :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %policy-compliance-detail-evaluation-limit-exceeded
                         :initform common-lisp:nil)
                        (violators :initarg :violators :type
                         (common-lisp:or compliance-violators common-lisp:null)
                         :accessor %policy-compliance-detail-violators
                         :initform common-lisp:nil)
                        (member-account :initarg :member-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %policy-compliance-detail-member-account
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %policy-compliance-detail-policy-id :initform
                         common-lisp:nil)
                        (policy-owner :initarg :policy-owner :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %policy-compliance-detail-policy-owner
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-compliance-detail 'make-policy-compliance-detail))
 (common-lisp:defun make-policy-compliance-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issue-info-map expired-at
                     evaluation-limit-exceeded violators member-account
                     policy-id policy-owner)
   (common-lisp:apply #'common-lisp:make-instance 'policy-compliance-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-owner))
      (common-lisp:list
       (common-lisp:cons "PolicyOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violators))
      (common-lisp:list
       (common-lisp:cons "Violators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-limit-exceeded))
      (common-lisp:list
       (common-lisp:cons "EvaluationLimitExceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expired-at))
      (common-lisp:list
       (common-lisp:cons "ExpiredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-info-map))
      (common-lisp:list
       (common-lisp:cons "IssueInfoMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-compliance-status common-lisp:nil
                       ((issue-info-map :initarg :issue-info-map :type
                         (common-lisp:or issue-info-map common-lisp:null)
                         :accessor %policy-compliance-status-issue-info-map
                         :initform common-lisp:nil)
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %policy-compliance-status-last-updated :initform
                         common-lisp:nil)
                        (evaluation-results :initarg :evaluation-results :type
                         (common-lisp:or evaluation-results common-lisp:null)
                         :accessor %policy-compliance-status-evaluation-results
                         :initform common-lisp:nil)
                        (member-account :initarg :member-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %policy-compliance-status-member-account
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %policy-compliance-status-policy-name
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %policy-compliance-status-policy-id :initform
                         common-lisp:nil)
                        (policy-owner :initarg :policy-owner :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %policy-compliance-status-policy-owner
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-compliance-status 'make-policy-compliance-status))
 (common-lisp:defun make-policy-compliance-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issue-info-map last-updated
                     evaluation-results member-account policy-name policy-id
                     policy-owner)
   (common-lisp:apply #'common-lisp:make-instance 'policy-compliance-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-owner))
      (common-lisp:list
       (common-lisp:cons "PolicyOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-results))
      (common-lisp:list
       (common-lisp:cons "EvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-info-map))
      (common-lisp:list
       (common-lisp:cons "IssueInfoMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-compliance-status-list ()
   '(trivial-types:proper-list policy-compliance-status))
 (common-lisp:defun |make-policy-compliance-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-compliance-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-compliance-status-type () 'common-lisp:string)
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-option common-lisp:nil
                       ((third-party-firewall-policy :initarg
                         :third-party-firewall-policy :type
                         (common-lisp:or third-party-firewall-policy
                                         common-lisp:null)
                         :accessor %policy-option-third-party-firewall-policy
                         :initform common-lisp:nil)
                        (network-firewall-policy :initarg
                         :network-firewall-policy :type
                         (common-lisp:or network-firewall-policy
                                         common-lisp:null)
                         :accessor %policy-option-network-firewall-policy
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-option 'make-policy-option))
 (common-lisp:defun make-policy-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key third-party-firewall-policy
                     network-firewall-policy)
   (common-lisp:apply #'common-lisp:make-instance 'policy-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-policy))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-policy))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-summary common-lisp:nil
                       ((policy-status :initarg :policy-status :type
                         (common-lisp:or customer-policy-status
                                         common-lisp:null)
                         :accessor %policy-summary-policy-status :initform
                         common-lisp:nil)
                        (delete-unused-fmmanaged-resources :initarg
                         :delete-unused-fmmanaged-resources :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %policy-summary-delete-unused-fmmanaged-resources
                         :initform common-lisp:nil)
                        (remediation-enabled :initarg :remediation-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %policy-summary-remediation-enabled
                         :initform common-lisp:nil)
                        (security-service-type :initarg :security-service-type
                         :type
                         (common-lisp:or security-service-type
                                         common-lisp:null)
                         :accessor %policy-summary-security-service-type
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %policy-summary-resource-type :initform
                         common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %policy-summary-policy-name :initform
                         common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %policy-summary-policy-id :initform common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %policy-summary-policy-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-summary 'make-policy-summary))
 (common-lisp:defun make-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-status
                     delete-unused-fmmanaged-resources remediation-enabled
                     security-service-type resource-type policy-name policy-id
                     policy-arn)
   (common-lisp:apply #'common-lisp:make-instance 'policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-service-type))
      (common-lisp:list
       (common-lisp:cons "SecurityServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-enabled))
      (common-lisp:list
       (common-lisp:cons "RemediationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-unused-fmmanaged-resources))
      (common-lisp:list
       (common-lisp:cons "DeleteUnusedFMManagedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-summary-list ()
   '(trivial-types:proper-list policy-summary))
 (common-lisp:defun |make-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-type-scope common-lisp:nil
                       ((all-policy-types-enabled :initarg
                         :all-policy-types-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %policy-type-scope-all-policy-types-enabled :initform
                         common-lisp:nil)
                        (policy-types :initarg :policy-types :type
                         (common-lisp:or security-service-type-list
                                         common-lisp:null)
                         :accessor %policy-type-scope-policy-types :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-type-scope 'make-policy-type-scope))
 (common-lisp:defun make-policy-type-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key all-policy-types-enabled policy-types)
   (common-lisp:apply #'common-lisp:make-instance 'policy-type-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-type-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-type-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-types))
      (common-lisp:list
       (common-lisp:cons "PolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-policy-types-enabled))
      (common-lisp:list
       (common-lisp:cons "AllPolicyTypesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-type-scope))
   common-lisp:nil))
(common-lisp:deftype policy-update-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass possible-remediation-action common-lisp:nil
                       ((is-default-action :initarg :is-default-action :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %possible-remediation-action-is-default-action
                         :initform common-lisp:nil)
                        (ordered-remediation-actions :initarg
                         :ordered-remediation-actions :type
                         (common-lisp:or ordered-remediation-actions
                                         common-lisp:null)
                         :accessor
                         %possible-remediation-action-ordered-remediation-actions
                         :initform
                         (common-lisp:error
                          ":ordered-remediation-actions is required"))
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %possible-remediation-action-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'possible-remediation-action
                    'make-possible-remediation-action))
 (common-lisp:defun make-possible-remediation-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-default-action
                     ordered-remediation-actions description)
   (common-lisp:apply #'common-lisp:make-instance 'possible-remediation-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ordered-remediation-actions))
      (common-lisp:list
       (common-lisp:cons "OrderedRemediationActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-action))
      (common-lisp:list
       (common-lisp:cons "IsDefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype possible-remediation-action-list ()
   '(trivial-types:proper-list possible-remediation-action))
 (common-lisp:defun |make-possible-remediation-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            possible-remediation-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass possible-remediation-actions common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or possible-remediation-action-list
                                         common-lisp:null)
                         :accessor %possible-remediation-actions-actions
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %possible-remediation-actions-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'possible-remediation-actions
                    'make-possible-remediation-actions))
 (common-lisp:defun make-possible-remediation-actions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions description)
   (common-lisp:apply #'common-lisp:make-instance 'possible-remediation-actions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype previous-apps-list () 'common-lisp:hash-table)
 (common-lisp:defun |make-previous-apps-list|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype previous-list-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype previous-protocols-list () 'common-lisp:hash-table)
 (common-lisp:defun |make-previous-protocols-list|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype priority-number () 'common-lisp:integer)
(common-lisp:deftype protection-data () 'common-lisp:string)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocols-list () '(trivial-types:proper-list protocol))
 (common-lisp:defun |make-protocols-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass protocols-list-data common-lisp:nil
                       ((previous-protocols-list :initarg
                         :previous-protocols-list :type
                         (common-lisp:or previous-protocols-list
                                         common-lisp:null)
                         :accessor %protocols-list-data-previous-protocols-list
                         :initform common-lisp:nil)
                        (protocols-list :initarg :protocols-list :type
                         (common-lisp:or protocols-list common-lisp:null)
                         :accessor %protocols-list-data-protocols-list
                         :initform
                         (common-lisp:error ":protocols-list is required"))
                        (last-update-time :initarg :last-update-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %protocols-list-data-last-update-time :initform
                         common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %protocols-list-data-create-time :initform
                         common-lisp:nil)
                        (list-update-token :initarg :list-update-token :type
                         (common-lisp:or update-token common-lisp:null)
                         :accessor %protocols-list-data-list-update-token
                         :initform common-lisp:nil)
                        (list-name :initarg :list-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %protocols-list-data-list-name :initform
                         (common-lisp:error ":list-name is required"))
                        (list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %protocols-list-data-list-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protocols-list-data 'make-protocols-list-data))
 (common-lisp:defun make-protocols-list-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key previous-protocols-list protocols-list
                     last-update-time create-time list-update-token list-name
                     list-id)
   (common-lisp:apply #'common-lisp:make-instance 'protocols-list-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protocols-list-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protocols-list-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-update-token))
      (common-lisp:list
       (common-lisp:cons "ListUpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-protocols-list))
      (common-lisp:list
       (common-lisp:cons "PreviousProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protocols-list-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protocols-list-data-summary common-lisp:nil
                       ((protocols-list :initarg :protocols-list :type
                         (common-lisp:or protocols-list common-lisp:null)
                         :accessor %protocols-list-data-summary-protocols-list
                         :initform common-lisp:nil)
                        (list-name :initarg :list-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %protocols-list-data-summary-list-name
                         :initform common-lisp:nil)
                        (list-id :initarg :list-id :type
                         (common-lisp:or list-id common-lisp:null) :accessor
                         %protocols-list-data-summary-list-id :initform
                         common-lisp:nil)
                        (list-arn :initarg :list-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %protocols-list-data-summary-list-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protocols-list-data-summary
                    'make-protocols-list-data-summary))
 (common-lisp:defun make-protocols-list-data-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocols-list list-name list-id
                     list-arn)
   (common-lisp:apply #'common-lisp:make-instance 'protocols-list-data-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protocols-list-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protocols-list-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-arn))
      (common-lisp:list
       (common-lisp:cons "ListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protocols-list-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protocols-lists-data ()
   '(trivial-types:proper-list protocols-list-data-summary))
 (common-lisp:defun |make-protocols-lists-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            protocols-list-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-admin-account-request common-lisp:nil
                       ((admin-scope :initarg :admin-scope :type
                         (common-lisp:or admin-scope common-lisp:null)
                         :accessor %put-admin-account-request-admin-scope
                         :initform common-lisp:nil)
                        (admin-account :initarg :admin-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %put-admin-account-request-admin-account
                         :initform
                         (common-lisp:error ":admin-account is required"))))
 (common-lisp:export
  (common-lisp:list 'put-admin-account-request
                    'make-put-admin-account-request))
 (common-lisp:defun make-put-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key admin-scope admin-account)
   (common-lisp:apply #'common-lisp:make-instance 'put-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-scope))
      (common-lisp:list
       (common-lisp:cons "AdminScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-apps-list-request common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-apps-list-request-tag-list :initform
                         common-lisp:nil)
                        (apps-list :initarg :apps-list :type
                         (common-lisp:or apps-list-data common-lisp:null)
                         :accessor %put-apps-list-request-apps-list :initform
                         (common-lisp:error ":apps-list is required"))))
 (common-lisp:export
  (common-lisp:list 'put-apps-list-request 'make-put-apps-list-request))
 (common-lisp:defun make-put-apps-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list apps-list)
   (common-lisp:apply #'common-lisp:make-instance 'put-apps-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-apps-list-response common-lisp:nil
                       ((apps-list-arn :initarg :apps-list-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %put-apps-list-response-apps-list-arn
                         :initform common-lisp:nil)
                        (apps-list :initarg :apps-list :type
                         (common-lisp:or apps-list-data common-lisp:null)
                         :accessor %put-apps-list-response-apps-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-apps-list-response 'make-put-apps-list-response))
 (common-lisp:defun make-put-apps-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key apps-list-arn apps-list)
   (common-lisp:apply #'common-lisp:make-instance 'put-apps-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list-arn))
      (common-lisp:list
       (common-lisp:cons "AppsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-notification-channel-request common-lisp:nil
                       ((sns-role-name :initarg :sns-role-name :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %put-notification-channel-request-sns-role-name
                         :initform
                         (common-lisp:error ":sns-role-name is required"))
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %put-notification-channel-request-sns-topic-arn
                         :initform
                         (common-lisp:error ":sns-topic-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-notification-channel-request
                    'make-put-notification-channel-request))
 (common-lisp:defun make-put-notification-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-role-name sns-topic-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-notification-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-role-name))
      (common-lisp:list
       (common-lisp:cons "SnsRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-policy-request common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-policy-request-tag-list :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))))
 (common-lisp:export
  (common-lisp:list 'put-policy-request 'make-put-policy-request))
 (common-lisp:defun make-put-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list policy)
   (common-lisp:apply #'common-lisp:make-instance 'put-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-policy-response common-lisp:nil
                       ((policy-arn :initarg :policy-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %put-policy-response-policy-arn :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-policy-response 'make-put-policy-response))
 (common-lisp:defun make-put-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-arn policy)
   (common-lisp:apply #'common-lisp:make-instance 'put-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-protocols-list-request common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-protocols-list-request-tag-list :initform
                         common-lisp:nil)
                        (protocols-list :initarg :protocols-list :type
                         (common-lisp:or protocols-list-data common-lisp:null)
                         :accessor %put-protocols-list-request-protocols-list
                         :initform
                         (common-lisp:error ":protocols-list is required"))))
 (common-lisp:export
  (common-lisp:list 'put-protocols-list-request
                    'make-put-protocols-list-request))
 (common-lisp:defun make-put-protocols-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list protocols-list)
   (common-lisp:apply #'common-lisp:make-instance 'put-protocols-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-protocols-list-response common-lisp:nil
                       ((protocols-list-arn :initarg :protocols-list-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %put-protocols-list-response-protocols-list-arn
                         :initform common-lisp:nil)
                        (protocols-list :initarg :protocols-list :type
                         (common-lisp:or protocols-list-data common-lisp:null)
                         :accessor %put-protocols-list-response-protocols-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-protocols-list-response
                    'make-put-protocols-list-response))
 (common-lisp:defun make-put-protocols-list-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocols-list-arn protocols-list)
   (common-lisp:apply #'common-lisp:make-instance 'put-protocols-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list-arn))
      (common-lisp:list
       (common-lisp:cons "ProtocolsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-set-request common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-resource-set-request-tag-list :initform
                         common-lisp:nil)
                        (resource-set :initarg :resource-set :type
                         (common-lisp:or resource-set common-lisp:null)
                         :accessor %put-resource-set-request-resource-set
                         :initform
                         (common-lisp:error ":resource-set is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-set-request 'make-put-resource-set-request))
 (common-lisp:defun make-put-resource-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list resource-set)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set))
      (common-lisp:list
       (common-lisp:cons "ResourceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-set-response common-lisp:nil
                       ((resource-set-arn :initarg :resource-set-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %put-resource-set-response-resource-set-arn
                         :initform
                         (common-lisp:error ":resource-set-arn is required"))
                        (resource-set :initarg :resource-set :type
                         (common-lisp:or resource-set common-lisp:null)
                         :accessor %put-resource-set-response-resource-set
                         :initform
                         (common-lisp:error ":resource-set is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-set-response
                    'make-put-resource-set-response))
 (common-lisp:defun make-put-resource-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-set-arn resource-set)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set))
      (common-lisp:list
       (common-lisp:cons "ResourceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-response))
   common-lisp:nil))
(common-lisp:deftype reference-rule () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass region-scope common-lisp:nil
                       ((all-regions-enabled :initarg :all-regions-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %region-scope-all-regions-enabled :initform
                         common-lisp:nil)
                        (regions :initarg :regions :type
                         (common-lisp:or awsregion-list common-lisp:null)
                         :accessor %region-scope-regions :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'region-scope 'make-region-scope))
 (common-lisp:defun make-region-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key all-regions-enabled regions)
   (common-lisp:apply #'common-lisp:make-instance 'region-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions-enabled))
      (common-lisp:list
       (common-lisp:cons "AllRegionsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remediation-action common-lisp:nil
                       ((fmspolicy-update-firewall-creation-config-action
                         :initarg
                         :fmspolicy-update-firewall-creation-config-action
                         :type
                         (common-lisp:or
                          fmspolicy-update-firewall-creation-config-action
                          common-lisp:null)
                         :accessor
                         %remediation-action-fmspolicy-update-firewall-creation-config-action
                         :initform common-lisp:nil)
                        (ec2create-route-table-action :initarg
                         :ec2create-route-table-action :type
                         (common-lisp:or ec2create-route-table-action
                                         common-lisp:null)
                         :accessor
                         %remediation-action-ec2create-route-table-action
                         :initform common-lisp:nil)
                        (ec2associate-route-table-action :initarg
                         :ec2associate-route-table-action :type
                         (common-lisp:or ec2associate-route-table-action
                                         common-lisp:null)
                         :accessor
                         %remediation-action-ec2associate-route-table-action
                         :initform common-lisp:nil)
                        (ec2replace-route-table-association-action :initarg
                         :ec2replace-route-table-association-action :type
                         (common-lisp:or
                          ec2replace-route-table-association-action
                          common-lisp:null)
                         :accessor
                         %remediation-action-ec2replace-route-table-association-action
                         :initform common-lisp:nil)
                        (ec2copy-route-table-action :initarg
                         :ec2copy-route-table-action :type
                         (common-lisp:or ec2copy-route-table-action
                                         common-lisp:null)
                         :accessor
                         %remediation-action-ec2copy-route-table-action
                         :initform common-lisp:nil)
                        (ec2delete-route-action :initarg
                         :ec2delete-route-action :type
                         (common-lisp:or ec2delete-route-action
                                         common-lisp:null)
                         :accessor %remediation-action-ec2delete-route-action
                         :initform common-lisp:nil)
                        (ec2replace-route-action :initarg
                         :ec2replace-route-action :type
                         (common-lisp:or ec2replace-route-action
                                         common-lisp:null)
                         :accessor %remediation-action-ec2replace-route-action
                         :initform common-lisp:nil)
                        (ec2create-route-action :initarg
                         :ec2create-route-action :type
                         (common-lisp:or ec2create-route-action
                                         common-lisp:null)
                         :accessor %remediation-action-ec2create-route-action
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %remediation-action-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remediation-action 'make-remediation-action))
 (common-lisp:defun make-remediation-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     fmspolicy-update-firewall-creation-config-action
                     ec2create-route-table-action
                     ec2associate-route-table-action
                     ec2replace-route-table-association-action
                     ec2copy-route-table-action ec2delete-route-action
                     ec2replace-route-action ec2create-route-action
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2create-route-action))
      (common-lisp:list
       (common-lisp:cons "EC2CreateRouteAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2replace-route-action))
      (common-lisp:list
       (common-lisp:cons "EC2ReplaceRouteAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2delete-route-action))
      (common-lisp:list
       (common-lisp:cons "EC2DeleteRouteAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2copy-route-table-action))
      (common-lisp:list
       (common-lisp:cons "EC2CopyRouteTableAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2replace-route-table-association-action))
      (common-lisp:list
       (common-lisp:cons "EC2ReplaceRouteTableAssociationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2associate-route-table-action))
      (common-lisp:list
       (common-lisp:cons "EC2AssociateRouteTableAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2create-route-table-action))
      (common-lisp:list
       (common-lisp:cons "EC2CreateRouteTableAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fmspolicy-update-firewall-creation-config-action))
      (common-lisp:list
       (common-lisp:cons "FMSPolicyUpdateFirewallCreationConfigAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation-action))
   common-lisp:nil))
(common-lisp:deftype remediation-action-description () 'common-lisp:string)
(common-lisp:deftype remediation-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remediation-action-with-order common-lisp:nil
                       ((order :initarg :order :type
                         (common-lisp:or basic-integer common-lisp:null)
                         :accessor %remediation-action-with-order-order
                         :initform common-lisp:nil)
                        (remediation-action :initarg :remediation-action :type
                         (common-lisp:or remediation-action common-lisp:null)
                         :accessor
                         %remediation-action-with-order-remediation-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remediation-action-with-order
                    'make-remediation-action-with-order))
 (common-lisp:defun make-remediation-action-with-order
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order remediation-action)
   (common-lisp:apply #'common-lisp:make-instance
                      'remediation-action-with-order
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-action-with-order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-action-with-order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-action))
      (common-lisp:list
       (common-lisp:cons "RemediationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-action-with-order))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %resource-account-id :initform
                         common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %resource-uri :initform
                         (common-lisp:error ":uri is required"))))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defun make-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id uri)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-count () 'common-lisp:integer)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun |make-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-set common-lisp:nil
                       ((resource-set-status :initarg :resource-set-status
                         :type
                         (common-lisp:or resource-set-status common-lisp:null)
                         :accessor %resource-set-resource-set-status :initform
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %resource-set-last-update-time :initform
                         common-lisp:nil)
                        (resource-type-list :initarg :resource-type-list :type
                         (common-lisp:or resource-type-list common-lisp:null)
                         :accessor %resource-set-resource-type-list :initform
                         (common-lisp:error ":resource-type-list is required"))
                        (update-token :initarg :update-token :type
                         (common-lisp:or update-token common-lisp:null)
                         :accessor %resource-set-update-token :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %resource-set-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %resource-set-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :id :type
                         (common-lisp:or base62id common-lisp:null) :accessor
                         %resource-set-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-set 'make-resource-set))
 (common-lisp:defun make-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-set-status last-update-time
                     resource-type-list update-token description name id)
   (common-lisp:apply #'common-lisp:make-instance 'resource-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-token))
      (common-lisp:list
       (common-lisp:cons "UpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type-list))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-status))
      (common-lisp:list
       (common-lisp:cons "ResourceSetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-set-ids ()
   '(trivial-types:proper-list base62id))
 (common-lisp:defun |make-resource-set-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list base62id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-set-summary common-lisp:nil
                       ((resource-set-status :initarg :resource-set-status
                         :type
                         (common-lisp:or resource-set-status common-lisp:null)
                         :accessor %resource-set-summary-resource-set-status
                         :initform common-lisp:nil)
                        (last-update-time :initarg :last-update-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %resource-set-summary-last-update-time :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %resource-set-summary-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %resource-set-summary-name :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or base62id common-lisp:null) :accessor
                         %resource-set-summary-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-set-summary 'make-resource-set-summary))
 (common-lisp:defun make-resource-set-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-set-status last-update-time
                     description name id)
   (common-lisp:apply #'common-lisp:make-instance 'resource-set-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-status))
      (common-lisp:list
       (common-lisp:cons "ResourceSetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-set-summary-list ()
   '(trivial-types:proper-list resource-set-summary))
 (common-lisp:defun |make-resource-set-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or resource-tag-value common-lisp:null)
                         :accessor %resource-tag-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or resource-tag-key common-lisp:null)
                         :accessor %resource-tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defun make-resource-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'resource-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:deftype resource-tag-key () 'common-lisp:string)
(common-lisp:deftype resource-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tags ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun |make-resource-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-list ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun |make-resource-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-violation common-lisp:nil
                       ((firewall-subnet-missing-vpcendpoint-violation :initarg
                         :firewall-subnet-missing-vpcendpoint-violation :type
                         (common-lisp:or
                          firewall-subnet-missing-vpcendpoint-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-firewall-subnet-missing-vpcendpoint-violation
                         :initform common-lisp:nil)
                        (third-party-firewall-missing-expected-route-table-violation
                         :initarg
                         :third-party-firewall-missing-expected-route-table-violation
                         :type
                         (common-lisp:or
                          third-party-firewall-missing-expected-route-table-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-third-party-firewall-missing-expected-route-table-violation
                         :initform common-lisp:nil)
                        (third-party-firewall-missing-subnet-violation :initarg
                         :third-party-firewall-missing-subnet-violation :type
                         (common-lisp:or
                          third-party-firewall-missing-subnet-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-third-party-firewall-missing-subnet-violation
                         :initform common-lisp:nil)
                        (third-party-firewall-missing-firewall-violation
                         :initarg
                         :third-party-firewall-missing-firewall-violation :type
                         (common-lisp:or
                          third-party-firewall-missing-firewall-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-third-party-firewall-missing-firewall-violation
                         :initform common-lisp:nil)
                        (route-has-out-of-scope-endpoint-violation :initarg
                         :route-has-out-of-scope-endpoint-violation :type
                         (common-lisp:or
                          route-has-out-of-scope-endpoint-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-route-has-out-of-scope-endpoint-violation
                         :initform common-lisp:nil)
                        (firewall-subnet-is-out-of-scope-violation :initarg
                         :firewall-subnet-is-out-of-scope-violation :type
                         (common-lisp:or
                          firewall-subnet-is-out-of-scope-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-firewall-subnet-is-out-of-scope-violation
                         :initform common-lisp:nil)
                        (possible-remediation-actions :initarg
                         :possible-remediation-actions :type
                         (common-lisp:or possible-remediation-actions
                                         common-lisp:null)
                         :accessor
                         %resource-violation-possible-remediation-actions
                         :initform common-lisp:nil)
                        (dns-rule-group-limit-exceeded-violation :initarg
                         :dns-rule-group-limit-exceeded-violation :type
                         (common-lisp:or
                          dns-rule-group-limit-exceeded-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-dns-rule-group-limit-exceeded-violation
                         :initform common-lisp:nil)
                        (dns-duplicate-rule-group-violation :initarg
                         :dns-duplicate-rule-group-violation :type
                         (common-lisp:or dns-duplicate-rule-group-violation
                                         common-lisp:null)
                         :accessor
                         %resource-violation-dns-duplicate-rule-group-violation
                         :initform common-lisp:nil)
                        (dns-rule-group-priority-conflict-violation :initarg
                         :dns-rule-group-priority-conflict-violation :type
                         (common-lisp:or
                          dns-rule-group-priority-conflict-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-dns-rule-group-priority-conflict-violation
                         :initform common-lisp:nil)
                        (network-firewall-missing-expected-routes-violation
                         :initarg
                         :network-firewall-missing-expected-routes-violation
                         :type
                         (common-lisp:or
                          network-firewall-missing-expected-routes-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-missing-expected-routes-violation
                         :initform common-lisp:nil)
                        (network-firewall-unexpected-gateway-routes-violation
                         :initarg
                         :network-firewall-unexpected-gateway-routes-violation
                         :type
                         (common-lisp:or
                          network-firewall-unexpected-gateway-routes-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-unexpected-gateway-routes-violation
                         :initform common-lisp:nil)
                        (network-firewall-unexpected-firewall-routes-violation
                         :initarg
                         :network-firewall-unexpected-firewall-routes-violation
                         :type
                         (common-lisp:or
                          network-firewall-unexpected-firewall-routes-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-unexpected-firewall-routes-violation
                         :initform common-lisp:nil)
                        (network-firewall-black-hole-route-detected-violation
                         :initarg
                         :network-firewall-black-hole-route-detected-violation
                         :type
                         (common-lisp:or
                          network-firewall-black-hole-route-detected-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-black-hole-route-detected-violation
                         :initform common-lisp:nil)
                        (network-firewall-invalid-route-configuration-violation
                         :initarg
                         :network-firewall-invalid-route-configuration-violation
                         :type
                         (common-lisp:or
                          network-firewall-invalid-route-configuration-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-invalid-route-configuration-violation
                         :initform common-lisp:nil)
                        (network-firewall-internet-traffic-not-inspected-violation
                         :initarg
                         :network-firewall-internet-traffic-not-inspected-violation
                         :type
                         (common-lisp:or
                          network-firewall-internet-traffic-not-inspected-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-internet-traffic-not-inspected-violation
                         :initform common-lisp:nil)
                        (network-firewall-policy-modified-violation :initarg
                         :network-firewall-policy-modified-violation :type
                         (common-lisp:or
                          network-firewall-policy-modified-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-policy-modified-violation
                         :initform common-lisp:nil)
                        (network-firewall-missing-expected-rtviolation :initarg
                         :network-firewall-missing-expected-rtviolation :type
                         (common-lisp:or
                          network-firewall-missing-expected-rtviolation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-missing-expected-rtviolation
                         :initform common-lisp:nil)
                        (network-firewall-missing-subnet-violation :initarg
                         :network-firewall-missing-subnet-violation :type
                         (common-lisp:or
                          network-firewall-missing-subnet-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-missing-subnet-violation
                         :initform common-lisp:nil)
                        (network-firewall-missing-firewall-violation :initarg
                         :network-firewall-missing-firewall-violation :type
                         (common-lisp:or
                          network-firewall-missing-firewall-violation
                          common-lisp:null)
                         :accessor
                         %resource-violation-network-firewall-missing-firewall-violation
                         :initform common-lisp:nil)
                        (aws-ec2instance-violation :initarg
                         :aws-ec2instance-violation :type
                         (common-lisp:or aws-ec2instance-violation
                                         common-lisp:null)
                         :accessor
                         %resource-violation-aws-ec2instance-violation
                         :initform common-lisp:nil)
                        (aws-ec2network-interface-violation :initarg
                         :aws-ec2network-interface-violation :type
                         (common-lisp:or aws-ec2network-interface-violation
                                         common-lisp:null)
                         :accessor
                         %resource-violation-aws-ec2network-interface-violation
                         :initform common-lisp:nil)
                        (aws-vpcsecurity-group-violation :initarg
                         :aws-vpcsecurity-group-violation :type
                         (common-lisp:or aws-vpcsecurity-group-violation
                                         common-lisp:null)
                         :accessor
                         %resource-violation-aws-vpcsecurity-group-violation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-violation 'make-resource-violation))
 (common-lisp:defun make-resource-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     firewall-subnet-missing-vpcendpoint-violation
                     third-party-firewall-missing-expected-route-table-violation
                     third-party-firewall-missing-subnet-violation
                     third-party-firewall-missing-firewall-violation
                     route-has-out-of-scope-endpoint-violation
                     firewall-subnet-is-out-of-scope-violation
                     possible-remediation-actions
                     dns-rule-group-limit-exceeded-violation
                     dns-duplicate-rule-group-violation
                     dns-rule-group-priority-conflict-violation
                     network-firewall-missing-expected-routes-violation
                     network-firewall-unexpected-gateway-routes-violation
                     network-firewall-unexpected-firewall-routes-violation
                     network-firewall-black-hole-route-detected-violation
                     network-firewall-invalid-route-configuration-violation
                     network-firewall-internet-traffic-not-inspected-violation
                     network-firewall-policy-modified-violation
                     network-firewall-missing-expected-rtviolation
                     network-firewall-missing-subnet-violation
                     network-firewall-missing-firewall-violation
                     aws-ec2instance-violation
                     aws-ec2network-interface-violation
                     aws-vpcsecurity-group-violation)
   (common-lisp:apply #'common-lisp:make-instance 'resource-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-vpcsecurity-group-violation))
      (common-lisp:list
       (common-lisp:cons "AwsVPCSecurityGroupViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2network-interface-violation))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkInterfaceViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2instance-violation))
      (common-lisp:list
       (common-lisp:cons "AwsEc2InstanceViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-firewall-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingFirewallViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-subnet-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingSubnetViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-expected-rtviolation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingExpectedRTViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-policy-modified-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallPolicyModifiedViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-internet-traffic-not-inspected-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallInternetTrafficNotInspectedViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-invalid-route-configuration-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallInvalidRouteConfigurationViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-black-hole-route-detected-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallBlackHoleRouteDetectedViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-unexpected-firewall-routes-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallUnexpectedFirewallRoutesViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-unexpected-gateway-routes-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallUnexpectedGatewayRoutesViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-expected-routes-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingExpectedRoutesViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-rule-group-priority-conflict-violation))
      (common-lisp:list
       (common-lisp:cons "DnsRuleGroupPriorityConflictViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-duplicate-rule-group-violation))
      (common-lisp:list
       (common-lisp:cons "DnsDuplicateRuleGroupViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-rule-group-limit-exceeded-violation))
      (common-lisp:list
       (common-lisp:cons "DnsRuleGroupLimitExceededViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'possible-remediation-actions))
      (common-lisp:list
       (common-lisp:cons "PossibleRemediationActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-subnet-is-out-of-scope-violation))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetIsOutOfScopeViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-has-out-of-scope-endpoint-violation))
      (common-lisp:list
       (common-lisp:cons "RouteHasOutOfScopeEndpointViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-missing-firewall-violation))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallMissingFirewallViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-missing-subnet-violation))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallMissingSubnetViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-missing-expected-route-table-violation))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallMissingExpectedRouteTableViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-subnet-missing-vpcendpoint-violation))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetMissingVPCEndpointViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-violations ()
   '(trivial-types:proper-list resource-violation))
 (common-lisp:defun |make-resource-violations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-violation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass route common-lisp:nil
                       ((target :initarg :target :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %route-target :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %route-destination :initform
                         common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %route-target-type :initform
                         common-lisp:nil)
                        (destination-type :initarg :destination-type :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor %route-destination-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'route 'make-route))
 (common-lisp:defun make-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target destination target-type
                     destination-type)
   (common-lisp:apply #'common-lisp:make-instance 'route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-has-out-of-scope-endpoint-violation
                       common-lisp:nil
                       ((internet-gateway-routes :initarg
                         :internet-gateway-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %route-has-out-of-scope-endpoint-violation-internet-gateway-routes
                         :initform common-lisp:nil)
                        (current-internet-gateway-route-table :initarg
                         :current-internet-gateway-route-table :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-current-internet-gateway-route-table
                         :initform common-lisp:nil)
                        (internet-gateway-id :initarg :internet-gateway-id
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-internet-gateway-id
                         :initform common-lisp:nil)
                        (firewall-subnet-routes :initarg
                         :firewall-subnet-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %route-has-out-of-scope-endpoint-violation-firewall-subnet-routes
                         :initform common-lisp:nil)
                        (firewall-subnet-id :initarg :firewall-subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-firewall-subnet-id
                         :initform common-lisp:nil)
                        (current-firewall-subnet-route-table :initarg
                         :current-firewall-subnet-route-table :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-current-firewall-subnet-route-table
                         :initform common-lisp:nil)
                        (subnet-availability-zone-id :initarg
                         :subnet-availability-zone-id :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-subnet-availability-zone-id
                         :initform common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-subnet-availability-zone
                         :initform common-lisp:nil)
                        (violating-routes :initarg :violating-routes :type
                         (common-lisp:or routes common-lisp:null) :accessor
                         %route-has-out-of-scope-endpoint-violation-violating-routes
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-route-table-id
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-vpc-id
                         :initform common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %route-has-out-of-scope-endpoint-violation-subnet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'route-has-out-of-scope-endpoint-violation
                    'make-route-has-out-of-scope-endpoint-violation))
 (common-lisp:defun make-route-has-out-of-scope-endpoint-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key internet-gateway-routes
                     current-internet-gateway-route-table internet-gateway-id
                     firewall-subnet-routes firewall-subnet-id
                     current-firewall-subnet-route-table
                     subnet-availability-zone-id subnet-availability-zone
                     violating-routes route-table-id vpc-id subnet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'route-has-out-of-scope-endpoint-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-has-out-of-scope-endpoint-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-has-out-of-scope-endpoint-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-firewall-subnet-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentFirewallSubnetRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-internet-gateway-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentInternetGatewayRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-has-out-of-scope-endpoint-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routes () '(trivial-types:proper-list route))
 (common-lisp:defun |make-routes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass security-group-remediation-action common-lisp:nil
                       ((is-default-action :initarg :is-default-action :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %security-group-remediation-action-is-default-action
                         :initform common-lisp:nil)
                        (remediation-result :initarg :remediation-result :type
                         (common-lisp:or security-group-rule-description
                                         common-lisp:null)
                         :accessor
                         %security-group-remediation-action-remediation-result
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or remediation-action-description
                                         common-lisp:null)
                         :accessor
                         %security-group-remediation-action-description
                         :initform common-lisp:nil)
                        (remediation-action-type :initarg
                         :remediation-action-type :type
                         (common-lisp:or remediation-action-type
                                         common-lisp:null)
                         :accessor
                         %security-group-remediation-action-remediation-action-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'security-group-remediation-action
                    'make-security-group-remediation-action))
 (common-lisp:defun make-security-group-remediation-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-default-action remediation-result
                     description remediation-action-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'security-group-remediation-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-remediation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-remediation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remediation-action-type))
      (common-lisp:list
       (common-lisp:cons "RemediationActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-result))
      (common-lisp:list
       (common-lisp:cons "RemediationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-action))
      (common-lisp:list
       (common-lisp:cons "IsDefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-remediation-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-remediation-actions ()
   '(trivial-types:proper-list security-group-remediation-action))
 (common-lisp:defun |make-security-group-remediation-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-remediation-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass security-group-rule-description common-lisp:nil
                       ((to-port :initarg :to-port :type
                         (common-lisp:or ipport-number common-lisp:null)
                         :accessor %security-group-rule-description-to-port
                         :initform common-lisp:nil)
                        (from-port :initarg :from-port :type
                         (common-lisp:or ipport-number common-lisp:null)
                         :accessor %security-group-rule-description-from-port
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %security-group-rule-description-protocol
                         :initform common-lisp:nil)
                        (prefix-list-id :initarg :prefix-list-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %security-group-rule-description-prefix-list-id
                         :initform common-lisp:nil)
                        (ipv6range :initarg :ipv6range :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %security-group-rule-description-ipv6range :initform
                         common-lisp:nil)
                        (ipv4range :initarg :ipv4range :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         %security-group-rule-description-ipv4range :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'security-group-rule-description
                    'make-security-group-rule-description))
 (common-lisp:defun make-security-group-rule-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key to-port from-port protocol prefix-list-id
                     ipv6range ipv4range)
   (common-lisp:apply #'common-lisp:make-instance
                      'security-group-rule-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-rule-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-rule-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4range))
      (common-lisp:list
       (common-lisp:cons "IPV4Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6range))
      (common-lisp:list
       (common-lisp:cons "IPV6Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-rule-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-service-policy-data common-lisp:nil
                       ((policy-option :initarg :policy-option :type
                         (common-lisp:or policy-option common-lisp:null)
                         :accessor %security-service-policy-data-policy-option
                         :initform common-lisp:nil)
                        (managed-service-data :initarg :managed-service-data
                         :type
                         (common-lisp:or managed-service-data common-lisp:null)
                         :accessor
                         %security-service-policy-data-managed-service-data
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or security-service-type
                                         common-lisp:null)
                         :accessor %security-service-policy-data-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'security-service-policy-data
                    'make-security-service-policy-data))
 (common-lisp:defun make-security-service-policy-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-option managed-service-data type)
   (common-lisp:apply #'common-lisp:make-instance 'security-service-policy-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-service-policy-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-service-policy-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-service-data))
      (common-lisp:list
       (common-lisp:cons "ManagedServiceData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-option))
      (common-lisp:list
       (common-lisp:cons "PolicyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-service-policy-data))
   common-lisp:nil))
(common-lisp:deftype security-service-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-service-type-list ()
   '(trivial-types:proper-list security-service-type))
 (common-lisp:defun |make-security-service-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-service-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stateful-engine-options common-lisp:nil
                       ((rule-order :initarg :rule-order :type
                         (common-lisp:or rule-order common-lisp:null) :accessor
                         %stateful-engine-options-rule-order :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stateful-engine-options 'make-stateful-engine-options))
 (common-lisp:defun make-stateful-engine-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-order)
   (common-lisp:apply #'common-lisp:make-instance 'stateful-engine-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateful-engine-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateful-engine-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-order))
      (common-lisp:list
       (common-lisp:cons "RuleOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateful-engine-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stateful-rule-group common-lisp:nil
                       ((override :initarg :override :type
                         (common-lisp:or
                          network-firewall-stateful-rule-group-override
                          common-lisp:null)
                         :accessor %stateful-rule-group-override :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or priority-number common-lisp:null)
                         :accessor %stateful-rule-group-priority :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %stateful-rule-group-resource-id :initform
                         common-lisp:nil)
                        (rule-group-name :initarg :rule-group-name :type
                         (common-lisp:or network-firewall-resource-name
                                         common-lisp:null)
                         :accessor %stateful-rule-group-rule-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stateful-rule-group 'make-stateful-rule-group))
 (common-lisp:defun make-stateful-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key override priority resource-id
                     rule-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'stateful-rule-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stateful-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stateful-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stateful-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stateful-rule-group-list ()
   '(trivial-types:proper-list stateful-rule-group))
 (common-lisp:defun |make-stateful-rule-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stateful-rule-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stateless-rule-group common-lisp:nil
                       ((priority :initarg :priority :type
                         (common-lisp:or stateless-rule-group-priority
                                         common-lisp:null)
                         :accessor %stateless-rule-group-priority :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %stateless-rule-group-resource-id :initform
                         common-lisp:nil)
                        (rule-group-name :initarg :rule-group-name :type
                         (common-lisp:or network-firewall-resource-name
                                         common-lisp:null)
                         :accessor %stateless-rule-group-rule-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stateless-rule-group 'make-stateless-rule-group))
 (common-lisp:defun make-stateless-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority resource-id rule-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'stateless-rule-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stateless-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stateless-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stateless-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stateless-rule-group-list ()
   '(trivial-types:proper-list stateless-rule-group))
 (common-lisp:defun |make-stateless-rule-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stateless-rule-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stateless-rule-group-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tag-list :initform
                         (common-lisp:error ":tag-list is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:deftype target-violation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-violation-reasons ()
   '(trivial-types:proper-list target-violation-reason))
 (common-lisp:defun |make-target-violation-reasons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-violation-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype third-party-firewall () 'common-lisp:string)
(common-lisp:deftype third-party-firewall-association-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype third-party-firewall-firewall-policies ()
   '(trivial-types:proper-list third-party-firewall-firewall-policy))
 (common-lisp:defun |make-third-party-firewall-firewall-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            third-party-firewall-firewall-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass third-party-firewall-firewall-policy common-lisp:nil
                       ((firewall-policy-name :initarg :firewall-policy-name
                         :type
                         (common-lisp:or firewall-policy-name common-lisp:null)
                         :accessor
                         %third-party-firewall-firewall-policy-firewall-policy-name
                         :initform common-lisp:nil)
                        (firewall-policy-id :initarg :firewall-policy-id :type
                         (common-lisp:or firewall-policy-id common-lisp:null)
                         :accessor
                         %third-party-firewall-firewall-policy-firewall-policy-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-firewall-policy
                    'make-third-party-firewall-firewall-policy))
 (common-lisp:defun make-third-party-firewall-firewall-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key firewall-policy-name firewall-policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'third-party-firewall-firewall-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-firewall-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-firewall-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-id))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-policy-name))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-firewall-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  third-party-firewall-missing-expected-route-table-violation common-lisp:nil
  ((expected-route-table :initarg :expected-route-table :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %third-party-firewall-missing-expected-route-table-violation-expected-route-table
    :initform common-lisp:nil)
   (current-route-table :initarg :current-route-table :type
    (common-lisp:or resource-id common-lisp:null) :accessor
    %third-party-firewall-missing-expected-route-table-violation-current-route-table
    :initform common-lisp:nil)
   (availability-zone :initarg :availability-zone :type
    (common-lisp:or length-bounded-string common-lisp:null) :accessor
    %third-party-firewall-missing-expected-route-table-violation-availability-zone
    :initform common-lisp:nil)
   (vpc :initarg :vpc :type (common-lisp:or resource-id common-lisp:null)
    :accessor %third-party-firewall-missing-expected-route-table-violation-vpc
    :initform common-lisp:nil)
   (violation-target :initarg :violation-target :type
    (common-lisp:or violation-target common-lisp:null) :accessor
    %third-party-firewall-missing-expected-route-table-violation-violation-target
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'third-party-firewall-missing-expected-route-table-violation
   'make-third-party-firewall-missing-expected-route-table-violation))
 (common-lisp:defun make-third-party-firewall-missing-expected-route-table-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-route-table current-route-table
                     availability-zone vpc violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'third-party-firewall-missing-expected-route-table-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-expected-route-table-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-expected-route-table-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-route-table))
      (common-lisp:list
       (common-lisp:cons "ExpectedRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-expected-route-table-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass third-party-firewall-missing-firewall-violation
                       common-lisp:nil
                       ((target-violation-reason :initarg
                         :target-violation-reason :type
                         (common-lisp:or target-violation-reason
                                         common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-firewall-violation-target-violation-reason
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-firewall-violation-availability-zone
                         :initform common-lisp:nil)
                        (vpc :initarg :vpc :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-firewall-violation-vpc
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-firewall-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-missing-firewall-violation
                    'make-third-party-firewall-missing-firewall-violation))
 (common-lisp:defun make-third-party-firewall-missing-firewall-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-violation-reason availability-zone
                     vpc violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'third-party-firewall-missing-firewall-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-firewall-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-firewall-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-firewall-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass third-party-firewall-missing-subnet-violation
                       common-lisp:nil
                       ((target-violation-reason :initarg
                         :target-violation-reason :type
                         (common-lisp:or target-violation-reason
                                         common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-subnet-violation-target-violation-reason
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-subnet-violation-availability-zone
                         :initform common-lisp:nil)
                        (vpc :initarg :vpc :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-subnet-violation-vpc
                         :initform common-lisp:nil)
                        (violation-target :initarg :violation-target :type
                         (common-lisp:or violation-target common-lisp:null)
                         :accessor
                         %third-party-firewall-missing-subnet-violation-violation-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-missing-subnet-violation
                    'make-third-party-firewall-missing-subnet-violation))
 (common-lisp:defun make-third-party-firewall-missing-subnet-violation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-violation-reason availability-zone
                     vpc violation-target)
   (common-lisp:apply #'common-lisp:make-instance
                      'third-party-firewall-missing-subnet-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-subnet-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-subnet-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-subnet-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass third-party-firewall-policy common-lisp:nil
                       ((firewall-deployment-model :initarg
                         :firewall-deployment-model :type
                         (common-lisp:or firewall-deployment-model
                                         common-lisp:null)
                         :accessor
                         %third-party-firewall-policy-firewall-deployment-model
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-policy
                    'make-third-party-firewall-policy))
 (common-lisp:defun make-third-party-firewall-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key firewall-deployment-model)
   (common-lisp:apply #'common-lisp:make-instance 'third-party-firewall-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-deployment-model))
      (common-lisp:list
       (common-lisp:cons "FirewallDeploymentModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-policy))
   common-lisp:nil))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass violation-detail common-lisp:nil
                       ((resource-description :initarg :resource-description
                         :type
                         (common-lisp:or length-bounded-string
                                         common-lisp:null)
                         :accessor %violation-detail-resource-description
                         :initform common-lisp:nil)
                        (resource-tags :initarg :resource-tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %violation-detail-resource-tags :initform
                         common-lisp:nil)
                        (resource-violations :initarg :resource-violations
                         :type
                         (common-lisp:or resource-violations common-lisp:null)
                         :accessor %violation-detail-resource-violations
                         :initform
                         (common-lisp:error
                          ":resource-violations is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %violation-detail-resource-type :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %violation-detail-resource-id :initform
                         (common-lisp:error ":resource-id is required"))
                        (member-account :initarg :member-account :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %violation-detail-member-account :initform
                         (common-lisp:error ":member-account is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %violation-detail-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'violation-detail 'make-violation-detail))
 (common-lisp:defun make-violation-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-description resource-tags
                     resource-violations resource-type resource-id
                     member-account policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'violation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input violation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input violation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-violations))
      (common-lisp:list
       (common-lisp:cons "ResourceViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-description))
      (common-lisp:list
       (common-lisp:cons "ResourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input violation-detail))
   common-lisp:nil))
(common-lisp:deftype violation-reason () 'common-lisp:string)
(common-lisp:deftype violation-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account)
   (common-lisp:declare (common-lisp:ignorable admin-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-admin-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateAdminAccount"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-admin-account))
(common-lisp:progn
 (common-lisp:defun associate-third-party-firewall
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:declare (common-lisp:ignorable third-party-firewall))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-third-party-firewall-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateThirdPartyFirewall"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-third-party-firewall))
(common-lisp:progn
 (common-lisp:defun batch-associate-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-set-identifier items)
   (common-lisp:declare (common-lisp:ignorable resource-set-identifier items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-associate-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchAssociateResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-associate-resource))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-set-identifier items)
   (common-lisp:declare (common-lisp:ignorable resource-set-identifier items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchDisassociateResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disassociate-resource))
(common-lisp:progn
 (common-lisp:defun delete-apps-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id)
   (common-lisp:declare (common-lisp:ignorable list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-apps-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAppsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apps-list))
(common-lisp:progn
 (common-lisp:defun delete-notification-channel ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :protocol
                                :json :operation "DeleteNotificationChannel"
                                :params
                                `(("Action" ,@"DeleteNotificationChannel")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-notification-channel))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id delete-all-policy-resources)
   (common-lisp:declare
    (common-lisp:ignorable policy-id delete-all-policy-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePolicy"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-protocols-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id)
   (common-lisp:declare (common-lisp:ignorable list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-protocols-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteProtocolsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-protocols-list))
(common-lisp:progn
 (common-lisp:defun delete-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteResourceSet"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-set))
(common-lisp:progn
 (common-lisp:defun disassociate-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :protocol
                                :json :operation "DisassociateAdminAccount"
                                :params
                                `(("Action" ,@"DisassociateAdminAccount")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-third-party-firewall
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:declare (common-lisp:ignorable third-party-firewall))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-third-party-firewall-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateThirdPartyFirewall"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-third-party-firewall))
(common-lisp:progn
 (common-lisp:defun get-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :protocol
                                :json :operation "GetAdminAccount" :params
                                `(("Action" ,@"GetAdminAccount")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-admin-account))
(common-lisp:progn
 (common-lisp:defun get-admin-scope
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account)
   (common-lisp:declare (common-lisp:ignorable admin-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-admin-scope-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAdminScope"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-admin-scope))
(common-lisp:progn
 (common-lisp:defun get-apps-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id default-list)
   (common-lisp:declare (common-lisp:ignorable list-id default-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-apps-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAppsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apps-list))
(common-lisp:progn
 (common-lisp:defun get-compliance-detail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id member-account)
   (common-lisp:declare (common-lisp:ignorable policy-id member-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-compliance-detail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetComplianceDetail"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-compliance-detail))
(common-lisp:progn
 (common-lisp:defun get-notification-channel ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :protocol
                                :json :operation "GetNotificationChannel"
                                :params
                                `(("Action" ,@"GetNotificationChannel")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-notification-channel))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetPolicy"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-protection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id member-account-id start-time
                     end-time next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable policy-id member-account-id start-time end-time
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protection-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetProtectionStatus"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-protection-status))
(common-lisp:progn
 (common-lisp:defun get-protocols-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id default-list)
   (common-lisp:declare (common-lisp:ignorable list-id default-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protocols-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetProtocolsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-protocols-list))
(common-lisp:progn
 (common-lisp:defun get-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetResourceSet"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-set))
(common-lisp:progn
 (common-lisp:defun get-third-party-firewall-association-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:declare (common-lisp:ignorable third-party-firewall))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-third-party-firewall-association-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetThirdPartyFirewallAssociationStatus"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-third-party-firewall-association-status))
(common-lisp:progn
 (common-lisp:defun get-violation-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id member-account resource-id
                     resource-type)
   (common-lisp:declare
    (common-lisp:ignorable policy-id member-account resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-violation-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetViolationDetails"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-violation-details))
(common-lisp:progn
 (common-lisp:defun list-admin-accounts-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-admin-accounts-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAdminAccountsForOrganization"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-admin-accounts-for-organization))
(common-lisp:progn
 (common-lisp:defun list-admins-managing-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-admins-managing-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAdminsManagingAccount"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-admins-managing-account))
(common-lisp:progn
 (common-lisp:defun list-apps-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key default-lists next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable default-lists next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAppsLists"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps-lists))
(common-lisp:progn
 (common-lisp:defun list-compliance-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable policy-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compliance-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListComplianceStatus"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compliance-status))
(common-lisp:progn
 (common-lisp:defun list-discovered-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-account-ids resource-type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable member-account-ids resource-type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-discovered-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDiscoveredResources"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-discovered-resources))
(common-lisp:progn
 (common-lisp:defun list-member-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-member-accounts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListMemberAccounts"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-member-accounts))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPolicies"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-protocols-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key default-lists next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable default-lists next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-protocols-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListProtocolsLists"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-protocols-lists))
(common-lisp:progn
 (common-lisp:defun list-resource-set-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable identifier max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-set-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListResourceSetResources"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-set-resources))
(common-lisp:progn
 (common-lisp:defun list-resource-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListResourceSets"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-sets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-third-party-firewall-firewall-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable third-party-firewall next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-third-party-firewall-firewall-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListThirdPartyFirewallFirewallPolicies"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-third-party-firewall-firewall-policies))
(common-lisp:progn
 (common-lisp:defun put-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account admin-scope)
   (common-lisp:declare (common-lisp:ignorable admin-account admin-scope))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-admin-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAdminAccount"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-admin-account))
(common-lisp:progn
 (common-lisp:defun put-apps-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apps-list tag-list)
   (common-lisp:declare (common-lisp:ignorable apps-list tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-apps-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAppsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-apps-list))
(common-lisp:progn
 (common-lisp:defun put-notification-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sns-topic-arn sns-role-name)
   (common-lisp:declare (common-lisp:ignorable sns-topic-arn sns-role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-notification-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutNotificationChannel"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-notification-channel))
(common-lisp:progn
 (common-lisp:defun put-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy tag-list)
   (common-lisp:declare (common-lisp:ignorable policy tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutPolicy"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-policy))
(common-lisp:progn
 (common-lisp:defun put-protocols-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocols-list tag-list)
   (common-lisp:declare (common-lisp:ignorable protocols-list tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-protocols-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutProtocolsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-protocols-list))
(common-lisp:progn
 (common-lisp:defun put-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-set tag-list)
   (common-lisp:declare (common-lisp:ignorable resource-set tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutResourceSet"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-set))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-list)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
