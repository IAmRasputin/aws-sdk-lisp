;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/fms/api
  (:use)
  (:nicknames #:aws/fms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/fms/api)
(common-lisp:progn
 (common-lisp:defclass fms-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "fms"))
 (common-lisp:export 'fms-request))
(common-lisp:progn
 (common-lisp:define-condition fms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'fms-error))
(common-lisp:defvar *error-map*
  '(("InternalErrorException" . internal-error-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidTypeException" . invalid-type-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:deftype awsaccount-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype awsaccount-id-list ()
   '(trivial-types:proper-list awsaccount-id))
 (common-lisp:defun |make-awsaccount-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype awsregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype awsregion-list () '(trivial-types:proper-list awsregion))
 (common-lisp:defun |make-awsregion-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsregion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list awsaccount-id))
 (common-lisp:defun |make-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-role-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-scope-"))
   (accounts common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (all-accounts-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (exclude-specified-accounts common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-scope 'make-account-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-accounts-enabled))
      (common-lisp:list
       (common-lisp:cons "AllAccountsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-specified-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludeSpecifiedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-target-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-target 'make-action-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (admin-account-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-admin-account-summary-"))
   (admin-account common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (default-admin common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or organization-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'admin-account-summary 'make-admin-account-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-account-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-account-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-admin))
      (common-lisp:list
       (common-lisp:cons "DefaultAdmin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-account-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype admin-account-summary-list ()
   '(trivial-types:proper-list admin-account-summary))
 (common-lisp:defun |make-admin-account-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (admin-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-admin-scope-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or account-scope common-lisp:null))
   (organizational-unit-scope common-lisp:nil :type
    (common-lisp:or organizational-unit-scope common-lisp:null))
   (region-scope common-lisp:nil :type
    (common-lisp:or region-scope common-lisp:null))
   (policy-type-scope common-lisp:nil :type
    (common-lisp:or policy-type-scope common-lisp:null)))
 (common-lisp:export (common-lisp:list 'admin-scope 'make-admin-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-scope))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-scope))
      (common-lisp:list
       (common-lisp:cons "RegionScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-scope))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (app (:copier common-lisp:nil) (:conc-name "struct-shape-app-"))
   (app-name (common-lisp:error ":app-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or protocol common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or ipport-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app 'make-app))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype apps-list () '(trivial-types:proper-list app))
 (common-lisp:defun |make-apps-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (apps-list-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-apps-list-data-"))
   (list-id common-lisp:nil :type (common-lisp:or list-id common-lisp:null))
   (list-name (common-lisp:error ":list-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (list-update-token common-lisp:nil :type
    (common-lisp:or update-token common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (apps-list (common-lisp:error ":apps-list is required") :type
    (common-lisp:or apps-list common-lisp:null))
   (previous-apps-list common-lisp:nil :type
    (common-lisp:or previous-apps-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'apps-list-data 'make-apps-list-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apps-list-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apps-list-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-update-token))
      (common-lisp:list
       (common-lisp:cons "ListUpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-apps-list))
      (common-lisp:list
       (common-lisp:cons "PreviousAppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apps-list-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apps-list-data-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-apps-list-data-summary-"))
   (list-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (list-id common-lisp:nil :type (common-lisp:or list-id common-lisp:null))
   (list-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (apps-list common-lisp:nil :type
    (common-lisp:or apps-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apps-list-data-summary 'make-apps-list-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apps-list-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apps-list-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-arn))
      (common-lisp:list
       (common-lisp:cons "ListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apps-list-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype apps-lists-data ()
   '(trivial-types:proper-list apps-list-data-summary))
 (common-lisp:defun |make-apps-lists-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list apps-list-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-admin-account-request-"))
   (admin-account (common-lisp:error ":admin-account is required") :type
    (common-lisp:or awsaccount-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-admin-account-request
                    'make-associate-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-third-party-firewall-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-third-party-firewall-request-"))
   (third-party-firewall
    (common-lisp:error ":third-party-firewall is required") :type
    (common-lisp:or third-party-firewall common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-third-party-firewall-request
                    'make-associate-third-party-firewall-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-third-party-firewall-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-third-party-firewall-response-"))
   (third-party-firewall-status common-lisp:nil :type
    (common-lisp:or third-party-firewall-association-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-third-party-firewall-response
                    'make-associate-third-party-firewall-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-status))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-third-party-firewall-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2instance-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2instance-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (aws-ec2network-interface-violations common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-violations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-violation
                    'make-aws-ec2instance-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2network-interface-violations))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkInterfaceViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-interface-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-interface-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (violating-security-groups common-lisp:nil :type
    (common-lisp:or resource-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-violation
                    'make-aws-ec2network-interface-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violating-security-groups))
      (common-lisp:list
       (common-lisp:cons "ViolatingSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-violations ()
   '(trivial-types:proper-list aws-ec2network-interface-violation))
 (common-lisp:defun |make-aws-ec2network-interface-violations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-violation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-vpcsecurity-group-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-vpcsecurity-group-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (violation-target-description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (partial-matches common-lisp:nil :type
    (common-lisp:or partial-matches common-lisp:null))
   (possible-security-group-remediation-actions common-lisp:nil :type
    (common-lisp:or security-group-remediation-actions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-vpcsecurity-group-violation
                    'make-aws-vpcsecurity-group-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpcsecurity-group-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpcsecurity-group-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partial-matches))
      (common-lisp:list
       (common-lisp:cons "PartialMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'possible-security-group-remediation-actions))
      (common-lisp:list
       (common-lisp:cons "PossibleSecurityGroupRemediationActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpcsecurity-group-violation))
   common-lisp:nil))
(common-lisp:deftype base62id () 'common-lisp:string)
(common-lisp:deftype basic-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-associate-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-associate-resource-request-"))
   (resource-set-identifier
    (common-lisp:error ":resource-set-identifier is required") :type
    (common-lisp:or identifier common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-resource-request
                    'make-batch-associate-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-associate-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-associate-resource-response-"))
   (resource-set-identifier
    (common-lisp:error ":resource-set-identifier is required") :type
    (common-lisp:or identifier common-lisp:null))
   (failed-items (common-lisp:error ":failed-items is required") :type
    (common-lisp:or failed-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-resource-response
                    'make-batch-associate-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disassociate-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-disassociate-resource-request-"))
   (resource-set-identifier
    (common-lisp:error ":resource-set-identifier is required") :type
    (common-lisp:or identifier common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-resource-request
                    'make-batch-disassociate-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disassociate-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-disassociate-resource-response-"))
   (resource-set-identifier
    (common-lisp:error ":resource-set-identifier is required") :type
    (common-lisp:or identifier common-lisp:null))
   (failed-items (common-lisp:error ":failed-items is required") :type
    (common-lisp:or failed-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-resource-response
                    'make-batch-disassociate-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-set-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-resource-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (compliance-violator (:copier common-lisp:nil)
      (:conc-name "struct-shape-compliance-violator-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (violation-reason common-lisp:nil :type
    (common-lisp:or violation-reason common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or compliance-violator-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compliance-violator 'make-compliance-violator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance-violator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance-violator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-reason))
      (common-lisp:list
       (common-lisp:cons "ViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance-violator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-violator-metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-compliance-violator-metadata|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype compliance-violators ()
   '(trivial-types:proper-list compliance-violator))
 (common-lisp:defun |make-compliance-violators|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-violator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-policy-scope-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-policy-scope-id-list ()
   '(trivial-types:proper-list customer-policy-scope-id))
 (common-lisp:defun |make-customer-policy-scope-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            customer-policy-scope-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-policy-scope-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-policy-scope-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-customer-policy-scope-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype customer-policy-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apps-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apps-list-request-"))
   (list-id (common-lisp:error ":list-id is required") :type
    (common-lisp:or list-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apps-list-request 'make-delete-apps-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apps-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apps-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apps-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notification-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-notification-channel-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-notification-channel-request
                    'make-delete-notification-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (delete-all-policy-resources common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-all-policy-resources))
      (common-lisp:list
       (common-lisp:cons "DeleteAllPolicyResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-protocols-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-protocols-list-request-"))
   (list-id (common-lisp:error ":list-id is required") :type
    (common-lisp:or list-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-protocols-list-request
                    'make-delete-protocols-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-protocols-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-protocols-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-protocols-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-set-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or base62id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-set-request
                    'make-delete-resource-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-set-request))
   common-lisp:nil))
(common-lisp:deftype dependent-service-name () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:deftype detailed-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-admin-account-request-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-admin-account-request
                    'make-disassociate-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-third-party-firewall-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-third-party-firewall-request-"))
   (third-party-firewall
    (common-lisp:error ":third-party-firewall is required") :type
    (common-lisp:or third-party-firewall common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-third-party-firewall-request
                    'make-disassociate-third-party-firewall-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-third-party-firewall-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-third-party-firewall-response-"))
   (third-party-firewall-status common-lisp:nil :type
    (common-lisp:or third-party-firewall-association-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-third-party-firewall-response
                    'make-disassociate-third-party-firewall-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-status))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-third-party-firewall-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discovered-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-discovered-resource-"))
   (uri common-lisp:nil :type (common-lisp:or identifier common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or resource-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discovered-resource 'make-discovered-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input discovered-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input discovered-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input discovered-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype discovered-resource-list ()
   '(trivial-types:proper-list discovered-resource))
 (common-lisp:defun |make-discovered-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list discovered-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-duplicate-rule-group-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-duplicate-rule-group-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (violation-target-description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-duplicate-rule-group-violation
                    'make-dns-duplicate-rule-group-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-duplicate-rule-group-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-duplicate-rule-group-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-duplicate-rule-group-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-rule-group-limit-exceeded-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-rule-group-limit-exceeded-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (violation-target-description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (number-of-rule-groups-already-associated common-lisp:nil :type
    (common-lisp:or basic-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-rule-group-limit-exceeded-violation
                    'make-dns-rule-group-limit-exceeded-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-limit-exceeded-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-limit-exceeded-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-rule-groups-already-associated))
      (common-lisp:list
       (common-lisp:cons "NumberOfRuleGroupsAlreadyAssociated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-limit-exceeded-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dns-rule-group-priorities ()
   '(trivial-types:proper-list dns-rule-group-priority))
 (common-lisp:defun |make-dns-rule-group-priorities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns-rule-group-priority))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dns-rule-group-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (dns-rule-group-priority-conflict-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-rule-group-priority-conflict-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (violation-target-description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (conflicting-priority common-lisp:nil :type
    (common-lisp:or dns-rule-group-priority common-lisp:null))
   (conflicting-policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (unavailable-priorities common-lisp:nil :type
    (common-lisp:or dns-rule-group-priorities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-rule-group-priority-conflict-violation
                    'make-dns-rule-group-priority-conflict-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-priority-conflict-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-priority-conflict-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-target-description))
      (common-lisp:list
       (common-lisp:cons "ViolationTargetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflicting-priority))
      (common-lisp:list
       (common-lisp:cons "ConflictingPriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflicting-policy-id))
      (common-lisp:list
       (common-lisp:cons "ConflictingPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unavailable-priorities))
      (common-lisp:list
       (common-lisp:cons "UnavailablePriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-rule-group-priority-conflict-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2associate-route-table-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2associate-route-table-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or action-target common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or action-target common-lisp:null))
   (gateway-id common-lisp:nil :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2associate-route-table-action
                    'make-ec2associate-route-table-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2associate-route-table-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2associate-route-table-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2associate-route-table-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2copy-route-table-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2copy-route-table-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or action-target common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2copy-route-table-action
                    'make-ec2copy-route-table-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2copy-route-table-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2copy-route-table-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2copy-route-table-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2create-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2create-route-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (destination-prefix-list-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or action-target common-lisp:null))
   (gateway-id common-lisp:nil :type
    (common-lisp:or action-target common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2create-route-action 'make-ec2create-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2create-route-table-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2create-route-table-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2create-route-table-action
                    'make-ec2create-route-table-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-table-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-table-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2create-route-table-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2delete-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2delete-route-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (destination-prefix-list-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2delete-route-action 'make-ec2delete-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2delete-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2delete-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2delete-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2replace-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2replace-route-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (destination-prefix-list-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (gateway-id common-lisp:nil :type
    (common-lisp:or action-target common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2replace-route-action 'make-ec2replace-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2replace-route-table-association-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2replace-route-table-association-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or action-target common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or action-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2replace-route-table-association-action
                    'make-ec2replace-route-table-association-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-table-association-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-table-association-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2replace-route-table-association-action))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-result-"))
   (compliance-status common-lisp:nil :type
    (common-lisp:or policy-compliance-status-type common-lisp:null))
   (violator-count common-lisp:nil :type
    (common-lisp:or resource-count common-lisp:null))
   (evaluation-limit-exceeded common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "ComplianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violator-count))
      (common-lisp:list
       (common-lisp:cons "ViolatorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-limit-exceeded))
      (common-lisp:list
       (common-lisp:cons "EvaluationLimitExceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-results ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun |make-evaluation-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (expected-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-expected-route-"))
   (ip-v4cidr common-lisp:nil :type (common-lisp:or cidr common-lisp:null))
   (prefix-list-id common-lisp:nil :type
    (common-lisp:or cidr common-lisp:null))
   (ip-v6cidr common-lisp:nil :type (common-lisp:or cidr common-lisp:null))
   (contributing-subnets common-lisp:nil :type
    (common-lisp:or resource-id-list common-lisp:null))
   (allowed-targets common-lisp:nil :type
    (common-lisp:or length-bounded-string-list common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'expected-route 'make-expected-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expected-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expected-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v4cidr))
      (common-lisp:list
       (common-lisp:cons "IpV4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6cidr))
      (common-lisp:list
       (common-lisp:cons "IpV6Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contributing-subnets))
      (common-lisp:list
       (common-lisp:cons "ContributingSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-targets))
      (common-lisp:list
       (common-lisp:cons "AllowedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expected-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expected-routes ()
   '(trivial-types:proper-list expected-route))
 (common-lisp:defun |make-expected-routes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expected-route))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (fmspolicy-update-firewall-creation-config-action
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-fmspolicy-update-firewall-creation-config-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (firewall-creation-config common-lisp:nil :type
    (common-lisp:or managed-service-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fmspolicy-update-firewall-creation-config-action
                    'make-fmspolicy-update-firewall-creation-config-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fmspolicy-update-firewall-creation-config-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fmspolicy-update-firewall-creation-config-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-creation-config))
      (common-lisp:list
       (common-lisp:cons "FirewallCreationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fmspolicy-update-firewall-creation-config-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-item-"))
   (uri common-lisp:nil :type (common-lisp:or identifier common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or failed-item-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failed-item 'make-failed-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-item-list ()
   '(trivial-types:proper-list failed-item))
 (common-lisp:defun |make-failed-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failed-item-reason () 'common-lisp:string)
(common-lisp:deftype firewall-deployment-model () 'common-lisp:string)
(common-lisp:deftype firewall-policy-id () 'common-lisp:string)
(common-lisp:deftype firewall-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-subnet-is-out-of-scope-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-subnet-is-out-of-scope-violation-"))
   (firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (subnet-availability-zone-id common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-subnet-is-out-of-scope-violation
                    'make-firewall-subnet-is-out-of-scope-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-is-out-of-scope-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-is-out-of-scope-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-is-out-of-scope-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-subnet-missing-vpcendpoint-violation (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-firewall-subnet-missing-vpcendpoint-violation-"))
   (firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (subnet-availability-zone-id common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-subnet-missing-vpcendpoint-violation
                    'make-firewall-subnet-missing-vpcendpoint-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-missing-vpcendpoint-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-missing-vpcendpoint-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-subnet-missing-vpcendpoint-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-admin-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-admin-account-request
                    'make-get-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-admin-account-response-"))
   (admin-account common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (role-status common-lisp:nil :type
    (common-lisp:or account-role-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-admin-account-response
                    'make-get-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-status))
      (common-lisp:list
       (common-lisp:cons "RoleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-admin-scope-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-admin-scope-request-"))
   (admin-account (common-lisp:error ":admin-account is required") :type
    (common-lisp:or awsaccount-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-admin-scope-request 'make-get-admin-scope-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-admin-scope-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-admin-scope-response-"))
   (admin-scope common-lisp:nil :type
    (common-lisp:or admin-scope common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or organization-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-admin-scope-response 'make-get-admin-scope-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-scope))
      (common-lisp:list
       (common-lisp:cons "AdminScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-admin-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apps-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apps-list-request-"))
   (list-id (common-lisp:error ":list-id is required") :type
    (common-lisp:or list-id common-lisp:null))
   (default-list common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apps-list-request 'make-get-apps-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-list))
      (common-lisp:list
       (common-lisp:cons "DefaultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apps-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apps-list-response-"))
   (apps-list common-lisp:nil :type
    (common-lisp:or apps-list-data common-lisp:null))
   (apps-list-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apps-list-response 'make-get-apps-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list-arn))
      (common-lisp:list
       (common-lisp:cons "AppsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apps-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-compliance-detail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-compliance-detail-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (member-account (common-lisp:error ":member-account is required") :type
    (common-lisp:or awsaccount-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-compliance-detail-request
                    'make-get-compliance-detail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-compliance-detail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-compliance-detail-response-"))
   (policy-compliance-detail common-lisp:nil :type
    (common-lisp:or policy-compliance-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-compliance-detail-response
                    'make-get-compliance-detail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-compliance-detail))
      (common-lisp:list
       (common-lisp:cons "PolicyComplianceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-detail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-notification-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-notification-channel-request-")))
 (common-lisp:export
  (common-lisp:list 'get-notification-channel-request
                    'make-get-notification-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-notification-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-notification-channel-response-"))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (sns-role-name common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-notification-channel-response
                    'make-get-notification-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-role-name))
      (common-lisp:list
       (common-lisp:cons "SnsRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-response-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-protection-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-protection-status-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (member-account-id common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-protection-status-request
                    'make-get-protection-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account-id))
      (common-lisp:list
       (common-lisp:cons "MemberAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-protection-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-protection-status-response-"))
   (admin-account-id common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (service-type common-lisp:nil :type
    (common-lisp:or security-service-type common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or protection-data common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-protection-status-response
                    'make-get-protection-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protection-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-protocols-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-protocols-list-request-"))
   (list-id (common-lisp:error ":list-id is required") :type
    (common-lisp:or list-id common-lisp:null))
   (default-list common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-protocols-list-request
                    'make-get-protocols-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-list))
      (common-lisp:list
       (common-lisp:cons "DefaultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-protocols-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-protocols-list-response-"))
   (protocols-list common-lisp:nil :type
    (common-lisp:or protocols-list-data common-lisp:null))
   (protocols-list-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-protocols-list-response
                    'make-get-protocols-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list-arn))
      (common-lisp:list
       (common-lisp:cons "ProtocolsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protocols-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-set-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or base62id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-set-request 'make-get-resource-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-set-response-"))
   (resource-set (common-lisp:error ":resource-set is required") :type
    (common-lisp:or resource-set common-lisp:null))
   (resource-set-arn (common-lisp:error ":resource-set-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-set-response
                    'make-get-resource-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set))
      (common-lisp:list
       (common-lisp:cons "ResourceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-third-party-firewall-association-status-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-third-party-firewall-association-status-request-"))
   (third-party-firewall
    (common-lisp:error ":third-party-firewall is required") :type
    (common-lisp:or third-party-firewall common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-firewall-association-status-request
                    'make-get-third-party-firewall-association-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-third-party-firewall-association-status-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-third-party-firewall-association-status-response-"))
   (third-party-firewall-status common-lisp:nil :type
    (common-lisp:or third-party-firewall-association-status common-lisp:null))
   (marketplace-onboarding-status common-lisp:nil :type
    (common-lisp:or marketplace-subscription-onboarding-status
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-firewall-association-status-response
                    'make-get-third-party-firewall-association-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-status))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-onboarding-status))
      (common-lisp:list
       (common-lisp:cons "MarketplaceOnboardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-firewall-association-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-violation-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-violation-details-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (member-account (common-lisp:error ":member-account is required") :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-violation-details-request
                    'make-get-violation-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-violation-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-violation-details-response-"))
   (violation-detail common-lisp:nil :type
    (common-lisp:or violation-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-violation-details-response
                    'make-get-violation-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-detail))
      (common-lisp:list
       (common-lisp:cons "ViolationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-violation-details-response))
   common-lisp:nil))
(common-lisp:deftype ipport-number () 'common-lisp:integer)
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identifier-list ()
   '(trivial-types:proper-list identifier))
 (common-lisp:defun |make-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-error-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error-exception
                    'internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-operation-exception
                    'invalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-type-exception 'invalid-type-exception-message)))
(common-lisp:progn
 (common-lisp:deftype issue-info-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-issue-info-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype length-bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype length-bounded-string-list ()
   '(trivial-types:proper-list length-bounded-string))
 (common-lisp:defun |make-length-bounded-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list length-bounded-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-admin-accounts-for-organization-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-admin-accounts-for-organization-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-admin-accounts-for-organization-request
                    'make-list-admin-accounts-for-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-admin-accounts-for-organization-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-admin-accounts-for-organization-response-"))
   (admin-accounts common-lisp:nil :type
    (common-lisp:or admin-account-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-admin-accounts-for-organization-response
                    'make-list-admin-accounts-for-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admin-accounts-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-admins-managing-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-admins-managing-account-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-admins-managing-account-request
                    'make-list-admins-managing-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-admins-managing-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-admins-managing-account-response-"))
   (admin-accounts common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-admins-managing-account-response
                    'make-list-admins-managing-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-admins-managing-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-lists-request-"))
   (default-lists common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":max-results is required") :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-lists-request 'make-list-apps-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-lists))
      (common-lisp:list
       (common-lisp:cons "DefaultLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-lists-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-lists-response-"))
   (apps-lists common-lisp:nil :type
    (common-lisp:or apps-lists-data common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-lists-response 'make-list-apps-lists-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-lists))
      (common-lisp:list
       (common-lisp:cons "AppsLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-apps-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-compliance-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-compliance-status-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-status-request
                    'make-list-compliance-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-compliance-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-compliance-status-response-"))
   (policy-compliance-status-list common-lisp:nil :type
    (common-lisp:or policy-compliance-status-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-status-response
                    'make-list-compliance-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-compliance-status-list))
      (common-lisp:list
       (common-lisp:cons "PolicyComplianceStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-discovered-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-discovered-resources-request-"))
   (member-account-ids (common-lisp:error ":member-account-ids is required")
    :type (common-lisp:or awsaccount-id-list common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-discovered-resources-request
                    'make-list-discovered-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account-ids))
      (common-lisp:list
       (common-lisp:cons "MemberAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-discovered-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-discovered-resources-response-"))
   (items common-lisp:nil :type
    (common-lisp:or discovered-resource-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-discovered-resources-response
                    'make-list-discovered-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   common-lisp:nil))
(common-lisp:deftype list-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-member-accounts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-member-accounts-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-member-accounts-request
                    'make-list-member-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-member-accounts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-member-accounts-response-"))
   (member-accounts common-lisp:nil :type
    (common-lisp:or member-accounts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-member-accounts-response
                    'make-list-member-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-accounts))
      (common-lisp:list
       (common-lisp:cons "MemberAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-member-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-response-"))
   (policy-list common-lisp:nil :type
    (common-lisp:or policy-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-list))
      (common-lisp:list
       (common-lisp:cons "PolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-protocols-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-protocols-lists-request-"))
   (default-lists common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":max-results is required") :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-protocols-lists-request
                    'make-list-protocols-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-lists))
      (common-lisp:list
       (common-lisp:cons "DefaultLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-protocols-lists-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-protocols-lists-response-"))
   (protocols-lists common-lisp:nil :type
    (common-lisp:or protocols-lists-data common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-protocols-lists-response
                    'make-list-protocols-lists-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-lists))
      (common-lisp:list
       (common-lisp:cons "ProtocolsLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protocols-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-set-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-set-resources-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-set-resources-request
                    'make-list-resource-set-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-set-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-set-resources-response-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or resource-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-set-resources-response
                    'make-list-resource-set-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-set-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-sets-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-sets-request
                    'make-list-resource-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-sets-response-"))
   (resource-sets common-lisp:nil :type
    (common-lisp:or resource-set-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-sets-response
                    'make-list-resource-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-sets))
      (common-lisp:list
       (common-lisp:cons "ResourceSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-third-party-firewall-firewall-policies-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-third-party-firewall-firewall-policies-request-"))
   (third-party-firewall
    (common-lisp:error ":third-party-firewall is required") :type
    (common-lisp:or third-party-firewall common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results (common-lisp:error ":max-results is required") :type
    (common-lisp:or pagination-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-third-party-firewall-firewall-policies-request
                    'make-list-third-party-firewall-firewall-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-third-party-firewall-firewall-policies-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-third-party-firewall-firewall-policies-response-"))
   (third-party-firewall-firewall-policies common-lisp:nil :type
    (common-lisp:or third-party-firewall-firewall-policies common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-third-party-firewall-firewall-policies-response
                    'make-list-third-party-firewall-firewall-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-firewall-policies))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallFirewallPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-third-party-firewall-firewall-policies-response))
   common-lisp:nil))
(common-lisp:deftype managed-service-data () 'common-lisp:string)
(common-lisp:deftype marketplace-subscription-onboarding-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype member-accounts ()
   '(trivial-types:proper-list awsaccount-id))
 (common-lisp:defun |make-member-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype network-firewall-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-firewall-action-list ()
   '(trivial-types:proper-list network-firewall-action))
 (common-lisp:defun |make-network-firewall-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-firewall-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-black-hole-route-detected-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-black-hole-route-detected-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (violating-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-black-hole-route-detected-violation
                    'make-network-firewall-black-hole-route-detected-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-black-hole-route-detected-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-black-hole-route-detected-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-black-hole-route-detected-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-internet-traffic-not-inspected-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-internet-traffic-not-inspected-violation-"))
   (subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (violating-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (is-route-table-used-in-different-az common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (current-firewall-subnet-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-firewall-endpoint common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-firewall-subnet-routes common-lisp:nil :type
    (common-lisp:or expected-routes common-lisp:null))
   (actual-firewall-subnet-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (internet-gateway-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (current-internet-gateway-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-internet-gateway-routes common-lisp:nil :type
    (common-lisp:or expected-routes common-lisp:null))
   (actual-internet-gateway-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-internet-traffic-not-inspected-violation
                    'make-network-firewall-internet-traffic-not-inspected-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-internet-traffic-not-inspected-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-internet-traffic-not-inspected-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-route-table-used-in-different-az))
      (common-lisp:list
       (common-lisp:cons "IsRouteTableUsedInDifferentAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-firewall-subnet-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentFirewallSubnetRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-internet-gateway-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentInternetGatewayRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ActualInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-internet-traffic-not-inspected-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-invalid-route-configuration-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-invalid-route-configuration-violation-"))
   (affected-subnets common-lisp:nil :type
    (common-lisp:or resource-id-list common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (is-route-table-used-in-different-az common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (violating-route common-lisp:nil :type
    (common-lisp:or route common-lisp:null))
   (current-firewall-subnet-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-firewall-endpoint common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (actual-firewall-endpoint common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (actual-firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-firewall-subnet-routes common-lisp:nil :type
    (common-lisp:or expected-routes common-lisp:null))
   (actual-firewall-subnet-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (internet-gateway-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (current-internet-gateway-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-internet-gateway-routes common-lisp:nil :type
    (common-lisp:or expected-routes common-lisp:null))
   (actual-internet-gateway-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-invalid-route-configuration-violation
                    'make-network-firewall-invalid-route-configuration-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-invalid-route-configuration-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-invalid-route-configuration-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-subnets))
      (common-lisp:list
       (common-lisp:cons "AffectedSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-route-table-used-in-different-az))
      (common-lisp:list
       (common-lisp:cons "IsRouteTableUsedInDifferentAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-route))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-firewall-subnet-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentFirewallSubnetRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "ActualFirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-internet-gateway-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentInternetGatewayRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "ActualInternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-invalid-route-configuration-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-missing-expected-rtviolation (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-missing-expected-rtviolation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (current-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-expected-rtviolation
                    'make-network-firewall-missing-expected-rtviolation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-rtviolation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-rtviolation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-route-table))
      (common-lisp:list
       (common-lisp:cons "ExpectedRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-rtviolation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-missing-expected-routes-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-missing-expected-routes-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (expected-routes common-lisp:nil :type
    (common-lisp:or expected-routes common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-expected-routes-violation
                    'make-network-firewall-missing-expected-routes-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-routes-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-routes-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-routes))
      (common-lisp:list
       (common-lisp:cons "ExpectedRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-expected-routes-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-missing-firewall-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-firewall-missing-firewall-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (target-violation-reason common-lisp:nil :type
    (common-lisp:or target-violation-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-firewall-violation
                    'make-network-firewall-missing-firewall-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-firewall-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-firewall-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-firewall-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-missing-subnet-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-firewall-missing-subnet-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (target-violation-reason common-lisp:nil :type
    (common-lisp:or target-violation-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-missing-subnet-violation
                    'make-network-firewall-missing-subnet-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-subnet-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-subnet-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-missing-subnet-violation))
   common-lisp:nil))
(common-lisp:deftype network-firewall-override-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-firewall-policy-"))
   (firewall-deployment-model common-lisp:nil :type
    (common-lisp:or firewall-deployment-model common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-policy 'make-network-firewall-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-deployment-model))
      (common-lisp:list
       (common-lisp:cons "FirewallDeploymentModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-policy-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-firewall-policy-description-"))
   (stateless-rule-groups common-lisp:nil :type
    (common-lisp:or stateless-rule-group-list common-lisp:null))
   (stateless-default-actions common-lisp:nil :type
    (common-lisp:or network-firewall-action-list common-lisp:null))
   (stateless-fragment-default-actions common-lisp:nil :type
    (common-lisp:or network-firewall-action-list common-lisp:null))
   (stateless-custom-actions common-lisp:nil :type
    (common-lisp:or network-firewall-action-list common-lisp:null))
   (stateful-rule-groups common-lisp:nil :type
    (common-lisp:or stateful-rule-group-list common-lisp:null))
   (stateful-default-actions common-lisp:nil :type
    (common-lisp:or network-firewall-action-list common-lisp:null))
   (stateful-engine-options common-lisp:nil :type
    (common-lisp:or stateful-engine-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-policy-description
                    'make-network-firewall-policy-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-rule-groups))
      (common-lisp:list
       (common-lisp:cons "StatelessRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-fragment-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessFragmentDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-custom-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessCustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-rule-groups))
      (common-lisp:list
       (common-lisp:cons "StatefulRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatefulDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-engine-options))
      (common-lisp:list
       (common-lisp:cons "StatefulEngineOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-policy-modified-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-firewall-policy-modified-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (current-policy-description common-lisp:nil :type
    (common-lisp:or network-firewall-policy-description common-lisp:null))
   (expected-policy-description common-lisp:nil :type
    (common-lisp:or network-firewall-policy-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-policy-modified-violation
                    'make-network-firewall-policy-modified-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-modified-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-modified-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-policy-description))
      (common-lisp:list
       (common-lisp:cons "CurrentPolicyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-policy-description))
      (common-lisp:list
       (common-lisp:cons "ExpectedPolicyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-policy-modified-violation))
   common-lisp:nil))
(common-lisp:deftype network-firewall-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-stateful-rule-group-override (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-stateful-rule-group-override-"))
   (action common-lisp:nil :type
    (common-lisp:or network-firewall-override-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-stateful-rule-group-override
                    'make-network-firewall-stateful-rule-group-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-stateful-rule-group-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-stateful-rule-group-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-stateful-rule-group-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-unexpected-firewall-routes-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-unexpected-firewall-routes-violation-"))
   (firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (violating-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-endpoint common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-unexpected-firewall-routes-violation
                    'make-network-firewall-unexpected-firewall-routes-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-firewall-routes-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-firewall-routes-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-endpoint))
      (common-lisp:list
       (common-lisp:cons "FirewallEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-firewall-routes-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-firewall-unexpected-gateway-routes-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-network-firewall-unexpected-gateway-routes-violation-"))
   (gateway-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (violating-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-firewall-unexpected-gateway-routes-violation
                    'make-network-firewall-unexpected-gateway-routes-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-gateway-routes-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-gateway-routes-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-firewall-unexpected-gateway-routes-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ordered-remediation-actions ()
   '(trivial-types:proper-list remediation-action-with-order))
 (common-lisp:defun |make-ordered-remediation-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remediation-action-with-order))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organization-status () 'common-lisp:string)
(common-lisp:deftype organizational-unit-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-id-list ()
   '(trivial-types:proper-list organizational-unit-id))
 (common-lisp:defun |make-organizational-unit-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (organizational-unit-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-organizational-unit-scope-"))
   (organizational-units common-lisp:nil :type
    (common-lisp:or organizational-unit-id-list common-lisp:null))
   (all-organizational-units-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (exclude-specified-organizational-units common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'organizational-unit-scope
                    'make-organizational-unit-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organizational-unit-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organizational-unit-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-units))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-organizational-units-enabled))
      (common-lisp:list
       (common-lisp:cons "AllOrganizationalUnitsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-specified-organizational-units))
      (common-lisp:list
       (common-lisp:cons "ExcludeSpecifiedOrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organizational-unit-scope))
   common-lisp:nil))
(common-lisp:deftype pagination-max-results () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (partial-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-partial-match-"))
   (reference common-lisp:nil :type
    (common-lisp:or reference-rule common-lisp:null))
   (target-violation-reasons common-lisp:nil :type
    (common-lisp:or target-violation-reasons common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partial-match 'make-partial-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partial-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partial-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "Reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reasons))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partial-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partial-matches ()
   '(trivial-types:proper-list partial-match))
 (common-lisp:defun |make-partial-matches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partial-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy (:copier common-lisp:nil) (:conc-name "struct-shape-policy-"))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (policy-update-token common-lisp:nil :type
    (common-lisp:or policy-update-token common-lisp:null))
   (security-service-policy-data
    (common-lisp:error ":security-service-policy-data is required") :type
    (common-lisp:or security-service-policy-data common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-type-list common-lisp:nil :type
    (common-lisp:or resource-type-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tags common-lisp:null))
   (exclude-resource-tags
    (common-lisp:error ":exclude-resource-tags is required") :type
    (common-lisp:or boolean common-lisp:null))
   (remediation-enabled (common-lisp:error ":remediation-enabled is required")
    :type (common-lisp:or boolean common-lisp:null))
   (delete-unused-fmmanaged-resources common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-map common-lisp:nil :type
    (common-lisp:or customer-policy-scope-map common-lisp:null))
   (exclude-map common-lisp:nil :type
    (common-lisp:or customer-policy-scope-map common-lisp:null))
   (resource-set-ids common-lisp:nil :type
    (common-lisp:or resource-set-ids common-lisp:null))
   (policy-description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (policy-status common-lisp:nil :type
    (common-lisp:or customer-policy-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-update-token))
      (common-lisp:list
       (common-lisp:cons "PolicyUpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-service-policy-data))
      (common-lisp:list
       (common-lisp:cons "SecurityServicePolicyData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type-list))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-resource-tags))
      (common-lisp:list
       (common-lisp:cons "ExcludeResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-enabled))
      (common-lisp:list
       (common-lisp:cons "RemediationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-unused-fmmanaged-resources))
      (common-lisp:list
       (common-lisp:cons "DeleteUnusedFMManagedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-map))
      (common-lisp:list
       (common-lisp:cons "IncludeMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-map))
      (common-lisp:list
       (common-lisp:cons "ExcludeMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceSetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-description))
      (common-lisp:list
       (common-lisp:cons "PolicyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-compliance-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-compliance-detail-"))
   (policy-owner common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (member-account common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (violators common-lisp:nil :type
    (common-lisp:or compliance-violators common-lisp:null))
   (evaluation-limit-exceeded common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (expired-at common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (issue-info-map common-lisp:nil :type
    (common-lisp:or issue-info-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-compliance-detail 'make-policy-compliance-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-owner))
      (common-lisp:list
       (common-lisp:cons "PolicyOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violators))
      (common-lisp:list
       (common-lisp:cons "Violators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-limit-exceeded))
      (common-lisp:list
       (common-lisp:cons "EvaluationLimitExceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expired-at))
      (common-lisp:list
       (common-lisp:cons "ExpiredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-info-map))
      (common-lisp:list
       (common-lisp:cons "IssueInfoMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-compliance-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-compliance-status-"))
   (policy-owner common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (member-account common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (evaluation-results common-lisp:nil :type
    (common-lisp:or evaluation-results common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (issue-info-map common-lisp:nil :type
    (common-lisp:or issue-info-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-compliance-status 'make-policy-compliance-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-owner))
      (common-lisp:list
       (common-lisp:cons "PolicyOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-results))
      (common-lisp:list
       (common-lisp:cons "EvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-info-map))
      (common-lisp:list
       (common-lisp:cons "IssueInfoMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-compliance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-compliance-status-list ()
   '(trivial-types:proper-list policy-compliance-status))
 (common-lisp:defun |make-policy-compliance-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-compliance-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-compliance-status-type () 'common-lisp:string)
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-option-"))
   (network-firewall-policy common-lisp:nil :type
    (common-lisp:or network-firewall-policy common-lisp:null))
   (third-party-firewall-policy common-lisp:nil :type
    (common-lisp:or third-party-firewall-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-option 'make-policy-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-policy))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-policy))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-summary-"))
   (policy-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (security-service-type common-lisp:nil :type
    (common-lisp:or security-service-type common-lisp:null))
   (remediation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (delete-unused-fmmanaged-resources common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (policy-status common-lisp:nil :type
    (common-lisp:or customer-policy-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-summary 'make-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-service-type))
      (common-lisp:list
       (common-lisp:cons "SecurityServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-enabled))
      (common-lisp:list
       (common-lisp:cons "RemediationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-unused-fmmanaged-resources))
      (common-lisp:list
       (common-lisp:cons "DeleteUnusedFMManagedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-summary-list ()
   '(trivial-types:proper-list policy-summary))
 (common-lisp:defun |make-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-type-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-type-scope-"))
   (policy-types common-lisp:nil :type
    (common-lisp:or security-service-type-list common-lisp:null))
   (all-policy-types-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-type-scope 'make-policy-type-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-type-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-type-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-types))
      (common-lisp:list
       (common-lisp:cons "PolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-policy-types-enabled))
      (common-lisp:list
       (common-lisp:cons "AllPolicyTypesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-type-scope))
   common-lisp:nil))
(common-lisp:deftype policy-update-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (possible-remediation-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-possible-remediation-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (ordered-remediation-actions
    (common-lisp:error ":ordered-remediation-actions is required") :type
    (common-lisp:or ordered-remediation-actions common-lisp:null))
   (is-default-action common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'possible-remediation-action
                    'make-possible-remediation-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ordered-remediation-actions))
      (common-lisp:list
       (common-lisp:cons "OrderedRemediationActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-action))
      (common-lisp:list
       (common-lisp:cons "IsDefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype possible-remediation-action-list ()
   '(trivial-types:proper-list possible-remediation-action))
 (common-lisp:defun |make-possible-remediation-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            possible-remediation-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (possible-remediation-actions (:copier common-lisp:nil)
      (:conc-name "struct-shape-possible-remediation-actions-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or possible-remediation-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'possible-remediation-actions
                    'make-possible-remediation-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          possible-remediation-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype previous-apps-list () 'common-lisp:hash-table)
 (common-lisp:defun |make-previous-apps-list|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype previous-list-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype previous-protocols-list () 'common-lisp:hash-table)
 (common-lisp:defun |make-previous-protocols-list|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype priority-number () 'common-lisp:integer)
(common-lisp:deftype protection-data () 'common-lisp:string)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocols-list () '(trivial-types:proper-list protocol))
 (common-lisp:defun |make-protocols-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (protocols-list-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-protocols-list-data-"))
   (list-id common-lisp:nil :type (common-lisp:or list-id common-lisp:null))
   (list-name (common-lisp:error ":list-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (list-update-token common-lisp:nil :type
    (common-lisp:or update-token common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (protocols-list (common-lisp:error ":protocols-list is required") :type
    (common-lisp:or protocols-list common-lisp:null))
   (previous-protocols-list common-lisp:nil :type
    (common-lisp:or previous-protocols-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protocols-list-data 'make-protocols-list-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protocols-list-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protocols-list-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-update-token))
      (common-lisp:list
       (common-lisp:cons "ListUpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-protocols-list))
      (common-lisp:list
       (common-lisp:cons "PreviousProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protocols-list-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protocols-list-data-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-protocols-list-data-summary-"))
   (list-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (list-id common-lisp:nil :type (common-lisp:or list-id common-lisp:null))
   (list-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (protocols-list common-lisp:nil :type
    (common-lisp:or protocols-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protocols-list-data-summary
                    'make-protocols-list-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protocols-list-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protocols-list-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-arn))
      (common-lisp:list
       (common-lisp:cons "ListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-id))
      (common-lisp:list
       (common-lisp:cons "ListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-name))
      (common-lisp:list
       (common-lisp:cons "ListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protocols-list-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protocols-lists-data ()
   '(trivial-types:proper-list protocols-list-data-summary))
 (common-lisp:defun |make-protocols-lists-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            protocols-list-data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-admin-account-request-"))
   (admin-account (common-lisp:error ":admin-account is required") :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (admin-scope common-lisp:nil :type
    (common-lisp:or admin-scope common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-admin-account-request
                    'make-put-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account))
      (common-lisp:list
       (common-lisp:cons "AdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-scope))
      (common-lisp:list
       (common-lisp:cons "AdminScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-apps-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-apps-list-request-"))
   (apps-list (common-lisp:error ":apps-list is required") :type
    (common-lisp:or apps-list-data common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-apps-list-request 'make-put-apps-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-apps-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-apps-list-response-"))
   (apps-list common-lisp:nil :type
    (common-lisp:or apps-list-data common-lisp:null))
   (apps-list-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-apps-list-response 'make-put-apps-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list))
      (common-lisp:list
       (common-lisp:cons "AppsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-list-arn))
      (common-lisp:list
       (common-lisp:cons "AppsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-apps-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-notification-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-notification-channel-request-"))
   (sns-topic-arn (common-lisp:error ":sns-topic-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (sns-role-name (common-lisp:error ":sns-role-name is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-notification-channel-request
                    'make-put-notification-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-role-name))
      (common-lisp:list
       (common-lisp:cons "SnsRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-policy-request-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-policy-request 'make-put-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-policy-response-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-policy-response 'make-put-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-protocols-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-protocols-list-request-"))
   (protocols-list (common-lisp:error ":protocols-list is required") :type
    (common-lisp:or protocols-list-data common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-protocols-list-request
                    'make-put-protocols-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-protocols-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-protocols-list-response-"))
   (protocols-list common-lisp:nil :type
    (common-lisp:or protocols-list-data common-lisp:null))
   (protocols-list-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-protocols-list-response
                    'make-put-protocols-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list))
      (common-lisp:list
       (common-lisp:cons "ProtocolsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols-list-arn))
      (common-lisp:list
       (common-lisp:cons "ProtocolsListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-protocols-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-set-request-"))
   (resource-set (common-lisp:error ":resource-set is required") :type
    (common-lisp:or resource-set common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-set-request 'make-put-resource-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set))
      (common-lisp:list
       (common-lisp:cons "ResourceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-set-response-"))
   (resource-set (common-lisp:error ":resource-set is required") :type
    (common-lisp:or resource-set common-lisp:null))
   (resource-set-arn (common-lisp:error ":resource-set-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-set-response
                    'make-put-resource-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set))
      (common-lisp:list
       (common-lisp:cons "ResourceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-set-response))
   common-lisp:nil))
(common-lisp:deftype reference-rule () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (region-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-region-scope-"))
   (regions common-lisp:nil :type
    (common-lisp:or awsregion-list common-lisp:null))
   (all-regions-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'region-scope 'make-region-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions-enabled))
      (common-lisp:list
       (common-lisp:cons "AllRegionsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remediation-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-remediation-action-"))
   (description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (ec2create-route-action common-lisp:nil :type
    (common-lisp:or ec2create-route-action common-lisp:null))
   (ec2replace-route-action common-lisp:nil :type
    (common-lisp:or ec2replace-route-action common-lisp:null))
   (ec2delete-route-action common-lisp:nil :type
    (common-lisp:or ec2delete-route-action common-lisp:null))
   (ec2copy-route-table-action common-lisp:nil :type
    (common-lisp:or ec2copy-route-table-action common-lisp:null))
   (ec2replace-route-table-association-action common-lisp:nil :type
    (common-lisp:or ec2replace-route-table-association-action
                    common-lisp:null))
   (ec2associate-route-table-action common-lisp:nil :type
    (common-lisp:or ec2associate-route-table-action common-lisp:null))
   (ec2create-route-table-action common-lisp:nil :type
    (common-lisp:or ec2create-route-table-action common-lisp:null))
   (fmspolicy-update-firewall-creation-config-action common-lisp:nil :type
    (common-lisp:or fmspolicy-update-firewall-creation-config-action
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remediation-action 'make-remediation-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2create-route-action))
      (common-lisp:list
       (common-lisp:cons "EC2CreateRouteAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2replace-route-action))
      (common-lisp:list
       (common-lisp:cons "EC2ReplaceRouteAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2delete-route-action))
      (common-lisp:list
       (common-lisp:cons "EC2DeleteRouteAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2copy-route-table-action))
      (common-lisp:list
       (common-lisp:cons "EC2CopyRouteTableAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2replace-route-table-association-action))
      (common-lisp:list
       (common-lisp:cons "EC2ReplaceRouteTableAssociationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2associate-route-table-action))
      (common-lisp:list
       (common-lisp:cons "EC2AssociateRouteTableAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2create-route-table-action))
      (common-lisp:list
       (common-lisp:cons "EC2CreateRouteTableAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fmspolicy-update-firewall-creation-config-action))
      (common-lisp:list
       (common-lisp:cons "FMSPolicyUpdateFirewallCreationConfigAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation-action))
   common-lisp:nil))
(common-lisp:deftype remediation-action-description () 'common-lisp:string)
(common-lisp:deftype remediation-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remediation-action-with-order (:copier common-lisp:nil)
      (:conc-name "struct-shape-remediation-action-with-order-"))
   (remediation-action common-lisp:nil :type
    (common-lisp:or remediation-action common-lisp:null))
   (order common-lisp:nil :type
    (common-lisp:or basic-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remediation-action-with-order
                    'make-remediation-action-with-order))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-action-with-order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-action-with-order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-action))
      (common-lisp:list
       (common-lisp:cons "RemediationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-action-with-order))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or identifier common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or awsaccount-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-count () 'common-lisp:integer)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun |make-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (fms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-set-"))
   (id common-lisp:nil :type (common-lisp:or base62id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (update-token common-lisp:nil :type
    (common-lisp:or update-token common-lisp:null))
   (resource-type-list (common-lisp:error ":resource-type-list is required")
    :type (common-lisp:or resource-type-list common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (resource-set-status common-lisp:nil :type
    (common-lisp:or resource-set-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-set 'make-resource-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-token))
      (common-lisp:list
       (common-lisp:cons "UpdateToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type-list))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-status))
      (common-lisp:list
       (common-lisp:cons "ResourceSetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-set-ids ()
   '(trivial-types:proper-list base62id))
 (common-lisp:defun |make-resource-set-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list base62id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-set-summary-"))
   (id common-lisp:nil :type (common-lisp:or base62id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (resource-set-status common-lisp:nil :type
    (common-lisp:or resource-set-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-set-summary 'make-resource-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-set-status))
      (common-lisp:list
       (common-lisp:cons "ResourceSetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-set-summary-list ()
   '(trivial-types:proper-list resource-set-summary))
 (common-lisp:defun |make-resource-set-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or resource-tag-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or resource-tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:deftype resource-tag-key () 'common-lisp:string)
(common-lisp:deftype resource-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tags ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun |make-resource-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-list ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun |make-resource-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-violation-"))
   (aws-vpcsecurity-group-violation common-lisp:nil :type
    (common-lisp:or aws-vpcsecurity-group-violation common-lisp:null))
   (aws-ec2network-interface-violation common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-violation common-lisp:null))
   (aws-ec2instance-violation common-lisp:nil :type
    (common-lisp:or aws-ec2instance-violation common-lisp:null))
   (network-firewall-missing-firewall-violation common-lisp:nil :type
    (common-lisp:or network-firewall-missing-firewall-violation
                    common-lisp:null))
   (network-firewall-missing-subnet-violation common-lisp:nil :type
    (common-lisp:or network-firewall-missing-subnet-violation
                    common-lisp:null))
   (network-firewall-missing-expected-rtviolation common-lisp:nil :type
    (common-lisp:or network-firewall-missing-expected-rtviolation
                    common-lisp:null))
   (network-firewall-policy-modified-violation common-lisp:nil :type
    (common-lisp:or network-firewall-policy-modified-violation
                    common-lisp:null))
   (network-firewall-internet-traffic-not-inspected-violation common-lisp:nil
    :type
    (common-lisp:or network-firewall-internet-traffic-not-inspected-violation
                    common-lisp:null))
   (network-firewall-invalid-route-configuration-violation common-lisp:nil
    :type
    (common-lisp:or network-firewall-invalid-route-configuration-violation
                    common-lisp:null))
   (network-firewall-black-hole-route-detected-violation common-lisp:nil :type
    (common-lisp:or network-firewall-black-hole-route-detected-violation
                    common-lisp:null))
   (network-firewall-unexpected-firewall-routes-violation common-lisp:nil :type
    (common-lisp:or network-firewall-unexpected-firewall-routes-violation
                    common-lisp:null))
   (network-firewall-unexpected-gateway-routes-violation common-lisp:nil :type
    (common-lisp:or network-firewall-unexpected-gateway-routes-violation
                    common-lisp:null))
   (network-firewall-missing-expected-routes-violation common-lisp:nil :type
    (common-lisp:or network-firewall-missing-expected-routes-violation
                    common-lisp:null))
   (dns-rule-group-priority-conflict-violation common-lisp:nil :type
    (common-lisp:or dns-rule-group-priority-conflict-violation
                    common-lisp:null))
   (dns-duplicate-rule-group-violation common-lisp:nil :type
    (common-lisp:or dns-duplicate-rule-group-violation common-lisp:null))
   (dns-rule-group-limit-exceeded-violation common-lisp:nil :type
    (common-lisp:or dns-rule-group-limit-exceeded-violation common-lisp:null))
   (possible-remediation-actions common-lisp:nil :type
    (common-lisp:or possible-remediation-actions common-lisp:null))
   (firewall-subnet-is-out-of-scope-violation common-lisp:nil :type
    (common-lisp:or firewall-subnet-is-out-of-scope-violation
                    common-lisp:null))
   (route-has-out-of-scope-endpoint-violation common-lisp:nil :type
    (common-lisp:or route-has-out-of-scope-endpoint-violation
                    common-lisp:null))
   (third-party-firewall-missing-firewall-violation common-lisp:nil :type
    (common-lisp:or third-party-firewall-missing-firewall-violation
                    common-lisp:null))
   (third-party-firewall-missing-subnet-violation common-lisp:nil :type
    (common-lisp:or third-party-firewall-missing-subnet-violation
                    common-lisp:null))
   (third-party-firewall-missing-expected-route-table-violation common-lisp:nil
    :type
    (common-lisp:or third-party-firewall-missing-expected-route-table-violation
                    common-lisp:null))
   (firewall-subnet-missing-vpcendpoint-violation common-lisp:nil :type
    (common-lisp:or firewall-subnet-missing-vpcendpoint-violation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-violation 'make-resource-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-vpcsecurity-group-violation))
      (common-lisp:list
       (common-lisp:cons "AwsVPCSecurityGroupViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2network-interface-violation))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkInterfaceViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2instance-violation))
      (common-lisp:list
       (common-lisp:cons "AwsEc2InstanceViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-firewall-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingFirewallViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-subnet-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingSubnetViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-expected-rtviolation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingExpectedRTViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-policy-modified-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallPolicyModifiedViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-internet-traffic-not-inspected-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallInternetTrafficNotInspectedViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-invalid-route-configuration-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallInvalidRouteConfigurationViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-black-hole-route-detected-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallBlackHoleRouteDetectedViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-unexpected-firewall-routes-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallUnexpectedFirewallRoutesViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-unexpected-gateway-routes-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallUnexpectedGatewayRoutesViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-firewall-missing-expected-routes-violation))
      (common-lisp:list
       (common-lisp:cons "NetworkFirewallMissingExpectedRoutesViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-rule-group-priority-conflict-violation))
      (common-lisp:list
       (common-lisp:cons "DnsRuleGroupPriorityConflictViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-duplicate-rule-group-violation))
      (common-lisp:list
       (common-lisp:cons "DnsDuplicateRuleGroupViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-rule-group-limit-exceeded-violation))
      (common-lisp:list
       (common-lisp:cons "DnsRuleGroupLimitExceededViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'possible-remediation-actions))
      (common-lisp:list
       (common-lisp:cons "PossibleRemediationActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-subnet-is-out-of-scope-violation))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetIsOutOfScopeViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-has-out-of-scope-endpoint-violation))
      (common-lisp:list
       (common-lisp:cons "RouteHasOutOfScopeEndpointViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-missing-firewall-violation))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallMissingFirewallViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-missing-subnet-violation))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallMissingSubnetViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-firewall-missing-expected-route-table-violation))
      (common-lisp:list
       (common-lisp:cons "ThirdPartyFirewallMissingExpectedRouteTableViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-subnet-missing-vpcendpoint-violation))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetMissingVPCEndpointViolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-violations ()
   '(trivial-types:proper-list resource-violation))
 (common-lisp:defun |make-resource-violations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-violation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (route (:copier common-lisp:nil) (:conc-name "struct-shape-route-"))
   (destination-type common-lisp:nil :type
    (common-lisp:or destination-type common-lisp:null))
   (target-type common-lisp:nil :type
    (common-lisp:or target-type common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route 'make-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (route-has-out-of-scope-endpoint-violation (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-has-out-of-scope-endpoint-violation-"))
   (subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (violating-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (subnet-availability-zone-id common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (current-firewall-subnet-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-subnet-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-subnet-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null))
   (internet-gateway-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (current-internet-gateway-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (internet-gateway-routes common-lisp:nil :type
    (common-lisp:or routes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-has-out-of-scope-endpoint-violation
                    'make-route-has-out-of-scope-endpoint-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-has-out-of-scope-endpoint-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-has-out-of-scope-endpoint-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violating-routes))
      (common-lisp:list
       (common-lisp:cons "ViolatingRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-firewall-subnet-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentFirewallSubnetRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-subnet-id))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-subnet-routes))
      (common-lisp:list
       (common-lisp:cons "FirewallSubnetRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-internet-gateway-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentInternetGatewayRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-gateway-routes))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-has-out-of-scope-endpoint-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routes () '(trivial-types:proper-list route))
 (common-lisp:defun |make-routes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (security-group-remediation-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-remediation-action-"))
   (remediation-action-type common-lisp:nil :type
    (common-lisp:or remediation-action-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or remediation-action-description common-lisp:null))
   (remediation-result common-lisp:nil :type
    (common-lisp:or security-group-rule-description common-lisp:null))
   (is-default-action common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-group-remediation-action
                    'make-security-group-remediation-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-remediation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-remediation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remediation-action-type))
      (common-lisp:list
       (common-lisp:cons "RemediationActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-result))
      (common-lisp:list
       (common-lisp:cons "RemediationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-action))
      (common-lisp:list
       (common-lisp:cons "IsDefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-remediation-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-remediation-actions ()
   '(trivial-types:proper-list security-group-remediation-action))
 (common-lisp:defun |make-security-group-remediation-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-remediation-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-group-rule-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-rule-description-"))
   (ipv4range common-lisp:nil :type (common-lisp:or cidr common-lisp:null))
   (ipv6range common-lisp:nil :type (common-lisp:or cidr common-lisp:null))
   (prefix-list-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (from-port common-lisp:nil :type
    (common-lisp:or ipport-number common-lisp:null))
   (to-port common-lisp:nil :type
    (common-lisp:or ipport-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-group-rule-description
                    'make-security-group-rule-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-rule-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-rule-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4range))
      (common-lisp:list
       (common-lisp:cons "IPV4Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6range))
      (common-lisp:list
       (common-lisp:cons "IPV6Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-rule-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-service-policy-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-service-policy-data-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or security-service-type common-lisp:null))
   (managed-service-data common-lisp:nil :type
    (common-lisp:or managed-service-data common-lisp:null))
   (policy-option common-lisp:nil :type
    (common-lisp:or policy-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-service-policy-data
                    'make-security-service-policy-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-service-policy-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-service-policy-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-service-data))
      (common-lisp:list
       (common-lisp:cons "ManagedServiceData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-option))
      (common-lisp:list
       (common-lisp:cons "PolicyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-service-policy-data))
   common-lisp:nil))
(common-lisp:deftype security-service-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-service-type-list ()
   '(trivial-types:proper-list security-service-type))
 (common-lisp:defun |make-security-service-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-service-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stateful-engine-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-stateful-engine-options-"))
   (rule-order common-lisp:nil :type
    (common-lisp:or rule-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stateful-engine-options 'make-stateful-engine-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateful-engine-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateful-engine-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-order))
      (common-lisp:list
       (common-lisp:cons "RuleOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateful-engine-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stateful-rule-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-stateful-rule-group-"))
   (rule-group-name common-lisp:nil :type
    (common-lisp:or network-firewall-resource-name common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or priority-number common-lisp:null))
   (override common-lisp:nil :type
    (common-lisp:or network-firewall-stateful-rule-group-override
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stateful-rule-group 'make-stateful-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stateful-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stateful-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stateful-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stateful-rule-group-list ()
   '(trivial-types:proper-list stateful-rule-group))
 (common-lisp:defun |make-stateful-rule-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stateful-rule-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stateless-rule-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-stateless-rule-group-"))
   (rule-group-name common-lisp:nil :type
    (common-lisp:or network-firewall-resource-name common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or stateless-rule-group-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stateless-rule-group 'make-stateless-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stateless-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stateless-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stateless-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stateless-rule-group-list ()
   '(trivial-types:proper-list stateless-rule-group))
 (common-lisp:defun |make-stateless-rule-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stateless-rule-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stateless-rule-group-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-list (common-lisp:error ":tag-list is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:deftype target-violation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-violation-reasons ()
   '(trivial-types:proper-list target-violation-reason))
 (common-lisp:defun |make-target-violation-reasons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-violation-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype third-party-firewall () 'common-lisp:string)
(common-lisp:deftype third-party-firewall-association-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype third-party-firewall-firewall-policies ()
   '(trivial-types:proper-list third-party-firewall-firewall-policy))
 (common-lisp:defun |make-third-party-firewall-firewall-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            third-party-firewall-firewall-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-firewall-firewall-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-third-party-firewall-firewall-policy-"))
   (firewall-policy-id common-lisp:nil :type
    (common-lisp:or firewall-policy-id common-lisp:null))
   (firewall-policy-name common-lisp:nil :type
    (common-lisp:or firewall-policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-firewall-policy
                    'make-third-party-firewall-firewall-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-firewall-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-firewall-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-id))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-policy-name))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-firewall-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-firewall-missing-expected-route-table-violation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-third-party-firewall-missing-expected-route-table-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (current-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (expected-route-table common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'third-party-firewall-missing-expected-route-table-violation
   'make-third-party-firewall-missing-expected-route-table-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-expected-route-table-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-expected-route-table-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-route-table))
      (common-lisp:list
       (common-lisp:cons "CurrentRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-route-table))
      (common-lisp:list
       (common-lisp:cons "ExpectedRouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-expected-route-table-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-firewall-missing-firewall-violation (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-third-party-firewall-missing-firewall-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (target-violation-reason common-lisp:nil :type
    (common-lisp:or target-violation-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-missing-firewall-violation
                    'make-third-party-firewall-missing-firewall-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-firewall-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-firewall-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-firewall-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-firewall-missing-subnet-violation (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-third-party-firewall-missing-subnet-violation-"))
   (violation-target common-lisp:nil :type
    (common-lisp:or violation-target common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null))
   (target-violation-reason common-lisp:nil :type
    (common-lisp:or target-violation-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-missing-subnet-violation
                    'make-third-party-firewall-missing-subnet-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-subnet-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-subnet-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-target))
      (common-lisp:list
       (common-lisp:cons "ViolationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-violation-reason))
      (common-lisp:list
       (common-lisp:cons "TargetViolationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-missing-subnet-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-firewall-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-third-party-firewall-policy-"))
   (firewall-deployment-model common-lisp:nil :type
    (common-lisp:or firewall-deployment-model common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-firewall-policy
                    'make-third-party-firewall-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-deployment-model))
      (common-lisp:list
       (common-lisp:cons "FirewallDeploymentModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-firewall-policy))
   common-lisp:nil))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (violation-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-violation-detail-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (member-account (common-lisp:error ":member-account is required") :type
    (common-lisp:or awsaccount-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-violations (common-lisp:error ":resource-violations is required")
    :type (common-lisp:or resource-violations common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or tag-list common-lisp:null))
   (resource-description common-lisp:nil :type
    (common-lisp:or length-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'violation-detail 'make-violation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input violation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input violation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account))
      (common-lisp:list
       (common-lisp:cons "MemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-violations))
      (common-lisp:list
       (common-lisp:cons "ResourceViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-description))
      (common-lisp:list
       (common-lisp:cons "ResourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input violation-detail))
   common-lisp:nil))
(common-lisp:deftype violation-reason () 'common-lisp:string)
(common-lisp:deftype violation-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account)
   (common-lisp:declare (common-lisp:ignorable admin-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-admin-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateAdminAccount"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-admin-account))
(common-lisp:progn
 (common-lisp:defun associate-third-party-firewall
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:declare (common-lisp:ignorable third-party-firewall))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-third-party-firewall-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateThirdPartyFirewall"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-third-party-firewall))
(common-lisp:progn
 (common-lisp:defun batch-associate-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-set-identifier items)
   (common-lisp:declare (common-lisp:ignorable resource-set-identifier items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-associate-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchAssociateResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-associate-resource))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-set-identifier items)
   (common-lisp:declare (common-lisp:ignorable resource-set-identifier items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDisassociateResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disassociate-resource))
(common-lisp:progn
 (common-lisp:defun delete-apps-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id)
   (common-lisp:declare (common-lisp:ignorable list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-apps-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAppsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apps-list))
(common-lisp:progn
 (common-lisp:defun delete-notification-channel ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :params
                                `(("Action" ,@"DeleteNotificationChannel")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-notification-channel))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id delete-all-policy-resources)
   (common-lisp:declare
    (common-lisp:ignorable policy-id delete-all-policy-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicy"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-protocols-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id)
   (common-lisp:declare (common-lisp:ignorable list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-protocols-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProtocolsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-protocols-list))
(common-lisp:progn
 (common-lisp:defun delete-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourceSet"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-set))
(common-lisp:progn
 (common-lisp:defun disassociate-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :params
                                `(("Action" ,@"DisassociateAdminAccount")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-third-party-firewall
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:declare (common-lisp:ignorable third-party-firewall))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-third-party-firewall-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateThirdPartyFirewall"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-third-party-firewall))
(common-lisp:progn
 (common-lisp:defun get-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetAdminAccount")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-admin-account))
(common-lisp:progn
 (common-lisp:defun get-admin-scope
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account)
   (common-lisp:declare (common-lisp:ignorable admin-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-admin-scope-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAdminScope"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-admin-scope))
(common-lisp:progn
 (common-lisp:defun get-apps-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id default-list)
   (common-lisp:declare (common-lisp:ignorable list-id default-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-apps-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAppsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apps-list))
(common-lisp:progn
 (common-lisp:defun get-compliance-detail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id member-account)
   (common-lisp:declare (common-lisp:ignorable policy-id member-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-compliance-detail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetComplianceDetail"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-compliance-detail))
(common-lisp:progn
 (common-lisp:defun get-notification-channel ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'fms-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetNotificationChannel")
                                  ("Version" ,@"2018-01-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-notification-channel))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetPolicy"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-protection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id member-account-id start-time
                     end-time next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable policy-id member-account-id start-time end-time
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protection-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetProtectionStatus"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-protection-status))
(common-lisp:progn
 (common-lisp:defun get-protocols-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-id default-list)
   (common-lisp:declare (common-lisp:ignorable list-id default-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protocols-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetProtocolsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-protocols-list))
(common-lisp:progn
 (common-lisp:defun get-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourceSet"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-set))
(common-lisp:progn
 (common-lisp:defun get-third-party-firewall-association-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall)
   (common-lisp:declare (common-lisp:ignorable third-party-firewall))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-third-party-firewall-association-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetThirdPartyFirewallAssociationStatus"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-third-party-firewall-association-status))
(common-lisp:progn
 (common-lisp:defun get-violation-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id member-account resource-id
                     resource-type)
   (common-lisp:declare
    (common-lisp:ignorable policy-id member-account resource-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-violation-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetViolationDetails"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-violation-details))
(common-lisp:progn
 (common-lisp:defun list-admin-accounts-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-admin-accounts-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAdminAccountsForOrganization"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-admin-accounts-for-organization))
(common-lisp:progn
 (common-lisp:defun list-admins-managing-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-admins-managing-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAdminsManagingAccount"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-admins-managing-account))
(common-lisp:progn
 (common-lisp:defun list-apps-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key default-lists next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable default-lists next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAppsLists"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps-lists))
(common-lisp:progn
 (common-lisp:defun list-compliance-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable policy-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compliance-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComplianceStatus"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compliance-status))
(common-lisp:progn
 (common-lisp:defun list-discovered-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-account-ids resource-type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable member-account-ids resource-type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-discovered-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDiscoveredResources"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-discovered-resources))
(common-lisp:progn
 (common-lisp:defun list-member-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-member-accounts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMemberAccounts"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-member-accounts))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicies"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-protocols-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key default-lists next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable default-lists next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-protocols-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProtocolsLists"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-protocols-lists))
(common-lisp:progn
 (common-lisp:defun list-resource-set-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable identifier max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-set-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceSetResources"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-set-resources))
(common-lisp:progn
 (common-lisp:defun list-resource-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceSets"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-sets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-third-party-firewall-firewall-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key third-party-firewall next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable third-party-firewall next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-third-party-firewall-firewall-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListThirdPartyFirewallFirewallPolicies"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-third-party-firewall-firewall-policies))
(common-lisp:progn
 (common-lisp:defun put-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account admin-scope)
   (common-lisp:declare (common-lisp:ignorable admin-account admin-scope))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-admin-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAdminAccount"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-admin-account))
(common-lisp:progn
 (common-lisp:defun put-apps-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apps-list tag-list)
   (common-lisp:declare (common-lisp:ignorable apps-list tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-apps-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAppsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-apps-list))
(common-lisp:progn
 (common-lisp:defun put-notification-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sns-topic-arn sns-role-name)
   (common-lisp:declare (common-lisp:ignorable sns-topic-arn sns-role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-notification-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutNotificationChannel"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-notification-channel))
(common-lisp:progn
 (common-lisp:defun put-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy tag-list)
   (common-lisp:declare (common-lisp:ignorable policy tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutPolicy"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-policy))
(common-lisp:progn
 (common-lisp:defun put-protocols-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocols-list tag-list)
   (common-lisp:declare (common-lisp:ignorable protocols-list tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-protocols-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutProtocolsList"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-protocols-list))
(common-lisp:progn
 (common-lisp:defun put-resource-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-set tag-list)
   (common-lisp:declare (common-lisp:ignorable resource-set tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourceSet"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-set))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-list)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2018-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
