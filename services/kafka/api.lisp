;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kafka/api
  (:use)
  (:nicknames #:aws/kafka)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kafka/api)
(common-lisp:progn
 (common-lisp:defclass kafka-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "kafka" :protocol
                        :rest-json))
 (common-lisp:export 'kafka-request))
(common-lisp:progn
 (common-lisp:define-condition kafka-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kafka-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:defclass batch-associate-scram-secret-request common-lisp:nil
                       ((secret-arn-list :initarg :secret-arn-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %batch-associate-scram-secret-request-secret-arn-list
                         :initform
                         (common-lisp:error ":secret-arn-list is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-associate-scram-secret-request-cluster-arn
                         :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-associate-scram-secret-request
                    'make-batch-associate-scram-secret-request))
 (common-lisp:defun make-batch-associate-scram-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-arn-list cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-scram-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn-list))
      (common-lisp:list
       (common-lisp:cons "SecretArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-scram-secret-response common-lisp:nil
                       ((unprocessed-scram-secrets :initarg
                         :unprocessed-scram-secrets :type
                         (common-lisp:or |__listOfUnprocessedScramSecret|
                                         common-lisp:null)
                         :accessor
                         %batch-associate-scram-secret-response-unprocessed-scram-secrets
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-associate-scram-secret-response-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-scram-secret-response
                    'make-batch-associate-scram-secret-response))
 (common-lisp:defun make-batch-associate-scram-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-scram-secrets cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-scram-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-scram-secrets))
      (common-lisp:list
       (common-lisp:cons "UnprocessedScramSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-scram-secret-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader bad-request-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception
                    'bad-request-exception-invalid-parameter
                    'bad-request-exception-message)))
(common-lisp:deftype broker-azdistribution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass broker-ebsvolume-info common-lisp:nil
                       ((volume-size-gb :initarg :volume-size-gb :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %broker-ebsvolume-info-volume-size-gb
                         :initform common-lisp:nil)
                        (provisioned-throughput :initarg
                         :provisioned-throughput :type
                         (common-lisp:or provisioned-throughput
                                         common-lisp:null)
                         :accessor
                         %broker-ebsvolume-info-provisioned-throughput
                         :initform common-lisp:nil)
                        (kafka-broker-node-id :initarg :kafka-broker-node-id
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %broker-ebsvolume-info-kafka-broker-node-id
                         :initform
                         (common-lisp:error
                          ":kafka-broker-node-id is required"))))
 (common-lisp:export
  (common-lisp:list 'broker-ebsvolume-info 'make-broker-ebsvolume-info))
 (common-lisp:defun make-broker-ebsvolume-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-size-gb provisioned-throughput
                     kafka-broker-node-id)
   (common-lisp:apply #'common-lisp:make-instance 'broker-ebsvolume-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          broker-ebsvolume-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          broker-ebsvolume-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kafka-broker-node-id))
      (common-lisp:list
       (common-lisp:cons "KafkaBrokerNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          broker-ebsvolume-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-logs common-lisp:nil
                       ((s3 :initarg :s3 :type
                         (common-lisp:or s3 common-lisp:null) :accessor
                         %broker-logs-s3 :initform common-lisp:nil)
                        (firehose :initarg :firehose :type
                         (common-lisp:or firehose common-lisp:null) :accessor
                         %broker-logs-firehose :initform common-lisp:nil)
                        (cloud-watch-logs :initarg :cloud-watch-logs :type
                         (common-lisp:or cloud-watch-logs common-lisp:null)
                         :accessor %broker-logs-cloud-watch-logs :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'broker-logs 'make-broker-logs))
 (common-lisp:defun make-broker-logs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3 firehose cloud-watch-logs)
   (common-lisp:apply #'common-lisp:make-instance 'broker-logs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input broker-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input broker-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "Firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input broker-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-node-group-info common-lisp:nil
                       ((zone-ids :initarg :zone-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %broker-node-group-info-zone-ids :initform
                         common-lisp:nil)
                        (connectivity-info :initarg :connectivity-info :type
                         (common-lisp:or connectivity-info common-lisp:null)
                         :accessor %broker-node-group-info-connectivity-info
                         :initform common-lisp:nil)
                        (storage-info :initarg :storage-info :type
                         (common-lisp:or storage-info common-lisp:null)
                         :accessor %broker-node-group-info-storage-info
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %broker-node-group-info-security-groups
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or |__stringMin5Max32| common-lisp:null)
                         :accessor %broker-node-group-info-instance-type
                         :initform
                         (common-lisp:error ":instance-type is required"))
                        (client-subnets :initarg :client-subnets :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %broker-node-group-info-client-subnets
                         :initform
                         (common-lisp:error ":client-subnets is required"))
                        (broker-azdistribution :initarg :broker-azdistribution
                         :type
                         (common-lisp:or broker-azdistribution
                                         common-lisp:null)
                         :accessor
                         %broker-node-group-info-broker-azdistribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'broker-node-group-info 'make-broker-node-group-info))
 (common-lisp:defun make-broker-node-group-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zone-ids connectivity-info storage-info
                     security-groups instance-type client-subnets
                     broker-azdistribution)
   (common-lisp:apply #'common-lisp:make-instance 'broker-node-group-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          broker-node-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          broker-node-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-azdistribution))
      (common-lisp:list
       (common-lisp:cons "BrokerAZDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnets))
      (common-lisp:list
       (common-lisp:cons "ClientSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-info))
      (common-lisp:list
       (common-lisp:cons "StorageInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-info))
      (common-lisp:list
       (common-lisp:cons "ConnectivityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-ids))
      (common-lisp:list
       (common-lisp:cons "ZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          broker-node-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-node-info common-lisp:nil
                       ((endpoints :initarg :endpoints :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %broker-node-info-endpoints :initform
                         common-lisp:nil)
                        (current-broker-software-info :initarg
                         :current-broker-software-info :type
                         (common-lisp:or broker-software-info common-lisp:null)
                         :accessor
                         %broker-node-info-current-broker-software-info
                         :initform common-lisp:nil)
                        (client-vpc-ip-address :initarg :client-vpc-ip-address
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %broker-node-info-client-vpc-ip-address
                         :initform common-lisp:nil)
                        (client-subnet :initarg :client-subnet :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %broker-node-info-client-subnet :initform
                         common-lisp:nil)
                        (broker-id :initarg :broker-id :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %broker-node-info-broker-id :initform common-lisp:nil)
                        (attached-eniid :initarg :attached-eniid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %broker-node-info-attached-eniid :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'broker-node-info 'make-broker-node-info))
 (common-lisp:defun make-broker-node-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoints current-broker-software-info
                     client-vpc-ip-address client-subnet broker-id
                     attached-eniid)
   (common-lisp:apply #'common-lisp:make-instance 'broker-node-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input broker-node-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input broker-node-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-eniid))
      (common-lisp:list
       (common-lisp:cons "AttachedENIId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-id))
      (common-lisp:list
       (common-lisp:cons "BrokerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnet))
      (common-lisp:list
       (common-lisp:cons "ClientSubnet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-vpc-ip-address))
      (common-lisp:list
       (common-lisp:cons "ClientVpcIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-broker-software-info))
      (common-lisp:list
       (common-lisp:cons "CurrentBrokerSoftwareInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input broker-node-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass broker-software-info common-lisp:nil
                       ((kafka-version :initarg :kafka-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %broker-software-info-kafka-version :initform
                         common-lisp:nil)
                        (configuration-revision :initarg
                         :configuration-revision :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %broker-software-info-configuration-revision :initform
                         common-lisp:nil)
                        (configuration-arn :initarg :configuration-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %broker-software-info-configuration-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'broker-software-info 'make-broker-software-info))
 (common-lisp:defun make-broker-software-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kafka-version configuration-revision
                     configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance 'broker-software-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input broker-software-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input broker-software-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-revision))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input broker-software-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-authentication common-lisp:nil
                       ((unauthenticated :initarg :unauthenticated :type
                         (common-lisp:or unauthenticated common-lisp:null)
                         :accessor %client-authentication-unauthenticated
                         :initform common-lisp:nil)
                        (tls :initarg :tls :type
                         (common-lisp:or tls common-lisp:null) :accessor
                         %client-authentication-tls :initform common-lisp:nil)
                        (sasl :initarg :sasl :type
                         (common-lisp:or sasl common-lisp:null) :accessor
                         %client-authentication-sasl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-authentication 'make-client-authentication))
 (common-lisp:defun make-client-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unauthenticated tls sasl)
   (common-lisp:apply #'common-lisp:make-instance 'client-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl))
      (common-lisp:list
       (common-lisp:cons "Sasl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "Tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unauthenticated))
      (common-lisp:list
       (common-lisp:cons "Unauthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-client-authentication common-lisp:nil
                       ((tls :initarg :tls :type
                         (common-lisp:or vpc-connectivity-tls common-lisp:null)
                         :accessor %vpc-connectivity-client-authentication-tls
                         :initform common-lisp:nil)
                        (sasl :initarg :sasl :type
                         (common-lisp:or vpc-connectivity-sasl
                                         common-lisp:null)
                         :accessor %vpc-connectivity-client-authentication-sasl
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-client-authentication
                    'make-vpc-connectivity-client-authentication))
 (common-lisp:defun make-vpc-connectivity-client-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls sasl)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-connectivity-client-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl))
      (common-lisp:list
       (common-lisp:cons "Sasl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "Tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-client-authentication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-client-authentication common-lisp:nil
                       ((sasl :initarg :sasl :type
                         (common-lisp:or serverless-sasl common-lisp:null)
                         :accessor %serverless-client-authentication-sasl
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'serverless-client-authentication
                    'make-serverless-client-authentication))
 (common-lisp:defun make-serverless-client-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sasl)
   (common-lisp:apply #'common-lisp:make-instance
                      'serverless-client-authentication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-client-authentication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-client-authentication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl))
      (common-lisp:list
       (common-lisp:cons "Sasl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-client-authentication))
   common-lisp:nil))
(common-lisp:deftype client-broker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs common-lisp:nil
                       ((log-group :initarg :log-group :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cloud-watch-logs-log-group :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %cloud-watch-logs-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs 'make-cloud-watch-logs))
 (common-lisp:defun make-cloud-watch-logs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group enabled)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-watch-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-watch-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-watch-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-info common-lisp:nil
                       ((storage-mode :initarg :storage-mode :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor %cluster-info-storage-mode :initform
                         common-lisp:nil)
                        (zookeeper-connect-string-tls :initarg
                         :zookeeper-connect-string-tls :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-info-zookeeper-connect-string-tls :initform
                         common-lisp:nil)
                        (zookeeper-connect-string :initarg
                         :zookeeper-connect-string :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-info-zookeeper-connect-string :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %cluster-info-tags :initform
                         common-lisp:nil)
                        (state-info :initarg :state-info :type
                         (common-lisp:or state-info common-lisp:null) :accessor
                         %cluster-info-state-info :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor %cluster-info-state :initform
                         common-lisp:nil)
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %cluster-info-number-of-broker-nodes
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %cluster-info-logging-info :initform
                         common-lisp:nil)
                        (open-monitoring :initarg :open-monitoring :type
                         (common-lisp:or open-monitoring common-lisp:null)
                         :accessor %cluster-info-open-monitoring :initform
                         common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor %cluster-info-enhanced-monitoring :initform
                         common-lisp:nil)
                        (encryption-info :initarg :encryption-info :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor %cluster-info-encryption-info :initform
                         common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-info-current-version :initform
                         common-lisp:nil)
                        (current-broker-software-info :initarg
                         :current-broker-software-info :type
                         (common-lisp:or broker-software-info common-lisp:null)
                         :accessor %cluster-info-current-broker-software-info
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %cluster-info-creation-time :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-info-cluster-name :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-info-cluster-arn :initform common-lisp:nil)
                        (client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor %cluster-info-client-authentication
                         :initform common-lisp:nil)
                        (broker-node-group-info :initarg
                         :broker-node-group-info :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor %cluster-info-broker-node-group-info
                         :initform common-lisp:nil)
                        (active-operation-arn :initarg :active-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %cluster-info-active-operation-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster-info 'make-cluster-info))
 (common-lisp:defun make-cluster-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-mode zookeeper-connect-string-tls
                     zookeeper-connect-string tags state-info state
                     number-of-broker-nodes logging-info open-monitoring
                     enhanced-monitoring encryption-info current-version
                     current-broker-software-info creation-time cluster-name
                     cluster-arn client-authentication broker-node-group-info
                     active-operation-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ActiveOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-broker-software-info))
      (common-lisp:list
       (common-lisp:cons "CurrentBrokerSoftwareInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-info))
      (common-lisp:list
       (common-lisp:cons "StateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string-tls))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectStringTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((serverless :initarg :serverless :type
                         (common-lisp:or serverless common-lisp:null) :accessor
                         %cluster-serverless :initform common-lisp:nil)
                        (provisioned :initarg :provisioned :type
                         (common-lisp:or provisioned common-lisp:null)
                         :accessor %cluster-provisioned :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %cluster-tags :initform common-lisp:nil)
                        (state-info :initarg :state-info :type
                         (common-lisp:or state-info common-lisp:null) :accessor
                         %cluster-state-info :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor %cluster-state :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-current-version :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %cluster-creation-time :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-cluster-name :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-cluster-arn :initform common-lisp:nil)
                        (cluster-type :initarg :cluster-type :type
                         (common-lisp:or cluster-type common-lisp:null)
                         :accessor %cluster-cluster-type :initform
                         common-lisp:nil)
                        (active-operation-arn :initarg :active-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %cluster-active-operation-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defun make-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key serverless provisioned tags state-info
                     state current-version creation-time cluster-name
                     cluster-arn cluster-type active-operation-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ActiveOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-info))
      (common-lisp:list
       (common-lisp:cons "StateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned))
      (common-lisp:list
       (common-lisp:cons "Provisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless))
      (common-lisp:list
       (common-lisp:cons "Serverless"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-info common-lisp:nil
                       ((vpc-connection-info :initarg :vpc-connection-info
                         :type
                         (common-lisp:or vpc-connection-info common-lisp:null)
                         :accessor %cluster-operation-info-vpc-connection-info
                         :initform common-lisp:nil)
                        (target-cluster-info :initarg :target-cluster-info
                         :type
                         (common-lisp:or mutable-cluster-info common-lisp:null)
                         :accessor %cluster-operation-info-target-cluster-info
                         :initform common-lisp:nil)
                        (source-cluster-info :initarg :source-cluster-info
                         :type
                         (common-lisp:or mutable-cluster-info common-lisp:null)
                         :accessor %cluster-operation-info-source-cluster-info
                         :initform common-lisp:nil)
                        (operation-type :initarg :operation-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-info-operation-type :initform
                         common-lisp:nil)
                        (operation-steps :initarg :operation-steps :type
                         (common-lisp:or |__listOfClusterOperationStep|
                                         common-lisp:null)
                         :accessor %cluster-operation-info-operation-steps
                         :initform common-lisp:nil)
                        (operation-state :initarg :operation-state :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-info-operation-state :initform
                         common-lisp:nil)
                        (operation-arn :initarg :operation-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-info-operation-arn :initform
                         common-lisp:nil)
                        (error-info :initarg :error-info :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         %cluster-operation-info-error-info :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %cluster-operation-info-end-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %cluster-operation-info-creation-time
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-info-cluster-arn :initform
                         common-lisp:nil)
                        (client-request-id :initarg :client-request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-info-client-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-info 'make-cluster-operation-info))
 (common-lisp:defun make-cluster-operation-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connection-info target-cluster-info
                     source-cluster-info operation-type operation-steps
                     operation-state operation-arn error-info end-time
                     creation-time cluster-arn client-request-id)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-request-id))
      (common-lisp:list
       (common-lisp:cons "ClientRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-arn))
      (common-lisp:list
       (common-lisp:cons "OperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "OperationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-steps))
      (common-lisp:list
       (common-lisp:cons "OperationSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-cluster-info))
      (common-lisp:list
       (common-lisp:cons "SourceClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-info))
      (common-lisp:list
       (common-lisp:cons "TargetClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-info))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-step common-lisp:nil
                       ((step-name :initarg :step-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-step-step-name :initform
                         common-lisp:nil)
                        (step-info :initarg :step-info :type
                         (common-lisp:or cluster-operation-step-info
                                         common-lisp:null)
                         :accessor %cluster-operation-step-step-info :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-step 'make-cluster-operation-step))
 (common-lisp:defun make-cluster-operation-step
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-name step-info)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-step
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-info))
      (common-lisp:list
       (common-lisp:cons "StepInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-name))
      (common-lisp:list
       (common-lisp:cons "StepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-operation-step-info common-lisp:nil
                       ((step-status :initarg :step-status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cluster-operation-step-info-step-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-operation-step-info
                    'make-cluster-operation-step-info))
 (common-lisp:defun make-cluster-operation-step-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-status)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-operation-step-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-status))
      (common-lisp:list
       (common-lisp:cons "StepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-operation-step-info))
   common-lisp:nil))
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:deftype cluster-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provisioned-request common-lisp:nil
                       ((storage-mode :initarg :storage-mode :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor %provisioned-request-storage-mode :initform
                         common-lisp:nil)
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor %provisioned-request-number-of-broker-nodes
                         :initform
                         (common-lisp:error
                          ":number-of-broker-nodes is required"))
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %provisioned-request-logging-info :initform
                         common-lisp:nil)
                        (kafka-version :initarg :kafka-version :type
                         (common-lisp:or |__stringMin1Max128| common-lisp:null)
                         :accessor %provisioned-request-kafka-version :initform
                         (common-lisp:error ":kafka-version is required"))
                        (open-monitoring :initarg :open-monitoring :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor %provisioned-request-open-monitoring
                         :initform common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor %provisioned-request-enhanced-monitoring
                         :initform common-lisp:nil)
                        (encryption-info :initarg :encryption-info :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor %provisioned-request-encryption-info
                         :initform common-lisp:nil)
                        (configuration-info :initarg :configuration-info :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor %provisioned-request-configuration-info
                         :initform common-lisp:nil)
                        (client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor %provisioned-request-client-authentication
                         :initform common-lisp:nil)
                        (broker-node-group-info :initarg
                         :broker-node-group-info :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor %provisioned-request-broker-node-group-info
                         :initform
                         (common-lisp:error
                          ":broker-node-group-info is required"))))
 (common-lisp:export
  (common-lisp:list 'provisioned-request 'make-provisioned-request))
 (common-lisp:defun make-provisioned-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-mode number-of-broker-nodes
                     logging-info kafka-version open-monitoring
                     enhanced-monitoring encryption-info configuration-info
                     client-authentication broker-node-group-info)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioned common-lisp:nil
                       ((storage-mode :initarg :storage-mode :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor %provisioned-storage-mode :initform
                         common-lisp:nil)
                        (zookeeper-connect-string-tls :initarg
                         :zookeeper-connect-string-tls :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %provisioned-zookeeper-connect-string-tls :initform
                         common-lisp:nil)
                        (zookeeper-connect-string :initarg
                         :zookeeper-connect-string :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %provisioned-zookeeper-connect-string :initform
                         common-lisp:nil)
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor %provisioned-number-of-broker-nodes
                         :initform
                         (common-lisp:error
                          ":number-of-broker-nodes is required"))
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %provisioned-logging-info :initform
                         common-lisp:nil)
                        (open-monitoring :initarg :open-monitoring :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor %provisioned-open-monitoring :initform
                         common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor %provisioned-enhanced-monitoring :initform
                         common-lisp:nil)
                        (encryption-info :initarg :encryption-info :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor %provisioned-encryption-info :initform
                         common-lisp:nil)
                        (client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor %provisioned-client-authentication :initform
                         common-lisp:nil)
                        (current-broker-software-info :initarg
                         :current-broker-software-info :type
                         (common-lisp:or broker-software-info common-lisp:null)
                         :accessor %provisioned-current-broker-software-info
                         :initform common-lisp:nil)
                        (broker-node-group-info :initarg
                         :broker-node-group-info :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor %provisioned-broker-node-group-info
                         :initform
                         (common-lisp:error
                          ":broker-node-group-info is required"))))
 (common-lisp:export (common-lisp:list 'provisioned 'make-provisioned))
 (common-lisp:defun make-provisioned
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-mode zookeeper-connect-string-tls
                     zookeeper-connect-string number-of-broker-nodes
                     logging-info open-monitoring enhanced-monitoring
                     encryption-info client-authentication
                     current-broker-software-info broker-node-group-info)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-broker-software-info))
      (common-lisp:list
       (common-lisp:cons "CurrentBrokerSoftwareInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zookeeper-connect-string-tls))
      (common-lisp:list
       (common-lisp:cons "ZookeeperConnectStringTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-config common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-config-security-group-ids :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-config-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defun make-vpc-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids subnet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-request common-lisp:nil
                       ((client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or serverless-client-authentication
                                         common-lisp:null)
                         :accessor %serverless-request-client-authentication
                         :initform common-lisp:nil)
                        (vpc-configs :initarg :vpc-configs :type
                         (common-lisp:or |__listOfVpcConfig| common-lisp:null)
                         :accessor %serverless-request-vpc-configs :initform
                         (common-lisp:error ":vpc-configs is required"))))
 (common-lisp:export
  (common-lisp:list 'serverless-request 'make-serverless-request))
 (common-lisp:defun make-serverless-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-authentication vpc-configs)
   (common-lisp:apply #'common-lisp:make-instance 'serverless-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configs))
      (common-lisp:list
       (common-lisp:cons "VpcConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless common-lisp:nil
                       ((client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or serverless-client-authentication
                                         common-lisp:null)
                         :accessor %serverless-client-authentication :initform
                         common-lisp:nil)
                        (vpc-configs :initarg :vpc-configs :type
                         (common-lisp:or |__listOfVpcConfig| common-lisp:null)
                         :accessor %serverless-vpc-configs :initform
                         (common-lisp:error ":vpc-configs is required"))))
 (common-lisp:export (common-lisp:list 'serverless 'make-serverless))
 (common-lisp:defun make-serverless
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-authentication vpc-configs)
   (common-lisp:apply #'common-lisp:make-instance 'serverless
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configs))
      (common-lisp:list
       (common-lisp:cons "VpcConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-vpc-connection common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %client-vpc-connection-owner :initform
                         common-lisp:nil)
                        (vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %client-vpc-connection-vpc-connection-arn :initform
                         (common-lisp:error ":vpc-connection-arn is required"))
                        (state :initarg :state :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor %client-vpc-connection-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %client-vpc-connection-creation-time
                         :initform common-lisp:nil)
                        (authentication :initarg :authentication :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %client-vpc-connection-authentication :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-vpc-connection 'make-client-vpc-connection))
 (common-lisp:defun make-client-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner vpc-connection-arn state
                     creation-time authentication)
   (common-lisp:apply #'common-lisp:make-instance 'client-vpc-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-vpc-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-vpc-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-vpc-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connection common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor %vpc-connection-state :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-connection-vpc-id :initform common-lisp:nil)
                        (authentication :initarg :authentication :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-connection-authentication :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %vpc-connection-creation-time :initform
                         common-lisp:nil)
                        (target-cluster-arn :initarg :target-cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-connection-target-cluster-arn :initform
                         (common-lisp:error ":target-cluster-arn is required"))
                        (vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-connection-vpc-connection-arn :initform
                         (common-lisp:error
                          ":vpc-connection-arn is required"))))
 (common-lisp:export (common-lisp:list 'vpc-connection 'make-vpc-connection))
 (common-lisp:defun make-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state vpc-id authentication creation-time
                     target-cluster-arn vpc-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compatible-kafka-version common-lisp:nil
                       ((target-versions :initarg :target-versions :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %compatible-kafka-version-target-versions
                         :initform common-lisp:nil)
                        (source-version :initarg :source-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %compatible-kafka-version-source-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compatible-kafka-version 'make-compatible-kafka-version))
 (common-lisp:defun make-compatible-kafka-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-versions source-version)
   (common-lisp:apply #'common-lisp:make-instance 'compatible-kafka-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-kafka-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-kafka-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-versions))
      (common-lisp:list
       (common-lisp:cons "TargetVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-kafka-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor %configuration-state :initform
                         (common-lisp:error ":state is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %configuration-name :initform
                         (common-lisp:error ":name is required"))
                        (latest-revision :initarg :latest-revision :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor %configuration-latest-revision :initform
                         (common-lisp:error ":latest-revision is required"))
                        (kafka-versions :initarg :kafka-versions :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %configuration-kafka-versions :initform
                         (common-lisp:error ":kafka-versions is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %configuration-description :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %configuration-creation-time :initform
                         (common-lisp:error ":creation-time is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %configuration-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defun make-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name latest-revision kafka-versions
                     description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-info common-lisp:nil
                       ((revision :initarg :revision :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %configuration-info-revision :initform
                         (common-lisp:error ":revision is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %configuration-info-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'configuration-info 'make-configuration-info))
 (common-lisp:defun make-configuration-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision arn)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-revision common-lisp:nil
                       ((revision :initarg :revision :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %configuration-revision-revision :initform
                         (common-lisp:error ":revision is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %configuration-revision-description :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %configuration-revision-creation-time
                         :initform
                         (common-lisp:error ":creation-time is required"))))
 (common-lisp:export
  (common-lisp:list 'configuration-revision 'make-configuration-revision))
 (common-lisp:defun make-configuration-revision
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision description creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-revision))
   common-lisp:nil))
(common-lisp:deftype configuration-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader conflict-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-invalid-parameter
                    'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connectivity-info common-lisp:nil
                       ((vpc-connectivity :initarg :vpc-connectivity :type
                         (common-lisp:or vpc-connectivity common-lisp:null)
                         :accessor %connectivity-info-vpc-connectivity
                         :initform common-lisp:nil)
                        (public-access :initarg :public-access :type
                         (common-lisp:or public-access common-lisp:null)
                         :accessor %connectivity-info-public-access :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connectivity-info 'make-connectivity-info))
 (common-lisp:defun make-connectivity-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connectivity public-access)
   (common-lisp:apply #'common-lisp:make-instance 'connectivity-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connectivity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connectivity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "PublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connectivity))
      (common-lisp:list
       (common-lisp:cons "VpcConnectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connectivity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-v2request common-lisp:nil
                       ((serverless :initarg :serverless :type
                         (common-lisp:or serverless-request common-lisp:null)
                         :accessor %create-cluster-v2request-serverless
                         :initform common-lisp:nil)
                        (provisioned :initarg :provisioned :type
                         (common-lisp:or provisioned-request common-lisp:null)
                         :accessor %create-cluster-v2request-provisioned
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-cluster-v2request-tags :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or |__stringMin1Max64| common-lisp:null)
                         :accessor %create-cluster-v2request-cluster-name
                         :initform
                         (common-lisp:error ":cluster-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-v2request 'make-create-cluster-v2request))
 (common-lisp:defun make-create-cluster-v2request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key serverless provisioned tags cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned))
      (common-lisp:list
       (common-lisp:cons "Provisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless))
      (common-lisp:list
       (common-lisp:cons "Serverless"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((storage-mode :initarg :storage-mode :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor %create-cluster-request-storage-mode
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-cluster-request-tags :initform
                         common-lisp:nil)
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor
                         %create-cluster-request-number-of-broker-nodes
                         :initform
                         (common-lisp:error
                          ":number-of-broker-nodes is required"))
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %create-cluster-request-logging-info
                         :initform common-lisp:nil)
                        (kafka-version :initarg :kafka-version :type
                         (common-lisp:or |__stringMin1Max128| common-lisp:null)
                         :accessor %create-cluster-request-kafka-version
                         :initform
                         (common-lisp:error ":kafka-version is required"))
                        (open-monitoring :initarg :open-monitoring :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor %create-cluster-request-open-monitoring
                         :initform common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor %create-cluster-request-enhanced-monitoring
                         :initform common-lisp:nil)
                        (encryption-info :initarg :encryption-info :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor %create-cluster-request-encryption-info
                         :initform common-lisp:nil)
                        (configuration-info :initarg :configuration-info :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor %create-cluster-request-configuration-info
                         :initform common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or |__stringMin1Max64| common-lisp:null)
                         :accessor %create-cluster-request-cluster-name
                         :initform
                         (common-lisp:error ":cluster-name is required"))
                        (client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         %create-cluster-request-client-authentication
                         :initform common-lisp:nil)
                        (broker-node-group-info :initarg
                         :broker-node-group-info :type
                         (common-lisp:or broker-node-group-info
                                         common-lisp:null)
                         :accessor
                         %create-cluster-request-broker-node-group-info
                         :initform
                         (common-lisp:error
                          ":broker-node-group-info is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defun make-create-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-mode tags number-of-broker-nodes
                     logging-info kafka-version open-monitoring
                     enhanced-monitoring encryption-info configuration-info
                     cluster-name client-authentication broker-node-group-info)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-node-group-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor %create-cluster-response-state :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-cluster-response-cluster-name :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-cluster-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defun make-create-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state cluster-name cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-v2response common-lisp:nil
                       ((cluster-type :initarg :cluster-type :type
                         (common-lisp:or cluster-type common-lisp:null)
                         :accessor %create-cluster-v2response-cluster-type
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor %create-cluster-v2response-state :initform
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-cluster-v2response-cluster-name :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-cluster-v2response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-v2response
                    'make-create-cluster-v2response))
 (common-lisp:defun make-create-cluster-v2response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-type state cluster-name
                     cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-request common-lisp:nil
                       ((server-properties :initarg :server-properties :type
                         (common-lisp:or |__blob| common-lisp:null) :accessor
                         %create-configuration-request-server-properties
                         :initform
                         (common-lisp:error ":server-properties is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-configuration-request-name :initform
                         (common-lisp:error ":name is required"))
                        (kafka-versions :initarg :kafka-versions :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-configuration-request-kafka-versions
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-configuration-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-configuration-request
                    'make-create-configuration-request))
 (common-lisp:defun make-create-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-properties name kafka-versions
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'create-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-properties))
      (common-lisp:list
       (common-lisp:cons "ServerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor %create-configuration-response-state
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-configuration-response-name :initform
                         common-lisp:nil)
                        (latest-revision :initarg :latest-revision :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor
                         %create-configuration-response-latest-revision
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %create-configuration-response-creation-time
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-configuration-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-configuration-response
                    'make-create-configuration-response))
 (common-lisp:defun make-create-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name latest-revision creation-time
                     arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-connection-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-vpc-connection-request-tags
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-vpc-connection-request-security-groups
                         :initform
                         (common-lisp:error ":security-groups is required"))
                        (client-subnets :initarg :client-subnets :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-vpc-connection-request-client-subnets
                         :initform
                         (common-lisp:error ":client-subnets is required"))
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-vpc-connection-request-vpc-id :initform
                         (common-lisp:error ":vpc-id is required"))
                        (authentication :initarg :authentication :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-vpc-connection-request-authentication
                         :initform
                         (common-lisp:error ":authentication is required"))
                        (target-cluster-arn :initarg :target-cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-vpc-connection-request-target-cluster-arn
                         :initform
                         (common-lisp:error
                          ":target-cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connection-request
                    'make-create-vpc-connection-request))
 (common-lisp:defun make-create-vpc-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags security-groups client-subnets
                     vpc-id authentication target-cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnets))
      (common-lisp:list
       (common-lisp:cons "ClientSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-connection-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-vpc-connection-response-tags
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %create-vpc-connection-response-creation-time
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-vpc-connection-response-security-groups
                         :initform common-lisp:nil)
                        (client-subnets :initarg :client-subnets :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %create-vpc-connection-response-client-subnets
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-vpc-connection-response-vpc-id :initform
                         common-lisp:nil)
                        (authentication :initarg :authentication :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-vpc-connection-response-authentication
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor %create-vpc-connection-response-state
                         :initform common-lisp:nil)
                        (vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-vpc-connection-response-vpc-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connection-response
                    'make-create-vpc-connection-response))
 (common-lisp:defun make-create-vpc-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags creation-time security-groups
                     client-subnets vpc-id authentication state
                     vpc-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-subnets))
      (common-lisp:list
       (common-lisp:cons "ClientSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-cluster-request-current-version :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-cluster-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defun make-delete-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-version cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor %delete-cluster-response-state :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-cluster-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defun make-delete-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-policy-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-cluster-policy-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-policy-request
                    'make-delete-cluster-policy-request))
 (common-lisp:defun make-delete-cluster-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-policy-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-cluster-policy-response
                    'make-delete-cluster-policy-response))
 (common-lisp:defun make-delete-cluster-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-configuration-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-request
                    'make-delete-configuration-request))
 (common-lisp:defun make-delete-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor %delete-configuration-response-state
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-configuration-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-response
                    'make-delete-configuration-response))
 (common-lisp:defun make-delete-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-connection-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-vpc-connection-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connection-request
                    'make-delete-vpc-connection-request))
 (common-lisp:defun make-delete-vpc-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-connection-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor %delete-vpc-connection-response-state
                         :initform common-lisp:nil)
                        (vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-vpc-connection-response-vpc-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connection-response
                    'make-delete-vpc-connection-response))
 (common-lisp:defun make-delete-vpc-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state vpc-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-operation-request common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %describe-cluster-operation-request-cluster-operation-arn
                         :initform
                         (common-lisp:error
                          ":cluster-operation-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-operation-request
                    'make-describe-cluster-operation-request))
 (common-lisp:defun make-describe-cluster-operation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-operation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-operation-response common-lisp:nil
                       ((cluster-operation-info :initarg
                         :cluster-operation-info :type
                         (common-lisp:or cluster-operation-info
                                         common-lisp:null)
                         :accessor
                         %describe-cluster-operation-response-cluster-operation-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-operation-response
                    'make-describe-cluster-operation-response))
 (common-lisp:defun make-describe-cluster-operation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-operation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-info))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-cluster-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defun make-describe-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-v2request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-cluster-v2request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-v2request
                    'make-describe-cluster-v2request))
 (common-lisp:defun make-describe-cluster-v2request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-response common-lisp:nil
                       ((cluster-info :initarg :cluster-info :type
                         (common-lisp:or cluster-info common-lisp:null)
                         :accessor %describe-cluster-response-cluster-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-response
                    'make-describe-cluster-response))
 (common-lisp:defun make-describe-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-info)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info))
      (common-lisp:list
       (common-lisp:cons "ClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-v2response common-lisp:nil
                       ((cluster-info :initarg :cluster-info :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %describe-cluster-v2response-cluster-info :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-v2response
                    'make-describe-cluster-v2response))
 (common-lisp:defun make-describe-cluster-v2response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-info)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info))
      (common-lisp:list
       (common-lisp:cons "ClusterInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-request
                    'make-describe-configuration-request))
 (common-lisp:defun make-describe-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor %describe-configuration-response-state
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-response-name :initform
                         common-lisp:nil)
                        (latest-revision :initarg :latest-revision :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor
                         %describe-configuration-response-latest-revision
                         :initform common-lisp:nil)
                        (kafka-versions :initarg :kafka-versions :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-configuration-response-kafka-versions
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-response-description :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %describe-configuration-response-creation-time
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-response
                    'make-describe-configuration-response))
 (common-lisp:defun make-describe-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name latest-revision kafka-versions
                     description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-revision-request common-lisp:nil
                       ((revision :initarg :revision :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %describe-configuration-revision-request-revision
                         :initform (common-lisp:error ":revision is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-revision-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-revision-request
                    'make-describe-configuration-revision-request))
 (common-lisp:defun make-describe-configuration-revision-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-revision-response common-lisp:nil
                       ((server-properties :initarg :server-properties :type
                         (common-lisp:or |__blob| common-lisp:null) :accessor
                         %describe-configuration-revision-response-server-properties
                         :initform common-lisp:nil)
                        (revision :initarg :revision :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %describe-configuration-revision-response-revision
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-revision-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %describe-configuration-revision-response-creation-time
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-configuration-revision-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-revision-response
                    'make-describe-configuration-revision-response))
 (common-lisp:defun make-describe-configuration-revision-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-properties revision description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-properties))
      (common-lisp:list
       (common-lisp:cons "ServerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-revision-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-connection-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-vpc-connection-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connection-request
                    'make-describe-vpc-connection-request))
 (common-lisp:defun make-describe-vpc-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-connection-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %describe-vpc-connection-response-tags
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         %describe-vpc-connection-response-creation-time
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-vpc-connection-response-security-groups
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %describe-vpc-connection-response-subnets
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-vpc-connection-response-vpc-id :initform
                         common-lisp:nil)
                        (authentication :initarg :authentication :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-vpc-connection-response-authentication
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or vpc-connection-state common-lisp:null)
                         :accessor %describe-vpc-connection-response-state
                         :initform common-lisp:nil)
                        (target-cluster-arn :initarg :target-cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-vpc-connection-response-target-cluster-arn
                         :initform common-lisp:nil)
                        (vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-vpc-connection-response-vpc-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connection-response
                    'make-describe-vpc-connection-response))
 (common-lisp:defun make-describe-vpc-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags creation-time security-groups
                     subnets vpc-id authentication state target-cluster-arn
                     vpc-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "TargetClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "Authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-scram-secret-request common-lisp:nil
                       ((secret-arn-list :initarg :secret-arn-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %batch-disassociate-scram-secret-request-secret-arn-list
                         :initform
                         (common-lisp:error ":secret-arn-list is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-disassociate-scram-secret-request-cluster-arn
                         :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-scram-secret-request
                    'make-batch-disassociate-scram-secret-request))
 (common-lisp:defun make-batch-disassociate-scram-secret-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-arn-list cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-scram-secret-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn-list))
      (common-lisp:list
       (common-lisp:cons "SecretArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-scram-secret-response common-lisp:nil
                       ((unprocessed-scram-secrets :initarg
                         :unprocessed-scram-secrets :type
                         (common-lisp:or |__listOfUnprocessedScramSecret|
                                         common-lisp:null)
                         :accessor
                         %batch-disassociate-scram-secret-response-unprocessed-scram-secrets
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-disassociate-scram-secret-response-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-scram-secret-response
                    'make-batch-disassociate-scram-secret-response))
 (common-lisp:defun make-batch-disassociate-scram-secret-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-scram-secrets cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-scram-secret-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-scram-secrets))
      (common-lisp:list
       (common-lisp:cons "UnprocessedScramSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-scram-secret-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebsstorage-info common-lisp:nil
                       ((volume-size :initarg :volume-size :type
                         (common-lisp:or |__integerMin1Max16384|
                                         common-lisp:null)
                         :accessor %ebsstorage-info-volume-size :initform
                         common-lisp:nil)
                        (provisioned-throughput :initarg
                         :provisioned-throughput :type
                         (common-lisp:or provisioned-throughput
                                         common-lisp:null)
                         :accessor %ebsstorage-info-provisioned-throughput
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ebsstorage-info 'make-ebsstorage-info))
 (common-lisp:defun make-ebsstorage-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-size provisioned-throughput)
   (common-lisp:apply #'common-lisp:make-instance 'ebsstorage-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsstorage-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsstorage-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsstorage-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest common-lisp:nil
                       ((data-volume-kmskey-id :initarg :data-volume-kmskey-id
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %encryption-at-rest-data-volume-kmskey-id
                         :initform
                         (common-lisp:error
                          ":data-volume-kmskey-id is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest 'make-encryption-at-rest))
 (common-lisp:defun make-encryption-at-rest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-volume-kmskey-id)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-at-rest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-volume-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "DataVolumeKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-in-transit common-lisp:nil
                       ((in-cluster :initarg :in-cluster :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %encryption-in-transit-in-cluster :initform
                         common-lisp:nil)
                        (client-broker :initarg :client-broker :type
                         (common-lisp:or client-broker common-lisp:null)
                         :accessor %encryption-in-transit-client-broker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'encryption-in-transit 'make-encryption-in-transit))
 (common-lisp:defun make-encryption-in-transit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key in-cluster client-broker)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-in-transit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-in-transit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-in-transit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-broker))
      (common-lisp:list
       (common-lisp:cons "ClientBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-cluster))
      (common-lisp:list
       (common-lisp:cons "InCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-in-transit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-info common-lisp:nil
                       ((encryption-in-transit :initarg :encryption-in-transit
                         :type
                         (common-lisp:or encryption-in-transit
                                         common-lisp:null)
                         :accessor %encryption-info-encryption-in-transit
                         :initform common-lisp:nil)
                        (encryption-at-rest :initarg :encryption-at-rest :type
                         (common-lisp:or encryption-at-rest common-lisp:null)
                         :accessor %encryption-info-encryption-at-rest
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'encryption-info 'make-encryption-info))
 (common-lisp:defun make-encryption-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-in-transit encryption-at-rest)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-at-rest))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-in-transit))
      (common-lisp:list
       (common-lisp:cons "EncryptionInTransit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-info))
   common-lisp:nil))
(common-lisp:deftype enhanced-monitoring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %error-message :initform common-lisp:nil)
                        (invalid-parameter :initarg :invalid-parameter :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %error-invalid-parameter :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error 'make-error))
 (common-lisp:defun make-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message invalid-parameter)
   (common-lisp:apply #'common-lisp:make-instance 'error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-parameter))
      (common-lisp:list
       (common-lisp:cons "InvalidParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error-info common-lisp:nil
                       ((error-string :initarg :error-string :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %error-info-error-string :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %error-info-error-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defun make-error-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-string error-code)
   (common-lisp:apply #'common-lisp:make-instance 'error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firehose common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %firehose-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (delivery-stream :initarg :delivery-stream :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %firehose-delivery-stream :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'firehose 'make-firehose))
 (common-lisp:defun make-firehose
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled delivery-stream)
   (common-lisp:apply #'common-lisp:make-instance 'firehose
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firehose))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firehose))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream))
      (common-lisp:list
       (common-lisp:cons "DeliveryStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firehose))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader forbidden-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-invalid-parameter
                    'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-bootstrap-brokers-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bootstrap-brokers-request
                    'make-get-bootstrap-brokers-request))
 (common-lisp:defun make-get-bootstrap-brokers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bootstrap-brokers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bootstrap-brokers-response common-lisp:nil
                       ((bootstrap-broker-string-vpc-connectivity-sasl-iam
                         :initarg
                         :bootstrap-broker-string-vpc-connectivity-sasl-iam
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-vpc-connectivity-sasl-iam
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-vpc-connectivity-sasl-scram
                         :initarg
                         :bootstrap-broker-string-vpc-connectivity-sasl-scram
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-vpc-connectivity-sasl-scram
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-vpc-connectivity-tls :initarg
                         :bootstrap-broker-string-vpc-connectivity-tls :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-vpc-connectivity-tls
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-public-sasl-iam :initarg
                         :bootstrap-broker-string-public-sasl-iam :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-public-sasl-iam
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-public-sasl-scram :initarg
                         :bootstrap-broker-string-public-sasl-scram :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-public-sasl-scram
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-public-tls :initarg
                         :bootstrap-broker-string-public-tls :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-public-tls
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-sasl-iam :initarg
                         :bootstrap-broker-string-sasl-iam :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-sasl-iam
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-sasl-scram :initarg
                         :bootstrap-broker-string-sasl-scram :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-sasl-scram
                         :initform common-lisp:nil)
                        (bootstrap-broker-string-tls :initarg
                         :bootstrap-broker-string-tls :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string-tls
                         :initform common-lisp:nil)
                        (bootstrap-broker-string :initarg
                         :bootstrap-broker-string :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-bootstrap-brokers-response-bootstrap-broker-string
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bootstrap-brokers-response
                    'make-get-bootstrap-brokers-response))
 (common-lisp:defun make-get-bootstrap-brokers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     bootstrap-broker-string-vpc-connectivity-sasl-iam
                     bootstrap-broker-string-vpc-connectivity-sasl-scram
                     bootstrap-broker-string-vpc-connectivity-tls
                     bootstrap-broker-string-public-sasl-iam
                     bootstrap-broker-string-public-sasl-scram
                     bootstrap-broker-string-public-tls
                     bootstrap-broker-string-sasl-iam
                     bootstrap-broker-string-sasl-scram
                     bootstrap-broker-string-tls bootstrap-broker-string)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bootstrap-brokers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-tls))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-sasl-scram))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringSaslScram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-sasl-iam))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringSaslIam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-public-tls))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringPublicTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-public-sasl-scram))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringPublicSaslScram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-public-sasl-iam))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringPublicSaslIam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-vpc-connectivity-tls))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringVpcConnectivityTls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-vpc-connectivity-sasl-scram))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringVpcConnectivitySaslScram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-broker-string-vpc-connectivity-sasl-iam))
      (common-lisp:list
       (common-lisp:cons "BootstrapBrokerStringVpcConnectivitySaslIam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bootstrap-brokers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compatible-kafka-versions-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-compatible-kafka-versions-request-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compatible-kafka-versions-request
                    'make-get-compatible-kafka-versions-request))
 (common-lisp:defun make-get-compatible-kafka-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-kafka-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compatible-kafka-versions-response common-lisp:nil
                       ((compatible-kafka-versions :initarg
                         :compatible-kafka-versions :type
                         (common-lisp:or |__listOfCompatibleKafkaVersion|
                                         common-lisp:null)
                         :accessor
                         %get-compatible-kafka-versions-response-compatible-kafka-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compatible-kafka-versions-response
                    'make-get-compatible-kafka-versions-response))
 (common-lisp:defun make-get-compatible-kafka-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compatible-kafka-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-kafka-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-kafka-versions))
      (common-lisp:list
       (common-lisp:cons "CompatibleKafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-kafka-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-policy-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-cluster-policy-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cluster-policy-request
                    'make-get-cluster-policy-request))
 (common-lisp:defun make-get-cluster-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-cluster-policy-response-policy :initform
                         common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-cluster-policy-response-current-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-cluster-policy-response
                    'make-get-cluster-policy-response))
 (common-lisp:defun make-get-cluster-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy current-version)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader internal-server-error-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-invalid-parameter
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass kafka-version common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or kafka-version-status common-lisp:null)
                         :accessor %kafka-version-status :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %kafka-version-version :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kafka-version 'make-kafka-version))
 (common-lisp:defun make-kafka-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status version)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-version))
   common-lisp:nil))
(common-lisp:deftype kafka-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-cluster-operations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-cluster-operations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-cluster-operations-request-max-results
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-cluster-operations-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-cluster-operations-request
                    'make-list-cluster-operations-request))
 (common-lisp:defun make-list-cluster-operations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-operations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cluster-operations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-cluster-operations-response-next-token :initform
                         common-lisp:nil)
                        (cluster-operation-info-list :initarg
                         :cluster-operation-info-list :type
                         (common-lisp:or |__listOfClusterOperationInfo|
                                         common-lisp:null)
                         :accessor
                         %list-cluster-operations-response-cluster-operation-info-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-operations-response
                    'make-list-cluster-operations-response))
 (common-lisp:defun make-list-cluster-operations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token cluster-operation-info-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-operations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-clusters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-clusters-request-max-results :initform
                         common-lisp:nil)
                        (cluster-name-filter :initarg :cluster-name-filter
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %list-clusters-request-cluster-name-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defun make-list-clusters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     cluster-name-filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-v2request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-clusters-v2request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-clusters-v2request-max-results
                         :initform common-lisp:nil)
                        (cluster-type-filter :initarg :cluster-type-filter
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %list-clusters-v2request-cluster-type-filter
                         :initform common-lisp:nil)
                        (cluster-name-filter :initarg :cluster-name-filter
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %list-clusters-v2request-cluster-name-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-v2request 'make-list-clusters-v2request))
 (common-lisp:defun make-list-clusters-v2request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     cluster-type-filter cluster-name-filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-clusters-response-next-token :initform
                         common-lisp:nil)
                        (cluster-info-list :initarg :cluster-info-list :type
                         (common-lisp:or |__listOfClusterInfo|
                                         common-lisp:null)
                         :accessor %list-clusters-response-cluster-info-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defun make-list-clusters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token cluster-info-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-v2response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-clusters-v2response-next-token :initform
                         common-lisp:nil)
                        (cluster-info-list :initarg :cluster-info-list :type
                         (common-lisp:or |__listOfCluster| common-lisp:null)
                         :accessor %list-clusters-v2response-cluster-info-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-v2response 'make-list-clusters-v2response))
 (common-lisp:defun make-list-clusters-v2response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token cluster-info-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-info-list))
      (common-lisp:list
       (common-lisp:cons "ClusterInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-revisions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-configuration-revisions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-configuration-revisions-request-max-results
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-configuration-revisions-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-configuration-revisions-request
                    'make-list-configuration-revisions-request))
 (common-lisp:defun make-list-configuration-revisions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-revisions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-revisions-response common-lisp:nil
                       ((revisions :initarg :revisions :type
                         (common-lisp:or |__listOfConfigurationRevision|
                                         common-lisp:null)
                         :accessor
                         %list-configuration-revisions-response-revisions
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-configuration-revisions-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configuration-revisions-response
                    'make-list-configuration-revisions-response))
 (common-lisp:defun make-list-configuration-revisions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revisions next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-revisions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "Revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-revisions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configurations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-configurations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-configurations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configurations-request
                    'make-list-configurations-request))
 (common-lisp:defun make-list-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configurations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-configurations-response-next-token :initform
                         common-lisp:nil)
                        (configurations :initarg :configurations :type
                         (common-lisp:or |__listOfConfiguration|
                                         common-lisp:null)
                         :accessor %list-configurations-response-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configurations-response
                    'make-list-configurations-response))
 (common-lisp:defun make-list-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token configurations)
   (common-lisp:apply #'common-lisp:make-instance 'list-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kafka-versions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-kafka-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-kafka-versions-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-kafka-versions-request
                    'make-list-kafka-versions-request))
 (common-lisp:defun make-list-kafka-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-kafka-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kafka-versions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-kafka-versions-response-next-token :initform
                         common-lisp:nil)
                        (kafka-versions :initarg :kafka-versions :type
                         (common-lisp:or |__listOfKafkaVersion|
                                         common-lisp:null)
                         :accessor %list-kafka-versions-response-kafka-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-kafka-versions-response
                    'make-list-kafka-versions-response))
 (common-lisp:defun make-list-kafka-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token kafka-versions)
   (common-lisp:apply #'common-lisp:make-instance 'list-kafka-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-versions))
      (common-lisp:list
       (common-lisp:cons "KafkaVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kafka-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-nodes-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-nodes-request-max-results :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-nodes-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-nodes-request 'make-list-nodes-request))
 (common-lisp:defun make-list-nodes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodes-response common-lisp:nil
                       ((node-info-list :initarg :node-info-list :type
                         (common-lisp:or |__listOfNodeInfo| common-lisp:null)
                         :accessor %list-nodes-response-node-info-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-nodes-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-response 'make-list-nodes-response))
 (common-lisp:defun make-list-nodes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-info-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-info-list))
      (common-lisp:list
       (common-lisp:cons "NodeInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scram-secrets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-scram-secrets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-scram-secrets-request-max-results
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-scram-secrets-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-scram-secrets-request
                    'make-list-scram-secrets-request))
 (common-lisp:defun make-list-scram-secrets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-scram-secrets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scram-secrets-response common-lisp:nil
                       ((secret-arn-list :initarg :secret-arn-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %list-scram-secrets-response-secret-arn-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-scram-secrets-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-scram-secrets-response
                    'make-list-scram-secrets-response))
 (common-lisp:defun make-list-scram-secrets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-arn-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-scram-secrets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn-list))
      (common-lisp:list
       (common-lisp:cons "SecretArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scram-secrets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %list-tags-for-resource-response-tags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-client-vpc-connections-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-client-vpc-connections-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-client-vpc-connections-request-max-results
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-client-vpc-connections-request-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-client-vpc-connections-request
                    'make-list-client-vpc-connections-request))
 (common-lisp:defun make-list-client-vpc-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-client-vpc-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-client-vpc-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-client-vpc-connections-response-next-token
                         :initform common-lisp:nil)
                        (client-vpc-connections :initarg
                         :client-vpc-connections :type
                         (common-lisp:or |__listOfClientVpcConnection|
                                         common-lisp:null)
                         :accessor
                         %list-client-vpc-connections-response-client-vpc-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-client-vpc-connections-response
                    'make-list-client-vpc-connections-response))
 (common-lisp:defun make-list-client-vpc-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token client-vpc-connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-client-vpc-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-vpc-connections))
      (common-lisp:list
       (common-lisp:cons "ClientVpcConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-client-vpc-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-connections-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-vpc-connections-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-vpc-connections-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connections-request
                    'make-list-vpc-connections-request))
 (common-lisp:defun make-list-vpc-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-vpc-connections-response-next-token :initform
                         common-lisp:nil)
                        (vpc-connections :initarg :vpc-connections :type
                         (common-lisp:or |__listOfVpcConnection|
                                         common-lisp:null)
                         :accessor
                         %list-vpc-connections-response-vpc-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connections-response
                    'make-list-vpc-connections-response))
 (common-lisp:defun make-list-vpc-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vpc-connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connections))
      (common-lisp:list
       (common-lisp:cons "VpcConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-client-vpc-connection-request common-lisp:nil
                       ((vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reject-client-vpc-connection-request-vpc-connection-arn
                         :initform
                         (common-lisp:error ":vpc-connection-arn is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reject-client-vpc-connection-request-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reject-client-vpc-connection-request
                    'make-reject-client-vpc-connection-request))
 (common-lisp:defun make-reject-client-vpc-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connection-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-client-vpc-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-client-vpc-connection-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reject-client-vpc-connection-response
                    'make-reject-client-vpc-connection-response))
 (common-lisp:defun make-reject-client-vpc-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-client-vpc-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-client-vpc-connection-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass logging-info common-lisp:nil
                       ((broker-logs :initarg :broker-logs :type
                         (common-lisp:or broker-logs common-lisp:null)
                         :accessor %logging-info-broker-logs :initform
                         (common-lisp:error ":broker-logs is required"))))
 (common-lisp:export (common-lisp:list 'logging-info 'make-logging-info))
 (common-lisp:defun make-logging-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key broker-logs)
   (common-lisp:apply #'common-lisp:make-instance 'logging-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-logs))
      (common-lisp:list
       (common-lisp:cons "BrokerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mutable-cluster-info common-lisp:nil
                       ((storage-mode :initarg :storage-mode :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor %mutable-cluster-info-storage-mode :initform
                         common-lisp:nil)
                        (connectivity-info :initarg :connectivity-info :type
                         (common-lisp:or connectivity-info common-lisp:null)
                         :accessor %mutable-cluster-info-connectivity-info
                         :initform common-lisp:nil)
                        (encryption-info :initarg :encryption-info :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor %mutable-cluster-info-encryption-info
                         :initform common-lisp:nil)
                        (client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor %mutable-cluster-info-client-authentication
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or |__stringMin5Max32| common-lisp:null)
                         :accessor %mutable-cluster-info-instance-type
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %mutable-cluster-info-logging-info :initform
                         common-lisp:nil)
                        (kafka-version :initarg :kafka-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %mutable-cluster-info-kafka-version :initform
                         common-lisp:nil)
                        (open-monitoring :initarg :open-monitoring :type
                         (common-lisp:or open-monitoring common-lisp:null)
                         :accessor %mutable-cluster-info-open-monitoring
                         :initform common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor %mutable-cluster-info-enhanced-monitoring
                         :initform common-lisp:nil)
                        (number-of-broker-nodes :initarg
                         :number-of-broker-nodes :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %mutable-cluster-info-number-of-broker-nodes
                         :initform common-lisp:nil)
                        (configuration-info :initarg :configuration-info :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor %mutable-cluster-info-configuration-info
                         :initform common-lisp:nil)
                        (broker-ebsvolume-info :initarg :broker-ebsvolume-info
                         :type
                         (common-lisp:or |__listOfBrokerEBSVolumeInfo|
                                         common-lisp:null)
                         :accessor %mutable-cluster-info-broker-ebsvolume-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mutable-cluster-info 'make-mutable-cluster-info))
 (common-lisp:defun make-mutable-cluster-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-mode connectivity-info
                     encryption-info client-authentication instance-type
                     logging-info kafka-version open-monitoring
                     enhanced-monitoring number-of-broker-nodes
                     configuration-info broker-ebsvolume-info)
   (common-lisp:apply #'common-lisp:make-instance 'mutable-cluster-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mutable-cluster-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mutable-cluster-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'broker-ebsvolume-info))
      (common-lisp:list
       (common-lisp:cons "BrokerEBSVolumeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-version))
      (common-lisp:list
       (common-lisp:cons "KafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-info))
      (common-lisp:list
       (common-lisp:cons "ConnectivityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mutable-cluster-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-exporter common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %node-exporter-enabled-in-broker :initform
                         (common-lisp:error
                          ":enabled-in-broker is required"))))
 (common-lisp:export (common-lisp:list 'node-exporter 'make-node-exporter))
 (common-lisp:defun make-node-exporter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled-in-broker)
   (common-lisp:apply #'common-lisp:make-instance 'node-exporter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-exporter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-exporter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-exporter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-exporter-info common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %node-exporter-info-enabled-in-broker
                         :initform
                         (common-lisp:error
                          ":enabled-in-broker is required"))))
 (common-lisp:export
  (common-lisp:list 'node-exporter-info 'make-node-exporter-info))
 (common-lisp:defun make-node-exporter-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled-in-broker)
   (common-lisp:apply #'common-lisp:make-instance 'node-exporter-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-exporter-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-exporter-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-exporter-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jmx-exporter common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %jmx-exporter-enabled-in-broker :initform
                         (common-lisp:error
                          ":enabled-in-broker is required"))))
 (common-lisp:export (common-lisp:list 'jmx-exporter 'make-jmx-exporter))
 (common-lisp:defun make-jmx-exporter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled-in-broker)
   (common-lisp:apply #'common-lisp:make-instance 'jmx-exporter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jmx-exporter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jmx-exporter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jmx-exporter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jmx-exporter-info common-lisp:nil
                       ((enabled-in-broker :initarg :enabled-in-broker :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %jmx-exporter-info-enabled-in-broker
                         :initform
                         (common-lisp:error
                          ":enabled-in-broker is required"))))
 (common-lisp:export
  (common-lisp:list 'jmx-exporter-info 'make-jmx-exporter-info))
 (common-lisp:defun make-jmx-exporter-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled-in-broker)
   (common-lisp:apply #'common-lisp:make-instance 'jmx-exporter-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jmx-exporter-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jmx-exporter-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-in-broker))
      (common-lisp:list
       (common-lisp:cons "EnabledInBroker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jmx-exporter-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-monitoring common-lisp:nil
                       ((prometheus :initarg :prometheus :type
                         (common-lisp:or prometheus common-lisp:null) :accessor
                         %open-monitoring-prometheus :initform
                         (common-lisp:error ":prometheus is required"))))
 (common-lisp:export (common-lisp:list 'open-monitoring 'make-open-monitoring))
 (common-lisp:defun make-open-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prometheus)
   (common-lisp:apply #'common-lisp:make-instance 'open-monitoring
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prometheus))
      (common-lisp:list
       (common-lisp:cons "Prometheus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-monitoring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-monitoring-info common-lisp:nil
                       ((prometheus :initarg :prometheus :type
                         (common-lisp:or prometheus-info common-lisp:null)
                         :accessor %open-monitoring-info-prometheus :initform
                         (common-lisp:error ":prometheus is required"))))
 (common-lisp:export
  (common-lisp:list 'open-monitoring-info 'make-open-monitoring-info))
 (common-lisp:defun make-open-monitoring-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prometheus)
   (common-lisp:apply #'common-lisp:make-instance 'open-monitoring-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-monitoring-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-monitoring-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prometheus))
      (common-lisp:list
       (common-lisp:cons "Prometheus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-monitoring-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prometheus common-lisp:nil
                       ((node-exporter :initarg :node-exporter :type
                         (common-lisp:or node-exporter common-lisp:null)
                         :accessor %prometheus-node-exporter :initform
                         common-lisp:nil)
                        (jmx-exporter :initarg :jmx-exporter :type
                         (common-lisp:or jmx-exporter common-lisp:null)
                         :accessor %prometheus-jmx-exporter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'prometheus 'make-prometheus))
 (common-lisp:defun make-prometheus
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-exporter jmx-exporter)
   (common-lisp:apply #'common-lisp:make-instance 'prometheus
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prometheus))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prometheus))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jmx-exporter))
      (common-lisp:list
       (common-lisp:cons "JmxExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-exporter))
      (common-lisp:list
       (common-lisp:cons "NodeExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prometheus))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prometheus-info common-lisp:nil
                       ((node-exporter :initarg :node-exporter :type
                         (common-lisp:or node-exporter-info common-lisp:null)
                         :accessor %prometheus-info-node-exporter :initform
                         common-lisp:nil)
                        (jmx-exporter :initarg :jmx-exporter :type
                         (common-lisp:or jmx-exporter-info common-lisp:null)
                         :accessor %prometheus-info-jmx-exporter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'prometheus-info 'make-prometheus-info))
 (common-lisp:defun make-prometheus-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-exporter jmx-exporter)
   (common-lisp:apply #'common-lisp:make-instance 'prometheus-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prometheus-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prometheus-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jmx-exporter))
      (common-lisp:list
       (common-lisp:cons "JmxExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-exporter))
      (common-lisp:list
       (common-lisp:cons "NodeExporter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prometheus-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioned-throughput common-lisp:nil
                       ((volume-throughput :initarg :volume-throughput :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %provisioned-throughput-volume-throughput
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %provisioned-throughput-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput 'make-provisioned-throughput))
 (common-lisp:defun make-provisioned-throughput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-throughput enabled)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned-throughput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-throughput))
      (common-lisp:list
       (common-lisp:cons "VolumeThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass public-access common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %public-access-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'public-access 'make-public-access))
 (common-lisp:defun make-public-access
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'public-access
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-policy-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %put-cluster-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %put-cluster-policy-request-current-version :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %put-cluster-policy-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-cluster-policy-request
                    'make-put-cluster-policy-request))
 (common-lisp:defun make-put-cluster-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy current-version cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-cluster-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-policy-response common-lisp:nil
                       ((current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %put-cluster-policy-response-current-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-cluster-policy-response
                    'make-put-cluster-policy-response))
 (common-lisp:defun make-put-cluster-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-version)
   (common-lisp:apply #'common-lisp:make-instance 'put-cluster-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-broker-request common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reboot-broker-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))
                        (broker-ids :initarg :broker-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %reboot-broker-request-broker-ids :initform
                         (common-lisp:error ":broker-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'reboot-broker-request 'make-reboot-broker-request))
 (common-lisp:defun make-reboot-broker-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn broker-ids)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-broker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-ids))
      (common-lisp:list
       (common-lisp:cons "BrokerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-broker-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %reboot-broker-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reboot-broker-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reboot-broker-response 'make-reboot-broker-response))
 (common-lisp:defun make-reboot-broker-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-broker-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-broker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3 common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3-prefix :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %s3-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3-bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3 'make-s3))
 (common-lisp:defun make-s3
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix enabled bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-sasl common-lisp:nil
                       ((iam :initarg :iam :type
                         (common-lisp:or iam common-lisp:null) :accessor
                         %serverless-sasl-iam :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'serverless-sasl 'make-serverless-sasl))
 (common-lisp:defun make-serverless-sasl
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam)
   (common-lisp:apply #'common-lisp:make-instance 'serverless-sasl
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input serverless-sasl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input serverless-sasl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input serverless-sasl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sasl common-lisp:nil
                       ((iam :initarg :iam :type
                         (common-lisp:or iam common-lisp:null) :accessor
                         %sasl-iam :initform common-lisp:nil)
                        (scram :initarg :scram :type
                         (common-lisp:or scram common-lisp:null) :accessor
                         %sasl-scram :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sasl 'make-sasl))
 (common-lisp:defun make-sasl
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam scram)
   (common-lisp:apply #'common-lisp:make-instance 'sasl
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sasl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sasl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scram))
      (common-lisp:list
       (common-lisp:cons "Scram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sasl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-sasl common-lisp:nil
                       ((iam :initarg :iam :type
                         (common-lisp:or vpc-connectivity-iam common-lisp:null)
                         :accessor %vpc-connectivity-sasl-iam :initform
                         common-lisp:nil)
                        (scram :initarg :scram :type
                         (common-lisp:or vpc-connectivity-scram
                                         common-lisp:null)
                         :accessor %vpc-connectivity-sasl-scram :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-sasl 'make-vpc-connectivity-sasl))
 (common-lisp:defun make-vpc-connectivity-sasl
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam scram)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-sasl
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-sasl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-sasl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scram))
      (common-lisp:list
       (common-lisp:cons "Scram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-sasl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scram common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %scram-enabled :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scram 'make-scram))
 (common-lisp:defun make-scram
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'scram
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scram))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scram))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scram))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-scram common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %vpc-connectivity-scram-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-scram 'make-vpc-connectivity-scram))
 (common-lisp:defun make-vpc-connectivity-scram
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-scram
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-scram))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-scram))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-connectivity-scram))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iam common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %iam-enabled :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'iam 'make-iam))
 (common-lisp:defun make-iam
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'iam
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-iam common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %vpc-connectivity-iam-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-iam 'make-vpc-connectivity-iam))
 (common-lisp:defun make-vpc-connectivity-iam
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-iam
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connectivity-iam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connectivity-iam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connectivity-iam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-info common-lisp:nil
                       ((zookeeper-node-info :initarg :zookeeper-node-info
                         :type
                         (common-lisp:or zookeeper-node-info common-lisp:null)
                         :accessor %node-info-zookeeper-node-info :initform
                         common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or node-type common-lisp:null) :accessor
                         %node-info-node-type :initform common-lisp:nil)
                        (node-arn :initarg :node-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %node-info-node-arn :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %node-info-instance-type :initform common-lisp:nil)
                        (broker-node-info :initarg :broker-node-info :type
                         (common-lisp:or broker-node-info common-lisp:null)
                         :accessor %node-info-broker-node-info :initform
                         common-lisp:nil)
                        (added-to-cluster-time :initarg :added-to-cluster-time
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %node-info-added-to-cluster-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'node-info 'make-node-info))
 (common-lisp:defun make-node-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zookeeper-node-info node-type node-arn
                     instance-type broker-node-info added-to-cluster-time)
   (common-lisp:apply #'common-lisp:make-instance 'node-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'added-to-cluster-time))
      (common-lisp:list
       (common-lisp:cons "AddedToClusterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker-node-info))
      (common-lisp:list
       (common-lisp:cons "BrokerNodeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-arn))
      (common-lisp:list
       (common-lisp:cons "NodeARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zookeeper-node-info))
      (common-lisp:list
       (common-lisp:cons "ZookeeperNodeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-info))
   common-lisp:nil))
(common-lisp:deftype node-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader not-found-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-invalid-parameter
                    'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader service-unavailable-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-invalid-parameter
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass state-info common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %state-info-message :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %state-info-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'state-info 'make-state-info))
 (common-lisp:defun make-state-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'state-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input state-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input state-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input state-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-info common-lisp:nil
                       ((ebs-storage-info :initarg :ebs-storage-info :type
                         (common-lisp:or ebsstorage-info common-lisp:null)
                         :accessor %storage-info-ebs-storage-info :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'storage-info 'make-storage-info))
 (common-lisp:defun make-storage-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ebs-storage-info)
   (common-lisp:apply #'common-lisp:make-instance 'storage-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-storage-info))
      (common-lisp:list
       (common-lisp:cons "EbsStorageInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-info))
   common-lisp:nil))
(common-lisp:deftype storage-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %tls-enabled :initform common-lisp:nil)
                        (certificate-authority-arn-list :initarg
                         :certificate-authority-arn-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %tls-certificate-authority-arn-list
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tls 'make-tls))
 (common-lisp:defun make-tls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled certificate-authority-arn-list)
   (common-lisp:apply #'common-lisp:make-instance 'tls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn-list))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity-tls common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %vpc-connectivity-tls-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity-tls 'make-vpc-connectivity-tls))
 (common-lisp:defun make-vpc-connectivity-tls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connectivity-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connectivity-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connectivity-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader too-many-requests-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-invalid-parameter
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unauthenticated common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %unauthenticated-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'unauthenticated 'make-unauthenticated))
 (common-lisp:defun make-unauthenticated
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'unauthenticated
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unauthenticated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unauthenticated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unauthenticated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (kafka-error)
     ((invalid-parameter :initarg :invalid-parameter :initform common-lisp:nil
       :reader unauthorized-exception-invalid-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception
                    'unauthorized-exception-invalid-parameter
                    'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unprocessed-scram-secret common-lisp:nil
                       ((secret-arn :initarg :secret-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %unprocessed-scram-secret-secret-arn :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %unprocessed-scram-secret-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %unprocessed-scram-secret-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-scram-secret 'make-unprocessed-scram-secret))
 (common-lisp:defun make-unprocessed-scram-secret
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-arn error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-scram-secret
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-scram-secret))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-scram-secret))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-scram-secret))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-count-request common-lisp:nil
                       ((target-number-of-broker-nodes :initarg
                         :target-number-of-broker-nodes :type
                         (common-lisp:or |__integerMin1Max15| common-lisp:null)
                         :accessor
                         %update-broker-count-request-target-number-of-broker-nodes
                         :initform
                         (common-lisp:error
                          ":target-number-of-broker-nodes is required"))
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-count-request-current-version :initform
                         (common-lisp:error ":current-version is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-count-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-broker-count-request
                    'make-update-broker-count-request))
 (common-lisp:defun make-update-broker-count-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-number-of-broker-nodes
                     current-version cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-number-of-broker-nodes))
      (common-lisp:list
       (common-lisp:cons "TargetNumberOfBrokerNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-count-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-broker-count-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-count-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-broker-count-response
                    'make-update-broker-count-response))
 (common-lisp:defun make-update-broker-count-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-count-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-type-request common-lisp:nil
                       ((target-instance-type :initarg :target-instance-type
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-broker-type-request-target-instance-type
                         :initform
                         (common-lisp:error
                          ":target-instance-type is required"))
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-type-request-current-version :initform
                         (common-lisp:error ":current-version is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-type-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-broker-type-request
                    'make-update-broker-type-request))
 (common-lisp:defun make-update-broker-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-instance-type current-version
                     cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type))
      (common-lisp:list
       (common-lisp:cons "TargetInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-type-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-broker-type-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-type-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-broker-type-response
                    'make-update-broker-type-response))
 (common-lisp:defun make-update-broker-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-broker-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-storage-request common-lisp:nil
                       ((target-broker-ebsvolume-info :initarg
                         :target-broker-ebsvolume-info :type
                         (common-lisp:or |__listOfBrokerEBSVolumeInfo|
                                         common-lisp:null)
                         :accessor
                         %update-broker-storage-request-target-broker-ebsvolume-info
                         :initform
                         (common-lisp:error
                          ":target-broker-ebsvolume-info is required"))
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-storage-request-current-version
                         :initform
                         (common-lisp:error ":current-version is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-storage-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-broker-storage-request
                    'make-update-broker-storage-request))
 (common-lisp:defun make-update-broker-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-broker-ebsvolume-info
                     current-version cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-broker-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-broker-ebsvolume-info))
      (common-lisp:list
       (common-lisp:cons "TargetBrokerEBSVolumeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-broker-storage-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-broker-storage-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-broker-storage-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-broker-storage-response
                    'make-update-broker-storage-response))
 (common-lisp:defun make-update-broker-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-broker-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-broker-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-configuration-request common-lisp:nil
                       ((current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-cluster-configuration-request-current-version
                         :initform
                         (common-lisp:error ":current-version is required"))
                        (configuration-info :initarg :configuration-info :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         %update-cluster-configuration-request-configuration-info
                         :initform
                         (common-lisp:error ":configuration-info is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-cluster-configuration-request-cluster-arn
                         :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-configuration-request
                    'make-update-cluster-configuration-request))
 (common-lisp:defun make-update-cluster-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-version configuration-info
                     cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-configuration-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-cluster-configuration-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-cluster-configuration-response-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-configuration-response
                    'make-update-cluster-configuration-response))
 (common-lisp:defun make-update-cluster-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-kafka-version-request common-lisp:nil
                       ((target-kafka-version :initarg :target-kafka-version
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-cluster-kafka-version-request-target-kafka-version
                         :initform
                         (common-lisp:error
                          ":target-kafka-version is required"))
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-cluster-kafka-version-request-current-version
                         :initform
                         (common-lisp:error ":current-version is required"))
                        (configuration-info :initarg :configuration-info :type
                         (common-lisp:or configuration-info common-lisp:null)
                         :accessor
                         %update-cluster-kafka-version-request-configuration-info
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-cluster-kafka-version-request-cluster-arn
                         :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-kafka-version-request
                    'make-update-cluster-kafka-version-request))
 (common-lisp:defun make-update-cluster-kafka-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-kafka-version current-version
                     configuration-info cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-kafka-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-info))
      (common-lisp:list
       (common-lisp:cons "ConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-kafka-version))
      (common-lisp:list
       (common-lisp:cons "TargetKafkaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-kafka-version-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-cluster-kafka-version-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-cluster-kafka-version-response-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-kafka-version-response
                    'make-update-cluster-kafka-version-response))
 (common-lisp:defun make-update-cluster-kafka-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-kafka-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-kafka-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-monitoring-request common-lisp:nil
                       ((logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %update-monitoring-request-logging-info
                         :initform common-lisp:nil)
                        (open-monitoring :initarg :open-monitoring :type
                         (common-lisp:or open-monitoring-info common-lisp:null)
                         :accessor %update-monitoring-request-open-monitoring
                         :initform common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :type
                         (common-lisp:or enhanced-monitoring common-lisp:null)
                         :accessor
                         %update-monitoring-request-enhanced-monitoring
                         :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-monitoring-request-current-version :initform
                         (common-lisp:error ":current-version is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-monitoring-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-request
                    'make-update-monitoring-request))
 (common-lisp:defun make-update-monitoring-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging-info open-monitoring
                     enhanced-monitoring current-version cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-monitoring-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-monitoring))
      (common-lisp:list
       (common-lisp:cons "OpenMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-monitoring-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-monitoring-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-monitoring-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-response
                    'make-update-monitoring-response))
 (common-lisp:defun make-update-monitoring-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-monitoring-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-request common-lisp:nil
                       ((encryption-info :initarg :encryption-info :type
                         (common-lisp:or encryption-info common-lisp:null)
                         :accessor %update-security-request-encryption-info
                         :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-security-request-current-version :initform
                         (common-lisp:error ":current-version is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-security-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))
                        (client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or client-authentication
                                         common-lisp:null)
                         :accessor
                         %update-security-request-client-authentication
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-security-request 'make-update-security-request))
 (common-lisp:defun make-update-security-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-info current-version
                     cluster-arn client-authentication)
   (common-lisp:apply #'common-lisp:make-instance 'update-security-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-info))
      (common-lisp:list
       (common-lisp:cons "EncryptionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-security-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-security-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-security-response 'make-update-security-response))
 (common-lisp:defun make-update-security-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-security-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-storage-request common-lisp:nil
                       ((volume-size-gb :initarg :volume-size-gb :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-storage-request-volume-size-gb
                         :initform common-lisp:nil)
                        (storage-mode :initarg :storage-mode :type
                         (common-lisp:or storage-mode common-lisp:null)
                         :accessor %update-storage-request-storage-mode
                         :initform common-lisp:nil)
                        (provisioned-throughput :initarg
                         :provisioned-throughput :type
                         (common-lisp:or provisioned-throughput
                                         common-lisp:null)
                         :accessor
                         %update-storage-request-provisioned-throughput
                         :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-storage-request-current-version :initform
                         (common-lisp:error ":current-version is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-storage-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-storage-request 'make-update-storage-request))
 (common-lisp:defun make-update-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-size-gb storage-mode
                     provisioned-throughput current-version cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-mode))
      (common-lisp:list
       (common-lisp:cons "StorageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-storage-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-storage-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-storage-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-storage-response 'make-update-storage-response))
 (common-lisp:defun make-update-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-request common-lisp:nil
                       ((server-properties :initarg :server-properties :type
                         (common-lisp:or |__blob| common-lisp:null) :accessor
                         %update-configuration-request-server-properties
                         :initform
                         (common-lisp:error ":server-properties is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-configuration-request-description :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-configuration-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configuration-request
                    'make-update-configuration-request))
 (common-lisp:defun make-update-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-properties description arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-properties))
      (common-lisp:list
       (common-lisp:cons "ServerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-response common-lisp:nil
                       ((latest-revision :initarg :latest-revision :type
                         (common-lisp:or configuration-revision
                                         common-lisp:null)
                         :accessor
                         %update-configuration-response-latest-revision
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-configuration-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-configuration-response
                    'make-update-configuration-response))
 (common-lisp:defun make-update-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latest-revision arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-revision))
      (common-lisp:list
       (common-lisp:cons "LatestRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connectivity-request common-lisp:nil
                       ((current-version :initarg :current-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-connectivity-request-current-version :initform
                         (common-lisp:error ":current-version is required"))
                        (connectivity-info :initarg :connectivity-info :type
                         (common-lisp:or connectivity-info common-lisp:null)
                         :accessor
                         %update-connectivity-request-connectivity-info
                         :initform
                         (common-lisp:error ":connectivity-info is required"))
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-connectivity-request-cluster-arn :initform
                         (common-lisp:error ":cluster-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-connectivity-request
                    'make-update-connectivity-request))
 (common-lisp:defun make-update-connectivity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-version connectivity-info
                     cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-connectivity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-info))
      (common-lisp:list
       (common-lisp:cons "ConnectivityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connectivity-response common-lisp:nil
                       ((cluster-operation-arn :initarg :cluster-operation-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-connectivity-response-cluster-operation-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-connectivity-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connectivity-response
                    'make-update-connectivity-response))
 (common-lisp:defun make-update-connectivity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-operation-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-connectivity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-operation-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connectivity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-identity common-lisp:nil
                       ((principal-id :initarg :principal-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %user-identity-principal-id :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or user-identity-type common-lisp:null)
                         :accessor %user-identity-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defun make-user-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-id type)
   (common-lisp:apply #'common-lisp:make-instance 'user-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:deftype user-identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-connection-info common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor %vpc-connection-info-creation-time :initform
                         common-lisp:nil)
                        (user-identity :initarg :user-identity :type
                         (common-lisp:or user-identity common-lisp:null)
                         :accessor %vpc-connection-info-user-identity :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-connection-info-owner :initform common-lisp:nil)
                        (vpc-connection-arn :initarg :vpc-connection-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-connection-info-vpc-connection-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connection-info 'make-vpc-connection-info))
 (common-lisp:defun make-vpc-connection-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time user-identity owner
                     vpc-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connection-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identity))
      (common-lisp:list
       (common-lisp:cons "UserIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connection-info))
   common-lisp:nil))
(common-lisp:deftype vpc-connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-connectivity common-lisp:nil
                       ((client-authentication :initarg :client-authentication
                         :type
                         (common-lisp:or vpc-connectivity-client-authentication
                                         common-lisp:null)
                         :accessor %vpc-connectivity-client-authentication
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-connectivity 'make-vpc-connectivity))
 (common-lisp:defun make-vpc-connectivity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-authentication)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connectivity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connectivity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connectivity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication))
      (common-lisp:list
       (common-lisp:cons "ClientAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connectivity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass zookeeper-node-info common-lisp:nil
                       ((zookeeper-version :initarg :zookeeper-version :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %zookeeper-node-info-zookeeper-version :initform
                         common-lisp:nil)
                        (zookeeper-id :initarg :zookeeper-id :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %zookeeper-node-info-zookeeper-id :initform
                         common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %zookeeper-node-info-endpoints :initform
                         common-lisp:nil)
                        (client-vpc-ip-address :initarg :client-vpc-ip-address
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %zookeeper-node-info-client-vpc-ip-address
                         :initform common-lisp:nil)
                        (attached-eniid :initarg :attached-eniid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %zookeeper-node-info-attached-eniid :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'zookeeper-node-info 'make-zookeeper-node-info))
 (common-lisp:defun make-zookeeper-node-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zookeeper-version zookeeper-id endpoints
                     client-vpc-ip-address attached-eniid)
   (common-lisp:apply #'common-lisp:make-instance 'zookeeper-node-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input zookeeper-node-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input zookeeper-node-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-eniid))
      (common-lisp:list
       (common-lisp:cons "AttachedENIId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-vpc-ip-address))
      (common-lisp:list
       (common-lisp:cons "ClientVpcIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zookeeper-id))
      (common-lisp:list
       (common-lisp:cons "ZookeeperId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zookeeper-version))
      (common-lisp:list
       (common-lisp:cons "ZookeeperVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input zookeeper-node-info))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__blob| ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max16384| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfBrokerEBSVolumeInfo| ()
   '(trivial-types:proper-list broker-ebsvolume-info))
 (common-lisp:defun |make-__listofbrokerebsvolumeinfo|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list broker-ebsvolume-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterInfo| ()
   '(trivial-types:proper-list cluster-info))
 (common-lisp:defun |make-__listofclusterinfo|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCluster| ()
   '(trivial-types:proper-list cluster))
 (common-lisp:defun |make-__listofcluster|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterOperationInfo| ()
   '(trivial-types:proper-list cluster-operation-info))
 (common-lisp:defun |make-__listofclusteroperationinfo|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-operation-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClusterOperationStep| ()
   '(trivial-types:proper-list cluster-operation-step))
 (common-lisp:defun |make-__listofclusteroperationstep|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-operation-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCompatibleKafkaVersion| ()
   '(trivial-types:proper-list compatible-kafka-version))
 (common-lisp:defun |make-__listofcompatiblekafkaversion|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compatible-kafka-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcConfig| ()
   '(trivial-types:proper-list vpc-config))
 (common-lisp:defun |make-__listofvpcconfig|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfConfiguration| ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun |make-__listofconfiguration|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfConfigurationRevision| ()
   '(trivial-types:proper-list configuration-revision))
 (common-lisp:defun |make-__listofconfigurationrevision|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfKafkaVersion| ()
   '(trivial-types:proper-list kafka-version))
 (common-lisp:defun |make-__listofkafkaversion|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kafka-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfNodeInfo| ()
   '(trivial-types:proper-list node-info))
 (common-lisp:defun |make-__listofnodeinfo|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfClientVpcConnection| ()
   '(trivial-types:proper-list client-vpc-connection))
 (common-lisp:defun |make-__listofclientvpcconnection|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-vpc-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcConnection| ()
   '(trivial-types:proper-list vpc-connection))
 (common-lisp:defun |make-__listofvpcconnection|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfUnprocessedScramSecret| ()
   '(trivial-types:proper-list unprocessed-scram-secret))
 (common-lisp:defun |make-__listofunprocessedscramsecret|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-scram-secret))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__mapOf__string| () 'common-lisp:hash-table)
 (common-lisp:defun |make-__mapof__string|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max128| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max64| () 'common-lisp:string)
(common-lisp:deftype |__stringMin5Max32| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-associate-scram-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn secret-arn-list)
   (common-lisp:declare (common-lisp:ignorable cluster-arn secret-arn-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-scram-secret-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/scram-secrets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "BatchAssociateScramSecret"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-associate-scram-secret))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key broker-node-group-info
                     client-authentication cluster-name configuration-info
                     encryption-info enhanced-monitoring open-monitoring
                     kafka-version logging-info number-of-broker-nodes tags
                     storage-mode)
   (common-lisp:declare
    (common-lisp:ignorable broker-node-group-info client-authentication
     cluster-name configuration-info encryption-info enhanced-monitoring
     open-monitoring kafka-version logging-info number-of-broker-nodes tags
     storage-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/clusters"
                                                        "CreateCluster"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-cluster-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name tags provisioned serverless)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name tags provisioned serverless))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/api/v2/clusters"
                                                        "CreateClusterV2"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster-v2))
(common-lisp:progn
 (common-lisp:defun create-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description kafka-versions name
                     server-properties)
   (common-lisp:declare
    (common-lisp:ignorable description kafka-versions name server-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/configurations"
                                                        "CreateConfiguration"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configuration))
(common-lisp:progn
 (common-lisp:defun create-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-cluster-arn authentication vpc-id
                     client-subnets security-groups tags)
   (common-lisp:declare
    (common-lisp:ignorable target-cluster-arn authentication vpc-id
     client-subnets security-groups tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/vpc-connection"
                                                        "CreateVpcConnection"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-connection))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version)
   (common-lisp:declare (common-lisp:ignorable cluster-arn current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DeleteCluster"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-cluster-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DeleteClusterPolicy"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster-policy))
(common-lisp:progn
 (common-lisp:defun delete-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DeleteConfiguration"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configuration))
(common-lisp:progn
 (common-lisp:defun delete-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/vpc-connection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DeleteVpcConnection"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-connection))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DescribeCluster"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-cluster-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v2/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DescribeClusterV2"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cluster-v2))
(common-lisp:progn
 (common-lisp:defun describe-cluster-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-operation-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-operation-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/operations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-operation-arn))))
                                                        "DescribeClusterOperation"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cluster-operation))
(common-lisp:progn
 (common-lisp:defun describe-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DescribeConfiguration"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-configuration))
(common-lisp:progn
 (common-lisp:defun describe-configuration-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn revision)
   (common-lisp:declare (common-lisp:ignorable arn revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-revision-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A/revisions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'revision))))
                                                        "DescribeConfigurationRevision"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-configuration-revision))
(common-lisp:progn
 (common-lisp:defun describe-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/vpc-connection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DescribeVpcConnection"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-connection))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-scram-secret
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn secret-arn-list)
   (common-lisp:declare (common-lisp:ignorable cluster-arn secret-arn-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-scram-secret-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/scram-secrets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "BatchDisassociateScramSecret"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disassociate-scram-secret))
(common-lisp:progn
 (common-lisp:defun get-bootstrap-brokers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bootstrap-brokers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/bootstrap-brokers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "GetBootstrapBrokers"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bootstrap-brokers))
(common-lisp:progn
 (common-lisp:defun get-compatible-kafka-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-compatible-kafka-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/compatible-kafka-versions"
                                                        "GetCompatibleKafkaVersions"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-compatible-kafka-versions))
(common-lisp:progn
 (common-lisp:defun get-cluster-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cluster-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "GetClusterPolicy"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cluster-policy))
(common-lisp:progn
 (common-lisp:defun list-cluster-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cluster-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/operations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListClusterOperations"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cluster-operations))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name-filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/clusters"
                                                        "ListClusters"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-clusters-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name-filter cluster-type-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name-filter cluster-type-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v2/clusters"
                                                        "ListClustersV2"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters-v2))
(common-lisp:progn
 (common-lisp:defun list-configuration-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn max-results next-token)
   (common-lisp:declare (common-lisp:ignorable arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configuration-revisions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "ListConfigurationRevisions"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configuration-revisions))
(common-lisp:progn
 (common-lisp:defun list-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/configurations"
                                                        "ListConfigurations"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configurations))
(common-lisp:progn
 (common-lisp:defun list-kafka-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kafka-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/kafka-versions"
                                                        "ListKafkaVersions"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-kafka-versions))
(common-lisp:progn
 (common-lisp:defun list-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListNodes"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-nodes))
(common-lisp:progn
 (common-lisp:defun list-scram-secrets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scram-secrets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/scram-secrets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListScramSecrets"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scram-secrets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-client-vpc-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-client-vpc-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/client-vpc-connections"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "ListClientVpcConnections"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-client-vpc-connections))
(common-lisp:progn
 (common-lisp:defun list-vpc-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/vpc-connections"
                                                        "ListVpcConnections"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-connections))
(common-lisp:progn
 (common-lisp:defun reject-client-vpc-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn vpc-connection-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn vpc-connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-client-vpc-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/client-vpc-connection"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "RejectClientVpcConnection"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-client-vpc-connection))
(common-lisp:progn
 (common-lisp:defun put-cluster-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version policy)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-cluster-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "PutClusterPolicy"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-cluster-policy))
(common-lisp:progn
 (common-lisp:defun reboot-broker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key broker-ids cluster-arn)
   (common-lisp:declare (common-lisp:ignorable broker-ids cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-broker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/reboot-broker"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "RebootBroker"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-broker))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-broker-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     target-number-of-broker-nodes)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version
     target-number-of-broker-nodes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-broker-count-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes/count"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateBrokerCount"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-broker-count))
(common-lisp:progn
 (common-lisp:defun update-broker-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     target-instance-type)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version target-instance-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-broker-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes/type"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateBrokerType"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-broker-type))
(common-lisp:progn
 (common-lisp:defun update-broker-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     target-broker-ebsvolume-info)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version
     target-broker-ebsvolume-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-broker-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/nodes/storage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateBrokerStorage"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-broker-storage))
(common-lisp:progn
 (common-lisp:defun update-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn description server-properties)
   (common-lisp:declare
    (common-lisp:ignorable arn description server-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "UpdateConfiguration"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configuration))
(common-lisp:progn
 (common-lisp:defun update-connectivity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn connectivity-info
                     current-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn connectivity-info current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connectivity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/connectivity"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateConnectivity"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connectivity))
(common-lisp:progn
 (common-lisp:defun update-cluster-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn configuration-info
                     current-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn configuration-info current-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cluster-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateClusterConfiguration"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-configuration))
(common-lisp:progn
 (common-lisp:defun update-cluster-kafka-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn configuration-info
                     current-version target-kafka-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn configuration-info current-version
     target-kafka-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cluster-kafka-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateClusterKafkaVersion"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-kafka-version))
(common-lisp:progn
 (common-lisp:defun update-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     enhanced-monitoring open-monitoring logging-info)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version enhanced-monitoring
     open-monitoring logging-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-monitoring-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/monitoring"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateMonitoring"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-monitoring))
(common-lisp:progn
 (common-lisp:defun update-security
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-authentication cluster-arn
                     current-version encryption-info)
   (common-lisp:declare
    (common-lisp:ignorable client-authentication cluster-arn current-version
     encryption-info))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-security-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/security"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateSecurity"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-security))
(common-lisp:progn
 (common-lisp:defun update-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn current-version
                     provisioned-throughput storage-mode volume-size-gb)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn current-version provisioned-throughput
     storage-mode volume-size-gb))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kafka-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/clusters/~A/storage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateStorage"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-storage))
