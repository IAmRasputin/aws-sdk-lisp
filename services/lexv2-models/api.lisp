;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lexv2-models/api
  (:use)
  (:nicknames #:aws/lexv2-models)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lexv2-models/api)
(common-lisp:progn
 (common-lisp:defclass lexv2-models-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lexv2-models" :protocol
                        :rest-json))
 (common-lisp:export 'lexv2-models-request))
(common-lisp:progn
 (common-lisp:define-condition lexv2-models-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lexv2-models-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("PreconditionFailedException" . precondition-failed-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass advanced-recognition-setting common-lisp:nil
                       ((audio-recognition-strategy :initarg
                         :|audioRecognitionStrategy| :type
                         (common-lisp:or audio-recognition-strategy
                                         common-lisp:null)
                         :accessor
                         %advanced-recognition-setting-audio-recognition-strategy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-recognition-setting
                    'make-advanced-recognition-setting))
 (common-lisp:defun make-advanced-recognition-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audio-recognition-strategy)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-recognition-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-recognition-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-recognition-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-recognition-strategy))
      (common-lisp:list
       (common-lisp:cons "audioRecognitionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-recognition-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-utterances-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or aggregated-utterances-filter-operator
                                         common-lisp:null)
                         :accessor %aggregated-utterances-filter-operator
                         :initform (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %aggregated-utterances-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or aggregated-utterances-filter-name
                                         common-lisp:null)
                         :accessor %aggregated-utterances-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'aggregated-utterances-filter
                    'make-aggregated-utterances-filter))
 (common-lisp:defun make-aggregated-utterances-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-utterances-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-filter))
   common-lisp:nil))
(common-lisp:deftype aggregated-utterances-filter-name () 'common-lisp:string)
(common-lisp:deftype aggregated-utterances-filter-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregated-utterances-filters ()
   '(trivial-types:proper-list aggregated-utterances-filter))
 (common-lisp:defun |make-aggregated-utterances-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-utterances-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregated-utterances-sort-attribute ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregated-utterances-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %aggregated-utterances-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or aggregated-utterances-sort-attribute
                                         common-lisp:null)
                         :accessor %aggregated-utterances-sort-by-attribute
                         :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export
  (common-lisp:list 'aggregated-utterances-sort-by
                    'make-aggregated-utterances-sort-by))
 (common-lisp:defun make-aggregated-utterances-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregated-utterances-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-utterances-summary common-lisp:nil
                       ((contains-data-from-deleted-resources :initarg
                         :|containsDataFromDeletedResources| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %aggregated-utterances-summary-contains-data-from-deleted-resources
                         :initform common-lisp:nil)
                        (utterance-last-recorded-in-aggregation-duration
                         :initarg :|utteranceLastRecordedInAggregationDuration|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %aggregated-utterances-summary-utterance-last-recorded-in-aggregation-duration
                         :initform common-lisp:nil)
                        (utterance-first-recorded-in-aggregation-duration
                         :initarg
                         :|utteranceFirstRecordedInAggregationDuration| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %aggregated-utterances-summary-utterance-first-recorded-in-aggregation-duration
                         :initform common-lisp:nil)
                        (missed-count :initarg :|missedCount| :type
                         (common-lisp:or missed-count common-lisp:null)
                         :accessor %aggregated-utterances-summary-missed-count
                         :initform common-lisp:nil)
                        (hit-count :initarg :|hitCount| :type
                         (common-lisp:or hit-count common-lisp:null) :accessor
                         %aggregated-utterances-summary-hit-count :initform
                         common-lisp:nil)
                        (utterance :initarg :|utterance| :type
                         (common-lisp:or utterance common-lisp:null) :accessor
                         %aggregated-utterances-summary-utterance :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aggregated-utterances-summary
                    'make-aggregated-utterances-summary))
 (common-lisp:defun make-aggregated-utterances-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contains-data-from-deleted-resources
                     utterance-last-recorded-in-aggregation-duration
                     utterance-first-recorded-in-aggregation-duration
                     missed-count hit-count utterance)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregated-utterances-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance))
      (common-lisp:list
       (common-lisp:cons "utterance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit-count))
      (common-lisp:list
       (common-lisp:cons "hitCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missed-count))
      (common-lisp:list
       (common-lisp:cons "missedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-first-recorded-in-aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "utteranceFirstRecordedInAggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-last-recorded-in-aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "utteranceLastRecordedInAggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contains-data-from-deleted-resources))
      (common-lisp:list
       (common-lisp:cons "containsDataFromDeletedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregated-utterances-summary-list ()
   '(trivial-types:proper-list aggregated-utterances-summary))
 (common-lisp:defun |make-aggregated-utterances-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-utterances-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass allowed-input-types common-lisp:nil
                       ((allow-dtmfinput :initarg :|allowDTMFInput| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %allowed-input-types-allow-dtmfinput
                         :initform
                         (common-lisp:error ":allowdtmfinput is required"))
                        (allow-audio-input :initarg :|allowAudioInput| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %allowed-input-types-allow-audio-input
                         :initform
                         (common-lisp:error ":allowaudioinput is required"))))
 (common-lisp:export
  (common-lisp:list 'allowed-input-types 'make-allowed-input-types))
 (common-lisp:defun make-allowed-input-types
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-dtmfinput allow-audio-input)
   (common-lisp:apply #'common-lisp:make-instance 'allowed-input-types
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allowed-input-types))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allowed-input-types))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-audio-input))
      (common-lisp:list
       (common-lisp:cons "allowAudioInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-dtmfinput))
      (common-lisp:list
       (common-lisp:cons "allowDTMFInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allowed-input-types))
   common-lisp:nil))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associated-transcript common-lisp:nil
                       ((transcript :initarg :|transcript| :type
                         (common-lisp:or transcript common-lisp:null) :accessor
                         %associated-transcript-transcript :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associated-transcript 'make-associated-transcript))
 (common-lisp:defun make-associated-transcript
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transcript)
   (common-lisp:apply #'common-lisp:make-instance 'associated-transcript
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associated-transcript-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %associated-transcript-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or associated-transcript-filter-name
                                         common-lisp:null)
                         :accessor %associated-transcript-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'associated-transcript-filter
                    'make-associated-transcript-filter))
 (common-lisp:defun make-associated-transcript-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'associated-transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript-filter))
   common-lisp:nil))
(common-lisp:deftype associated-transcript-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype associated-transcript-filters ()
   '(trivial-types:proper-list associated-transcript-filter))
 (common-lisp:defun |make-associated-transcript-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            associated-transcript-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype associated-transcript-list ()
   '(trivial-types:proper-list associated-transcript))
 (common-lisp:defun |make-associated-transcript-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-transcript))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachment-title () 'common-lisp:string)
(common-lisp:deftype attachment-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-and-dtmfinput-specification common-lisp:nil
                       ((dtmf-specification :initarg :|dtmfSpecification| :type
                         (common-lisp:or dtmfspecification common-lisp:null)
                         :accessor
                         %audio-and-dtmfinput-specification-dtmf-specification
                         :initform common-lisp:nil)
                        (audio-specification :initarg :|audioSpecification|
                         :type
                         (common-lisp:or audio-specification common-lisp:null)
                         :accessor
                         %audio-and-dtmfinput-specification-audio-specification
                         :initform common-lisp:nil)
                        (start-timeout-ms :initarg :|startTimeoutMs| :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor
                         %audio-and-dtmfinput-specification-start-timeout-ms
                         :initform
                         (common-lisp:error ":starttimeoutms is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-and-dtmfinput-specification
                    'make-audio-and-dtmfinput-specification))
 (common-lisp:defun make-audio-and-dtmfinput-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dtmf-specification audio-specification
                     start-timeout-ms)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-and-dtmfinput-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-and-dtmfinput-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-and-dtmfinput-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "startTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-specification))
      (common-lisp:list
       (common-lisp:cons "audioSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dtmf-specification))
      (common-lisp:list
       (common-lisp:cons "dtmfSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-and-dtmfinput-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-log-destination common-lisp:nil
                       ((s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket-log-destination
                                         common-lisp:null)
                         :accessor %audio-log-destination-s3bucket :initform
                         (common-lisp:error ":s3bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-log-destination 'make-audio-log-destination))
 (common-lisp:defun make-audio-log-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'audio-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-log-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-log-setting common-lisp:nil
                       ((destination :initarg :|destination| :type
                         (common-lisp:or audio-log-destination
                                         common-lisp:null)
                         :accessor %audio-log-setting-destination :initform
                         (common-lisp:error ":destination is required"))
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %audio-log-setting-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-log-setting 'make-audio-log-setting))
 (common-lisp:defun make-audio-log-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination enabled)
   (common-lisp:apply #'common-lisp:make-instance 'audio-log-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-log-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-log-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-log-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audio-log-settings-list ()
   '(trivial-types:proper-list audio-log-setting))
 (common-lisp:defun |make-audio-log-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-log-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-recognition-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-specification common-lisp:nil
                       ((end-timeout-ms :initarg :|endTimeoutMs| :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor %audio-specification-end-timeout-ms
                         :initform
                         (common-lisp:error ":endtimeoutms is required"))
                        (max-length-ms :initarg :|maxLengthMs| :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor %audio-specification-max-length-ms :initform
                         (common-lisp:error ":maxlengthms is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-specification 'make-audio-specification))
 (common-lisp:defun make-audio-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-timeout-ms max-length-ms)
   (common-lisp:apply #'common-lisp:make-instance 'audio-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length-ms))
      (common-lisp:list
       (common-lisp:cons "maxLengthMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "endTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-custom-vocabulary-item-request
                       common-lisp:nil
                       ((custom-vocabulary-item-list :initarg
                         :|customVocabularyItemList| :type
                         (common-lisp:or create-custom-vocabulary-items-list
                                         common-lisp:null)
                         :accessor
                         %batch-create-custom-vocabulary-item-request-custom-vocabulary-item-list
                         :initform
                         (common-lisp:error
                          ":customvocabularyitemlist is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %batch-create-custom-vocabulary-item-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %batch-create-custom-vocabulary-item-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-create-custom-vocabulary-item-request-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-create-custom-vocabulary-item-request
                    'make-batch-create-custom-vocabulary-item-request))
 (common-lisp:defun make-batch-create-custom-vocabulary-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-vocabulary-item-list locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-custom-vocabulary-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-item-list))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-custom-vocabulary-item-response
                       common-lisp:nil
                       ((resources :initarg :|resources| :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %batch-create-custom-vocabulary-item-response-resources
                         :initform common-lisp:nil)
                        (errors :initarg :|errors| :type
                         (common-lisp:or failed-custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %batch-create-custom-vocabulary-item-response-errors
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %batch-create-custom-vocabulary-item-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %batch-create-custom-vocabulary-item-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-create-custom-vocabulary-item-response-bot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-create-custom-vocabulary-item-response
                    'make-batch-create-custom-vocabulary-item-response))
 (common-lisp:defun make-batch-create-custom-vocabulary-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources errors locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-custom-vocabulary-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-custom-vocabulary-item-request
                       common-lisp:nil
                       ((custom-vocabulary-item-list :initarg
                         :|customVocabularyItemList| :type
                         (common-lisp:or delete-custom-vocabulary-items-list
                                         common-lisp:null)
                         :accessor
                         %batch-delete-custom-vocabulary-item-request-custom-vocabulary-item-list
                         :initform
                         (common-lisp:error
                          ":customvocabularyitemlist is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %batch-delete-custom-vocabulary-item-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %batch-delete-custom-vocabulary-item-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-delete-custom-vocabulary-item-request-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-custom-vocabulary-item-request
                    'make-batch-delete-custom-vocabulary-item-request))
 (common-lisp:defun make-batch-delete-custom-vocabulary-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-vocabulary-item-list locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-custom-vocabulary-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-item-list))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-custom-vocabulary-item-response
                       common-lisp:nil
                       ((resources :initarg :|resources| :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %batch-delete-custom-vocabulary-item-response-resources
                         :initform common-lisp:nil)
                        (errors :initarg :|errors| :type
                         (common-lisp:or failed-custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %batch-delete-custom-vocabulary-item-response-errors
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %batch-delete-custom-vocabulary-item-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %batch-delete-custom-vocabulary-item-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-delete-custom-vocabulary-item-response-bot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-custom-vocabulary-item-response
                    'make-batch-delete-custom-vocabulary-item-response))
 (common-lisp:defun make-batch-delete-custom-vocabulary-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources errors locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-custom-vocabulary-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-custom-vocabulary-item-request
                       common-lisp:nil
                       ((custom-vocabulary-item-list :initarg
                         :|customVocabularyItemList| :type
                         (common-lisp:or update-custom-vocabulary-items-list
                                         common-lisp:null)
                         :accessor
                         %batch-update-custom-vocabulary-item-request-custom-vocabulary-item-list
                         :initform
                         (common-lisp:error
                          ":customvocabularyitemlist is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %batch-update-custom-vocabulary-item-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %batch-update-custom-vocabulary-item-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-update-custom-vocabulary-item-request-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-custom-vocabulary-item-request
                    'make-batch-update-custom-vocabulary-item-request))
 (common-lisp:defun make-batch-update-custom-vocabulary-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-vocabulary-item-list locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-custom-vocabulary-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-item-list))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-custom-vocabulary-item-response
                       common-lisp:nil
                       ((resources :initarg :|resources| :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %batch-update-custom-vocabulary-item-response-resources
                         :initform common-lisp:nil)
                        (errors :initarg :|errors| :type
                         (common-lisp:or failed-custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %batch-update-custom-vocabulary-item-response-errors
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %batch-update-custom-vocabulary-item-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %batch-update-custom-vocabulary-item-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-update-custom-vocabulary-item-response-bot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-update-custom-vocabulary-item-response
                    'make-batch-update-custom-vocabulary-item-response))
 (common-lisp:defun make-batch-update-custom-vocabulary-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources errors locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-custom-vocabulary-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bot-alias-history-event common-lisp:nil
                       ((end-date :initarg :|endDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-alias-history-event-end-date :initform
                         common-lisp:nil)
                        (start-date :initarg :|startDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-alias-history-event-start-date :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %bot-alias-history-event-bot-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-alias-history-event 'make-bot-alias-history-event))
 (common-lisp:defun make-bot-alias-history-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-date start-date bot-version)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-history-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-history-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-history-events-list ()
   '(trivial-types:proper-list bot-alias-history-event))
 (common-lisp:defun |make-bot-alias-history-events-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-alias-history-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-alias-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-alias-locale-settings common-lisp:nil
                       ((code-hook-specification :initarg
                         :|codeHookSpecification| :type
                         (common-lisp:or code-hook-specification
                                         common-lisp:null)
                         :accessor
                         %bot-alias-locale-settings-code-hook-specification
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %bot-alias-locale-settings-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-alias-locale-settings
                    'make-bot-alias-locale-settings))
 (common-lisp:defun make-bot-alias-locale-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-hook-specification enabled)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-locale-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-locale-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-locale-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-hook-specification))
      (common-lisp:list
       (common-lisp:cons "codeHookSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-locale-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-locale-settings-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-bot-alias-locale-settings-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype bot-alias-name () 'common-lisp:string)
(common-lisp:deftype bot-alias-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-alias-summary common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %bot-alias-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-alias-summary-creation-date-time :initform
                         common-lisp:nil)
                        (bot-alias-status :initarg :|botAliasStatus| :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor %bot-alias-summary-bot-alias-status
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %bot-alias-summary-bot-version :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-alias-summary-description :initform
                         common-lisp:nil)
                        (bot-alias-name :initarg :|botAliasName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %bot-alias-summary-bot-alias-name :initform
                         common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %bot-alias-summary-bot-alias-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-alias-summary 'make-bot-alias-summary))
 (common-lisp:defun make-bot-alias-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     bot-alias-status bot-version description bot-alias-name
                     bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-alias-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-alias-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-alias-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-summary-list ()
   '(trivial-types:proper-list bot-alias-summary))
 (common-lisp:defun |make-bot-alias-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-alias-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-export-specification common-lisp:nil
                       ((bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %bot-export-specification-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %bot-export-specification-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-export-specification 'make-bot-export-specification))
 (common-lisp:defun make-bot-export-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'bot-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or bot-filter-operator common-lisp:null)
                         :accessor %bot-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %bot-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or bot-filter-name common-lisp:null)
                         :accessor %bot-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'bot-filter 'make-bot-filter))
 (common-lisp:defun make-bot-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-filter))
   common-lisp:nil))
(common-lisp:deftype bot-filter-name () 'common-lisp:string)
(common-lisp:deftype bot-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-filters () '(trivial-types:proper-list bot-filter))
 (common-lisp:defun |make-bot-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-import-specification common-lisp:nil
                       ((test-bot-alias-tags :initarg :|testBotAliasTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %bot-import-specification-test-bot-alias-tags
                         :initform common-lisp:nil)
                        (bot-tags :initarg :|botTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %bot-import-specification-bot-tags :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %bot-import-specification-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %bot-import-specification-data-privacy
                         :initform
                         (common-lisp:error ":dataprivacy is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %bot-import-specification-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %bot-import-specification-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-import-specification 'make-bot-import-specification))
 (common-lisp:defun make-bot-import-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key test-bot-alias-tags bot-tags
                     idle-session-ttlin-seconds data-privacy role-arn bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-import-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-import-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-import-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-tags))
      (common-lisp:list
       (common-lisp:cons "botTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-bot-alias-tags))
      (common-lisp:list
       (common-lisp:cons "testBotAliasTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-import-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-locale-export-specification common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %bot-locale-export-specification-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %bot-locale-export-specification-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %bot-locale-export-specification-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-locale-export-specification
                    'make-bot-locale-export-specification))
 (common-lisp:defun make-bot-locale-export-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-locale-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-locale-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or bot-locale-filter-operator
                                         common-lisp:null)
                         :accessor %bot-locale-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %bot-locale-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or bot-locale-filter-name
                                         common-lisp:null)
                         :accessor %bot-locale-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-locale-filter 'make-bot-locale-filter))
 (common-lisp:defun make-bot-locale-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-locale-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-locale-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-locale-filter))
   common-lisp:nil))
(common-lisp:deftype bot-locale-filter-name () 'common-lisp:string)
(common-lisp:deftype bot-locale-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-locale-filters ()
   '(trivial-types:proper-list bot-locale-filter))
 (common-lisp:defun |make-bot-locale-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-locale-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-locale-history-event common-lisp:nil
                       ((event-date :initarg :|eventDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-locale-history-event-event-date :initform
                         (common-lisp:error ":eventdate is required"))
                        (event :initarg :|event| :type
                         (common-lisp:or bot-locale-history-event-description
                                         common-lisp:null)
                         :accessor %bot-locale-history-event-event :initform
                         (common-lisp:error ":event is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-locale-history-event 'make-bot-locale-history-event))
 (common-lisp:defun make-bot-locale-history-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-date event)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-history-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-date))
      (common-lisp:list
       (common-lisp:cons "eventDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-history-event))
   common-lisp:nil))
(common-lisp:deftype bot-locale-history-event-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-locale-history-events-list ()
   '(trivial-types:proper-list bot-locale-history-event))
 (common-lisp:defun |make-bot-locale-history-events-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bot-locale-history-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-locale-import-specification common-lisp:nil
                       ((voice-settings :initarg :|voiceSettings| :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         %bot-locale-import-specification-voice-settings
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %bot-locale-import-specification-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %bot-locale-import-specification-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %bot-locale-import-specification-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %bot-locale-import-specification-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-locale-import-specification
                    'make-bot-locale-import-specification))
 (common-lisp:defun make-bot-locale-import-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key voice-settings
                     nlu-intent-confidence-threshold locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-locale-import-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-import-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-import-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-import-specification))
   common-lisp:nil))
(common-lisp:deftype bot-locale-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-locale-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %bot-locale-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or bot-locale-sort-attribute
                                         common-lisp:null)
                         :accessor %bot-locale-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-locale-sort-by 'make-bot-locale-sort-by))
 (common-lisp:defun make-bot-locale-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-locale-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-locale-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-locale-sort-by))
   common-lisp:nil))
(common-lisp:deftype bot-locale-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-locale-summary common-lisp:nil
                       ((last-build-submitted-date-time :initarg
                         :|lastBuildSubmittedDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-locale-summary-last-build-submitted-date-time
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %bot-locale-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (bot-locale-status :initarg :|botLocaleStatus| :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor %bot-locale-summary-bot-locale-status
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-locale-summary-description :initform
                         common-lisp:nil)
                        (locale-name :initarg :|localeName| :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor %bot-locale-summary-locale-name :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %bot-locale-summary-locale-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-locale-summary 'make-bot-locale-summary))
 (common-lisp:defun make-bot-locale-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-build-submitted-date-time
                     last-updated-date-time bot-locale-status description
                     locale-name locale-id)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-locale-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-locale-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-build-submitted-date-time))
      (common-lisp:list
       (common-lisp:cons "lastBuildSubmittedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-locale-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-locale-summary-list ()
   '(trivial-types:proper-list bot-locale-summary))
 (common-lisp:defun |make-bot-locale-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-locale-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-member common-lisp:nil
                       ((bot-member-version :initarg :|botMemberVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %bot-member-bot-member-version :initform
                         (common-lisp:error ":botmemberversion is required"))
                        (bot-member-alias-name :initarg :|botMemberAliasName|
                         :type (common-lisp:or bot-alias-name common-lisp:null)
                         :accessor %bot-member-bot-member-alias-name :initform
                         (common-lisp:error ":botmemberaliasname is required"))
                        (bot-member-alias-id :initarg :|botMemberAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %bot-member-bot-member-alias-id :initform
                         (common-lisp:error ":botmemberaliasid is required"))
                        (bot-member-name :initarg :|botMemberName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %bot-member-bot-member-name :initform
                         (common-lisp:error ":botmembername is required"))
                        (bot-member-id :initarg :|botMemberId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %bot-member-bot-member-id :initform
                         (common-lisp:error ":botmemberid is required"))))
 (common-lisp:export (common-lisp:list 'bot-member 'make-bot-member))
 (common-lisp:defun make-bot-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-member-version bot-member-alias-name
                     bot-member-alias-id bot-member-name bot-member-id)
   (common-lisp:apply #'common-lisp:make-instance 'bot-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-id))
      (common-lisp:list
       (common-lisp:cons "botMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-name))
      (common-lisp:list
       (common-lisp:cons "botMemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-alias-id))
      (common-lisp:list
       (common-lisp:cons "botMemberAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-member-alias-name))
      (common-lisp:list
       (common-lisp:cons "botMemberAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-version))
      (common-lisp:list
       (common-lisp:cons "botMemberVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-members () '(trivial-types:proper-list bot-member))
 (common-lisp:defun |make-bot-members|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-recommendation-result-statistics common-lisp:nil
                       ((slot-types :initarg :|slotTypes| :type
                         (common-lisp:or slot-type-statistics common-lisp:null)
                         :accessor
                         %bot-recommendation-result-statistics-slot-types
                         :initform common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-statistics common-lisp:null)
                         :accessor
                         %bot-recommendation-result-statistics-intents
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-recommendation-result-statistics
                    'make-bot-recommendation-result-statistics))
 (common-lisp:defun make-bot-recommendation-result-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-types intents)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-recommendation-result-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-result-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-result-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types))
      (common-lisp:list
       (common-lisp:cons "slotTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-result-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-recommendation-results common-lisp:nil
                       ((statistics :initarg :|statistics| :type
                         (common-lisp:or bot-recommendation-result-statistics
                                         common-lisp:null)
                         :accessor %bot-recommendation-results-statistics
                         :initform common-lisp:nil)
                        (associated-transcripts-url :initarg
                         :|associatedTranscriptsUrl| :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         %bot-recommendation-results-associated-transcripts-url
                         :initform common-lisp:nil)
                        (bot-locale-export-url :initarg :|botLocaleExportUrl|
                         :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         %bot-recommendation-results-bot-locale-export-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-recommendation-results
                    'make-bot-recommendation-results))
 (common-lisp:defun make-bot-recommendation-results
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key statistics associated-transcripts-url
                     bot-locale-export-url)
   (common-lisp:apply #'common-lisp:make-instance 'bot-recommendation-results
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-export-url))
      (common-lisp:list
       (common-lisp:cons "botLocaleExportUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-transcripts-url))
      (common-lisp:list
       (common-lisp:cons "associatedTranscriptsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-results))
   common-lisp:nil))
(common-lisp:deftype bot-recommendation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-recommendation-summary common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %bot-recommendation-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-recommendation-summary-creation-date-time
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %bot-recommendation-summary-bot-recommendation-id
                         :initform
                         (common-lisp:error
                          ":botrecommendationid is required"))
                        (bot-recommendation-status :initarg
                         :|botRecommendationStatus| :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         %bot-recommendation-summary-bot-recommendation-status
                         :initform
                         (common-lisp:error
                          ":botrecommendationstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-recommendation-summary
                    'make-bot-recommendation-summary))
 (common-lisp:defun make-bot-recommendation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     bot-recommendation-id bot-recommendation-status)
   (common-lisp:apply #'common-lisp:make-instance 'bot-recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-recommendation-summary-list ()
   '(trivial-types:proper-list bot-recommendation-summary))
 (common-lisp:defun |make-bot-recommendation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bot-recommendation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %bot-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or bot-sort-attribute common-lisp:null)
                         :accessor %bot-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export (common-lisp:list 'bot-sort-by 'make-bot-sort-by))
 (common-lisp:defun make-bot-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'bot-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-sort-by))
   common-lisp:nil))
(common-lisp:deftype bot-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-summary common-lisp:nil
                       ((bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %bot-summary-bot-type :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %bot-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (latest-bot-version :initarg :|latestBotVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %bot-summary-latest-bot-version :initform
                         common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %bot-summary-bot-status :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-summary-description :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %bot-summary-bot-name :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %bot-summary-bot-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bot-summary 'make-bot-summary))
 (common-lisp:defun make-bot-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-type last-updated-date-time
                     latest-bot-version bot-status description bot-name bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'bot-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-bot-version))
      (common-lisp:list
       (common-lisp:cons "latestBotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-summary-list ()
   '(trivial-types:proper-list bot-summary))
 (common-lisp:defun |make-bot-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-type () 'common-lisp:string)
(common-lisp:deftype bot-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-version-locale-details common-lisp:nil
                       ((source-bot-version :initarg :|sourceBotVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %bot-version-locale-details-source-bot-version
                         :initform
                         (common-lisp:error ":sourcebotversion is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-version-locale-details
                    'make-bot-version-locale-details))
 (common-lisp:defun make-bot-version-locale-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-bot-version)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-locale-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-locale-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-locale-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bot-version))
      (common-lisp:list
       (common-lisp:cons "sourceBotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-locale-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-version-locale-specification ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-bot-version-locale-specification|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype bot-version-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-version-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %bot-version-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or bot-version-sort-attribute
                                         common-lisp:null)
                         :accessor %bot-version-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export
  (common-lisp:list 'bot-version-sort-by 'make-bot-version-sort-by))
 (common-lisp:defun make-bot-version-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-version-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-version-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-version-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-version-summary common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-version-summary-creation-date-time :initform
                         common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %bot-version-summary-bot-status :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-version-summary-description :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %bot-version-summary-bot-version :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %bot-version-summary-bot-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-version-summary 'make-bot-version-summary))
 (common-lisp:defun make-bot-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time bot-status description
                     bot-version bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-version-summary-list ()
   '(trivial-types:proper-list bot-version-summary))
 (common-lisp:defun |make-bot-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass build-bot-locale-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %build-bot-locale-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %build-bot-locale-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %build-bot-locale-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'build-bot-locale-request 'make-build-bot-locale-request))
 (common-lisp:defun make-build-bot-locale-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'build-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass build-bot-locale-response common-lisp:nil
                       ((last-build-submitted-date-time :initarg
                         :|lastBuildSubmittedDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %build-bot-locale-response-last-build-submitted-date-time
                         :initform common-lisp:nil)
                        (bot-locale-status :initarg :|botLocaleStatus| :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor %build-bot-locale-response-bot-locale-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %build-bot-locale-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %build-bot-locale-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %build-bot-locale-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'build-bot-locale-response
                    'make-build-bot-locale-response))
 (common-lisp:defun make-build-bot-locale-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-build-submitted-date-time
                     bot-locale-status locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'build-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-build-submitted-date-time))
      (common-lisp:list
       (common-lisp:cons "lastBuildSubmittedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-response))
   common-lisp:nil))
(common-lisp:deftype built-in-intent-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass built-in-intent-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %built-in-intent-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or built-in-intent-sort-attribute
                                         common-lisp:null)
                         :accessor %built-in-intent-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export
  (common-lisp:list 'built-in-intent-sort-by 'make-built-in-intent-sort-by))
 (common-lisp:defun make-built-in-intent-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-intent-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass built-in-intent-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %built-in-intent-summary-description
                         :initform common-lisp:nil)
                        (intent-signature :initarg :|intentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor %built-in-intent-summary-intent-signature
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'built-in-intent-summary 'make-built-in-intent-summary))
 (common-lisp:defun make-built-in-intent-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description intent-signature)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-signature))
      (common-lisp:list
       (common-lisp:cons "intentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype built-in-intent-summary-list ()
   '(trivial-types:proper-list built-in-intent-summary))
 (common-lisp:defun |make-built-in-intent-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list built-in-intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype built-in-or-custom-slot-type-id () 'common-lisp:string)
(common-lisp:deftype built-in-slot-type-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass built-in-slot-type-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %built-in-slot-type-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or built-in-slot-type-sort-attribute
                                         common-lisp:null)
                         :accessor %built-in-slot-type-sort-by-attribute
                         :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export
  (common-lisp:list 'built-in-slot-type-sort-by
                    'make-built-in-slot-type-sort-by))
 (common-lisp:defun make-built-in-slot-type-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-slot-type-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass built-in-slot-type-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %built-in-slot-type-summary-description
                         :initform common-lisp:nil)
                        (slot-type-signature :initarg :|slotTypeSignature|
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %built-in-slot-type-summary-slot-type-signature
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'built-in-slot-type-summary
                    'make-built-in-slot-type-summary))
 (common-lisp:defun make-built-in-slot-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description slot-type-signature)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-slot-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "slotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype built-in-slot-type-summary-list ()
   '(trivial-types:proper-list built-in-slot-type-summary))
 (common-lisp:defun |make-built-in-slot-type-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            built-in-slot-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype built-ins-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass button common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or button-value common-lisp:null)
                         :accessor %button-value :initform
                         (common-lisp:error ":value is required"))
                        (text :initarg :|text| :type
                         (common-lisp:or button-text common-lisp:null)
                         :accessor %button-text :initform
                         (common-lisp:error ":text is required"))))
 (common-lisp:export (common-lisp:list 'button 'make-button))
 (common-lisp:defun make-button
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value text)
   (common-lisp:apply #'common-lisp:make-instance 'button
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input button))
   common-lisp:nil))
(common-lisp:deftype button-text () 'common-lisp:string)
(common-lisp:deftype button-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buttons-list () '(trivial-types:proper-list button))
 (common-lisp:defun |make-buttons-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list button))
   aws-sdk/generator/shape::members))
(common-lisp:deftype child-directed () 'common-lisp:boolean)
(common-lisp:deftype cloud-watch-log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-log-group-log-destination common-lisp:nil
                       ((log-prefix :initarg :|logPrefix| :type
                         (common-lisp:or log-prefix common-lisp:null) :accessor
                         %cloud-watch-log-group-log-destination-log-prefix
                         :initform
                         (common-lisp:error ":logprefix is required"))
                        (cloud-watch-log-group-arn :initarg
                         :|cloudWatchLogGroupArn| :type
                         (common-lisp:or cloud-watch-log-group-arn
                                         common-lisp:null)
                         :accessor
                         %cloud-watch-log-group-log-destination-cloud-watch-log-group-arn
                         :initform
                         (common-lisp:error
                          ":cloudwatchloggrouparn is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-log-group-log-destination
                    'make-cloud-watch-log-group-log-destination))
 (common-lisp:defun make-cloud-watch-log-group-log-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-prefix cloud-watch-log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-log-group-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-group-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-group-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-prefix))
      (common-lisp:list
       (common-lisp:cons "logPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-group-log-destination))
   common-lisp:nil))
(common-lisp:deftype code-hook-interface-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-hook-specification common-lisp:nil
                       ((lambda-code-hook :initarg :|lambdaCodeHook| :type
                         (common-lisp:or lambda-code-hook common-lisp:null)
                         :accessor %code-hook-specification-lambda-code-hook
                         :initform
                         (common-lisp:error ":lambdacodehook is required"))))
 (common-lisp:export
  (common-lisp:list 'code-hook-specification 'make-code-hook-specification))
 (common-lisp:defun make-code-hook-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-code-hook)
   (common-lisp:apply #'common-lisp:make-instance 'code-hook-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-hook-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-hook-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-code-hook))
      (common-lisp:list
       (common-lisp:cons "lambdaCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-hook-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass composite-slot-type-setting common-lisp:nil
                       ((sub-slots :initarg :|subSlots| :type
                         (common-lisp:or sub-slot-type-list common-lisp:null)
                         :accessor %composite-slot-type-setting-sub-slots
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'composite-slot-type-setting
                    'make-composite-slot-type-setting))
 (common-lisp:defun make-composite-slot-type-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-slots)
   (common-lisp:apply #'common-lisp:make-instance 'composite-slot-type-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-slot-type-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-slot-type-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slots))
      (common-lisp:list
       (common-lisp:cons "subSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-slot-type-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((expression-string :initarg :|expressionString| :type
                         (common-lisp:or condition-expression common-lisp:null)
                         :accessor %condition-expression-string :initform
                         (common-lisp:error ":expressionstring is required"))))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defun make-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression-string)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-string))
      (common-lisp:list
       (common-lisp:cons "expressionString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype condition-expression () 'common-lisp:string)
(common-lisp:deftype condition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype condition-key-value-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-condition-key-value-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype condition-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-condition-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype condition-operator () 'common-lisp:string)
(common-lisp:deftype condition-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conditional-branch common-lisp:nil
                       ((response :initarg :|response| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor %conditional-branch-response :initform
                         common-lisp:nil)
                        (next-step :initarg :|nextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %conditional-branch-next-step :initform
                         (common-lisp:error ":nextstep is required"))
                        (condition :initarg :|condition| :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         %conditional-branch-condition :initform
                         (common-lisp:error ":condition is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %conditional-branch-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'conditional-branch 'make-conditional-branch))
 (common-lisp:defun make-conditional-branch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response next-step condition name)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-branch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conditional-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conditional-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conditional-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conditional-branches ()
   '(trivial-types:proper-list conditional-branch))
 (common-lisp:defun |make-conditional-branches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conditional-branch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conditional-specification common-lisp:nil
                       ((default-branch :initarg :|defaultBranch| :type
                         (common-lisp:or default-conditional-branch
                                         common-lisp:null)
                         :accessor %conditional-specification-default-branch
                         :initform
                         (common-lisp:error ":defaultbranch is required"))
                        (conditional-branches :initarg :|conditionalBranches|
                         :type
                         (common-lisp:or conditional-branches common-lisp:null)
                         :accessor
                         %conditional-specification-conditional-branches
                         :initform
                         (common-lisp:error
                          ":conditionalbranches is required"))
                        (active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %conditional-specification-active :initform
                         (common-lisp:error ":active is required"))))
 (common-lisp:export
  (common-lisp:list 'conditional-specification
                    'make-conditional-specification))
 (common-lisp:defun make-conditional-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-branch conditional-branches
                     active)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-branches))
      (common-lisp:list
       (common-lisp:cons "conditionalBranches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-branch))
      (common-lisp:list
       (common-lisp:cons "defaultBranch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-specification))
   common-lisp:nil))
(common-lisp:deftype confidence-threshold () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lexv2-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype context-time-to-live-in-seconds () 'common-lisp:integer)
(common-lisp:deftype context-turns-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass conversation-log-settings common-lisp:nil
                       ((audio-log-settings :initarg :|audioLogSettings| :type
                         (common-lisp:or audio-log-settings-list
                                         common-lisp:null)
                         :accessor
                         %conversation-log-settings-audio-log-settings
                         :initform common-lisp:nil)
                        (text-log-settings :initarg :|textLogSettings| :type
                         (common-lisp:or text-log-settings-list
                                         common-lisp:null)
                         :accessor %conversation-log-settings-text-log-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conversation-log-settings
                    'make-conversation-log-settings))
 (common-lisp:defun make-conversation-log-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audio-log-settings text-log-settings)
   (common-lisp:apply #'common-lisp:make-instance 'conversation-log-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-log-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-log-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-log-settings))
      (common-lisp:list
       (common-lisp:cons "textLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-log-settings))
      (common-lisp:list
       (common-lisp:cons "audioLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-log-settings))
   common-lisp:nil))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-bot-alias-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-bot-alias-request-tags :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-alias-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (sentiment-analysis-settings :initarg
                         :|sentimentAnalysisSettings| :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         %create-bot-alias-request-sentiment-analysis-settings
                         :initform common-lisp:nil)
                        (conversation-log-settings :initarg
                         :|conversationLogSettings| :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         %create-bot-alias-request-conversation-log-settings
                         :initform common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :|botAliasLocaleSettings| :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         %create-bot-alias-request-bot-alias-locale-settings
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %create-bot-alias-request-bot-version
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-alias-request-description
                         :initform common-lisp:nil)
                        (bot-alias-name :initarg :|botAliasName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-bot-alias-request-bot-alias-name :initform
                         (common-lisp:error ":botaliasname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-bot-alias-request 'make-create-bot-alias-request))
 (common-lisp:defun make-create-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags bot-id sentiment-analysis-settings
                     conversation-log-settings bot-alias-locale-settings
                     bot-version description bot-alias-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-alias-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-bot-alias-response-tags :initform
                         common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-bot-alias-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-alias-response-bot-id :initform
                         common-lisp:nil)
                        (bot-alias-status :initarg :|botAliasStatus| :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor %create-bot-alias-response-bot-alias-status
                         :initform common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :|sentimentAnalysisSettings| :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         %create-bot-alias-response-sentiment-analysis-settings
                         :initform common-lisp:nil)
                        (conversation-log-settings :initarg
                         :|conversationLogSettings| :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         %create-bot-alias-response-conversation-log-settings
                         :initform common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :|botAliasLocaleSettings| :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         %create-bot-alias-response-bot-alias-locale-settings
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %create-bot-alias-response-bot-version
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-alias-response-description
                         :initform common-lisp:nil)
                        (bot-alias-name :initarg :|botAliasName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-bot-alias-response-bot-alias-name :initform
                         common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %create-bot-alias-response-bot-alias-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bot-alias-response
                    'make-create-bot-alias-response))
 (common-lisp:defun make-create-bot-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags creation-date-time bot-id
                     bot-alias-status sentiment-analysis-settings
                     conversation-log-settings bot-alias-locale-settings
                     bot-version description bot-alias-name bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-locale-request common-lisp:nil
                       ((voice-settings :initarg :|voiceSettings| :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor %create-bot-locale-request-voice-settings
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %create-bot-locale-request-nlu-intent-confidence-threshold
                         :initform
                         (common-lisp:error
                          ":nluintentconfidencethreshold is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-locale-request-description
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-bot-locale-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-bot-locale-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-locale-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-bot-locale-request
                    'make-create-bot-locale-request))
 (common-lisp:defun make-create-bot-locale-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key voice-settings
                     nlu-intent-confidence-threshold description locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-locale-response common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-bot-locale-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-locale-status :initarg :|botLocaleStatus| :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         %create-bot-locale-response-bot-locale-status
                         :initform common-lisp:nil)
                        (voice-settings :initarg :|voiceSettings| :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor %create-bot-locale-response-voice-settings
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %create-bot-locale-response-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-locale-response-description
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-bot-locale-response-locale-id :initform
                         common-lisp:nil)
                        (locale-name :initarg :|localeName| :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor %create-bot-locale-response-locale-name
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-bot-locale-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-locale-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bot-locale-response
                    'make-create-bot-locale-response))
 (common-lisp:defun make-create-bot-locale-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time bot-locale-status
                     voice-settings nlu-intent-confidence-threshold description
                     locale-id locale-name bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-request common-lisp:nil
                       ((bot-members :initarg :|botMembers| :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor %create-bot-request-bot-members :initform
                         common-lisp:nil)
                        (bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %create-bot-request-bot-type :initform
                         common-lisp:nil)
                        (test-bot-alias-tags :initarg :|testBotAliasTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-bot-request-test-bot-alias-tags :initform
                         common-lisp:nil)
                        (bot-tags :initarg :|botTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-bot-request-bot-tags :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %create-bot-request-idle-session-ttlin-seconds
                         :initform
                         (common-lisp:error
                          ":idlesessionttlinseconds is required"))
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %create-bot-request-data-privacy :initform
                         (common-lisp:error ":dataprivacy is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-bot-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-request-description :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-bot-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-bot-request 'make-create-bot-request))
 (common-lisp:defun make-create-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-members bot-type test-bot-alias-tags
                     bot-tags idle-session-ttlin-seconds data-privacy role-arn
                     description bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-tags))
      (common-lisp:list
       (common-lisp:cons "botTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-bot-alias-tags))
      (common-lisp:list
       (common-lisp:cons "testBotAliasTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-response common-lisp:nil
                       ((bot-members :initarg :|botMembers| :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor %create-bot-response-bot-members :initform
                         common-lisp:nil)
                        (bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %create-bot-response-bot-type :initform
                         common-lisp:nil)
                        (test-bot-alias-tags :initarg :|testBotAliasTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-bot-response-test-bot-alias-tags :initform
                         common-lisp:nil)
                        (bot-tags :initarg :|botTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-bot-response-bot-tags :initform
                         common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-bot-response-creation-date-time :initform
                         common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %create-bot-response-bot-status :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %create-bot-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %create-bot-response-data-privacy :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-bot-response-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-response-description :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-bot-response-bot-name :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bot-response 'make-create-bot-response))
 (common-lisp:defun make-create-bot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-members bot-type test-bot-alias-tags
                     bot-tags creation-date-time bot-status
                     idle-session-ttlin-seconds data-privacy role-arn
                     description bot-name bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-tags))
      (common-lisp:list
       (common-lisp:cons "botTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-bot-alias-tags))
      (common-lisp:list
       (common-lisp:cons "testBotAliasTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-version-request common-lisp:nil
                       ((bot-version-locale-specification :initarg
                         :|botVersionLocaleSpecification| :type
                         (common-lisp:or bot-version-locale-specification
                                         common-lisp:null)
                         :accessor
                         %create-bot-version-request-bot-version-locale-specification
                         :initform
                         (common-lisp:error
                          ":botversionlocalespecification is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-version-request-description
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-version-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-bot-version-request
                    'make-create-bot-version-request))
 (common-lisp:defun make-create-bot-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-version-locale-specification
                     description bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-locale-specification))
      (common-lisp:list
       (common-lisp:cons "botVersionLocaleSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-version-response common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-bot-version-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %create-bot-version-response-bot-status :initform
                         common-lisp:nil)
                        (bot-version-locale-specification :initarg
                         :|botVersionLocaleSpecification| :type
                         (common-lisp:or bot-version-locale-specification
                                         common-lisp:null)
                         :accessor
                         %create-bot-version-response-bot-version-locale-specification
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %create-bot-version-response-bot-version
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-version-response-description
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-bot-version-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bot-version-response
                    'make-create-bot-version-response))
 (common-lisp:defun make-create-bot-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time bot-status
                     bot-version-locale-specification bot-version description
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-locale-specification))
      (common-lisp:list
       (common-lisp:cons "botVersionLocaleSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-custom-vocabulary-items-list ()
   '(trivial-types:proper-list new-custom-vocabulary-item))
 (common-lisp:defun |make-create-custom-vocabulary-items-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            new-custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-export-request common-lisp:nil
                       ((file-password :initarg :|filePassword| :type
                         (common-lisp:or import-export-file-password
                                         common-lisp:null)
                         :accessor %create-export-request-file-password
                         :initform common-lisp:nil)
                        (file-format :initarg :|fileFormat| :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor %create-export-request-file-format :initform
                         (common-lisp:error ":fileformat is required"))
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         %create-export-request-resource-specification
                         :initform
                         (common-lisp:error
                          ":resourcespecification is required"))))
 (common-lisp:export
  (common-lisp:list 'create-export-request 'make-create-export-request))
 (common-lisp:defun make-create-export-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-password file-format
                     resource-specification)
   (common-lisp:apply #'common-lisp:make-instance 'create-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-password))
      (common-lisp:list
       (common-lisp:cons "filePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-export-response common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-export-response-creation-date-time :initform
                         common-lisp:nil)
                        (export-status :initarg :|exportStatus| :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor %create-export-response-export-status
                         :initform common-lisp:nil)
                        (file-format :initarg :|fileFormat| :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor %create-export-response-file-format
                         :initform common-lisp:nil)
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         %create-export-response-resource-specification
                         :initform common-lisp:nil)
                        (export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-export-response-export-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-export-response 'make-create-export-response))
 (common-lisp:defun make-create-export-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time export-status
                     file-format resource-specification export-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-intent-request common-lisp:nil
                       ((initial-response-setting :initarg
                         :|initialResponseSetting| :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         %create-intent-request-initial-response-setting
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-intent-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-intent-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-intent-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %create-intent-request-kendra-configuration
                         :initform common-lisp:nil)
                        (output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor %create-intent-request-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor %create-intent-request-input-contexts
                         :initform common-lisp:nil)
                        (intent-closing-setting :initarg
                         :|intentClosingSetting| :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         %create-intent-request-intent-closing-setting
                         :initform common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :|intentConfirmationSetting| :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         %create-intent-request-intent-confirmation-setting
                         :initform common-lisp:nil)
                        (fulfillment-code-hook :initarg :|fulfillmentCodeHook|
                         :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor %create-intent-request-fulfillment-code-hook
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor %create-intent-request-dialog-code-hook
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor %create-intent-request-sample-utterances
                         :initform common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         %create-intent-request-parent-intent-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-intent-request-description :initform
                         common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-intent-request-intent-name :initform
                         (common-lisp:error ":intentname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-intent-request 'make-create-intent-request))
 (common-lisp:defun make-create-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-response-setting locale-id
                     bot-version bot-id kendra-configuration output-contexts
                     input-contexts intent-closing-setting
                     intent-confirmation-setting fulfillment-code-hook
                     dialog-code-hook sample-utterances parent-intent-signature
                     description intent-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-intent-response common-lisp:nil
                       ((initial-response-setting :initarg
                         :|initialResponseSetting| :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         %create-intent-response-initial-response-setting
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-intent-response-creation-date-time :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-intent-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-intent-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-intent-response-bot-id :initform
                         common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %create-intent-response-kendra-configuration
                         :initform common-lisp:nil)
                        (output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor %create-intent-response-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor %create-intent-response-input-contexts
                         :initform common-lisp:nil)
                        (intent-closing-setting :initarg
                         :|intentClosingSetting| :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         %create-intent-response-intent-closing-setting
                         :initform common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :|intentConfirmationSetting| :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         %create-intent-response-intent-confirmation-setting
                         :initform common-lisp:nil)
                        (fulfillment-code-hook :initarg :|fulfillmentCodeHook|
                         :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         %create-intent-response-fulfillment-code-hook
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor %create-intent-response-dialog-code-hook
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor %create-intent-response-sample-utterances
                         :initform common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         %create-intent-response-parent-intent-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-intent-response-description
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-intent-response-intent-name :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-intent-response-intent-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-intent-response 'make-create-intent-response))
 (common-lisp:defun make-create-intent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-response-setting
                     creation-date-time locale-id bot-version bot-id
                     kendra-configuration output-contexts input-contexts
                     intent-closing-setting intent-confirmation-setting
                     fulfillment-code-hook dialog-code-hook sample-utterances
                     parent-intent-signature description intent-name intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-request common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %create-resource-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %create-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-request
                    'make-create-resource-policy-request))
 (common-lisp:defun make-create-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %create-resource-policy-response-revision-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %create-resource-policy-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-response
                    'make-create-resource-policy-response))
 (common-lisp:defun make-create-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-statement-request common-lisp:nil
                       ((expected-revision-id :initarg :|expectedRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-request-expected-revision-id
                         :initform common-lisp:nil)
                        (condition :initarg :|condition| :type
                         (common-lisp:or condition-map common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-request-condition
                         :initform common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-request-action
                         :initform (common-lisp:error ":action is required"))
                        (principal :initarg :|principal| :type
                         (common-lisp:or principal-list common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-request-principal
                         :initform
                         (common-lisp:error ":principal is required"))
                        (effect :initarg :|effect| :type
                         (common-lisp:or effect common-lisp:null) :accessor
                         %create-resource-policy-statement-request-effect
                         :initform (common-lisp:error ":effect is required"))
                        (statement-id :initarg :|statementId| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-resource-policy-statement-request-statement-id
                         :initform
                         (common-lisp:error ":statementid is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-statement-request
                    'make-create-resource-policy-statement-request))
 (common-lisp:defun make-create-resource-policy-statement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-revision-id condition action
                     principal effect statement-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "statementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-statement-response
                       common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-response-revision-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %create-resource-policy-statement-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-statement-response
                    'make-create-resource-policy-statement-response))
 (common-lisp:defun make-create-resource-policy-statement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-request common-lisp:nil
                       ((sub-slot-setting :initarg :|subSlotSetting| :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor %create-slot-request-sub-slot-setting
                         :initform common-lisp:nil)
                        (multiple-values-setting :initarg
                         :|multipleValuesSetting| :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor %create-slot-request-multiple-values-setting
                         :initform common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-slot-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-slot-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (obfuscation-setting :initarg :|obfuscationSetting|
                         :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor %create-slot-request-obfuscation-setting
                         :initform common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :|valueElicitationSetting| :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-request-value-elicitation-setting
                         :initform
                         (common-lisp:error
                          ":valueelicitationsetting is required"))
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %create-slot-request-slot-type-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-slot-request-description :initform
                         common-lisp:nil)
                        (slot-name :initarg :|slotName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-slot-request-slot-name :initform
                         (common-lisp:error ":slotname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-slot-request 'make-create-slot-request))
 (common-lisp:defun make-create-slot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-slot-setting multiple-values-setting
                     intent-id locale-id bot-version bot-id obfuscation-setting
                     value-elicitation-setting slot-type-id description
                     slot-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-slot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-response common-lisp:nil
                       ((sub-slot-setting :initarg :|subSlotSetting| :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor %create-slot-response-sub-slot-setting
                         :initform common-lisp:nil)
                        (multiple-values-setting :initarg
                         :|multipleValuesSetting| :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-response-multiple-values-setting
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-slot-response-creation-date-time :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-response-intent-id :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-slot-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-slot-response-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-response-bot-id :initform
                         common-lisp:nil)
                        (obfuscation-setting :initarg :|obfuscationSetting|
                         :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor %create-slot-response-obfuscation-setting
                         :initform common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :|valueElicitationSetting| :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-response-value-elicitation-setting
                         :initform common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %create-slot-response-slot-type-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-slot-response-description :initform
                         common-lisp:nil)
                        (slot-name :initarg :|slotName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-slot-response-slot-name :initform
                         common-lisp:nil)
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-response-slot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-slot-response 'make-create-slot-response))
 (common-lisp:defun make-create-slot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-slot-setting multiple-values-setting
                     creation-date-time intent-id locale-id bot-version bot-id
                     obfuscation-setting value-elicitation-setting slot-type-id
                     description slot-name slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-slot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-slot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-slot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-type-request common-lisp:nil
                       ((composite-slot-type-setting :initarg
                         :|compositeSlotTypeSetting| :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-request-composite-slot-type-setting
                         :initform common-lisp:nil)
                        (external-source-setting :initarg
                         :|externalSourceSetting| :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-request-external-source-setting
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-slot-type-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-slot-type-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-type-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %create-slot-type-request-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-setting :initarg
                         :|valueSelectionSetting| :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-request-value-selection-setting
                         :initform common-lisp:nil)
                        (slot-type-values :initarg :|slotTypeValues| :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor %create-slot-type-request-slot-type-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-slot-type-request-description
                         :initform common-lisp:nil)
                        (slot-type-name :initarg :|slotTypeName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-slot-type-request-slot-type-name :initform
                         (common-lisp:error ":slottypename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-slot-type-request 'make-create-slot-type-request))
 (common-lisp:defun make-create-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key composite-slot-type-setting
                     external-source-setting locale-id bot-version bot-id
                     parent-slot-type-signature value-selection-setting
                     slot-type-values description slot-type-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-type-response common-lisp:nil
                       ((composite-slot-type-setting :initarg
                         :|compositeSlotTypeSetting| :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-response-composite-slot-type-setting
                         :initform common-lisp:nil)
                        (external-source-setting :initarg
                         :|externalSourceSetting| :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-response-external-source-setting
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-slot-type-response-creation-date-time
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %create-slot-type-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %create-slot-type-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-type-response-bot-id :initform
                         common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %create-slot-type-response-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-setting :initarg
                         :|valueSelectionSetting| :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-response-value-selection-setting
                         :initform common-lisp:nil)
                        (slot-type-values :initarg :|slotTypeValues| :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor %create-slot-type-response-slot-type-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-slot-type-response-description
                         :initform common-lisp:nil)
                        (slot-type-name :initarg :|slotTypeName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-slot-type-response-slot-type-name :initform
                         common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-slot-type-response-slot-type-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-slot-type-response
                    'make-create-slot-type-response))
 (common-lisp:defun make-create-slot-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key composite-slot-type-setting
                     external-source-setting creation-date-time locale-id
                     bot-version bot-id parent-slot-type-signature
                     value-selection-setting slot-type-values description
                     slot-type-name slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-upload-url-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-upload-url-request
                    'make-create-upload-url-request))
 (common-lisp:defun make-create-upload-url-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-upload-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-upload-url-response common-lisp:nil
                       ((upload-url :initarg :|uploadUrl| :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor %create-upload-url-response-upload-url
                         :initform common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-upload-url-response-import-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-upload-url-response
                    'make-create-upload-url-response))
 (common-lisp:defun make-create-upload-url-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upload-url import-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-upload-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-url))
      (common-lisp:list
       (common-lisp:cons "uploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-payload common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or custom-payload-value common-lisp:null)
                         :accessor %custom-payload-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export (common-lisp:list 'custom-payload 'make-custom-payload))
 (common-lisp:defun make-custom-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'custom-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-payload))
   common-lisp:nil))
(common-lisp:deftype custom-payload-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-entry-id common-lisp:nil
                       ((item-id :initarg :|itemId| :type
                         (common-lisp:or item-id common-lisp:null) :accessor
                         %custom-vocabulary-entry-id-item-id :initform
                         (common-lisp:error ":itemid is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-entry-id
                    'make-custom-vocabulary-entry-id))
 (common-lisp:defun make-custom-vocabulary-entry-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key item-id)
   (common-lisp:apply #'common-lisp:make-instance 'custom-vocabulary-entry-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-entry-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-entry-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-entry-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-export-specification common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %custom-vocabulary-export-specification-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %custom-vocabulary-export-specification-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %custom-vocabulary-export-specification-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-export-specification
                    'make-custom-vocabulary-export-specification))
 (common-lisp:defun make-custom-vocabulary-export-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-vocabulary-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-import-specification common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %custom-vocabulary-import-specification-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %custom-vocabulary-import-specification-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %custom-vocabulary-import-specification-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-import-specification
                    'make-custom-vocabulary-import-specification))
 (common-lisp:defun make-custom-vocabulary-import-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-vocabulary-import-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-import-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-import-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-import-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-item common-lisp:nil
                       ((display-as :initarg :|displayAs| :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         %custom-vocabulary-item-display-as :initform
                         common-lisp:nil)
                        (weight :initarg :|weight| :type
                         (common-lisp:or weight common-lisp:null) :accessor
                         %custom-vocabulary-item-weight :initform
                         common-lisp:nil)
                        (phrase :initarg :|phrase| :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         %custom-vocabulary-item-phrase :initform
                         (common-lisp:error ":phrase is required"))
                        (item-id :initarg :|itemId| :type
                         (common-lisp:or item-id common-lisp:null) :accessor
                         %custom-vocabulary-item-item-id :initform
                         (common-lisp:error ":itemid is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-item 'make-custom-vocabulary-item))
 (common-lisp:defun make-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-as weight phrase item-id)
   (common-lisp:apply #'common-lisp:make-instance 'custom-vocabulary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrase))
      (common-lisp:list
       (common-lisp:cons "phrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-as))
      (common-lisp:list
       (common-lisp:cons "displayAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-vocabulary-items ()
   '(trivial-types:proper-list custom-vocabulary-item))
 (common-lisp:defun |make-custom-vocabulary-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-vocabulary-status () 'common-lisp:string)
(common-lisp:deftype dtmfcharacter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dtmfspecification common-lisp:nil
                       ((end-character :initarg :|endCharacter| :type
                         (common-lisp:or dtmfcharacter common-lisp:null)
                         :accessor %dtmfspecification-end-character :initform
                         (common-lisp:error ":endcharacter is required"))
                        (deletion-character :initarg :|deletionCharacter| :type
                         (common-lisp:or dtmfcharacter common-lisp:null)
                         :accessor %dtmfspecification-deletion-character
                         :initform
                         (common-lisp:error ":deletioncharacter is required"))
                        (end-timeout-ms :initarg :|endTimeoutMs| :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor %dtmfspecification-end-timeout-ms :initform
                         (common-lisp:error ":endtimeoutms is required"))
                        (max-length :initarg :|maxLength| :type
                         (common-lisp:or max-utterance-digits common-lisp:null)
                         :accessor %dtmfspecification-max-length :initform
                         (common-lisp:error ":maxlength is required"))))
 (common-lisp:export
  (common-lisp:list 'dtmfspecification 'make-dtmfspecification))
 (common-lisp:defun make-dtmfspecification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-character deletion-character
                     end-timeout-ms max-length)
   (common-lisp:apply #'common-lisp:make-instance 'dtmfspecification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dtmfspecification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dtmfspecification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "maxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "endTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-character))
      (common-lisp:list
       (common-lisp:cons "deletionCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-character))
      (common-lisp:list
       (common-lisp:cons "endCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dtmfspecification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-privacy common-lisp:nil
                       ((child-directed :initarg :|childDirected| :type
                         (common-lisp:or child-directed common-lisp:null)
                         :accessor %data-privacy-child-directed :initform
                         (common-lisp:error ":childdirected is required"))))
 (common-lisp:export (common-lisp:list 'data-privacy 'make-data-privacy))
 (common-lisp:defun make-data-privacy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key child-directed)
   (common-lisp:apply #'common-lisp:make-instance 'data-privacy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-privacy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-privacy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-directed))
      (common-lisp:list
       (common-lisp:cons "childDirected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-privacy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-range-filter common-lisp:nil
                       ((end-date-time :initarg :|endDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %date-range-filter-end-date-time :initform
                         (common-lisp:error ":enddatetime is required"))
                        (start-date-time :initarg :|startDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %date-range-filter-start-date-time :initform
                         (common-lisp:error ":startdatetime is required"))))
 (common-lisp:export
  (common-lisp:list 'date-range-filter 'make-date-range-filter))
 (common-lisp:defun make-date-range-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-date-time start-date-time)
   (common-lisp:apply #'common-lisp:make-instance 'date-range-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-conditional-branch common-lisp:nil
                       ((response :initarg :|response| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor %default-conditional-branch-response
                         :initform common-lisp:nil)
                        (next-step :initarg :|nextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %default-conditional-branch-next-step
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-conditional-branch
                    'make-default-conditional-branch))
 (common-lisp:defun make-default-conditional-branch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response next-step)
   (common-lisp:apply #'common-lisp:make-instance 'default-conditional-branch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-conditional-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-conditional-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-conditional-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-alias-request common-lisp:nil
                       ((skip-resource-in-use-check :initarg
                         :|skipResourceInUseCheck| :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         %delete-bot-alias-request-skip-resource-in-use-check
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-alias-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %delete-bot-alias-request-bot-alias-id
                         :initform
                         (common-lisp:error ":botaliasid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-alias-request 'make-delete-bot-alias-request))
 (common-lisp:defun make-delete-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key skip-resource-in-use-check bot-id
                     bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-alias-response common-lisp:nil
                       ((bot-alias-status :initarg :|botAliasStatus| :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor %delete-bot-alias-response-bot-alias-status
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-alias-response-bot-id :initform
                         common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %delete-bot-alias-response-bot-alias-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-bot-alias-response
                    'make-delete-bot-alias-response))
 (common-lisp:defun make-delete-bot-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-alias-status bot-id bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-locale-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-bot-locale-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %delete-bot-locale-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-locale-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-locale-request
                    'make-delete-bot-locale-request))
 (common-lisp:defun make-delete-bot-locale-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-locale-response common-lisp:nil
                       ((bot-locale-status :initarg :|botLocaleStatus| :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         %delete-bot-locale-response-bot-locale-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-bot-locale-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %delete-bot-locale-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-locale-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-bot-locale-response
                    'make-delete-bot-locale-response))
 (common-lisp:defun make-delete-bot-locale-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-locale-status locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-request common-lisp:nil
                       ((skip-resource-in-use-check :initarg
                         :|skipResourceInUseCheck| :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         %delete-bot-request-skip-resource-in-use-check
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-request 'make-delete-bot-request))
 (common-lisp:defun make-delete-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key skip-resource-in-use-check bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-response common-lisp:nil
                       ((bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %delete-bot-response-bot-status :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-bot-response 'make-delete-bot-response))
 (common-lisp:defun make-delete-bot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-status bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-version-request common-lisp:nil
                       ((skip-resource-in-use-check :initarg
                         :|skipResourceInUseCheck| :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         %delete-bot-version-request-skip-resource-in-use-check
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %delete-bot-version-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-version-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-version-request
                    'make-delete-bot-version-request))
 (common-lisp:defun make-delete-bot-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key skip-resource-in-use-check bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-version-response common-lisp:nil
                       ((bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %delete-bot-version-response-bot-status :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %delete-bot-version-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-bot-version-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-bot-version-response
                    'make-delete-bot-version-response))
 (common-lisp:defun make-delete-bot-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-status bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-custom-vocabulary-items-list ()
   '(trivial-types:proper-list custom-vocabulary-entry-id))
 (common-lisp:defun |make-delete-custom-vocabulary-items-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-vocabulary-entry-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-custom-vocabulary-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-custom-vocabulary-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %delete-custom-vocabulary-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-custom-vocabulary-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-custom-vocabulary-request
                    'make-delete-custom-vocabulary-request))
 (common-lisp:defun make-delete-custom-vocabulary-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-vocabulary-response common-lisp:nil
                       ((custom-vocabulary-status :initarg
                         :|customVocabularyStatus| :type
                         (common-lisp:or custom-vocabulary-status
                                         common-lisp:null)
                         :accessor
                         %delete-custom-vocabulary-response-custom-vocabulary-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-custom-vocabulary-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %delete-custom-vocabulary-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-custom-vocabulary-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-vocabulary-response
                    'make-delete-custom-vocabulary-response))
 (common-lisp:defun make-delete-custom-vocabulary-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-vocabulary-status locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-status))
      (common-lisp:list
       (common-lisp:cons "customVocabularyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-export-request common-lisp:nil
                       ((export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-export-request-export-id :initform
                         (common-lisp:error ":exportid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-export-request 'make-delete-export-request))
 (common-lisp:defun make-delete-export-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-export-response common-lisp:nil
                       ((export-status :initarg :|exportStatus| :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor %delete-export-response-export-status
                         :initform common-lisp:nil)
                        (export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-export-response-export-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-export-response 'make-delete-export-response))
 (common-lisp:defun make-delete-export-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-status export-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-import-request common-lisp:nil
                       ((import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-import-request-import-id :initform
                         (common-lisp:error ":importid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-import-request 'make-delete-import-request))
 (common-lisp:defun make-delete-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key import-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-import-response common-lisp:nil
                       ((import-status :initarg :|importStatus| :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor %delete-import-response-import-status
                         :initform common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-import-response-import-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-import-response 'make-delete-import-response))
 (common-lisp:defun make-delete-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key import-status import-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-intent-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-intent-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %delete-intent-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-intent-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-intent-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-intent-request 'make-delete-intent-request))
 (common-lisp:defun make-delete-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((expected-revision-id :initarg :|expectedRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %delete-resource-policy-request-expected-revision-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %delete-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defun make-delete-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-revision-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %delete-resource-policy-response-revision-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %delete-resource-policy-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defun make-delete-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-statement-request common-lisp:nil
                       ((expected-revision-id :initarg :|expectedRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %delete-resource-policy-statement-request-expected-revision-id
                         :initform common-lisp:nil)
                        (statement-id :initarg :|statementId| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-resource-policy-statement-request-statement-id
                         :initform
                         (common-lisp:error ":statementid is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %delete-resource-policy-statement-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-statement-request
                    'make-delete-resource-policy-statement-request))
 (common-lisp:defun make-delete-resource-policy-statement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-revision-id statement-id
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-statement-response
                       common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %delete-resource-policy-statement-response-revision-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %delete-resource-policy-statement-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-statement-response
                    'make-delete-resource-policy-statement-response))
 (common-lisp:defun make-delete-resource-policy-statement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-slot-request common-lisp:nil
                       ((intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-slot-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-slot-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %delete-slot-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-slot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-slot-request-slot-id :initform
                         (common-lisp:error ":slotid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-slot-request 'make-delete-slot-request))
 (common-lisp:defun make-delete-slot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key intent-id locale-id bot-version bot-id
                     slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-slot-type-request common-lisp:nil
                       ((skip-resource-in-use-check :initarg
                         :|skipResourceInUseCheck| :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         %delete-slot-type-request-skip-resource-in-use-check
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-slot-type-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %delete-slot-type-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-slot-type-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-slot-type-request-slot-type-id :initform
                         (common-lisp:error ":slottypeid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-slot-type-request 'make-delete-slot-type-request))
 (common-lisp:defun make-delete-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key skip-resource-in-use-check locale-id
                     bot-version bot-id slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-utterances-request common-lisp:nil
                       ((session-id :initarg :|sessionId| :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %delete-utterances-request-session-id :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %delete-utterances-request-locale-id :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-utterances-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-utterances-request
                    'make-delete-utterances-request))
 (common-lisp:defun make-delete-utterances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id locale-id bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-utterances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-utterances-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-utterances-response
                    'make-delete-utterances-response))
 (common-lisp:defun make-delete-utterances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-utterances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-alias-request common-lisp:nil
                       ((bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-alias-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %describe-bot-alias-request-bot-alias-id
                         :initform
                         (common-lisp:error ":botaliasid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bot-alias-request
                    'make-describe-bot-alias-request))
 (common-lisp:defun make-describe-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-id bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-alias-response common-lisp:nil
                       ((parent-bot-networks :initarg :|parentBotNetworks|
                         :type
                         (common-lisp:or parent-bot-networks common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-parent-bot-networks
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-bot-alias-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-alias-response-bot-id :initform
                         common-lisp:nil)
                        (bot-alias-status :initarg :|botAliasStatus| :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-bot-alias-status
                         :initform common-lisp:nil)
                        (bot-alias-history-events :initarg
                         :|botAliasHistoryEvents| :type
                         (common-lisp:or bot-alias-history-events-list
                                         common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-bot-alias-history-events
                         :initform common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :|sentimentAnalysisSettings| :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-sentiment-analysis-settings
                         :initform common-lisp:nil)
                        (conversation-log-settings :initarg
                         :|conversationLogSettings| :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-conversation-log-settings
                         :initform common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :|botAliasLocaleSettings| :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         %describe-bot-alias-response-bot-alias-locale-settings
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-bot-alias-response-bot-version
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-bot-alias-response-description
                         :initform common-lisp:nil)
                        (bot-alias-name :initarg :|botAliasName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-bot-alias-response-bot-alias-name :initform
                         common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %describe-bot-alias-response-bot-alias-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bot-alias-response
                    'make-describe-bot-alias-response))
 (common-lisp:defun make-describe-bot-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-bot-networks
                     last-updated-date-time creation-date-time bot-id
                     bot-alias-status bot-alias-history-events
                     sentiment-analysis-settings conversation-log-settings
                     bot-alias-locale-settings bot-version description
                     bot-alias-name bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-history-events))
      (common-lisp:list
       (common-lisp:cons "botAliasHistoryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-bot-networks))
      (common-lisp:list
       (common-lisp:cons "parentBotNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-locale-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-bot-locale-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-bot-locale-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-locale-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bot-locale-request
                    'make-describe-bot-locale-request))
 (common-lisp:defun make-describe-bot-locale-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-locale-response common-lisp:nil
                       ((recommended-actions :initarg :|recommendedActions|
                         :type
                         (common-lisp:or recommended-actions common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-recommended-actions
                         :initform common-lisp:nil)
                        (bot-locale-history-events :initarg
                         :|botLocaleHistoryEvents| :type
                         (common-lisp:or bot-locale-history-events-list
                                         common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-bot-locale-history-events
                         :initform common-lisp:nil)
                        (last-build-submitted-date-time :initarg
                         :|lastBuildSubmittedDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-bot-locale-response-last-build-submitted-date-time
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-bot-locale-response-creation-date-time
                         :initform common-lisp:nil)
                        (failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-failure-reasons
                         :initform common-lisp:nil)
                        (bot-locale-status :initarg :|botLocaleStatus| :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-bot-locale-status
                         :initform common-lisp:nil)
                        (slot-types-count :initarg :|slotTypesCount| :type
                         (common-lisp:or resource-count common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-slot-types-count
                         :initform common-lisp:nil)
                        (intents-count :initarg :|intentsCount| :type
                         (common-lisp:or resource-count common-lisp:null)
                         :accessor %describe-bot-locale-response-intents-count
                         :initform common-lisp:nil)
                        (voice-settings :initarg :|voiceSettings| :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor %describe-bot-locale-response-voice-settings
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %describe-bot-locale-response-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-bot-locale-response-description
                         :initform common-lisp:nil)
                        (locale-name :initarg :|localeName| :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor %describe-bot-locale-response-locale-name
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-bot-locale-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-bot-locale-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-locale-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bot-locale-response
                    'make-describe-bot-locale-response))
 (common-lisp:defun make-describe-bot-locale-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommended-actions
                     bot-locale-history-events last-build-submitted-date-time
                     last-updated-date-time creation-date-time failure-reasons
                     bot-locale-status slot-types-count intents-count
                     voice-settings nlu-intent-confidence-threshold description
                     locale-name locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents-count))
      (common-lisp:list
       (common-lisp:cons "intentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types-count))
      (common-lisp:list
       (common-lisp:cons "slotTypesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-build-submitted-date-time))
      (common-lisp:list
       (common-lisp:cons "lastBuildSubmittedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-history-events))
      (common-lisp:list
       (common-lisp:cons "botLocaleHistoryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "recommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-recommendation-request common-lisp:nil
                       ((bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-recommendation-request-bot-recommendation-id
                         :initform
                         (common-lisp:error
                          ":botrecommendationid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-bot-recommendation-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-recommendation-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bot-recommendation-request
                    'make-describe-bot-recommendation-request))
 (common-lisp:defun make-describe-bot-recommendation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-recommendation-id locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-recommendation-response common-lisp:nil
                       ((bot-recommendation-results :initarg
                         :|botRecommendationResults| :type
                         (common-lisp:or bot-recommendation-results
                                         common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-bot-recommendation-results
                         :initform common-lisp:nil)
                        (encryption-setting :initarg :|encryptionSetting| :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-encryption-setting
                         :initform common-lisp:nil)
                        (transcript-source-setting :initarg
                         :|transcriptSourceSetting| :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-transcript-source-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-bot-recommendation-response-creation-date-time
                         :initform common-lisp:nil)
                        (failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-failure-reasons
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-recommendation-response-bot-recommendation-id
                         :initform common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :|botRecommendationStatus| :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-bot-recommendation-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-bot-recommendation-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %describe-bot-recommendation-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-recommendation-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bot-recommendation-response
                    'make-describe-bot-recommendation-response))
 (common-lisp:defun make-describe-bot-recommendation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-recommendation-results
                     encryption-setting transcript-source-setting
                     last-updated-date-time creation-date-time failure-reasons
                     bot-recommendation-id bot-recommendation-status locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-results))
      (common-lisp:list
       (common-lisp:cons "botRecommendationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-request common-lisp:nil
                       ((bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bot-request 'make-describe-bot-request))
 (common-lisp:defun make-describe-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-response common-lisp:nil
                       ((failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor %describe-bot-response-failure-reasons
                         :initform common-lisp:nil)
                        (bot-members :initarg :|botMembers| :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor %describe-bot-response-bot-members :initform
                         common-lisp:nil)
                        (bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %describe-bot-response-bot-type :initform
                         common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-bot-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-bot-response-creation-date-time :initform
                         common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %describe-bot-response-bot-status :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %describe-bot-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %describe-bot-response-data-privacy
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %describe-bot-response-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-bot-response-description :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-bot-response-bot-name :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bot-response 'make-describe-bot-response))
 (common-lisp:defun make-describe-bot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reasons bot-members bot-type
                     last-updated-date-time creation-date-time bot-status
                     idle-session-ttlin-seconds data-privacy role-arn
                     description bot-name bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-version-request common-lisp:nil
                       ((bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %describe-bot-version-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-version-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bot-version-request
                    'make-describe-bot-version-request))
 (common-lisp:defun make-describe-bot-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-version-response common-lisp:nil
                       ((bot-members :initarg :|botMembers| :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor %describe-bot-version-response-bot-members
                         :initform common-lisp:nil)
                        (bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %describe-bot-version-response-bot-type :initform
                         common-lisp:nil)
                        (parent-bot-networks :initarg :|parentBotNetworks|
                         :type
                         (common-lisp:or parent-bot-networks common-lisp:null)
                         :accessor
                         %describe-bot-version-response-parent-bot-networks
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-bot-version-response-creation-date-time
                         :initform common-lisp:nil)
                        (failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         %describe-bot-version-response-failure-reasons
                         :initform common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %describe-bot-version-response-bot-status :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %describe-bot-version-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %describe-bot-version-response-data-privacy
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %describe-bot-version-response-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-bot-version-response-description
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor %describe-bot-version-response-bot-version
                         :initform common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-bot-version-response-bot-name :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-bot-version-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bot-version-response
                    'make-describe-bot-version-response))
 (common-lisp:defun make-describe-bot-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-members bot-type parent-bot-networks
                     creation-date-time failure-reasons bot-status
                     idle-session-ttlin-seconds data-privacy role-arn
                     description bot-version bot-name bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-bot-networks))
      (common-lisp:list
       (common-lisp:cons "parentBotNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-vocabulary-metadata-request
                       common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-custom-vocabulary-metadata-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %describe-custom-vocabulary-metadata-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-custom-vocabulary-metadata-request-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-custom-vocabulary-metadata-request
                    'make-describe-custom-vocabulary-metadata-request))
 (common-lisp:defun make-describe-custom-vocabulary-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-vocabulary-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-vocabulary-metadata-response
                       common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-custom-vocabulary-metadata-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-custom-vocabulary-metadata-response-creation-date-time
                         :initform common-lisp:nil)
                        (custom-vocabulary-status :initarg
                         :|customVocabularyStatus| :type
                         (common-lisp:or custom-vocabulary-status
                                         common-lisp:null)
                         :accessor
                         %describe-custom-vocabulary-metadata-response-custom-vocabulary-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-custom-vocabulary-metadata-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %describe-custom-vocabulary-metadata-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-custom-vocabulary-metadata-response-bot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-vocabulary-metadata-response
                    'make-describe-custom-vocabulary-metadata-response))
 (common-lisp:defun make-describe-custom-vocabulary-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     custom-vocabulary-status locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-vocabulary-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-status))
      (common-lisp:list
       (common-lisp:cons "customVocabularyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-request common-lisp:nil
                       ((export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-export-request-export-id :initform
                         (common-lisp:error ":exportid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-export-request 'make-describe-export-request))
 (common-lisp:defun make-describe-export-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-response common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-export-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-export-response-creation-date-time :initform
                         common-lisp:nil)
                        (download-url :initarg :|downloadUrl| :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor %describe-export-response-download-url
                         :initform common-lisp:nil)
                        (failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor %describe-export-response-failure-reasons
                         :initform common-lisp:nil)
                        (export-status :initarg :|exportStatus| :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor %describe-export-response-export-status
                         :initform common-lisp:nil)
                        (file-format :initarg :|fileFormat| :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor %describe-export-response-file-format
                         :initform common-lisp:nil)
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         %describe-export-response-resource-specification
                         :initform common-lisp:nil)
                        (export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-export-response-export-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-export-response 'make-describe-export-response))
 (common-lisp:defun make-describe-export-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     download-url failure-reasons export-status file-format
                     resource-specification export-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-url))
      (common-lisp:list
       (common-lisp:cons "downloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-import-request common-lisp:nil
                       ((import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-import-request-import-id :initform
                         (common-lisp:error ":importid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-import-request 'make-describe-import-request))
 (common-lisp:defun make-describe-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key import-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-import-response common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-import-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-import-response-creation-date-time :initform
                         common-lisp:nil)
                        (failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor %describe-import-response-failure-reasons
                         :initform common-lisp:nil)
                        (import-status :initarg :|importStatus| :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor %describe-import-response-import-status
                         :initform common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %describe-import-response-merge-strategy
                         :initform common-lisp:nil)
                        (imported-resource-name :initarg
                         :|importedResourceName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-import-response-imported-resource-name
                         :initform common-lisp:nil)
                        (imported-resource-id :initarg :|importedResourceId|
                         :type
                         (common-lisp:or imported-resource-id common-lisp:null)
                         :accessor
                         %describe-import-response-imported-resource-id
                         :initform common-lisp:nil)
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or import-resource-specification
                                         common-lisp:null)
                         :accessor
                         %describe-import-response-resource-specification
                         :initform common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-import-response-import-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-import-response 'make-describe-import-response))
 (common-lisp:defun make-describe-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     failure-reasons import-status merge-strategy
                     imported-resource-name imported-resource-id
                     resource-specification import-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-id))
      (common-lisp:list
       (common-lisp:cons "importedResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-name))
      (common-lisp:list
       (common-lisp:cons "importedResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-intent-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-intent-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-intent-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-intent-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-intent-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-intent-request 'make-describe-intent-request))
 (common-lisp:defun make-describe-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-intent-response common-lisp:nil
                       ((initial-response-setting :initarg
                         :|initialResponseSetting| :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         %describe-intent-response-initial-response-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-intent-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-intent-response-creation-date-time :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-intent-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %describe-intent-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-intent-response-bot-id :initform
                         common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         %describe-intent-response-kendra-configuration
                         :initform common-lisp:nil)
                        (output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor %describe-intent-response-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor %describe-intent-response-input-contexts
                         :initform common-lisp:nil)
                        (intent-closing-setting :initarg
                         :|intentClosingSetting| :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         %describe-intent-response-intent-closing-setting
                         :initform common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :|intentConfirmationSetting| :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         %describe-intent-response-intent-confirmation-setting
                         :initform common-lisp:nil)
                        (slot-priorities :initarg :|slotPriorities| :type
                         (common-lisp:or slot-priorities-list common-lisp:null)
                         :accessor %describe-intent-response-slot-priorities
                         :initform common-lisp:nil)
                        (fulfillment-code-hook :initarg :|fulfillmentCodeHook|
                         :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         %describe-intent-response-fulfillment-code-hook
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor %describe-intent-response-dialog-code-hook
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor %describe-intent-response-sample-utterances
                         :initform common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         %describe-intent-response-parent-intent-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-intent-response-description
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-intent-response-intent-name :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-intent-response-intent-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-intent-response 'make-describe-intent-response))
 (common-lisp:defun make-describe-intent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-response-setting
                     last-updated-date-time creation-date-time locale-id
                     bot-version bot-id kendra-configuration output-contexts
                     input-contexts intent-closing-setting
                     intent-confirmation-setting slot-priorities
                     fulfillment-code-hook dialog-code-hook sample-utterances
                     parent-intent-signature description intent-name intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-priorities))
      (common-lisp:list
       (common-lisp:cons "slotPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %describe-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policy-request
                    'make-describe-resource-policy-request))
 (common-lisp:defun make-describe-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policy-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %describe-resource-policy-response-revision-id
                         :initform common-lisp:nil)
                        (policy :initarg :|policy| :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %describe-resource-policy-response-policy :initform
                         common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %describe-resource-policy-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policy-response
                    'make-describe-resource-policy-response))
 (common-lisp:defun make-describe-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id policy resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-request common-lisp:nil
                       ((intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-slot-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-slot-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-request-slot-id :initform
                         (common-lisp:error ":slotid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-slot-request 'make-describe-slot-request))
 (common-lisp:defun make-describe-slot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key intent-id locale-id bot-version bot-id
                     slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-response common-lisp:nil
                       ((sub-slot-setting :initarg :|subSlotSetting| :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor %describe-slot-response-sub-slot-setting
                         :initform common-lisp:nil)
                        (multiple-values-setting :initarg
                         :|multipleValuesSetting| :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         %describe-slot-response-multiple-values-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-slot-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-slot-response-creation-date-time :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-response-intent-id :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-slot-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-slot-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-response-bot-id :initform
                         common-lisp:nil)
                        (obfuscation-setting :initarg :|obfuscationSetting|
                         :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor %describe-slot-response-obfuscation-setting
                         :initform common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :|valueElicitationSetting| :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         %describe-slot-response-value-elicitation-setting
                         :initform common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %describe-slot-response-slot-type-id
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-slot-response-description
                         :initform common-lisp:nil)
                        (slot-name :initarg :|slotName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-slot-response-slot-name :initform
                         common-lisp:nil)
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-response-slot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-slot-response 'make-describe-slot-response))
 (common-lisp:defun make-describe-slot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-slot-setting multiple-values-setting
                     last-updated-date-time creation-date-time intent-id
                     locale-id bot-version bot-id obfuscation-setting
                     value-elicitation-setting slot-type-id description
                     slot-name slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-type-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-slot-type-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-slot-type-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-type-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-type-request-slot-type-id :initform
                         (common-lisp:error ":slottypeid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-slot-type-request
                    'make-describe-slot-type-request))
 (common-lisp:defun make-describe-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id bot-version bot-id
                     slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-type-response common-lisp:nil
                       ((composite-slot-type-setting :initarg
                         :|compositeSlotTypeSetting| :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         %describe-slot-type-response-composite-slot-type-setting
                         :initform common-lisp:nil)
                        (external-source-setting :initarg
                         :|externalSourceSetting| :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         %describe-slot-type-response-external-source-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-slot-type-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-slot-type-response-creation-date-time
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %describe-slot-type-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %describe-slot-type-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-type-response-bot-id :initform
                         common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %describe-slot-type-response-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-setting :initarg
                         :|valueSelectionSetting| :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         %describe-slot-type-response-value-selection-setting
                         :initform common-lisp:nil)
                        (slot-type-values :initarg :|slotTypeValues| :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor
                         %describe-slot-type-response-slot-type-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-slot-type-response-description
                         :initform common-lisp:nil)
                        (slot-type-name :initarg :|slotTypeName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-slot-type-response-slot-type-name :initform
                         common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %describe-slot-type-response-slot-type-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-slot-type-response
                    'make-describe-slot-type-response))
 (common-lisp:defun make-describe-slot-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key composite-slot-type-setting
                     external-source-setting last-updated-date-time
                     creation-date-time locale-id bot-version bot-id
                     parent-slot-type-signature value-selection-setting
                     slot-type-values description slot-type-name slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dialog-action common-lisp:nil
                       ((suppress-next-message :initarg :|suppressNextMessage|
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %dialog-action-suppress-next-message
                         :initform common-lisp:nil)
                        (slot-to-elicit :initarg :|slotToElicit| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %dialog-action-slot-to-elicit :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or dialog-action-type common-lisp:null)
                         :accessor %dialog-action-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'dialog-action 'make-dialog-action))
 (common-lisp:defun make-dialog-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suppress-next-message slot-to-elicit
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "slotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-next-message))
      (common-lisp:list
       (common-lisp:cons "suppressNextMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialog-action))
   common-lisp:nil))
(common-lisp:deftype dialog-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dialog-code-hook-invocation-setting common-lisp:nil
                       ((post-code-hook-specification :initarg
                         :|postCodeHookSpecification| :type
                         (common-lisp:or
                          post-dialog-code-hook-invocation-specification
                          common-lisp:null)
                         :accessor
                         %dialog-code-hook-invocation-setting-post-code-hook-specification
                         :initform
                         (common-lisp:error
                          ":postcodehookspecification is required"))
                        (invocation-label :initarg :|invocationLabel| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %dialog-code-hook-invocation-setting-invocation-label
                         :initform common-lisp:nil)
                        (active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %dialog-code-hook-invocation-setting-active
                         :initform (common-lisp:error ":active is required"))
                        (enable-code-hook-invocation :initarg
                         :|enableCodeHookInvocation| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %dialog-code-hook-invocation-setting-enable-code-hook-invocation
                         :initform
                         (common-lisp:error
                          ":enablecodehookinvocation is required"))))
 (common-lisp:export
  (common-lisp:list 'dialog-code-hook-invocation-setting
                    'make-dialog-code-hook-invocation-setting))
 (common-lisp:defun make-dialog-code-hook-invocation-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key post-code-hook-specification
                     invocation-label active enable-code-hook-invocation)
   (common-lisp:apply #'common-lisp:make-instance
                      'dialog-code-hook-invocation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-invocation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-invocation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-code-hook-invocation))
      (common-lisp:list
       (common-lisp:cons "enableCodeHookInvocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-label))
      (common-lisp:list
       (common-lisp:cons "invocationLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-code-hook-specification))
      (common-lisp:list
       (common-lisp:cons "postCodeHookSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-invocation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dialog-code-hook-settings common-lisp:nil
                       ((enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dialog-code-hook-settings-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'dialog-code-hook-settings
                    'make-dialog-code-hook-settings))
 (common-lisp:defun make-dialog-code-hook-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-code-hook-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dialog-state common-lisp:nil
                       ((session-attributes :initarg :|sessionAttributes| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %dialog-state-session-attributes :initform
                         common-lisp:nil)
                        (intent :initarg :|intent| :type
                         (common-lisp:or intent-override common-lisp:null)
                         :accessor %dialog-state-intent :initform
                         common-lisp:nil)
                        (dialog-action :initarg :|dialogAction| :type
                         (common-lisp:or dialog-action common-lisp:null)
                         :accessor %dialog-state-dialog-action :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dialog-state 'make-dialog-state))
 (common-lisp:defun make-dialog-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-attributes intent dialog-action)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialog-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialog-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action))
      (common-lisp:list
       (common-lisp:cons "dialogAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialog-state))
   common-lisp:nil))
(common-lisp:deftype draft-bot-version () 'common-lisp:string)
(common-lisp:deftype effect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass elicitation-code-hook-invocation-setting common-lisp:nil
                       ((invocation-label :initarg :|invocationLabel| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %elicitation-code-hook-invocation-setting-invocation-label
                         :initform common-lisp:nil)
                        (enable-code-hook-invocation :initarg
                         :|enableCodeHookInvocation| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %elicitation-code-hook-invocation-setting-enable-code-hook-invocation
                         :initform
                         (common-lisp:error
                          ":enablecodehookinvocation is required"))))
 (common-lisp:export
  (common-lisp:list 'elicitation-code-hook-invocation-setting
                    'make-elicitation-code-hook-invocation-setting))
 (common-lisp:defun make-elicitation-code-hook-invocation-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-label
                     enable-code-hook-invocation)
   (common-lisp:apply #'common-lisp:make-instance
                      'elicitation-code-hook-invocation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elicitation-code-hook-invocation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elicitation-code-hook-invocation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-code-hook-invocation))
      (common-lisp:list
       (common-lisp:cons "enableCodeHookInvocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-label))
      (common-lisp:list
       (common-lisp:cons "invocationLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elicitation-code-hook-invocation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-setting common-lisp:nil
                       ((associated-transcripts-password :initarg
                         :|associatedTranscriptsPassword| :type
                         (common-lisp:or file-password common-lisp:null)
                         :accessor
                         %encryption-setting-associated-transcripts-password
                         :initform common-lisp:nil)
                        (bot-locale-export-password :initarg
                         :|botLocaleExportPassword| :type
                         (common-lisp:or file-password common-lisp:null)
                         :accessor
                         %encryption-setting-bot-locale-export-password
                         :initform common-lisp:nil)
                        (kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %encryption-setting-kms-key-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'encryption-setting 'make-encryption-setting))
 (common-lisp:defun make-encryption-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key associated-transcripts-password
                     bot-locale-export-password kms-key-arn)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-export-password))
      (common-lisp:list
       (common-lisp:cons "botLocaleExportPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-transcripts-password))
      (common-lisp:list
       (common-lisp:cons "associatedTranscriptsPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-setting))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or export-filter-operator
                                         common-lisp:null)
                         :accessor %export-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %export-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or export-filter-name common-lisp:null)
                         :accessor %export-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'export-filter 'make-export-filter))
 (common-lisp:defun make-export-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'export-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-filter))
   common-lisp:nil))
(common-lisp:deftype export-filter-name () 'common-lisp:string)
(common-lisp:deftype export-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype export-filters ()
   '(trivial-types:proper-list export-filter))
 (common-lisp:defun |make-export-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-resource-specification common-lisp:nil
                       ((custom-vocabulary-export-specification :initarg
                         :|customVocabularyExportSpecification| :type
                         (common-lisp:or custom-vocabulary-export-specification
                                         common-lisp:null)
                         :accessor
                         %export-resource-specification-custom-vocabulary-export-specification
                         :initform common-lisp:nil)
                        (bot-locale-export-specification :initarg
                         :|botLocaleExportSpecification| :type
                         (common-lisp:or bot-locale-export-specification
                                         common-lisp:null)
                         :accessor
                         %export-resource-specification-bot-locale-export-specification
                         :initform common-lisp:nil)
                        (bot-export-specification :initarg
                         :|botExportSpecification| :type
                         (common-lisp:or bot-export-specification
                                         common-lisp:null)
                         :accessor
                         %export-resource-specification-bot-export-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-resource-specification
                    'make-export-resource-specification))
 (common-lisp:defun make-export-resource-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-vocabulary-export-specification
                     bot-locale-export-specification bot-export-specification)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-export-specification))
      (common-lisp:list
       (common-lisp:cons "botExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-export-specification))
      (common-lisp:list
       (common-lisp:cons "botLocaleExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-export-specification))
      (common-lisp:list
       (common-lisp:cons "customVocabularyExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-resource-specification))
   common-lisp:nil))
(common-lisp:deftype export-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %export-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or export-sort-attribute
                                         common-lisp:null)
                         :accessor %export-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export (common-lisp:list 'export-sort-by 'make-export-sort-by))
 (common-lisp:defun make-export-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'export-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-sort-by))
   common-lisp:nil))
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-summary common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %export-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %export-summary-creation-date-time :initform
                         common-lisp:nil)
                        (export-status :initarg :|exportStatus| :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor %export-summary-export-status :initform
                         common-lisp:nil)
                        (file-format :initarg :|fileFormat| :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor %export-summary-file-format :initform
                         common-lisp:nil)
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor %export-summary-resource-specification
                         :initform common-lisp:nil)
                        (export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %export-summary-export-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'export-summary 'make-export-summary))
 (common-lisp:defun make-export-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     export-status file-format resource-specification
                     export-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-summary-list ()
   '(trivial-types:proper-list export-summary))
 (common-lisp:defun |make-export-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass external-source-setting common-lisp:nil
                       ((grammar-slot-type-setting :initarg
                         :|grammarSlotTypeSetting| :type
                         (common-lisp:or grammar-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         %external-source-setting-grammar-slot-type-setting
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'external-source-setting 'make-external-source-setting))
 (common-lisp:defun make-external-source-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grammar-slot-type-setting)
   (common-lisp:apply #'common-lisp:make-instance 'external-source-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-source-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-source-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grammar-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "grammarSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-source-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failed-custom-vocabulary-item common-lisp:nil
                       ((error-code :initarg :|errorCode| :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %failed-custom-vocabulary-item-error-code :initform
                         common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %failed-custom-vocabulary-item-error-message
                         :initform common-lisp:nil)
                        (item-id :initarg :|itemId| :type
                         (common-lisp:or item-id common-lisp:null) :accessor
                         %failed-custom-vocabulary-item-item-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-custom-vocabulary-item
                    'make-failed-custom-vocabulary-item))
 (common-lisp:defun make-failed-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-code error-message item-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-custom-vocabulary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-custom-vocabulary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-custom-vocabulary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-custom-vocabulary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-custom-vocabulary-items ()
   '(trivial-types:proper-list failed-custom-vocabulary-item))
 (common-lisp:defun |make-failed-custom-vocabulary-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype failure-reasons ()
   '(trivial-types:proper-list failure-reason))
 (common-lisp:defun |make-failure-reasons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-password () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fulfillment-code-hook-settings common-lisp:nil
                       ((active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %fulfillment-code-hook-settings-active
                         :initform common-lisp:nil)
                        (fulfillment-updates-specification :initarg
                         :|fulfillmentUpdatesSpecification| :type
                         (common-lisp:or fulfillment-updates-specification
                                         common-lisp:null)
                         :accessor
                         %fulfillment-code-hook-settings-fulfillment-updates-specification
                         :initform common-lisp:nil)
                        (post-fulfillment-status-specification :initarg
                         :|postFulfillmentStatusSpecification| :type
                         (common-lisp:or post-fulfillment-status-specification
                                         common-lisp:null)
                         :accessor
                         %fulfillment-code-hook-settings-post-fulfillment-status-specification
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %fulfillment-code-hook-settings-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'fulfillment-code-hook-settings
                    'make-fulfillment-code-hook-settings))
 (common-lisp:defun make-fulfillment-code-hook-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active fulfillment-updates-specification
                     post-fulfillment-status-specification enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-code-hook-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-code-hook-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-code-hook-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-fulfillment-status-specification))
      (common-lisp:list
       (common-lisp:cons "postFulfillmentStatusSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-updates-specification))
      (common-lisp:list
       (common-lisp:cons "fulfillmentUpdatesSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-code-hook-settings))
   common-lisp:nil))
(common-lisp:deftype fulfillment-start-response-delay () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass fulfillment-start-response-specification common-lisp:nil
                       ((allow-interrupt :initarg :|allowInterrupt| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %fulfillment-start-response-specification-allow-interrupt
                         :initform common-lisp:nil)
                        (message-groups :initarg :|messageGroups| :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         %fulfillment-start-response-specification-message-groups
                         :initform
                         (common-lisp:error ":messagegroups is required"))
                        (delay-in-seconds :initarg :|delayInSeconds| :type
                         (common-lisp:or fulfillment-start-response-delay
                                         common-lisp:null)
                         :accessor
                         %fulfillment-start-response-specification-delay-in-seconds
                         :initform
                         (common-lisp:error ":delayinseconds is required"))))
 (common-lisp:export
  (common-lisp:list 'fulfillment-start-response-specification
                    'make-fulfillment-start-response-specification))
 (common-lisp:defun make-fulfillment-start-response-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-interrupt message-groups
                     delay-in-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-start-response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-start-response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-start-response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "delayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-start-response-specification))
   common-lisp:nil))
(common-lisp:deftype fulfillment-timeout () 'common-lisp:integer)
(common-lisp:deftype fulfillment-update-response-frequency ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass fulfillment-update-response-specification
                       common-lisp:nil
                       ((allow-interrupt :initarg :|allowInterrupt| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %fulfillment-update-response-specification-allow-interrupt
                         :initform common-lisp:nil)
                        (message-groups :initarg :|messageGroups| :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         %fulfillment-update-response-specification-message-groups
                         :initform
                         (common-lisp:error ":messagegroups is required"))
                        (frequency-in-seconds :initarg :|frequencyInSeconds|
                         :type
                         (common-lisp:or fulfillment-update-response-frequency
                                         common-lisp:null)
                         :accessor
                         %fulfillment-update-response-specification-frequency-in-seconds
                         :initform
                         (common-lisp:error
                          ":frequencyinseconds is required"))))
 (common-lisp:export
  (common-lisp:list 'fulfillment-update-response-specification
                    'make-fulfillment-update-response-specification))
 (common-lisp:defun make-fulfillment-update-response-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-interrupt message-groups
                     frequency-in-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-update-response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-update-response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-update-response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frequency-in-seconds))
      (common-lisp:list
       (common-lisp:cons "frequencyInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-update-response-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fulfillment-updates-specification common-lisp:nil
                       ((timeout-in-seconds :initarg :|timeoutInSeconds| :type
                         (common-lisp:or fulfillment-timeout common-lisp:null)
                         :accessor
                         %fulfillment-updates-specification-timeout-in-seconds
                         :initform common-lisp:nil)
                        (update-response :initarg :|updateResponse| :type
                         (common-lisp:or
                          fulfillment-update-response-specification
                          common-lisp:null)
                         :accessor
                         %fulfillment-updates-specification-update-response
                         :initform common-lisp:nil)
                        (start-response :initarg :|startResponse| :type
                         (common-lisp:or
                          fulfillment-start-response-specification
                          common-lisp:null)
                         :accessor
                         %fulfillment-updates-specification-start-response
                         :initform common-lisp:nil)
                        (active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %fulfillment-updates-specification-active
                         :initform (common-lisp:error ":active is required"))))
 (common-lisp:export
  (common-lisp:list 'fulfillment-updates-specification
                    'make-fulfillment-updates-specification))
 (common-lisp:defun make-fulfillment-updates-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-in-seconds update-response
                     start-response active)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-updates-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-updates-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-updates-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-response))
      (common-lisp:list
       (common-lisp:cons "startResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-response))
      (common-lisp:list
       (common-lisp:cons "updateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-updates-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grammar-slot-type-setting common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or grammar-slot-type-source
                                         common-lisp:null)
                         :accessor %grammar-slot-type-setting-source :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grammar-slot-type-setting
                    'make-grammar-slot-type-setting))
 (common-lisp:defun make-grammar-slot-type-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source)
   (common-lisp:apply #'common-lisp:make-instance 'grammar-slot-type-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grammar-slot-type-source common-lisp:nil
                       ((kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %grammar-slot-type-source-kms-key-arn
                         :initform common-lisp:nil)
                        (s3object-key :initarg :|s3ObjectKey| :type
                         (common-lisp:or s3object-path common-lisp:null)
                         :accessor %grammar-slot-type-source-s3object-key
                         :initform
                         (common-lisp:error ":s3objectkey is required"))
                        (s3bucket-name :initarg :|s3BucketName| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %grammar-slot-type-source-s3bucket-name
                         :initform
                         (common-lisp:error ":s3bucketname is required"))))
 (common-lisp:export
  (common-lisp:list 'grammar-slot-type-source 'make-grammar-slot-type-source))
 (common-lisp:defun make-grammar-slot-type-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn s3object-key s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'grammar-slot-type-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-key))
      (common-lisp:list
       (common-lisp:cons "s3ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-source))
   common-lisp:nil))
(common-lisp:deftype hit-count () 'common-lisp:integer)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-response-card common-lisp:nil
                       ((buttons :initarg :|buttons| :type
                         (common-lisp:or buttons-list common-lisp:null)
                         :accessor %image-response-card-buttons :initform
                         common-lisp:nil)
                        (image-url :initarg :|imageUrl| :type
                         (common-lisp:or attachment-url common-lisp:null)
                         :accessor %image-response-card-image-url :initform
                         common-lisp:nil)
                        (subtitle :initarg :|subtitle| :type
                         (common-lisp:or attachment-title common-lisp:null)
                         :accessor %image-response-card-subtitle :initform
                         common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or attachment-title common-lisp:null)
                         :accessor %image-response-card-title :initform
                         (common-lisp:error ":title is required"))))
 (common-lisp:export
  (common-lisp:list 'image-response-card 'make-image-response-card))
 (common-lisp:defun make-image-response-card
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key buttons image-url subtitle title)
   (common-lisp:apply #'common-lisp:make-instance 'image-response-card
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-response-card))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-response-card))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "imageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buttons))
      (common-lisp:list
       (common-lisp:cons "buttons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-response-card))
   common-lisp:nil))
(common-lisp:deftype import-export-file-format () 'common-lisp:string)
(common-lisp:deftype import-export-file-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or import-filter-operator
                                         common-lisp:null)
                         :accessor %import-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %import-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or import-filter-name common-lisp:null)
                         :accessor %import-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'import-filter 'make-import-filter))
 (common-lisp:defun make-import-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'import-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-filter))
   common-lisp:nil))
(common-lisp:deftype import-filter-name () 'common-lisp:string)
(common-lisp:deftype import-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-filters ()
   '(trivial-types:proper-list import-filter))
 (common-lisp:defun |make-import-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-resource-specification common-lisp:nil
                       ((custom-vocabulary-import-specification :initarg
                         :|customVocabularyImportSpecification| :type
                         (common-lisp:or custom-vocabulary-import-specification
                                         common-lisp:null)
                         :accessor
                         %import-resource-specification-custom-vocabulary-import-specification
                         :initform common-lisp:nil)
                        (bot-locale-import-specification :initarg
                         :|botLocaleImportSpecification| :type
                         (common-lisp:or bot-locale-import-specification
                                         common-lisp:null)
                         :accessor
                         %import-resource-specification-bot-locale-import-specification
                         :initform common-lisp:nil)
                        (bot-import-specification :initarg
                         :|botImportSpecification| :type
                         (common-lisp:or bot-import-specification
                                         common-lisp:null)
                         :accessor
                         %import-resource-specification-bot-import-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-resource-specification
                    'make-import-resource-specification))
 (common-lisp:defun make-import-resource-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-vocabulary-import-specification
                     bot-locale-import-specification bot-import-specification)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-import-specification))
      (common-lisp:list
       (common-lisp:cons "botImportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-import-specification))
      (common-lisp:list
       (common-lisp:cons "botLocaleImportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-import-specification))
      (common-lisp:list
       (common-lisp:cons "customVocabularyImportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-resource-specification))
   common-lisp:nil))
(common-lisp:deftype import-resource-type () 'common-lisp:string)
(common-lisp:deftype import-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %import-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or import-sort-attribute
                                         common-lisp:null)
                         :accessor %import-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export (common-lisp:list 'import-sort-by 'make-import-sort-by))
 (common-lisp:defun make-import-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'import-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-sort-by))
   common-lisp:nil))
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-summary common-lisp:nil
                       ((imported-resource-type :initarg
                         :|importedResourceType| :type
                         (common-lisp:or import-resource-type common-lisp:null)
                         :accessor %import-summary-imported-resource-type
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %import-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %import-summary-creation-date-time :initform
                         common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %import-summary-merge-strategy :initform
                         common-lisp:nil)
                        (import-status :initarg :|importStatus| :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor %import-summary-import-status :initform
                         common-lisp:nil)
                        (imported-resource-name :initarg
                         :|importedResourceName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %import-summary-imported-resource-name :initform
                         common-lisp:nil)
                        (imported-resource-id :initarg :|importedResourceId|
                         :type
                         (common-lisp:or imported-resource-id common-lisp:null)
                         :accessor %import-summary-imported-resource-id
                         :initform common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %import-summary-import-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'import-summary 'make-import-summary))
 (common-lisp:defun make-import-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key imported-resource-type
                     last-updated-date-time creation-date-time merge-strategy
                     import-status imported-resource-name imported-resource-id
                     import-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-id))
      (common-lisp:list
       (common-lisp:cons "importedResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-name))
      (common-lisp:list
       (common-lisp:cons "importedResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-type))
      (common-lisp:list
       (common-lisp:cons "importedResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-summary-list ()
   '(trivial-types:proper-list import-summary))
 (common-lisp:defun |make-import-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype imported-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass initial-response-setting common-lisp:nil
                       ((code-hook :initarg :|codeHook| :type
                         (common-lisp:or dialog-code-hook-invocation-setting
                                         common-lisp:null)
                         :accessor %initial-response-setting-code-hook
                         :initform common-lisp:nil)
                        (conditional :initarg :|conditional| :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor %initial-response-setting-conditional
                         :initform common-lisp:nil)
                        (next-step :initarg :|nextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %initial-response-setting-next-step
                         :initform common-lisp:nil)
                        (initial-response :initarg :|initialResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor %initial-response-setting-initial-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'initial-response-setting 'make-initial-response-setting))
 (common-lisp:defun make-initial-response-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-hook conditional next-step
                     initial-response)
   (common-lisp:apply #'common-lisp:make-instance 'initial-response-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initial-response-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initial-response-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-response))
      (common-lisp:list
       (common-lisp:cons "initialResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional))
      (common-lisp:list
       (common-lisp:cons "conditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initial-response-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-context common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %input-context-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'input-context 'make-input-context))
 (common-lisp:defun make-input-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'input-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-contexts-list ()
   '(trivial-types:proper-list input-context))
 (common-lisp:defun |make-input-contexts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-context))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass intent-closing-setting common-lisp:nil
                       ((conditional :initarg :|conditional| :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor %intent-closing-setting-conditional
                         :initform common-lisp:nil)
                        (next-step :initarg :|nextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %intent-closing-setting-next-step :initform
                         common-lisp:nil)
                        (active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %intent-closing-setting-active :initform
                         common-lisp:nil)
                        (closing-response :initarg :|closingResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor %intent-closing-setting-closing-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'intent-closing-setting 'make-intent-closing-setting))
 (common-lisp:defun make-intent-closing-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional next-step active
                     closing-response)
   (common-lisp:apply #'common-lisp:make-instance 'intent-closing-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-closing-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-closing-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'closing-response))
      (common-lisp:list
       (common-lisp:cons "closingResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional))
      (common-lisp:list
       (common-lisp:cons "conditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-closing-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-confirmation-setting common-lisp:nil
                       ((elicitation-code-hook :initarg :|elicitationCodeHook|
                         :type
                         (common-lisp:or
                          elicitation-code-hook-invocation-setting
                          common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-elicitation-code-hook
                         :initform common-lisp:nil)
                        (code-hook :initarg :|codeHook| :type
                         (common-lisp:or dialog-code-hook-invocation-setting
                                         common-lisp:null)
                         :accessor %intent-confirmation-setting-code-hook
                         :initform common-lisp:nil)
                        (failure-conditional :initarg :|failureConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-failure-conditional
                         :initform common-lisp:nil)
                        (failure-next-step :initarg :|failureNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-failure-next-step
                         :initform common-lisp:nil)
                        (failure-response :initarg :|failureResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-failure-response
                         :initform common-lisp:nil)
                        (declination-conditional :initarg
                         :|declinationConditional| :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-declination-conditional
                         :initform common-lisp:nil)
                        (declination-next-step :initarg :|declinationNextStep|
                         :type (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-declination-next-step
                         :initform common-lisp:nil)
                        (confirmation-conditional :initarg
                         :|confirmationConditional| :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-confirmation-conditional
                         :initform common-lisp:nil)
                        (confirmation-next-step :initarg
                         :|confirmationNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-confirmation-next-step
                         :initform common-lisp:nil)
                        (confirmation-response :initarg :|confirmationResponse|
                         :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-confirmation-response
                         :initform common-lisp:nil)
                        (active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %intent-confirmation-setting-active
                         :initform common-lisp:nil)
                        (declination-response :initarg :|declinationResponse|
                         :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-declination-response
                         :initform common-lisp:nil)
                        (prompt-specification :initarg :|promptSpecification|
                         :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         %intent-confirmation-setting-prompt-specification
                         :initform
                         (common-lisp:error
                          ":promptspecification is required"))))
 (common-lisp:export
  (common-lisp:list 'intent-confirmation-setting
                    'make-intent-confirmation-setting))
 (common-lisp:defun make-intent-confirmation-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key elicitation-code-hook code-hook
                     failure-conditional failure-next-step failure-response
                     declination-conditional declination-next-step
                     confirmation-conditional confirmation-next-step
                     confirmation-response active declination-response
                     prompt-specification)
   (common-lisp:apply #'common-lisp:make-instance 'intent-confirmation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-confirmation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-confirmation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-specification))
      (common-lisp:list
       (common-lisp:cons "promptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'declination-response))
      (common-lisp:list
       (common-lisp:cons "declinationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-response))
      (common-lisp:list
       (common-lisp:cons "confirmationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-next-step))
      (common-lisp:list
       (common-lisp:cons "confirmationNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-conditional))
      (common-lisp:list
       (common-lisp:cons "confirmationConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'declination-next-step))
      (common-lisp:list
       (common-lisp:cons "declinationNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'declination-conditional))
      (common-lisp:list
       (common-lisp:cons "declinationConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elicitation-code-hook))
      (common-lisp:list
       (common-lisp:cons "elicitationCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-confirmation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or intent-filter-operator
                                         common-lisp:null)
                         :accessor %intent-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %intent-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or intent-filter-name common-lisp:null)
                         :accessor %intent-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'intent-filter 'make-intent-filter))
 (common-lisp:defun make-intent-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'intent-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-filter))
   common-lisp:nil))
(common-lisp:deftype intent-filter-name () 'common-lisp:string)
(common-lisp:deftype intent-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype intent-filters ()
   '(trivial-types:proper-list intent-filter))
 (common-lisp:defun |make-intent-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass intent-override common-lisp:nil
                       ((slots :initarg :|slots| :type
                         (common-lisp:or slot-value-override-map
                                         common-lisp:null)
                         :accessor %intent-override-slots :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %intent-override-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'intent-override 'make-intent-override))
 (common-lisp:defun make-intent-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slots name)
   (common-lisp:apply #'common-lisp:make-instance 'intent-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-override))
   common-lisp:nil))
(common-lisp:deftype intent-signature () 'common-lisp:string)
(common-lisp:deftype intent-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intent-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %intent-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or intent-sort-attribute
                                         common-lisp:null)
                         :accessor %intent-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export (common-lisp:list 'intent-sort-by 'make-intent-sort-by))
 (common-lisp:defun make-intent-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'intent-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-statistics common-lisp:nil
                       ((discovered-intent-count :initarg
                         :|discoveredIntentCount| :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %intent-statistics-discovered-intent-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'intent-statistics 'make-intent-statistics))
 (common-lisp:defun make-intent-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key discovered-intent-count)
   (common-lisp:apply #'common-lisp:make-instance 'intent-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discovered-intent-count))
      (common-lisp:list
       (common-lisp:cons "discoveredIntentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-summary common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %intent-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor %intent-summary-output-contexts :initform
                         common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor %intent-summary-input-contexts :initform
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor %intent-summary-parent-intent-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %intent-summary-description :initform
                         common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %intent-summary-intent-name :initform common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %intent-summary-intent-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'intent-summary 'make-intent-summary))
 (common-lisp:defun make-intent-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time output-contexts
                     input-contexts parent-intent-signature description
                     intent-name intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-summary-list ()
   '(trivial-types:proper-list intent-summary))
 (common-lisp:defun |make-intent-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (lexv2-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kendra-configuration common-lisp:nil
                       ((query-filter-string :initarg :|queryFilterString|
                         :type
                         (common-lisp:or query-filter-string common-lisp:null)
                         :accessor %kendra-configuration-query-filter-string
                         :initform common-lisp:nil)
                        (query-filter-string-enabled :initarg
                         :|queryFilterStringEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %kendra-configuration-query-filter-string-enabled
                         :initform common-lisp:nil)
                        (kendra-index :initarg :|kendraIndex| :type
                         (common-lisp:or kendra-index-arn common-lisp:null)
                         :accessor %kendra-configuration-kendra-index :initform
                         (common-lisp:error ":kendraindex is required"))))
 (common-lisp:export
  (common-lisp:list 'kendra-configuration 'make-kendra-configuration))
 (common-lisp:defun make-kendra-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-filter-string
                     query-filter-string-enabled kendra-index)
   (common-lisp:apply #'common-lisp:make-instance 'kendra-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kendra-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kendra-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kendra-index))
      (common-lisp:list
       (common-lisp:cons "kendraIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-filter-string-enabled))
      (common-lisp:list
       (common-lisp:cons "queryFilterStringEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-filter-string))
      (common-lisp:list
       (common-lisp:cons "queryFilterString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kendra-configuration))
   common-lisp:nil))
(common-lisp:deftype kendra-index-arn () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-code-hook common-lisp:nil
                       ((code-hook-interface-version :initarg
                         :|codeHookInterfaceVersion| :type
                         (common-lisp:or code-hook-interface-version
                                         common-lisp:null)
                         :accessor
                         %lambda-code-hook-code-hook-interface-version
                         :initform
                         (common-lisp:error
                          ":codehookinterfaceversion is required"))
                        (lambda-arn :initarg :|lambdaARN| :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         %lambda-code-hook-lambda-arn :initform
                         (common-lisp:error ":lambdaarn is required"))))
 (common-lisp:export
  (common-lisp:list 'lambda-code-hook 'make-lambda-code-hook))
 (common-lisp:defun make-lambda-code-hook
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-hook-interface-version lambda-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-code-hook
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-code-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-code-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-hook-interface-version))
      (common-lisp:list
       (common-lisp:cons "codeHookInterfaceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-code-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lex-transcript-filter common-lisp:nil
                       ((date-range-filter :initarg :|dateRangeFilter| :type
                         (common-lisp:or date-range-filter common-lisp:null)
                         :accessor %lex-transcript-filter-date-range-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lex-transcript-filter 'make-lex-transcript-filter))
 (common-lisp:defun make-lex-transcript-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-range-filter)
   (common-lisp:apply #'common-lisp:make-instance 'lex-transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lex-transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lex-transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range-filter))
      (common-lisp:list
       (common-lisp:cons "dateRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lex-transcript-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aggregated-utterances-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-aggregated-utterances-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or aggregated-utterances-filters
                                         common-lisp:null)
                         :accessor %list-aggregated-utterances-request-filters
                         :initform common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or aggregated-utterances-sort-by
                                         common-lisp:null)
                         :accessor %list-aggregated-utterances-request-sort-by
                         :initform common-lisp:nil)
                        (aggregation-duration :initarg :|aggregationDuration|
                         :type
                         (common-lisp:or utterance-aggregation-duration
                                         common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-request-aggregation-duration
                         :initform
                         (common-lisp:error
                          ":aggregationduration is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-aggregated-utterances-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-request-bot-version
                         :initform common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-request-bot-alias-id
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-aggregated-utterances-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-aggregated-utterances-request
                    'make-list-aggregated-utterances-request))
 (common-lisp:defun make-list-aggregated-utterances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters sort-by
                     aggregation-duration locale-id bot-version bot-alias-id
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-aggregated-utterances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "aggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aggregated-utterances-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-aggregated-utterances-response-next-token
                         :initform common-lisp:nil)
                        (aggregated-utterances-summaries :initarg
                         :|aggregatedUtterancesSummaries| :type
                         (common-lisp:or aggregated-utterances-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-response-aggregated-utterances-summaries
                         :initform common-lisp:nil)
                        (aggregation-last-refreshed-date-time :initarg
                         :|aggregationLastRefreshedDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-aggregated-utterances-response-aggregation-last-refreshed-date-time
                         :initform common-lisp:nil)
                        (aggregation-window-end-time :initarg
                         :|aggregationWindowEndTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-aggregated-utterances-response-aggregation-window-end-time
                         :initform common-lisp:nil)
                        (aggregation-window-start-time :initarg
                         :|aggregationWindowStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-aggregated-utterances-response-aggregation-window-start-time
                         :initform common-lisp:nil)
                        (aggregation-duration :initarg :|aggregationDuration|
                         :type
                         (common-lisp:or utterance-aggregation-duration
                                         common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-response-aggregation-duration
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-aggregated-utterances-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-response-bot-version
                         :initform common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         %list-aggregated-utterances-response-bot-alias-id
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-aggregated-utterances-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-aggregated-utterances-response
                    'make-list-aggregated-utterances-response))
 (common-lisp:defun make-list-aggregated-utterances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     aggregated-utterances-summaries
                     aggregation-last-refreshed-date-time
                     aggregation-window-end-time aggregation-window-start-time
                     aggregation-duration locale-id bot-version bot-alias-id
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-aggregated-utterances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "aggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-window-start-time))
      (common-lisp:list
       (common-lisp:cons "aggregationWindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-window-end-time))
      (common-lisp:list
       (common-lisp:cons "aggregationWindowEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-last-refreshed-date-time))
      (common-lisp:list
       (common-lisp:cons "aggregationLastRefreshedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-utterances-summaries))
      (common-lisp:list
       (common-lisp:cons "aggregatedUtterancesSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-aliases-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-aliases-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-bot-aliases-request-max-results
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-aliases-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bot-aliases-request 'make-list-bot-aliases-request))
 (common-lisp:defun make-list-bot-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-aliases-response common-lisp:nil
                       ((bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-aliases-response-bot-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-aliases-response-next-token :initform
                         common-lisp:nil)
                        (bot-alias-summaries :initarg :|botAliasSummaries|
                         :type
                         (common-lisp:or bot-alias-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-bot-aliases-response-bot-alias-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bot-aliases-response
                    'make-list-bot-aliases-response))
 (common-lisp:defun make-list-bot-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-id next-token bot-alias-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-summaries))
      (common-lisp:list
       (common-lisp:cons "botAliasSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-locales-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-locales-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-bot-locales-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or bot-locale-filters common-lisp:null)
                         :accessor %list-bot-locales-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or bot-locale-sort-by common-lisp:null)
                         :accessor %list-bot-locales-request-sort-by :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-bot-locales-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-locales-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bot-locales-request 'make-list-bot-locales-request))
 (common-lisp:defun make-list-bot-locales-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters sort-by
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-locales-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-locales-response common-lisp:nil
                       ((bot-locale-summaries :initarg :|botLocaleSummaries|
                         :type
                         (common-lisp:or bot-locale-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-bot-locales-response-bot-locale-summaries
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-locales-response-next-token :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-bot-locales-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-locales-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bot-locales-response
                    'make-list-bot-locales-response))
 (common-lisp:defun make-list-bot-locales-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-locale-summaries next-token
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-locales-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-summaries))
      (common-lisp:list
       (common-lisp:cons "botLocaleSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-recommendations-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-recommendations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-bot-recommendations-request-max-results
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-bot-recommendations-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %list-bot-recommendations-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-recommendations-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bot-recommendations-request
                    'make-list-bot-recommendations-request))
 (common-lisp:defun make-list-bot-recommendations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-recommendations-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-recommendations-response-next-token
                         :initform common-lisp:nil)
                        (bot-recommendation-summaries :initarg
                         :|botRecommendationSummaries| :type
                         (common-lisp:or bot-recommendation-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-bot-recommendations-response-bot-recommendation-summaries
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-bot-recommendations-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %list-bot-recommendations-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-recommendations-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bot-recommendations-response
                    'make-list-bot-recommendations-response))
 (common-lisp:defun make-list-bot-recommendations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bot-recommendation-summaries
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-summaries))
      (common-lisp:list
       (common-lisp:cons "botRecommendationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-versions-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-bot-versions-request-max-results
                         :initform common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or bot-version-sort-by common-lisp:null)
                         :accessor %list-bot-versions-request-sort-by :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-versions-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bot-versions-request
                    'make-list-bot-versions-request))
 (common-lisp:defun make-list-bot-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results sort-by bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bot-versions-response-next-token :initform
                         common-lisp:nil)
                        (bot-version-summaries :initarg :|botVersionSummaries|
                         :type
                         (common-lisp:or bot-version-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-bot-versions-response-bot-version-summaries
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-bot-versions-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bot-versions-response
                    'make-list-bot-versions-response))
 (common-lisp:defun make-list-bot-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bot-version-summaries bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-summaries))
      (common-lisp:list
       (common-lisp:cons "botVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bots-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bots-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-bots-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or bot-filters common-lisp:null)
                         :accessor %list-bots-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or bot-sort-by common-lisp:null)
                         :accessor %list-bots-request-sort-by :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bots-request 'make-list-bots-request))
 (common-lisp:defun make-list-bots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters sort-by)
   (common-lisp:apply #'common-lisp:make-instance 'list-bots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bots-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bots-response-next-token :initform
                         common-lisp:nil)
                        (bot-summaries :initarg :|botSummaries| :type
                         (common-lisp:or bot-summary-list common-lisp:null)
                         :accessor %list-bots-response-bot-summaries :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bots-response 'make-list-bots-response))
 (common-lisp:defun make-list-bots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bot-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-bots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-summaries))
      (common-lisp:list
       (common-lisp:cons "botSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-intents-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-built-in-intents-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or built-ins-max-results
                                         common-lisp:null)
                         :accessor %list-built-in-intents-request-max-results
                         :initform common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or built-in-intent-sort-by
                                         common-lisp:null)
                         :accessor %list-built-in-intents-request-sort-by
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-built-in-intents-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-built-in-intents-request
                    'make-list-built-in-intents-request))
 (common-lisp:defun make-list-built-in-intents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results sort-by locale-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-intents-response common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-built-in-intents-response-locale-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-built-in-intents-response-next-token :initform
                         common-lisp:nil)
                        (built-in-intent-summaries :initarg
                         :|builtInIntentSummaries| :type
                         (common-lisp:or built-in-intent-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-built-in-intents-response-built-in-intent-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-built-in-intents-response
                    'make-list-built-in-intents-response))
 (common-lisp:defun make-list-built-in-intents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id next-token
                     built-in-intent-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'built-in-intent-summaries))
      (common-lisp:list
       (common-lisp:cons "builtInIntentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-slot-types-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-built-in-slot-types-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or built-ins-max-results
                                         common-lisp:null)
                         :accessor
                         %list-built-in-slot-types-request-max-results
                         :initform common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or built-in-slot-type-sort-by
                                         common-lisp:null)
                         :accessor %list-built-in-slot-types-request-sort-by
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-built-in-slot-types-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-built-in-slot-types-request
                    'make-list-built-in-slot-types-request))
 (common-lisp:defun make-list-built-in-slot-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results sort-by locale-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-slot-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-slot-types-response common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-built-in-slot-types-response-locale-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-built-in-slot-types-response-next-token
                         :initform common-lisp:nil)
                        (built-in-slot-type-summaries :initarg
                         :|builtInSlotTypeSummaries| :type
                         (common-lisp:or built-in-slot-type-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-built-in-slot-types-response-built-in-slot-type-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-built-in-slot-types-response
                    'make-list-built-in-slot-types-response))
 (common-lisp:defun make-list-built-in-slot-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id next-token
                     built-in-slot-type-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-slot-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'built-in-slot-type-summaries))
      (common-lisp:list
       (common-lisp:cons "builtInSlotTypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-vocabulary-items-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-custom-vocabulary-items-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-custom-vocabulary-items-request-max-results
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-custom-vocabulary-items-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %list-custom-vocabulary-items-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-custom-vocabulary-items-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-custom-vocabulary-items-request
                    'make-list-custom-vocabulary-items-request))
 (common-lisp:defun make-list-custom-vocabulary-items-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-vocabulary-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-vocabulary-items-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-custom-vocabulary-items-response-next-token
                         :initform common-lisp:nil)
                        (custom-vocabulary-items :initarg
                         :|customVocabularyItems| :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         %list-custom-vocabulary-items-response-custom-vocabulary-items
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-custom-vocabulary-items-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %list-custom-vocabulary-items-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-custom-vocabulary-items-response-bot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-custom-vocabulary-items-response
                    'make-list-custom-vocabulary-items-response))
 (common-lisp:defun make-list-custom-vocabulary-items-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token custom-vocabulary-items
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-vocabulary-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-items))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-exports-request-locale-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-exports-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-exports-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or export-filters common-lisp:null)
                         :accessor %list-exports-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or export-sort-by common-lisp:null)
                         :accessor %list-exports-request-sort-by :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-exports-request-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-exports-request-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-exports-request 'make-list-exports-request))
 (common-lisp:defun make-list-exports-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id next-token max-results filters
                     sort-by bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-response common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-exports-response-locale-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-exports-response-next-token :initform
                         common-lisp:nil)
                        (export-summaries :initarg :|exportSummaries| :type
                         (common-lisp:or export-summary-list common-lisp:null)
                         :accessor %list-exports-response-export-summaries
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-exports-response-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-exports-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-exports-response 'make-list-exports-response))
 (common-lisp:defun make-list-exports-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id next-token export-summaries
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-summaries))
      (common-lisp:list
       (common-lisp:cons "exportSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-request common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-imports-request-locale-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-imports-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-imports-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or import-filters common-lisp:null)
                         :accessor %list-imports-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or import-sort-by common-lisp:null)
                         :accessor %list-imports-request-sort-by :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %list-imports-request-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-imports-request-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-imports-request 'make-list-imports-request))
 (common-lisp:defun make-list-imports-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id next-token max-results filters
                     sort-by bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-response common-lisp:nil
                       ((locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-imports-response-locale-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-imports-response-next-token :initform
                         common-lisp:nil)
                        (import-summaries :initarg :|importSummaries| :type
                         (common-lisp:or import-summary-list common-lisp:null)
                         :accessor %list-imports-response-import-summaries
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %list-imports-response-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-imports-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-imports-response 'make-list-imports-response))
 (common-lisp:defun make-list-imports-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale-id next-token import-summaries
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-summaries))
      (common-lisp:list
       (common-lisp:cons "importSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intents-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-intents-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-intents-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or intent-filters common-lisp:null)
                         :accessor %list-intents-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or intent-sort-by common-lisp:null)
                         :accessor %list-intents-request-sort-by :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-intents-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-intents-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-intents-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-intents-request 'make-list-intents-request))
 (common-lisp:defun make-list-intents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters sort-by
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-intents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intents-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-intents-response-next-token :initform
                         common-lisp:nil)
                        (intent-summaries :initarg :|intentSummaries| :type
                         (common-lisp:or intent-summary-list common-lisp:null)
                         :accessor %list-intents-response-intent-summaries
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-intents-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-intents-response-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-intents-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-intents-response 'make-list-intents-response))
 (common-lisp:defun make-list-intents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token intent-summaries locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-summaries))
      (common-lisp:list
       (common-lisp:cons "intentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommended-intents-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-recommended-intents-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-recommended-intents-request-next-token :initform
                         common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %list-recommended-intents-request-bot-recommendation-id
                         :initform
                         (common-lisp:error
                          ":botrecommendationid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-recommended-intents-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %list-recommended-intents-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-recommended-intents-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-recommended-intents-request
                    'make-list-recommended-intents-request))
 (common-lisp:defun make-list-recommended-intents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     bot-recommendation-id locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommended-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommended-intents-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-recommended-intents-response-next-token
                         :initform common-lisp:nil)
                        (summary-list :initarg :|summaryList| :type
                         (common-lisp:or recommended-intent-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-recommended-intents-response-summary-list
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %list-recommended-intents-response-bot-recommendation-id
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-recommended-intents-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %list-recommended-intents-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-recommended-intents-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recommended-intents-response
                    'make-list-recommended-intents-response))
 (common-lisp:defun make-list-recommended-intents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summary-list
                     bot-recommendation-id locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommended-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-list))
      (common-lisp:list
       (common-lisp:cons "summaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slot-types-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-slot-types-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-slot-types-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or slot-type-filters common-lisp:null)
                         :accessor %list-slot-types-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or slot-type-sort-by common-lisp:null)
                         :accessor %list-slot-types-request-sort-by :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-slot-types-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-slot-types-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-slot-types-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-slot-types-request 'make-list-slot-types-request))
 (common-lisp:defun make-list-slot-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters sort-by
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-slot-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slot-types-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-slot-types-response-next-token :initform
                         common-lisp:nil)
                        (slot-type-summaries :initarg :|slotTypeSummaries|
                         :type
                         (common-lisp:or slot-type-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-slot-types-response-slot-type-summaries
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-slot-types-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-slot-types-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-slot-types-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-slot-types-response 'make-list-slot-types-response))
 (common-lisp:defun make-list-slot-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token slot-type-summaries locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-slot-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-summaries))
      (common-lisp:list
       (common-lisp:cons "slotTypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slots-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-slots-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-slots-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or slot-filters common-lisp:null)
                         :accessor %list-slots-request-filters :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or slot-sort-by common-lisp:null)
                         :accessor %list-slots-request-sort-by :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-slots-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-slots-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-slots-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-slots-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-slots-request 'make-list-slots-request))
 (common-lisp:defun make-list-slots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters sort-by
                     intent-id locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-slots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-slots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-slots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-slots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slots-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-slots-response-next-token :initform
                         common-lisp:nil)
                        (slot-summaries :initarg :|slotSummaries| :type
                         (common-lisp:or slot-summary-list common-lisp:null)
                         :accessor %list-slots-response-slot-summaries
                         :initform common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-slots-response-intent-id :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %list-slots-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %list-slots-response-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-slots-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-slots-response 'make-list-slots-response))
 (common-lisp:defun make-list-slots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token slot-summaries intent-id
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-slots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-slots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-slots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-summaries))
      (common-lisp:list
       (common-lisp:cons "slotSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-slots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale-id () 'common-lisp:string)
(common-lisp:deftype locale-name () 'common-lisp:string)
(common-lisp:deftype log-prefix () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-utterance-digits () 'common-lisp:integer)
(common-lisp:deftype merge-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message common-lisp:nil
                       ((image-response-card :initarg :|imageResponseCard|
                         :type
                         (common-lisp:or image-response-card common-lisp:null)
                         :accessor %message-image-response-card :initform
                         common-lisp:nil)
                        (ssml-message :initarg :|ssmlMessage| :type
                         (common-lisp:or ssmlmessage common-lisp:null)
                         :accessor %message-ssml-message :initform
                         common-lisp:nil)
                        (custom-payload :initarg :|customPayload| :type
                         (common-lisp:or custom-payload common-lisp:null)
                         :accessor %message-custom-payload :initform
                         common-lisp:nil)
                        (plain-text-message :initarg :|plainTextMessage| :type
                         (common-lisp:or plain-text-message common-lisp:null)
                         :accessor %message-plain-text-message :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defun make-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-response-card ssml-message
                     custom-payload plain-text-message)
   (common-lisp:apply #'common-lisp:make-instance 'message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text-message))
      (common-lisp:list
       (common-lisp:cons "plainTextMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-payload))
      (common-lisp:list
       (common-lisp:cons "customPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssml-message))
      (common-lisp:list
       (common-lisp:cons "ssmlMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-response-card))
      (common-lisp:list
       (common-lisp:cons "imageResponseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass message-group common-lisp:nil
                       ((variations :initarg :|variations| :type
                         (common-lisp:or message-variations-list
                                         common-lisp:null)
                         :accessor %message-group-variations :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %message-group-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export (common-lisp:list 'message-group 'make-message-group))
 (common-lisp:defun make-message-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variations message)
   (common-lisp:apply #'common-lisp:make-instance 'message-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variations))
      (common-lisp:list
       (common-lisp:cons "variations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype message-groups-list ()
   '(trivial-types:proper-list message-group))
 (common-lisp:defun |make-message-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message-selection-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype message-variations-list ()
   '(trivial-types:proper-list message))
 (common-lisp:defun |make-message-variations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype missed-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass multiple-values-setting common-lisp:nil
                       ((allow-multiple-values :initarg :|allowMultipleValues|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %multiple-values-setting-allow-multiple-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiple-values-setting 'make-multiple-values-setting))
 (common-lisp:defun make-multiple-values-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-multiple-values)
   (common-lisp:apply #'common-lisp:make-instance 'multiple-values-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiple-values-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiple-values-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-multiple-values))
      (common-lisp:list
       (common-lisp:cons "allowMultipleValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiple-values-setting))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass new-custom-vocabulary-item common-lisp:nil
                       ((display-as :initarg :|displayAs| :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         %new-custom-vocabulary-item-display-as :initform
                         common-lisp:nil)
                        (weight :initarg :|weight| :type
                         (common-lisp:or weight common-lisp:null) :accessor
                         %new-custom-vocabulary-item-weight :initform
                         common-lisp:nil)
                        (phrase :initarg :|phrase| :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         %new-custom-vocabulary-item-phrase :initform
                         (common-lisp:error ":phrase is required"))))
 (common-lisp:export
  (common-lisp:list 'new-custom-vocabulary-item
                    'make-new-custom-vocabulary-item))
 (common-lisp:defun make-new-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-as weight phrase)
   (common-lisp:apply #'common-lisp:make-instance 'new-custom-vocabulary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-custom-vocabulary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-custom-vocabulary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrase))
      (common-lisp:list
       (common-lisp:cons "phrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-as))
      (common-lisp:list
       (common-lisp:cons "displayAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-custom-vocabulary-item))
   common-lisp:nil))
(common-lisp:deftype next-index () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype numerical-bot-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass obfuscation-setting common-lisp:nil
                       ((obfuscation-setting-type :initarg
                         :|obfuscationSettingType| :type
                         (common-lisp:or obfuscation-setting-type
                                         common-lisp:null)
                         :accessor
                         %obfuscation-setting-obfuscation-setting-type
                         :initform
                         (common-lisp:error
                          ":obfuscationsettingtype is required"))))
 (common-lisp:export
  (common-lisp:list 'obfuscation-setting 'make-obfuscation-setting))
 (common-lisp:defun make-obfuscation-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key obfuscation-setting-type)
   (common-lisp:apply #'common-lisp:make-instance 'obfuscation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input obfuscation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input obfuscation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'obfuscation-setting-type))
      (common-lisp:list
       (common-lisp:cons "obfuscationSettingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input obfuscation-setting))
   common-lisp:nil))
(common-lisp:deftype obfuscation-setting-type () 'common-lisp:string)
(common-lisp:deftype object-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-prefixes ()
   '(trivial-types:proper-list object-prefix))
 (common-lisp:defun |make-object-prefixes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-list () '(trivial-types:proper-list operation))
 (common-lisp:defun |make-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-context common-lisp:nil
                       ((turns-to-live :initarg :|turnsToLive| :type
                         (common-lisp:or context-turns-to-live
                                         common-lisp:null)
                         :accessor %output-context-turns-to-live :initform
                         (common-lisp:error ":turnstolive is required"))
                        (time-to-live-in-seconds :initarg
                         :|timeToLiveInSeconds| :type
                         (common-lisp:or context-time-to-live-in-seconds
                                         common-lisp:null)
                         :accessor %output-context-time-to-live-in-seconds
                         :initform
                         (common-lisp:error
                          ":timetoliveinseconds is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %output-context-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'output-context 'make-output-context))
 (common-lisp:defun make-output-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key turns-to-live time-to-live-in-seconds
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'output-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeToLiveInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turns-to-live))
      (common-lisp:list
       (common-lisp:cons "turnsToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-contexts-list ()
   '(trivial-types:proper-list output-context))
 (common-lisp:defun |make-output-contexts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-context))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parent-bot-network common-lisp:nil
                       ((bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %parent-bot-network-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %parent-bot-network-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'parent-bot-network 'make-parent-bot-network))
 (common-lisp:defun make-parent-bot-network
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'parent-bot-network
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parent-bot-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parent-bot-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parent-bot-network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parent-bot-networks ()
   '(trivial-types:proper-list parent-bot-network))
 (common-lisp:defun |make-parent-bot-networks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parent-bot-network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass path-format common-lisp:nil
                       ((object-prefixes :initarg :|objectPrefixes| :type
                         (common-lisp:or object-prefixes common-lisp:null)
                         :accessor %path-format-object-prefixes :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'path-format 'make-path-format))
 (common-lisp:defun make-path-format
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-prefixes)
   (common-lisp:apply #'common-lisp:make-instance 'path-format
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input path-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input path-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-prefixes))
      (common-lisp:list
       (common-lisp:cons "objectPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input path-format))
   common-lisp:nil))
(common-lisp:deftype phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass plain-text-message common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or plain-text-message-value
                                         common-lisp:null)
                         :accessor %plain-text-message-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'plain-text-message 'make-plain-text-message))
 (common-lisp:defun make-plain-text-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'plain-text-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plain-text-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plain-text-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plain-text-message))
   common-lisp:nil))
(common-lisp:deftype plain-text-message-value () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass post-dialog-code-hook-invocation-specification
                       common-lisp:nil
                       ((timeout-conditional :initarg :|timeoutConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-timeout-conditional
                         :initform common-lisp:nil)
                        (timeout-next-step :initarg :|timeoutNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-timeout-next-step
                         :initform common-lisp:nil)
                        (timeout-response :initarg :|timeoutResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-timeout-response
                         :initform common-lisp:nil)
                        (failure-conditional :initarg :|failureConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-failure-conditional
                         :initform common-lisp:nil)
                        (failure-next-step :initarg :|failureNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-failure-next-step
                         :initform common-lisp:nil)
                        (failure-response :initarg :|failureResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-failure-response
                         :initform common-lisp:nil)
                        (success-conditional :initarg :|successConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-success-conditional
                         :initform common-lisp:nil)
                        (success-next-step :initarg :|successNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-success-next-step
                         :initform common-lisp:nil)
                        (success-response :initarg :|successResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %post-dialog-code-hook-invocation-specification-success-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'post-dialog-code-hook-invocation-specification
                    'make-post-dialog-code-hook-invocation-specification))
 (common-lisp:defun make-post-dialog-code-hook-invocation-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-conditional timeout-next-step
                     timeout-response failure-conditional failure-next-step
                     failure-response success-conditional success-next-step
                     success-response)
   (common-lisp:apply #'common-lisp:make-instance
                      'post-dialog-code-hook-invocation-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-dialog-code-hook-invocation-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-dialog-code-hook-invocation-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-response))
      (common-lisp:list
       (common-lisp:cons "successResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-next-step))
      (common-lisp:list
       (common-lisp:cons "successNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-conditional))
      (common-lisp:list
       (common-lisp:cons "successConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-response))
      (common-lisp:list
       (common-lisp:cons "timeoutResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-next-step))
      (common-lisp:list
       (common-lisp:cons "timeoutNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-conditional))
      (common-lisp:list
       (common-lisp:cons "timeoutConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-dialog-code-hook-invocation-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-fulfillment-status-specification common-lisp:nil
                       ((timeout-conditional :initarg :|timeoutConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-timeout-conditional
                         :initform common-lisp:nil)
                        (timeout-next-step :initarg :|timeoutNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-timeout-next-step
                         :initform common-lisp:nil)
                        (failure-conditional :initarg :|failureConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-failure-conditional
                         :initform common-lisp:nil)
                        (failure-next-step :initarg :|failureNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-failure-next-step
                         :initform common-lisp:nil)
                        (success-conditional :initarg :|successConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-success-conditional
                         :initform common-lisp:nil)
                        (success-next-step :initarg :|successNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-success-next-step
                         :initform common-lisp:nil)
                        (timeout-response :initarg :|timeoutResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-timeout-response
                         :initform common-lisp:nil)
                        (failure-response :initarg :|failureResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-failure-response
                         :initform common-lisp:nil)
                        (success-response :initarg :|successResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %post-fulfillment-status-specification-success-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'post-fulfillment-status-specification
                    'make-post-fulfillment-status-specification))
 (common-lisp:defun make-post-fulfillment-status-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-conditional timeout-next-step
                     failure-conditional failure-next-step success-conditional
                     success-next-step timeout-response failure-response
                     success-response)
   (common-lisp:apply #'common-lisp:make-instance
                      'post-fulfillment-status-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-fulfillment-status-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-fulfillment-status-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-response))
      (common-lisp:list
       (common-lisp:cons "successResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-response))
      (common-lisp:list
       (common-lisp:cons "timeoutResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-next-step))
      (common-lisp:list
       (common-lisp:cons "successNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-conditional))
      (common-lisp:list
       (common-lisp:cons "successConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-next-step))
      (common-lisp:list
       (common-lisp:cons "timeoutNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-conditional))
      (common-lisp:list
       (common-lisp:cons "timeoutConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-fulfillment-status-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition precondition-failed-exception
     (lexv2-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       precondition-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed-exception
                    'precondition-failed-exception-message)))
(common-lisp:deftype presigned-s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass principal common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor %principal-arn :initform common-lisp:nil)
                        (service :initarg :|service| :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor %principal-service :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defun make-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn service)
   (common-lisp:apply #'common-lisp:make-instance 'principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list principal))
 (common-lisp:defun |make-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype priority-value () 'common-lisp:integer)
(common-lisp:deftype prompt-attempt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prompt-attempt-specification common-lisp:nil
                       ((text-input-specification :initarg
                         :|textInputSpecification| :type
                         (common-lisp:or text-input-specification
                                         common-lisp:null)
                         :accessor
                         %prompt-attempt-specification-text-input-specification
                         :initform common-lisp:nil)
                        (audio-and-dtmfinput-specification :initarg
                         :|audioAndDTMFInputSpecification| :type
                         (common-lisp:or audio-and-dtmfinput-specification
                                         common-lisp:null)
                         :accessor
                         %prompt-attempt-specification-audio-and-dtmfinput-specification
                         :initform common-lisp:nil)
                        (allowed-input-types :initarg :|allowedInputTypes|
                         :type
                         (common-lisp:or allowed-input-types common-lisp:null)
                         :accessor
                         %prompt-attempt-specification-allowed-input-types
                         :initform
                         (common-lisp:error ":allowedinputtypes is required"))
                        (allow-interrupt :initarg :|allowInterrupt| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %prompt-attempt-specification-allow-interrupt
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'prompt-attempt-specification
                    'make-prompt-attempt-specification))
 (common-lisp:defun make-prompt-attempt-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key text-input-specification
                     audio-and-dtmfinput-specification allowed-input-types
                     allow-interrupt)
   (common-lisp:apply #'common-lisp:make-instance 'prompt-attempt-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prompt-attempt-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prompt-attempt-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-input-types))
      (common-lisp:list
       (common-lisp:cons "allowedInputTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-and-dtmfinput-specification))
      (common-lisp:list
       (common-lisp:cons "audioAndDTMFInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-input-specification))
      (common-lisp:list
       (common-lisp:cons "textInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prompt-attempt-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prompt-attempts-specification-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-prompt-attempts-specification-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype prompt-max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass prompt-specification common-lisp:nil
                       ((prompt-attempts-specification :initarg
                         :|promptAttemptsSpecification| :type
                         (common-lisp:or prompt-attempts-specification-map
                                         common-lisp:null)
                         :accessor
                         %prompt-specification-prompt-attempts-specification
                         :initform common-lisp:nil)
                        (message-selection-strategy :initarg
                         :|messageSelectionStrategy| :type
                         (common-lisp:or message-selection-strategy
                                         common-lisp:null)
                         :accessor
                         %prompt-specification-message-selection-strategy
                         :initform common-lisp:nil)
                        (allow-interrupt :initarg :|allowInterrupt| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %prompt-specification-allow-interrupt
                         :initform common-lisp:nil)
                        (max-retries :initarg :|maxRetries| :type
                         (common-lisp:or prompt-max-retries common-lisp:null)
                         :accessor %prompt-specification-max-retries :initform
                         (common-lisp:error ":maxretries is required"))
                        (message-groups :initarg :|messageGroups| :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor %prompt-specification-message-groups
                         :initform
                         (common-lisp:error ":messagegroups is required"))))
 (common-lisp:export
  (common-lisp:list 'prompt-specification 'make-prompt-specification))
 (common-lisp:defun make-prompt-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prompt-attempts-specification
                     message-selection-strategy allow-interrupt max-retries
                     message-groups)
   (common-lisp:apply #'common-lisp:make-instance 'prompt-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prompt-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prompt-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-selection-strategy))
      (common-lisp:list
       (common-lisp:cons "messageSelectionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-attempts-specification))
      (common-lisp:list
       (common-lisp:cons "promptAttemptsSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prompt-specification))
   common-lisp:nil))
(common-lisp:deftype query-filter-string () 'common-lisp:string)
(common-lisp:deftype recommended-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommended-actions ()
   '(trivial-types:proper-list recommended-action))
 (common-lisp:defun |make-recommended-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommended-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommended-intent-summary common-lisp:nil
                       ((sample-utterances-count :initarg
                         :|sampleUtterancesCount| :type
                         (common-lisp:or sample-utterances-count
                                         common-lisp:null)
                         :accessor
                         %recommended-intent-summary-sample-utterances-count
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %recommended-intent-summary-intent-name :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %recommended-intent-summary-intent-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recommended-intent-summary
                    'make-recommended-intent-summary))
 (common-lisp:defun make-recommended-intent-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-utterances-count intent-name
                     intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'recommended-intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommended-intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommended-intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-utterances-count))
      (common-lisp:list
       (common-lisp:cons "sampleUtterancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommended-intent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommended-intent-summary-list ()
   '(trivial-types:proper-list recommended-intent-summary))
 (common-lisp:defun |make-recommended-intent-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommended-intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype regex-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relative-aggregation-duration common-lisp:nil
                       ((time-value :initarg :|timeValue| :type
                         (common-lisp:or time-value common-lisp:null) :accessor
                         %relative-aggregation-duration-time-value :initform
                         (common-lisp:error ":timevalue is required"))
                        (time-dimension :initarg :|timeDimension| :type
                         (common-lisp:or time-dimension common-lisp:null)
                         :accessor
                         %relative-aggregation-duration-time-dimension
                         :initform
                         (common-lisp:error ":timedimension is required"))))
 (common-lisp:export
  (common-lisp:list 'relative-aggregation-duration
                    'make-relative-aggregation-duration))
 (common-lisp:defun make-relative-aggregation-duration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-value time-dimension)
   (common-lisp:apply #'common-lisp:make-instance
                      'relative-aggregation-duration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relative-aggregation-duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relative-aggregation-duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-dimension))
      (common-lisp:list
       (common-lisp:cons "timeDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-value))
      (common-lisp:list
       (common-lisp:cons "timeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relative-aggregation-duration))
   common-lisp:nil))
(common-lisp:deftype resource-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lexv2-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass response-specification common-lisp:nil
                       ((allow-interrupt :initarg :|allowInterrupt| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %response-specification-allow-interrupt
                         :initform common-lisp:nil)
                        (message-groups :initarg :|messageGroups| :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor %response-specification-message-groups
                         :initform
                         (common-lisp:error ":messagegroups is required"))))
 (common-lisp:export
  (common-lisp:list 'response-specification 'make-response-specification))
 (common-lisp:defun make-response-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-interrupt message-groups)
   (common-lisp:apply #'common-lisp:make-instance 'response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-specification))
   common-lisp:nil))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype revision-id () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-log-destination common-lisp:nil
                       ((log-prefix :initarg :|logPrefix| :type
                         (common-lisp:or log-prefix common-lisp:null) :accessor
                         %s3bucket-log-destination-log-prefix :initform
                         (common-lisp:error ":logprefix is required"))
                        (s3bucket-arn :initarg :|s3BucketArn| :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor %s3bucket-log-destination-s3bucket-arn
                         :initform
                         (common-lisp:error ":s3bucketarn is required"))
                        (kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %s3bucket-log-destination-kms-key-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3bucket-log-destination 'make-s3bucket-log-destination))
 (common-lisp:defun make-s3bucket-log-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-prefix s3bucket-arn kms-key-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-prefix))
      (common-lisp:list
       (common-lisp:cons "logPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-log-destination))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-transcript-source common-lisp:nil
                       ((kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %s3bucket-transcript-source-kms-key-arn
                         :initform common-lisp:nil)
                        (transcript-filter :initarg :|transcriptFilter| :type
                         (common-lisp:or transcript-filter common-lisp:null)
                         :accessor
                         %s3bucket-transcript-source-transcript-filter
                         :initform common-lisp:nil)
                        (transcript-format :initarg :|transcriptFormat| :type
                         (common-lisp:or transcript-format common-lisp:null)
                         :accessor
                         %s3bucket-transcript-source-transcript-format
                         :initform
                         (common-lisp:error ":transcriptformat is required"))
                        (path-format :initarg :|pathFormat| :type
                         (common-lisp:or path-format common-lisp:null)
                         :accessor %s3bucket-transcript-source-path-format
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :|s3BucketName| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3bucket-transcript-source-s3bucket-name
                         :initform
                         (common-lisp:error ":s3bucketname is required"))))
 (common-lisp:export
  (common-lisp:list 's3bucket-transcript-source
                    'make-s3bucket-transcript-source))
 (common-lisp:defun make-s3bucket-transcript-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn transcript-filter
                     transcript-format path-format s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-transcript-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-transcript-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-transcript-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-format))
      (common-lisp:list
       (common-lisp:cons "pathFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-format))
      (common-lisp:list
       (common-lisp:cons "transcriptFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-filter))
      (common-lisp:list
       (common-lisp:cons "transcriptFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-transcript-source))
   common-lisp:nil))
(common-lisp:deftype s3object-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssmlmessage common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or ssmlmessage-value common-lisp:null)
                         :accessor %ssmlmessage-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export (common-lisp:list 'ssmlmessage 'make-ssmlmessage))
 (common-lisp:defun make-ssmlmessage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'ssmlmessage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssmlmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssmlmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssmlmessage))
   common-lisp:nil))
(common-lisp:deftype ssmlmessage-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sample-utterance common-lisp:nil
                       ((utterance :initarg :|utterance| :type
                         (common-lisp:or utterance common-lisp:null) :accessor
                         %sample-utterance-utterance :initform
                         (common-lisp:error ":utterance is required"))))
 (common-lisp:export
  (common-lisp:list 'sample-utterance 'make-sample-utterance))
 (common-lisp:defun make-sample-utterance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key utterance)
   (common-lisp:apply #'common-lisp:make-instance 'sample-utterance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sample-utterance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sample-utterance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance))
      (common-lisp:list
       (common-lisp:cons "utterance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sample-utterance))
   common-lisp:nil))
(common-lisp:deftype sample-utterances-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype sample-utterances-list ()
   '(trivial-types:proper-list sample-utterance))
 (common-lisp:defun |make-sample-utterances-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sample-utterance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sample-value common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %sample-value-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export (common-lisp:list 'sample-value 'make-sample-value))
 (common-lisp:defun make-sample-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'sample-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sample-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sample-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sample-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-associated-transcripts-request common-lisp:nil
                       ((next-index :initarg :|nextIndex| :type
                         (common-lisp:or next-index common-lisp:null) :accessor
                         %search-associated-transcripts-request-next-index
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %search-associated-transcripts-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or associated-transcript-filters
                                         common-lisp:null)
                         :accessor
                         %search-associated-transcripts-request-filters
                         :initform (common-lisp:error ":filters is required"))
                        (search-order :initarg :|searchOrder| :type
                         (common-lisp:or search-order common-lisp:null)
                         :accessor
                         %search-associated-transcripts-request-search-order
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %search-associated-transcripts-request-bot-recommendation-id
                         :initform
                         (common-lisp:error
                          ":botrecommendationid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %search-associated-transcripts-request-locale-id
                         :initform (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %search-associated-transcripts-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %search-associated-transcripts-request-bot-id
                         :initform (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'search-associated-transcripts-request
                    'make-search-associated-transcripts-request))
 (common-lisp:defun make-search-associated-transcripts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-index max-results filters
                     search-order bot-recommendation-id locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-associated-transcripts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-order))
      (common-lisp:list
       (common-lisp:cons "searchOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-index))
      (common-lisp:list
       (common-lisp:cons "nextIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-associated-transcripts-response common-lisp:nil
                       ((total-results :initarg :|totalResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %search-associated-transcripts-response-total-results
                         :initform common-lisp:nil)
                        (associated-transcripts :initarg
                         :|associatedTranscripts| :type
                         (common-lisp:or associated-transcript-list
                                         common-lisp:null)
                         :accessor
                         %search-associated-transcripts-response-associated-transcripts
                         :initform common-lisp:nil)
                        (next-index :initarg :|nextIndex| :type
                         (common-lisp:or next-index common-lisp:null) :accessor
                         %search-associated-transcripts-response-next-index
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %search-associated-transcripts-response-bot-recommendation-id
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %search-associated-transcripts-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         %search-associated-transcripts-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %search-associated-transcripts-response-bot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-associated-transcripts-response
                    'make-search-associated-transcripts-response))
 (common-lisp:defun make-search-associated-transcripts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-results associated-transcripts
                     next-index bot-recommendation-id locale-id bot-version
                     bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-associated-transcripts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-index))
      (common-lisp:list
       (common-lisp:cons "nextIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-transcripts))
      (common-lisp:list
       (common-lisp:cons "associatedTranscripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-results))
      (common-lisp:list
       (common-lisp:cons "totalResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-response))
   common-lisp:nil))
(common-lisp:deftype search-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sentiment-analysis-settings common-lisp:nil
                       ((detect-sentiment :initarg :|detectSentiment| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %sentiment-analysis-settings-detect-sentiment
                         :initform
                         (common-lisp:error ":detectsentiment is required"))))
 (common-lisp:export
  (common-lisp:list 'sentiment-analysis-settings
                    'make-sentiment-analysis-settings))
 (common-lisp:defun make-sentiment-analysis-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detect-sentiment)
   (common-lisp:apply #'common-lisp:make-instance 'sentiment-analysis-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-analysis-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-analysis-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-sentiment))
      (common-lisp:list
       (common-lisp:cons "detectSentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-analysis-settings))
   common-lisp:nil))
(common-lisp:deftype service-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (lexv2-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype session-ttl () 'common-lisp:integer)
(common-lisp:deftype skip-resource-in-use-check () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass slot-capture-setting common-lisp:nil
                       ((elicitation-code-hook :initarg :|elicitationCodeHook|
                         :type
                         (common-lisp:or
                          elicitation-code-hook-invocation-setting
                          common-lisp:null)
                         :accessor %slot-capture-setting-elicitation-code-hook
                         :initform common-lisp:nil)
                        (code-hook :initarg :|codeHook| :type
                         (common-lisp:or dialog-code-hook-invocation-setting
                                         common-lisp:null)
                         :accessor %slot-capture-setting-code-hook :initform
                         common-lisp:nil)
                        (failure-conditional :initarg :|failureConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor %slot-capture-setting-failure-conditional
                         :initform common-lisp:nil)
                        (failure-next-step :initarg :|failureNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %slot-capture-setting-failure-next-step
                         :initform common-lisp:nil)
                        (failure-response :initarg :|failureResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor %slot-capture-setting-failure-response
                         :initform common-lisp:nil)
                        (capture-conditional :initarg :|captureConditional|
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor %slot-capture-setting-capture-conditional
                         :initform common-lisp:nil)
                        (capture-next-step :initarg :|captureNextStep| :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor %slot-capture-setting-capture-next-step
                         :initform common-lisp:nil)
                        (capture-response :initarg :|captureResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor %slot-capture-setting-capture-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-capture-setting 'make-slot-capture-setting))
 (common-lisp:defun make-slot-capture-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key elicitation-code-hook code-hook
                     failure-conditional failure-next-step failure-response
                     capture-conditional capture-next-step capture-response)
   (common-lisp:apply #'common-lisp:make-instance 'slot-capture-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-capture-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-capture-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-response))
      (common-lisp:list
       (common-lisp:cons "captureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-next-step))
      (common-lisp:list
       (common-lisp:cons "captureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-conditional))
      (common-lisp:list
       (common-lisp:cons "captureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elicitation-code-hook))
      (common-lisp:list
       (common-lisp:cons "elicitationCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-capture-setting))
   common-lisp:nil))
(common-lisp:deftype slot-constraint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-default-value common-lisp:nil
                       ((default-value :initarg :|defaultValue| :type
                         (common-lisp:or slot-default-value-string
                                         common-lisp:null)
                         :accessor %slot-default-value-default-value :initform
                         (common-lisp:error ":defaultvalue is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-default-value 'make-slot-default-value))
 (common-lisp:defun make-slot-default-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value)
   (common-lisp:apply #'common-lisp:make-instance 'slot-default-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-default-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-default-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-default-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-default-value-list ()
   '(trivial-types:proper-list slot-default-value))
 (common-lisp:defun |make-slot-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-default-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-default-value-specification common-lisp:nil
                       ((default-value-list :initarg :|defaultValueList| :type
                         (common-lisp:or slot-default-value-list
                                         common-lisp:null)
                         :accessor
                         %slot-default-value-specification-default-value-list
                         :initform
                         (common-lisp:error ":defaultvaluelist is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-default-value-specification
                    'make-slot-default-value-specification))
 (common-lisp:defun make-slot-default-value-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-default-value-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value-list))
      (common-lisp:list
       (common-lisp:cons "defaultValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-specification))
   common-lisp:nil))
(common-lisp:deftype slot-default-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or slot-filter-operator common-lisp:null)
                         :accessor %slot-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %slot-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or slot-filter-name common-lisp:null)
                         :accessor %slot-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'slot-filter 'make-slot-filter))
 (common-lisp:defun make-slot-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'slot-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-filter))
   common-lisp:nil))
(common-lisp:deftype slot-filter-name () 'common-lisp:string)
(common-lisp:deftype slot-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slot-filters () '(trivial-types:proper-list slot-filter))
 (common-lisp:defun |make-slot-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype slot-priorities-list ()
   '(trivial-types:proper-list slot-priority))
 (common-lisp:defun |make-slot-priorities-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-priority))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-priority common-lisp:nil
                       ((slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %slot-priority-slot-id :initform
                         (common-lisp:error ":slotid is required"))
                        (priority :initarg :|priority| :type
                         (common-lisp:or priority-value common-lisp:null)
                         :accessor %slot-priority-priority :initform
                         (common-lisp:error ":priority is required"))))
 (common-lisp:export (common-lisp:list 'slot-priority 'make-slot-priority))
 (common-lisp:defun make-slot-priority
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-id priority)
   (common-lisp:apply #'common-lisp:make-instance 'slot-priority
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-priority))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-priority))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-priority))
   common-lisp:nil))
(common-lisp:deftype slot-shape () 'common-lisp:string)
(common-lisp:deftype slot-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %slot-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or slot-sort-attribute common-lisp:null)
                         :accessor %slot-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export (common-lisp:list 'slot-sort-by 'make-slot-sort-by))
 (common-lisp:defun make-slot-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'slot-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-summary common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %slot-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (value-elicitation-prompt-specification :initarg
                         :|valueElicitationPromptSpecification| :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         %slot-summary-value-elicitation-prompt-specification
                         :initform common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %slot-summary-slot-type-id :initform
                         common-lisp:nil)
                        (slot-constraint :initarg :|slotConstraint| :type
                         (common-lisp:or slot-constraint common-lisp:null)
                         :accessor %slot-summary-slot-constraint :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %slot-summary-description :initform
                         common-lisp:nil)
                        (slot-name :initarg :|slotName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %slot-summary-slot-name :initform common-lisp:nil)
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %slot-summary-slot-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'slot-summary 'make-slot-summary))
 (common-lisp:defun make-slot-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time
                     value-elicitation-prompt-specification slot-type-id
                     slot-constraint description slot-name slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'slot-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-constraint))
      (common-lisp:list
       (common-lisp:cons "slotConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-prompt-specification))
      (common-lisp:list
       (common-lisp:cons "valueElicitationPromptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-summary-list ()
   '(trivial-types:proper-list slot-summary))
 (common-lisp:defun |make-slot-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-type-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-type-filter common-lisp:nil
                       ((operator :initarg :|operator| :type
                         (common-lisp:or slot-type-filter-operator
                                         common-lisp:null)
                         :accessor %slot-type-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %slot-type-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-filter-name
                                         common-lisp:null)
                         :accessor %slot-type-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-type-filter 'make-slot-type-filter))
 (common-lisp:defun make-slot-type-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values name)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-filter))
   common-lisp:nil))
(common-lisp:deftype slot-type-filter-name () 'common-lisp:string)
(common-lisp:deftype slot-type-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slot-type-filters ()
   '(trivial-types:proper-list slot-type-filter))
 (common-lisp:defun |make-slot-type-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-type-signature () 'common-lisp:string)
(common-lisp:deftype slot-type-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-type-sort-by common-lisp:nil
                       ((order :initarg :|order| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %slot-type-sort-by-order :initform
                         (common-lisp:error ":order is required"))
                        (attribute :initarg :|attribute| :type
                         (common-lisp:or slot-type-sort-attribute
                                         common-lisp:null)
                         :accessor %slot-type-sort-by-attribute :initform
                         (common-lisp:error ":attribute is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-type-sort-by 'make-slot-type-sort-by))
 (common-lisp:defun make-slot-type-sort-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order attribute)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-type-statistics common-lisp:nil
                       ((discovered-slot-type-count :initarg
                         :|discoveredSlotTypeCount| :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %slot-type-statistics-discovered-slot-type-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-type-statistics 'make-slot-type-statistics))
 (common-lisp:defun make-slot-type-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key discovered-slot-type-count)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discovered-slot-type-count))
      (common-lisp:list
       (common-lisp:cons "discoveredSlotTypeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-type-summary common-lisp:nil
                       ((slot-type-category :initarg :|slotTypeCategory| :type
                         (common-lisp:or slot-type-category common-lisp:null)
                         :accessor %slot-type-summary-slot-type-category
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %slot-type-summary-last-updated-date-time
                         :initform common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %slot-type-summary-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %slot-type-summary-description :initform
                         common-lisp:nil)
                        (slot-type-name :initarg :|slotTypeName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %slot-type-summary-slot-type-name :initform
                         common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %slot-type-summary-slot-type-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-type-summary 'make-slot-type-summary))
 (common-lisp:defun make-slot-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-type-category last-updated-date-time
                     parent-slot-type-signature description slot-type-name
                     slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-category))
      (common-lisp:list
       (common-lisp:cons "slotTypeCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-type-summary-list ()
   '(trivial-types:proper-list slot-type-summary))
 (common-lisp:defun |make-slot-type-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-type-value common-lisp:nil
                       ((synonyms :initarg :|synonyms| :type
                         (common-lisp:or synonym-list common-lisp:null)
                         :accessor %slot-type-value-synonyms :initform
                         common-lisp:nil)
                        (sample-value :initarg :|sampleValue| :type
                         (common-lisp:or sample-value common-lisp:null)
                         :accessor %slot-type-value-sample-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'slot-type-value 'make-slot-type-value))
 (common-lisp:defun make-slot-type-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key synonyms sample-value)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-value))
      (common-lisp:list
       (common-lisp:cons "sampleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synonyms))
      (common-lisp:list
       (common-lisp:cons "synonyms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-type-values ()
   '(trivial-types:proper-list slot-type-value))
 (common-lisp:defun |make-slot-type-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-value common-lisp:nil
                       ((interpreted-value :initarg :|interpretedValue| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %slot-value-interpreted-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'slot-value 'make-slot-value))
 (common-lisp:defun make-slot-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interpreted-value)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpreted-value))
      (common-lisp:list
       (common-lisp:cons "interpretedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-value-elicitation-setting common-lisp:nil
                       ((slot-capture-setting :initarg :|slotCaptureSetting|
                         :type
                         (common-lisp:or slot-capture-setting common-lisp:null)
                         :accessor
                         %slot-value-elicitation-setting-slot-capture-setting
                         :initform common-lisp:nil)
                        (wait-and-continue-specification :initarg
                         :|waitAndContinueSpecification| :type
                         (common-lisp:or wait-and-continue-specification
                                         common-lisp:null)
                         :accessor
                         %slot-value-elicitation-setting-wait-and-continue-specification
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         %slot-value-elicitation-setting-sample-utterances
                         :initform common-lisp:nil)
                        (prompt-specification :initarg :|promptSpecification|
                         :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         %slot-value-elicitation-setting-prompt-specification
                         :initform common-lisp:nil)
                        (slot-constraint :initarg :|slotConstraint| :type
                         (common-lisp:or slot-constraint common-lisp:null)
                         :accessor
                         %slot-value-elicitation-setting-slot-constraint
                         :initform
                         (common-lisp:error ":slotconstraint is required"))
                        (default-value-specification :initarg
                         :|defaultValueSpecification| :type
                         (common-lisp:or slot-default-value-specification
                                         common-lisp:null)
                         :accessor
                         %slot-value-elicitation-setting-default-value-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-value-elicitation-setting
                    'make-slot-value-elicitation-setting))
 (common-lisp:defun make-slot-value-elicitation-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-capture-setting
                     wait-and-continue-specification sample-utterances
                     prompt-specification slot-constraint
                     default-value-specification)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-value-elicitation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-elicitation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-elicitation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-value-specification))
      (common-lisp:list
       (common-lisp:cons "defaultValueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-constraint))
      (common-lisp:list
       (common-lisp:cons "slotConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-specification))
      (common-lisp:list
       (common-lisp:cons "promptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-and-continue-specification))
      (common-lisp:list
       (common-lisp:cons "waitAndContinueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-capture-setting))
      (common-lisp:list
       (common-lisp:cons "slotCaptureSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-elicitation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-value-override common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or slot-values common-lisp:null)
                         :accessor %slot-value-override-values :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or slot-value common-lisp:null) :accessor
                         %slot-value-override-value :initform common-lisp:nil)
                        (shape :initarg :|shape| :type
                         (common-lisp:or slot-shape common-lisp:null) :accessor
                         %slot-value-override-shape :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-value-override 'make-slot-value-override))
 (common-lisp:defun make-slot-value-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values value shape)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-value-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-value-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-value-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-value-override-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-slot-value-override-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass slot-value-regex-filter common-lisp:nil
                       ((pattern :initarg :|pattern| :type
                         (common-lisp:or regex-pattern common-lisp:null)
                         :accessor %slot-value-regex-filter-pattern :initform
                         (common-lisp:error ":pattern is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-value-regex-filter 'make-slot-value-regex-filter))
 (common-lisp:defun make-slot-value-regex-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pattern)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value-regex-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-regex-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-regex-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-regex-filter))
   common-lisp:nil))
(common-lisp:deftype slot-value-resolution-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-value-selection-setting common-lisp:nil
                       ((advanced-recognition-setting :initarg
                         :|advancedRecognitionSetting| :type
                         (common-lisp:or advanced-recognition-setting
                                         common-lisp:null)
                         :accessor
                         %slot-value-selection-setting-advanced-recognition-setting
                         :initform common-lisp:nil)
                        (regex-filter :initarg :|regexFilter| :type
                         (common-lisp:or slot-value-regex-filter
                                         common-lisp:null)
                         :accessor %slot-value-selection-setting-regex-filter
                         :initform common-lisp:nil)
                        (resolution-strategy :initarg :|resolutionStrategy|
                         :type
                         (common-lisp:or slot-value-resolution-strategy
                                         common-lisp:null)
                         :accessor
                         %slot-value-selection-setting-resolution-strategy
                         :initform
                         (common-lisp:error
                          ":resolutionstrategy is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-value-selection-setting
                    'make-slot-value-selection-setting))
 (common-lisp:defun make-slot-value-selection-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-recognition-setting regex-filter
                     resolution-strategy)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value-selection-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-selection-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-selection-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-strategy))
      (common-lisp:list
       (common-lisp:cons "resolutionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-filter))
      (common-lisp:list
       (common-lisp:cons "regexFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-recognition-setting))
      (common-lisp:list
       (common-lisp:cons "advancedRecognitionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-selection-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-values ()
   '(trivial-types:proper-list slot-value-override))
 (common-lisp:defun |make-slot-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-value-override))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass specifications common-lisp:nil
                       ((value-elicitation-setting :initarg
                         :|valueElicitationSetting| :type
                         (common-lisp:or sub-slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor %specifications-value-elicitation-setting
                         :initform
                         (common-lisp:error
                          ":valueelicitationsetting is required"))
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %specifications-slot-type-id :initform
                         (common-lisp:error ":slottypeid is required"))))
 (common-lisp:export (common-lisp:list 'specifications 'make-specifications))
 (common-lisp:defun make-specifications
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-elicitation-setting slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'specifications
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input specifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input specifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input specifications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bot-recommendation-request common-lisp:nil
                       ((encryption-setting :initarg :|encryptionSetting| :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         %start-bot-recommendation-request-encryption-setting
                         :initform common-lisp:nil)
                        (transcript-source-setting :initarg
                         :|transcriptSourceSetting| :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         %start-bot-recommendation-request-transcript-source-setting
                         :initform
                         (common-lisp:error
                          ":transcriptsourcesetting is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %start-bot-recommendation-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %start-bot-recommendation-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %start-bot-recommendation-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-bot-recommendation-request
                    'make-start-bot-recommendation-request))
 (common-lisp:defun make-start-bot-recommendation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-setting
                     transcript-source-setting locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bot-recommendation-response common-lisp:nil
                       ((encryption-setting :initarg :|encryptionSetting| :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         %start-bot-recommendation-response-encryption-setting
                         :initform common-lisp:nil)
                        (transcript-source-setting :initarg
                         :|transcriptSourceSetting| :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         %start-bot-recommendation-response-transcript-source-setting
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-bot-recommendation-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %start-bot-recommendation-response-bot-recommendation-id
                         :initform common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :|botRecommendationStatus| :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         %start-bot-recommendation-response-bot-recommendation-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %start-bot-recommendation-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %start-bot-recommendation-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %start-bot-recommendation-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-bot-recommendation-response
                    'make-start-bot-recommendation-response))
 (common-lisp:defun make-start-bot-recommendation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-setting
                     transcript-source-setting creation-date-time
                     bot-recommendation-id bot-recommendation-status locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-request common-lisp:nil
                       ((file-password :initarg :|filePassword| :type
                         (common-lisp:or import-export-file-password
                                         common-lisp:null)
                         :accessor %start-import-request-file-password
                         :initform common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %start-import-request-merge-strategy
                         :initform
                         (common-lisp:error ":mergestrategy is required"))
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or import-resource-specification
                                         common-lisp:null)
                         :accessor %start-import-request-resource-specification
                         :initform
                         (common-lisp:error
                          ":resourcespecification is required"))
                        (import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %start-import-request-import-id :initform
                         (common-lisp:error ":importid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-import-request 'make-start-import-request))
 (common-lisp:defun make-start-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-password merge-strategy
                     resource-specification import-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-password))
      (common-lisp:list
       (common-lisp:cons "filePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-response common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-import-response-creation-date-time :initform
                         common-lisp:nil)
                        (import-status :initarg :|importStatus| :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor %start-import-response-import-status
                         :initform common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %start-import-response-merge-strategy
                         :initform common-lisp:nil)
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or import-resource-specification
                                         common-lisp:null)
                         :accessor
                         %start-import-response-resource-specification
                         :initform common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %start-import-response-import-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-import-response 'make-start-import-response))
 (common-lisp:defun make-start-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time import-status
                     merge-strategy resource-specification import-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   common-lisp:nil))
(common-lisp:deftype still-waiting-response-frequency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass still-waiting-response-specification common-lisp:nil
                       ((allow-interrupt :initarg :|allowInterrupt| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %still-waiting-response-specification-allow-interrupt
                         :initform common-lisp:nil)
                        (timeout-in-seconds :initarg :|timeoutInSeconds| :type
                         (common-lisp:or still-waiting-response-timeout
                                         common-lisp:null)
                         :accessor
                         %still-waiting-response-specification-timeout-in-seconds
                         :initform
                         (common-lisp:error ":timeoutinseconds is required"))
                        (frequency-in-seconds :initarg :|frequencyInSeconds|
                         :type
                         (common-lisp:or still-waiting-response-frequency
                                         common-lisp:null)
                         :accessor
                         %still-waiting-response-specification-frequency-in-seconds
                         :initform
                         (common-lisp:error ":frequencyinseconds is required"))
                        (message-groups :initarg :|messageGroups| :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         %still-waiting-response-specification-message-groups
                         :initform
                         (common-lisp:error ":messagegroups is required"))))
 (common-lisp:export
  (common-lisp:list 'still-waiting-response-specification
                    'make-still-waiting-response-specification))
 (common-lisp:defun make-still-waiting-response-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-interrupt timeout-in-seconds
                     frequency-in-seconds message-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'still-waiting-response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          still-waiting-response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          still-waiting-response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frequency-in-seconds))
      (common-lisp:list
       (common-lisp:cons "frequencyInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          still-waiting-response-specification))
   common-lisp:nil))
(common-lisp:deftype still-waiting-response-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass stop-bot-recommendation-request common-lisp:nil
                       ((bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %stop-bot-recommendation-request-bot-recommendation-id
                         :initform
                         (common-lisp:error
                          ":botrecommendationid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %stop-bot-recommendation-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %stop-bot-recommendation-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %stop-bot-recommendation-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-bot-recommendation-request
                    'make-stop-bot-recommendation-request))
 (common-lisp:defun make-stop-bot-recommendation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-recommendation-id locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-bot-recommendation-response common-lisp:nil
                       ((bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %stop-bot-recommendation-response-bot-recommendation-id
                         :initform common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :|botRecommendationStatus| :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         %stop-bot-recommendation-response-bot-recommendation-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %stop-bot-recommendation-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %stop-bot-recommendation-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %stop-bot-recommendation-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-bot-recommendation-response
                    'make-stop-bot-recommendation-response))
 (common-lisp:defun make-stop-bot-recommendation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-recommendation-id
                     bot-recommendation-status locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-string-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sub-slot-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sub-slot-setting common-lisp:nil
                       ((slot-specifications :initarg :|slotSpecifications|
                         :type
                         (common-lisp:or sub-slot-specification-map
                                         common-lisp:null)
                         :accessor %sub-slot-setting-slot-specifications
                         :initform common-lisp:nil)
                        (expression :initarg :|expression| :type
                         (common-lisp:or sub-slot-expression common-lisp:null)
                         :accessor %sub-slot-setting-expression :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sub-slot-setting 'make-sub-slot-setting))
 (common-lisp:defun make-sub-slot-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-specifications expression)
   (common-lisp:apply #'common-lisp:make-instance 'sub-slot-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sub-slot-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sub-slot-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-specifications))
      (common-lisp:list
       (common-lisp:cons "slotSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sub-slot-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-slot-specification-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-sub-slot-specification-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass sub-slot-type-composition common-lisp:nil
                       ((slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %sub-slot-type-composition-slot-type-id
                         :initform
                         (common-lisp:error ":slottypeid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %sub-slot-type-composition-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'sub-slot-type-composition
                    'make-sub-slot-type-composition))
 (common-lisp:defun make-sub-slot-type-composition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-type-id name)
   (common-lisp:apply #'common-lisp:make-instance 'sub-slot-type-composition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-type-composition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-type-composition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-type-composition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-slot-type-list ()
   '(trivial-types:proper-list sub-slot-type-composition))
 (common-lisp:defun |make-sub-slot-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sub-slot-type-composition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sub-slot-value-elicitation-setting common-lisp:nil
                       ((wait-and-continue-specification :initarg
                         :|waitAndContinueSpecification| :type
                         (common-lisp:or wait-and-continue-specification
                                         common-lisp:null)
                         :accessor
                         %sub-slot-value-elicitation-setting-wait-and-continue-specification
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         %sub-slot-value-elicitation-setting-sample-utterances
                         :initform common-lisp:nil)
                        (prompt-specification :initarg :|promptSpecification|
                         :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         %sub-slot-value-elicitation-setting-prompt-specification
                         :initform
                         (common-lisp:error
                          ":promptspecification is required"))
                        (default-value-specification :initarg
                         :|defaultValueSpecification| :type
                         (common-lisp:or slot-default-value-specification
                                         common-lisp:null)
                         :accessor
                         %sub-slot-value-elicitation-setting-default-value-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sub-slot-value-elicitation-setting
                    'make-sub-slot-value-elicitation-setting))
 (common-lisp:defun make-sub-slot-value-elicitation-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wait-and-continue-specification
                     sample-utterances prompt-specification
                     default-value-specification)
   (common-lisp:apply #'common-lisp:make-instance
                      'sub-slot-value-elicitation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-value-elicitation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-value-elicitation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-value-specification))
      (common-lisp:list
       (common-lisp:cons "defaultValueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-specification))
      (common-lisp:list
       (common-lisp:cons "promptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-and-continue-specification))
      (common-lisp:list
       (common-lisp:cons "waitAndContinueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-value-elicitation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype synonym-list ()
   '(trivial-types:proper-list sample-value))
 (common-lisp:defun |make-synonym-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sample-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass text-input-specification common-lisp:nil
                       ((start-timeout-ms :initarg :|startTimeoutMs| :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor %text-input-specification-start-timeout-ms
                         :initform
                         (common-lisp:error ":starttimeoutms is required"))))
 (common-lisp:export
  (common-lisp:list 'text-input-specification 'make-text-input-specification))
 (common-lisp:defun make-text-input-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-timeout-ms)
   (common-lisp:apply #'common-lisp:make-instance 'text-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "startTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-log-destination common-lisp:nil
                       ((cloud-watch :initarg :|cloudWatch| :type
                         (common-lisp:or cloud-watch-log-group-log-destination
                                         common-lisp:null)
                         :accessor %text-log-destination-cloud-watch :initform
                         (common-lisp:error ":cloudwatch is required"))))
 (common-lisp:export
  (common-lisp:list 'text-log-destination 'make-text-log-destination))
 (common-lisp:defun make-text-log-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch)
   (common-lisp:apply #'common-lisp:make-instance 'text-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch))
      (common-lisp:list
       (common-lisp:cons "cloudWatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-log-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-log-setting common-lisp:nil
                       ((destination :initarg :|destination| :type
                         (common-lisp:or text-log-destination common-lisp:null)
                         :accessor %text-log-setting-destination :initform
                         (common-lisp:error ":destination is required"))
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %text-log-setting-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'text-log-setting 'make-text-log-setting))
 (common-lisp:defun make-text-log-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination enabled)
   (common-lisp:apply #'common-lisp:make-instance 'text-log-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-log-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-log-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-log-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-log-settings-list ()
   '(trivial-types:proper-list text-log-setting))
 (common-lisp:defun |make-text-log-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-log-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (lexv2-models-error)
     ((retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-message)))
(common-lisp:deftype time-dimension () 'common-lisp:string)
(common-lisp:deftype time-in-milli-seconds () 'common-lisp:integer)
(common-lisp:deftype time-value () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype transcript () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcript-filter common-lisp:nil
                       ((lex-transcript-filter :initarg :|lexTranscriptFilter|
                         :type
                         (common-lisp:or lex-transcript-filter
                                         common-lisp:null)
                         :accessor %transcript-filter-lex-transcript-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transcript-filter 'make-transcript-filter))
 (common-lisp:defun make-transcript-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lex-transcript-filter)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lex-transcript-filter))
      (common-lisp:list
       (common-lisp:cons "lexTranscriptFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-filter))
   common-lisp:nil))
(common-lisp:deftype transcript-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcript-source-setting common-lisp:nil
                       ((s3bucket-transcript-source :initarg
                         :|s3BucketTranscriptSource| :type
                         (common-lisp:or s3bucket-transcript-source
                                         common-lisp:null)
                         :accessor
                         %transcript-source-setting-s3bucket-transcript-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transcript-source-setting
                    'make-transcript-source-setting))
 (common-lisp:defun make-transcript-source-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-transcript-source)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-source-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcript-source-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcript-source-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-transcript-source))
      (common-lisp:list
       (common-lisp:cons "s3BucketTranscriptSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcript-source-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-alias-request common-lisp:nil
                       ((bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-alias-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (sentiment-analysis-settings :initarg
                         :|sentimentAnalysisSettings| :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         %update-bot-alias-request-sentiment-analysis-settings
                         :initform common-lisp:nil)
                        (conversation-log-settings :initarg
                         :|conversationLogSettings| :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         %update-bot-alias-request-conversation-log-settings
                         :initform common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :|botAliasLocaleSettings| :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         %update-bot-alias-request-bot-alias-locale-settings
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %update-bot-alias-request-bot-version
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-bot-alias-request-description
                         :initform common-lisp:nil)
                        (bot-alias-name :initarg :|botAliasName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-bot-alias-request-bot-alias-name :initform
                         (common-lisp:error ":botaliasname is required"))
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %update-bot-alias-request-bot-alias-id
                         :initform
                         (common-lisp:error ":botaliasid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bot-alias-request 'make-update-bot-alias-request))
 (common-lisp:defun make-update-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-id sentiment-analysis-settings
                     conversation-log-settings bot-alias-locale-settings
                     bot-version description bot-alias-name bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-alias-response common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-bot-alias-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-bot-alias-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-alias-response-bot-id :initform
                         common-lisp:nil)
                        (bot-alias-status :initarg :|botAliasStatus| :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor %update-bot-alias-response-bot-alias-status
                         :initform common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :|sentimentAnalysisSettings| :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         %update-bot-alias-response-sentiment-analysis-settings
                         :initform common-lisp:nil)
                        (conversation-log-settings :initarg
                         :|conversationLogSettings| :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         %update-bot-alias-response-conversation-log-settings
                         :initform common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :|botAliasLocaleSettings| :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         %update-bot-alias-response-bot-alias-locale-settings
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor %update-bot-alias-response-bot-version
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-bot-alias-response-description
                         :initform common-lisp:nil)
                        (bot-alias-name :initarg :|botAliasName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-bot-alias-response-bot-alias-name :initform
                         common-lisp:nil)
                        (bot-alias-id :initarg :|botAliasId| :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor %update-bot-alias-response-bot-alias-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bot-alias-response
                    'make-update-bot-alias-response))
 (common-lisp:defun make-update-bot-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     bot-id bot-alias-status sentiment-analysis-settings
                     conversation-log-settings bot-alias-locale-settings
                     bot-version description bot-alias-name bot-alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-locale-request common-lisp:nil
                       ((voice-settings :initarg :|voiceSettings| :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor %update-bot-locale-request-voice-settings
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %update-bot-locale-request-nlu-intent-confidence-threshold
                         :initform
                         (common-lisp:error
                          ":nluintentconfidencethreshold is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-bot-locale-request-description
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-bot-locale-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-bot-locale-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-locale-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bot-locale-request
                    'make-update-bot-locale-request))
 (common-lisp:defun make-update-bot-locale-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key voice-settings
                     nlu-intent-confidence-threshold description locale-id
                     bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-locale-response common-lisp:nil
                       ((recommended-actions :initarg :|recommendedActions|
                         :type
                         (common-lisp:or recommended-actions common-lisp:null)
                         :accessor
                         %update-bot-locale-response-recommended-actions
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-bot-locale-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-bot-locale-response-creation-date-time
                         :initform common-lisp:nil)
                        (failure-reasons :initarg :|failureReasons| :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor %update-bot-locale-response-failure-reasons
                         :initform common-lisp:nil)
                        (bot-locale-status :initarg :|botLocaleStatus| :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         %update-bot-locale-response-bot-locale-status
                         :initform common-lisp:nil)
                        (voice-settings :initarg :|voiceSettings| :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor %update-bot-locale-response-voice-settings
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %update-bot-locale-response-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-bot-locale-response-description
                         :initform common-lisp:nil)
                        (locale-name :initarg :|localeName| :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor %update-bot-locale-response-locale-name
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-bot-locale-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-bot-locale-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-locale-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bot-locale-response
                    'make-update-bot-locale-response))
 (common-lisp:defun make-update-bot-locale-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommended-actions
                     last-updated-date-time creation-date-time failure-reasons
                     bot-locale-status voice-settings
                     nlu-intent-confidence-threshold description locale-name
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "recommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-recommendation-request common-lisp:nil
                       ((encryption-setting :initarg :|encryptionSetting| :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         %update-bot-recommendation-request-encryption-setting
                         :initform
                         (common-lisp:error ":encryptionsetting is required"))
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-recommendation-request-bot-recommendation-id
                         :initform
                         (common-lisp:error
                          ":botrecommendationid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-bot-recommendation-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %update-bot-recommendation-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-recommendation-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bot-recommendation-request
                    'make-update-bot-recommendation-request))
 (common-lisp:defun make-update-bot-recommendation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-setting bot-recommendation-id
                     locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-recommendation-response common-lisp:nil
                       ((encryption-setting :initarg :|encryptionSetting| :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         %update-bot-recommendation-response-encryption-setting
                         :initform common-lisp:nil)
                        (transcript-source-setting :initarg
                         :|transcriptSourceSetting| :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         %update-bot-recommendation-response-transcript-source-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-bot-recommendation-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-bot-recommendation-response-creation-date-time
                         :initform common-lisp:nil)
                        (bot-recommendation-id :initarg :|botRecommendationId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-recommendation-response-bot-recommendation-id
                         :initform common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :|botRecommendationStatus| :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         %update-bot-recommendation-response-bot-recommendation-status
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-bot-recommendation-response-locale-id
                         :initform common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         %update-bot-recommendation-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-recommendation-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bot-recommendation-response
                    'make-update-bot-recommendation-response))
 (common-lisp:defun make-update-bot-recommendation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-setting
                     transcript-source-setting last-updated-date-time
                     creation-date-time bot-recommendation-id
                     bot-recommendation-status locale-id bot-version bot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-request common-lisp:nil
                       ((bot-members :initarg :|botMembers| :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor %update-bot-request-bot-members :initform
                         common-lisp:nil)
                        (bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %update-bot-request-bot-type :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %update-bot-request-idle-session-ttlin-seconds
                         :initform
                         (common-lisp:error
                          ":idlesessionttlinseconds is required"))
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %update-bot-request-data-privacy :initform
                         (common-lisp:error ":dataprivacy is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-bot-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-bot-request-description :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-bot-request-bot-name :initform
                         (common-lisp:error ":botname is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bot-request 'make-update-bot-request))
 (common-lisp:defun make-update-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-members bot-type
                     idle-session-ttlin-seconds data-privacy role-arn
                     description bot-name bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-response common-lisp:nil
                       ((bot-members :initarg :|botMembers| :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor %update-bot-response-bot-members :initform
                         common-lisp:nil)
                        (bot-type :initarg :|botType| :type
                         (common-lisp:or bot-type common-lisp:null) :accessor
                         %update-bot-response-bot-type :initform
                         common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %update-bot-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-bot-response-creation-date-time :initform
                         common-lisp:nil)
                        (bot-status :initarg :|botStatus| :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         %update-bot-response-bot-status :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %update-bot-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (data-privacy :initarg :|dataPrivacy| :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor %update-bot-response-data-privacy :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-bot-response-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-bot-response-description :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-bot-response-bot-name :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-bot-response-bot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bot-response 'make-update-bot-response))
 (common-lisp:defun make-update-bot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-members bot-type
                     last-updated-date-time creation-date-time bot-status
                     idle-session-ttlin-seconds data-privacy role-arn
                     description bot-name bot-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-custom-vocabulary-items-list ()
   '(trivial-types:proper-list custom-vocabulary-item))
 (common-lisp:defun |make-update-custom-vocabulary-items-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-export-request common-lisp:nil
                       ((file-password :initarg :|filePassword| :type
                         (common-lisp:or import-export-file-password
                                         common-lisp:null)
                         :accessor %update-export-request-file-password
                         :initform common-lisp:nil)
                        (export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-export-request-export-id :initform
                         (common-lisp:error ":exportid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-export-request 'make-update-export-request))
 (common-lisp:defun make-update-export-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-password export-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-password))
      (common-lisp:list
       (common-lisp:cons "filePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-export-response common-lisp:nil
                       ((last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-export-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-export-response-creation-date-time :initform
                         common-lisp:nil)
                        (export-status :initarg :|exportStatus| :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor %update-export-response-export-status
                         :initform common-lisp:nil)
                        (file-format :initarg :|fileFormat| :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor %update-export-response-file-format
                         :initform common-lisp:nil)
                        (resource-specification :initarg
                         :|resourceSpecification| :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         %update-export-response-resource-specification
                         :initform common-lisp:nil)
                        (export-id :initarg :|exportId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-export-response-export-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-export-response 'make-update-export-response))
 (common-lisp:defun make-update-export-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time creation-date-time
                     export-status file-format resource-specification
                     export-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-intent-request common-lisp:nil
                       ((initial-response-setting :initarg
                         :|initialResponseSetting| :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         %update-intent-request-initial-response-setting
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-intent-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-intent-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-intent-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %update-intent-request-kendra-configuration
                         :initform common-lisp:nil)
                        (output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor %update-intent-request-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor %update-intent-request-input-contexts
                         :initform common-lisp:nil)
                        (intent-closing-setting :initarg
                         :|intentClosingSetting| :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         %update-intent-request-intent-closing-setting
                         :initform common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :|intentConfirmationSetting| :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         %update-intent-request-intent-confirmation-setting
                         :initform common-lisp:nil)
                        (slot-priorities :initarg :|slotPriorities| :type
                         (common-lisp:or slot-priorities-list common-lisp:null)
                         :accessor %update-intent-request-slot-priorities
                         :initform common-lisp:nil)
                        (fulfillment-code-hook :initarg :|fulfillmentCodeHook|
                         :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor %update-intent-request-fulfillment-code-hook
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor %update-intent-request-dialog-code-hook
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor %update-intent-request-sample-utterances
                         :initform common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         %update-intent-request-parent-intent-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-intent-request-description :initform
                         common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-intent-request-intent-name :initform
                         (common-lisp:error ":intentname is required"))
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-intent-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-intent-request 'make-update-intent-request))
 (common-lisp:defun make-update-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-response-setting locale-id
                     bot-version bot-id kendra-configuration output-contexts
                     input-contexts intent-closing-setting
                     intent-confirmation-setting slot-priorities
                     fulfillment-code-hook dialog-code-hook sample-utterances
                     parent-intent-signature description intent-name intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-priorities))
      (common-lisp:list
       (common-lisp:cons "slotPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-intent-response common-lisp:nil
                       ((initial-response-setting :initarg
                         :|initialResponseSetting| :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         %update-intent-response-initial-response-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-intent-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-intent-response-creation-date-time :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-intent-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-intent-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-intent-response-bot-id :initform
                         common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %update-intent-response-kendra-configuration
                         :initform common-lisp:nil)
                        (output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor %update-intent-response-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor %update-intent-response-input-contexts
                         :initform common-lisp:nil)
                        (intent-closing-setting :initarg
                         :|intentClosingSetting| :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         %update-intent-response-intent-closing-setting
                         :initform common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :|intentConfirmationSetting| :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         %update-intent-response-intent-confirmation-setting
                         :initform common-lisp:nil)
                        (slot-priorities :initarg :|slotPriorities| :type
                         (common-lisp:or slot-priorities-list common-lisp:null)
                         :accessor %update-intent-response-slot-priorities
                         :initform common-lisp:nil)
                        (fulfillment-code-hook :initarg :|fulfillmentCodeHook|
                         :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         %update-intent-response-fulfillment-code-hook
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor %update-intent-response-dialog-code-hook
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor %update-intent-response-sample-utterances
                         :initform common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         %update-intent-response-parent-intent-signature
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-intent-response-description
                         :initform common-lisp:nil)
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-intent-response-intent-name :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-intent-response-intent-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-intent-response 'make-update-intent-response))
 (common-lisp:defun make-update-intent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initial-response-setting
                     last-updated-date-time creation-date-time locale-id
                     bot-version bot-id kendra-configuration output-contexts
                     input-contexts intent-closing-setting
                     intent-confirmation-setting slot-priorities
                     fulfillment-code-hook dialog-code-hook sample-utterances
                     parent-intent-signature description intent-name intent-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-priorities))
      (common-lisp:list
       (common-lisp:cons "slotPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-policy-request common-lisp:nil
                       ((expected-revision-id :initarg :|expectedRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %update-resource-policy-request-expected-revision-id
                         :initform common-lisp:nil)
                        (policy :initarg :|policy| :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %update-resource-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %update-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-policy-request
                    'make-update-resource-policy-request))
 (common-lisp:defun make-update-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-revision-id policy resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-policy-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %update-resource-policy-response-revision-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %update-resource-policy-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-resource-policy-response
                    'make-update-resource-policy-response))
 (common-lisp:defun make-update-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-request common-lisp:nil
                       ((sub-slot-setting :initarg :|subSlotSetting| :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor %update-slot-request-sub-slot-setting
                         :initform common-lisp:nil)
                        (multiple-values-setting :initarg
                         :|multipleValuesSetting| :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor %update-slot-request-multiple-values-setting
                         :initform common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-request-intent-id :initform
                         (common-lisp:error ":intentid is required"))
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-slot-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-slot-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (obfuscation-setting :initarg :|obfuscationSetting|
                         :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor %update-slot-request-obfuscation-setting
                         :initform common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :|valueElicitationSetting| :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-request-value-elicitation-setting
                         :initform
                         (common-lisp:error
                          ":valueelicitationsetting is required"))
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %update-slot-request-slot-type-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-slot-request-description :initform
                         common-lisp:nil)
                        (slot-name :initarg :|slotName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-slot-request-slot-name :initform
                         (common-lisp:error ":slotname is required"))
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-request-slot-id :initform
                         (common-lisp:error ":slotid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-slot-request 'make-update-slot-request))
 (common-lisp:defun make-update-slot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-slot-setting multiple-values-setting
                     intent-id locale-id bot-version bot-id obfuscation-setting
                     value-elicitation-setting slot-type-id description
                     slot-name slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-slot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-response common-lisp:nil
                       ((sub-slot-setting :initarg :|subSlotSetting| :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor %update-slot-response-sub-slot-setting
                         :initform common-lisp:nil)
                        (multiple-values-setting :initarg
                         :|multipleValuesSetting| :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-response-multiple-values-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %update-slot-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-slot-response-creation-date-time :initform
                         common-lisp:nil)
                        (intent-id :initarg :|intentId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-response-intent-id :initform
                         common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-slot-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-slot-response-bot-version :initform
                         common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-response-bot-id :initform
                         common-lisp:nil)
                        (obfuscation-setting :initarg :|obfuscationSetting|
                         :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor %update-slot-response-obfuscation-setting
                         :initform common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :|valueElicitationSetting| :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-response-value-elicitation-setting
                         :initform common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor %update-slot-response-slot-type-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-slot-response-description :initform
                         common-lisp:nil)
                        (slot-name :initarg :|slotName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-slot-response-slot-name :initform
                         common-lisp:nil)
                        (slot-id :initarg :|slotId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-response-slot-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-slot-response 'make-update-slot-response))
 (common-lisp:defun make-update-slot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-slot-setting multiple-values-setting
                     last-updated-date-time creation-date-time intent-id
                     locale-id bot-version bot-id obfuscation-setting
                     value-elicitation-setting slot-type-id description
                     slot-name slot-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-slot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-slot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-slot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-type-request common-lisp:nil
                       ((composite-slot-type-setting :initarg
                         :|compositeSlotTypeSetting| :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-type-request-composite-slot-type-setting
                         :initform common-lisp:nil)
                        (external-source-setting :initarg
                         :|externalSourceSetting| :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-type-request-external-source-setting
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-slot-type-request-locale-id :initform
                         (common-lisp:error ":localeid is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-slot-type-request-bot-version
                         :initform
                         (common-lisp:error ":botversion is required"))
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-type-request-bot-id :initform
                         (common-lisp:error ":botid is required"))
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %update-slot-type-request-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-setting :initarg
                         :|valueSelectionSetting| :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-type-request-value-selection-setting
                         :initform common-lisp:nil)
                        (slot-type-values :initarg :|slotTypeValues| :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor %update-slot-type-request-slot-type-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-slot-type-request-description
                         :initform common-lisp:nil)
                        (slot-type-name :initarg :|slotTypeName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-slot-type-request-slot-type-name :initform
                         (common-lisp:error ":slottypename is required"))
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-type-request-slot-type-id :initform
                         (common-lisp:error ":slottypeid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-slot-type-request 'make-update-slot-type-request))
 (common-lisp:defun make-update-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key composite-slot-type-setting
                     external-source-setting locale-id bot-version bot-id
                     parent-slot-type-signature value-selection-setting
                     slot-type-values description slot-type-name slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-type-response common-lisp:nil
                       ((composite-slot-type-setting :initarg
                         :|compositeSlotTypeSetting| :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-type-response-composite-slot-type-setting
                         :initform common-lisp:nil)
                        (external-source-setting :initarg
                         :|externalSourceSetting| :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-type-response-external-source-setting
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg :|lastUpdatedDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-slot-type-response-last-updated-date-time
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-slot-type-response-creation-date-time
                         :initform common-lisp:nil)
                        (locale-id :initarg :|localeId| :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         %update-slot-type-response-locale-id :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor %update-slot-type-response-bot-version
                         :initform common-lisp:nil)
                        (bot-id :initarg :|botId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-type-response-bot-id :initform
                         common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         %update-slot-type-response-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-setting :initarg
                         :|valueSelectionSetting| :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         %update-slot-type-response-value-selection-setting
                         :initform common-lisp:nil)
                        (slot-type-values :initarg :|slotTypeValues| :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor %update-slot-type-response-slot-type-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-slot-type-response-description
                         :initform common-lisp:nil)
                        (slot-type-name :initarg :|slotTypeName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-slot-type-response-slot-type-name :initform
                         common-lisp:nil)
                        (slot-type-id :initarg :|slotTypeId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-slot-type-response-slot-type-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-slot-type-response
                    'make-update-slot-type-response))
 (common-lisp:defun make-update-slot-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key composite-slot-type-setting
                     external-source-setting last-updated-date-time
                     creation-date-time locale-id bot-version bot-id
                     parent-slot-type-signature value-selection-setting
                     slot-type-values description slot-type-name slot-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-response))
   common-lisp:nil))
(common-lisp:deftype utterance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass utterance-aggregation-duration common-lisp:nil
                       ((relative-aggregation-duration :initarg
                         :|relativeAggregationDuration| :type
                         (common-lisp:or relative-aggregation-duration
                                         common-lisp:null)
                         :accessor
                         %utterance-aggregation-duration-relative-aggregation-duration
                         :initform
                         (common-lisp:error
                          ":relativeaggregationduration is required"))))
 (common-lisp:export
  (common-lisp:list 'utterance-aggregation-duration
                    'make-utterance-aggregation-duration))
 (common-lisp:defun make-utterance-aggregation-duration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relative-aggregation-duration)
   (common-lisp:apply #'common-lisp:make-instance
                      'utterance-aggregation-duration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-aggregation-duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-aggregation-duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relative-aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "relativeAggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-aggregation-duration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (lexv2-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype voice-engine () 'common-lisp:string)
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass voice-settings common-lisp:nil
                       ((engine :initarg :|engine| :type
                         (common-lisp:or voice-engine common-lisp:null)
                         :accessor %voice-settings-engine :initform
                         common-lisp:nil)
                        (voice-id :initarg :|voiceId| :type
                         (common-lisp:or voice-id common-lisp:null) :accessor
                         %voice-settings-voice-id :initform
                         (common-lisp:error ":voiceid is required"))))
 (common-lisp:export (common-lisp:list 'voice-settings 'make-voice-settings))
 (common-lisp:defun make-voice-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine voice-id)
   (common-lisp:apply #'common-lisp:make-instance 'voice-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voice-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voice-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "voiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voice-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass wait-and-continue-specification common-lisp:nil
                       ((active :initarg :|active| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %wait-and-continue-specification-active
                         :initform common-lisp:nil)
                        (still-waiting-response :initarg
                         :|stillWaitingResponse| :type
                         (common-lisp:or still-waiting-response-specification
                                         common-lisp:null)
                         :accessor
                         %wait-and-continue-specification-still-waiting-response
                         :initform common-lisp:nil)
                        (continue-response :initarg :|continueResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %wait-and-continue-specification-continue-response
                         :initform
                         (common-lisp:error ":continueresponse is required"))
                        (waiting-response :initarg :|waitingResponse| :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         %wait-and-continue-specification-waiting-response
                         :initform
                         (common-lisp:error ":waitingresponse is required"))))
 (common-lisp:export
  (common-lisp:list 'wait-and-continue-specification
                    'make-wait-and-continue-specification))
 (common-lisp:defun make-wait-and-continue-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active still-waiting-response
                     continue-response waiting-response)
   (common-lisp:apply #'common-lisp:make-instance
                      'wait-and-continue-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wait-and-continue-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wait-and-continue-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waiting-response))
      (common-lisp:list
       (common-lisp:cons "waitingResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continue-response))
      (common-lisp:list
       (common-lisp:cons "continueResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'still-waiting-response))
      (common-lisp:list
       (common-lisp:cons "stillWaitingResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wait-and-continue-specification))
   common-lisp:nil))
(common-lisp:deftype weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun batch-create-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     custom-vocabulary-item-list)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     custom-vocabulary-item-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-create-custom-vocabulary-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/batchcreate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BatchCreateCustomVocabularyItem"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-custom-vocabulary-item))
(common-lisp:progn
 (common-lisp:defun batch-delete-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     custom-vocabulary-item-list)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     custom-vocabulary-item-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-custom-vocabulary-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/batchdelete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BatchDeleteCustomVocabularyItem"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-custom-vocabulary-item))
(common-lisp:progn
 (common-lisp:defun batch-update-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     custom-vocabulary-item-list)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     custom-vocabulary-item-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-custom-vocabulary-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/batchupdate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BatchUpdateCustomVocabularyItem"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-custom-vocabulary-item))
(common-lisp:progn
 (common-lisp:defun build-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-build-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BuildBotLocale"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'build-bot-locale))
(common-lisp:progn
 (common-lisp:defun create-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name description role-arn
                     data-privacy idle-session-ttlin-seconds bot-tags
                     test-bot-alias-tags bot-type bot-members)
   (common-lisp:declare
    (common-lisp:ignorable bot-name description role-arn data-privacy
     idle-session-ttlin-seconds bot-tags test-bot-alias-tags bot-type
     bot-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/bots/" "CreateBot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bot))
(common-lisp:progn
 (common-lisp:defun create-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-name description bot-version
                     bot-alias-locale-settings conversation-log-settings
                     sentiment-analysis-settings bot-id tags)
   (common-lisp:declare
    (common-lisp:ignorable bot-alias-name description bot-version
     bot-alias-locale-settings conversation-log-settings
     sentiment-analysis-settings bot-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "CreateBotAlias"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bot-alias))
(common-lisp:progn
 (common-lisp:defun create-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id description
                     nlu-intent-confidence-threshold voice-settings)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id description
     nlu-intent-confidence-threshold voice-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "CreateBotLocale"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bot-locale))
(common-lisp:progn
 (common-lisp:defun create-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id description
                     bot-version-locale-specification)
   (common-lisp:declare
    (common-lisp:ignorable bot-id description
     bot-version-locale-specification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "CreateBotVersion"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bot-version))
(common-lisp:progn
 (common-lisp:defun create-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-specification file-format
                     file-password)
   (common-lisp:declare
    (common-lisp:ignorable resource-specification file-format file-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/exports/"
                                                        "CreateExport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-export))
(common-lisp:progn
 (common-lisp:defun create-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-name description
                     parent-intent-signature sample-utterances dialog-code-hook
                     fulfillment-code-hook intent-confirmation-setting
                     intent-closing-setting input-contexts output-contexts
                     kendra-configuration bot-id bot-version locale-id
                     initial-response-setting)
   (common-lisp:declare
    (common-lisp:ignorable intent-name description parent-intent-signature
     sample-utterances dialog-code-hook fulfillment-code-hook
     intent-confirmation-setting intent-closing-setting input-contexts
     output-contexts kendra-configuration bot-id bot-version locale-id
     initial-response-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "CreateIntent"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-intent))
(common-lisp:progn
 (common-lisp:defun create-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateResourcePolicy"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resource-policy))
(common-lisp:progn
 (common-lisp:defun create-resource-policy-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn statement-id effect
                     principal action condition expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn statement-id effect principal action
     condition expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-resource-policy-statement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/statements/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateResourcePolicyStatement"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resource-policy-statement))
(common-lisp:progn
 (common-lisp:defun create-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-name description slot-type-id
                     value-elicitation-setting obfuscation-setting bot-id
                     bot-version locale-id intent-id multiple-values-setting
                     sub-slot-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-name description slot-type-id
     value-elicitation-setting obfuscation-setting bot-id bot-version locale-id
     intent-id multiple-values-setting sub-slot-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "CreateSlot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-slot))
(common-lisp:progn
 (common-lisp:defun create-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-name description
                     slot-type-values value-selection-setting
                     parent-slot-type-signature bot-id bot-version locale-id
                     external-source-setting composite-slot-type-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-name description slot-type-values
     value-selection-setting parent-slot-type-signature bot-id bot-version
     locale-id external-source-setting composite-slot-type-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "CreateSlotType"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-slot-type))
(common-lisp:progn
 (common-lisp:defun create-upload-url ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lexv2-models-request :method "POST" :path
                                "/createuploadurl/" :protocol :rest-json
                                :operation "CreateUploadUrl" :params
                                `(("Action" ,@"CreateUploadUrl")
                                  ("Version" ,@"2020-08-07"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'create-upload-url))
(common-lisp:progn
 (common-lisp:defun delete-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable bot-id skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "DeleteBot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot))
(common-lisp:progn
 (common-lisp:defun delete-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-id bot-id
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable bot-alias-id bot-id skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))))
                                                        "DeleteBotAlias"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot-alias))
(common-lisp:progn
 (common-lisp:defun delete-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DeleteBotLocale"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot-locale))
(common-lisp:progn
 (common-lisp:defun delete-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "DeleteBotVersion"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot-version))
(common-lisp:progn
 (common-lisp:defun delete-custom-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DeleteCustomVocabulary"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-vocabulary))
(common-lisp:progn
 (common-lisp:defun delete-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id)
   (common-lisp:declare (common-lisp:ignorable export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "DeleteExport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-export))
(common-lisp:progn
 (common-lisp:defun delete-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/imports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-id))))
                                                        "DeleteImport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-import))
(common-lisp:progn
 (common-lisp:defun delete-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id bot-id bot-version locale-id)
   (common-lisp:declare
    (common-lisp:ignorable intent-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "DeleteIntent"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-intent))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DeleteResourcePolicy"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn statement-id
                     expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn statement-id expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resource-policy-statement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/statements/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'statement-id))))
                                                        "DeleteResourcePolicyStatement"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy-statement))
(common-lisp:progn
 (common-lisp:defun delete-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-id bot-id bot-version locale-id
                     intent-id)
   (common-lisp:declare
    (common-lisp:ignorable slot-id bot-id bot-version locale-id intent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-id))))
                                                        "DeleteSlot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-slot))
(common-lisp:progn
 (common-lisp:defun delete-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-id bot-id bot-version locale-id
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-id bot-id bot-version locale-id
     skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-type-id))))
                                                        "DeleteSlotType"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-slot-type))
(common-lisp:progn
 (common-lisp:defun delete-utterances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id locale-id session-id)
   (common-lisp:declare (common-lisp:ignorable bot-id locale-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-utterances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/utterances/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "DeleteUtterances"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-utterances))
(common-lisp:progn
 (common-lisp:defun describe-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id)
   (common-lisp:declare (common-lisp:ignorable bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "DescribeBot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bot))
(common-lisp:progn
 (common-lisp:defun describe-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-id bot-id)
   (common-lisp:declare (common-lisp:ignorable bot-alias-id bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))))
                                                        "DescribeBotAlias"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bot-alias))
(common-lisp:progn
 (common-lisp:defun describe-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DescribeBotLocale"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bot-locale))
(common-lisp:progn
 (common-lisp:defun describe-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-bot-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "DescribeBotRecommendation"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun describe-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "DescribeBotVersion"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bot-version))
(common-lisp:progn
 (common-lisp:defun describe-custom-vocabulary-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-vocabulary-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DescribeCustomVocabularyMetadata"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-vocabulary-metadata))
(common-lisp:progn
 (common-lisp:defun describe-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id)
   (common-lisp:declare (common-lisp:ignorable export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "DescribeExport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-export))
(common-lisp:progn
 (common-lisp:defun describe-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/imports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-id))))
                                                        "DescribeImport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-import))
(common-lisp:progn
 (common-lisp:defun describe-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id bot-id bot-version locale-id)
   (common-lisp:declare
    (common-lisp:ignorable intent-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "DescribeIntent"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-intent))
(common-lisp:progn
 (common-lisp:defun describe-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DescribeResourcePolicy"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource-policy))
(common-lisp:progn
 (common-lisp:defun describe-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-id bot-id bot-version locale-id
                     intent-id)
   (common-lisp:declare
    (common-lisp:ignorable slot-id bot-id bot-version locale-id intent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-id))))
                                                        "DescribeSlot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-slot))
(common-lisp:progn
 (common-lisp:defun describe-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-id bot-id bot-version
                     locale-id)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-type-id))))
                                                        "DescribeSlotType"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-slot-type))
(common-lisp:progn
 (common-lisp:defun list-aggregated-utterances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id bot-version locale-id
                     aggregation-duration sort-by filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id bot-version locale-id
     aggregation-duration sort-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-aggregated-utterances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aggregatedutterances/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListAggregatedUtterances"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-aggregated-utterances))
(common-lisp:progn
 (common-lisp:defun list-bot-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable bot-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListBotAliases"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bot-aliases))
(common-lisp:progn
 (common-lisp:defun list-bot-locales
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version sort-by filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version sort-by filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-locales-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "ListBotLocales"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bot-locales))
(common-lisp:progn
 (common-lisp:defun list-bot-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBotRecommendations"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bot-recommendations))
(common-lisp:progn
 (common-lisp:defun list-bot-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListBotVersions"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bot-versions))
(common-lisp:progn
 (common-lisp:defun list-bots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable sort-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/bots/" "ListBots"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bots))
(common-lisp:progn
 (common-lisp:defun list-built-in-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale-id sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable locale-id sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-built-in-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/builtins/locales/~A/intents/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBuiltInIntents"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-built-in-intents))
(common-lisp:progn
 (common-lisp:defun list-built-in-slot-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale-id sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable locale-id sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-built-in-slot-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/builtins/locales/~A/slottypes/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBuiltInSlotTypes"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-built-in-slot-types))
(common-lisp:progn
 (common-lisp:defun list-custom-vocabulary-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-vocabulary-items-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListCustomVocabularyItems"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-vocabulary-items))
(common-lisp:progn
 (common-lisp:defun list-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version sort-by filters
                     max-results next-token locale-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version sort-by filters max-results
     next-token locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/exports/"
                                                        "ListExports"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-exports))
(common-lisp:progn
 (common-lisp:defun list-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version sort-by filters
                     max-results next-token locale-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version sort-by filters max-results
     next-token locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-imports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/imports/"
                                                        "ListImports"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-imports))
(common-lisp:progn
 (common-lisp:defun list-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id sort-by
                     filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id sort-by filters
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListIntents"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-intents))
(common-lisp:progn
 (common-lisp:defun list-recommended-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommended-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/intents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "ListRecommendedIntents"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommended-intents))
(common-lisp:progn
 (common-lisp:defun list-slot-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id sort-by
                     filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id sort-by filters
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-slot-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListSlotTypes"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-slot-types))
(common-lisp:progn
 (common-lisp:defun list-slots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id intent-id
                     sort-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id intent-id sort-by
     filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-slots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "ListSlots"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-slots))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun search-associated-transcripts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id search-order filters max-results
                     next-index)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id
     search-order filters max-results next-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-associated-transcripts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/associatedtranscripts"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "SearchAssociatedTranscripts"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-associated-transcripts))
(common-lisp:progn
 (common-lisp:defun start-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     transcript-source-setting encryption-setting)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     transcript-source-setting encryption-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-bot-recommendation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "StartBotRecommendation"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun start-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id resource-specification
                     merge-strategy file-password)
   (common-lisp:declare
    (common-lisp:ignorable import-id resource-specification merge-strategy
     file-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/imports/"
                                                        "StartImport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import))
(common-lisp:progn
 (common-lisp:defun stop-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-bot-recommendation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/stopbotrecommendation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "StopBotRecommendation"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-name description role-arn
                     data-privacy idle-session-ttlin-seconds bot-type
                     bot-members)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-name description role-arn data-privacy
     idle-session-ttlin-seconds bot-type bot-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "UpdateBot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bot))
(common-lisp:progn
 (common-lisp:defun update-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-id bot-alias-name description
                     bot-version bot-alias-locale-settings
                     conversation-log-settings sentiment-analysis-settings
                     bot-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-alias-id bot-alias-name description bot-version
     bot-alias-locale-settings conversation-log-settings
     sentiment-analysis-settings bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))))
                                                        "UpdateBotAlias"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bot-alias))
(common-lisp:progn
 (common-lisp:defun update-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id description
                     nlu-intent-confidence-threshold voice-settings)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id description
     nlu-intent-confidence-threshold voice-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "UpdateBotLocale"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bot-locale))
(common-lisp:progn
 (common-lisp:defun update-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id encryption-setting)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id
     encryption-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-bot-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "UpdateBotRecommendation"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun update-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id file-password)
   (common-lisp:declare (common-lisp:ignorable export-id file-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "UpdateExport"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-export))
(common-lisp:progn
 (common-lisp:defun update-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id intent-name description
                     parent-intent-signature sample-utterances dialog-code-hook
                     fulfillment-code-hook slot-priorities
                     intent-confirmation-setting intent-closing-setting
                     input-contexts output-contexts kendra-configuration bot-id
                     bot-version locale-id initial-response-setting)
   (common-lisp:declare
    (common-lisp:ignorable intent-id intent-name description
     parent-intent-signature sample-utterances dialog-code-hook
     fulfillment-code-hook slot-priorities intent-confirmation-setting
     intent-closing-setting input-contexts output-contexts kendra-configuration
     bot-id bot-version locale-id initial-response-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "UpdateIntent"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-intent))
(common-lisp:progn
 (common-lisp:defun update-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn policy expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UpdateResourcePolicy"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-policy))
(common-lisp:progn
 (common-lisp:defun update-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-id slot-name description
                     slot-type-id value-elicitation-setting obfuscation-setting
                     bot-id bot-version locale-id intent-id
                     multiple-values-setting sub-slot-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-id slot-name description slot-type-id
     value-elicitation-setting obfuscation-setting bot-id bot-version locale-id
     intent-id multiple-values-setting sub-slot-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-id))))
                                                        "UpdateSlot"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-slot))
(common-lisp:progn
 (common-lisp:defun update-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-id slot-type-name description
                     slot-type-values value-selection-setting
                     parent-slot-type-signature bot-id bot-version locale-id
                     external-source-setting composite-slot-type-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-id slot-type-name description
     slot-type-values value-selection-setting parent-slot-type-signature bot-id
     bot-version locale-id external-source-setting
     composite-slot-type-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-type-id))))
                                                        "UpdateSlotType"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-slot-type))
