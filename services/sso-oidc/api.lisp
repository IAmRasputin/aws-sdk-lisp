;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sso-oidc/api
  (:use)
  (:nicknames #:aws/sso-oidc)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sso-oidc/api)
(common-lisp:progn
 (common-lisp:define-condition sso-oidc-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sso-oidc-error))
(common-lisp:progn
 (common-lisp:defclass sso-oidc-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "sso-oidc" :api-version
                        "2019-06-10" :host-prefix "oidc" :signing-name
                        "sso-oauth" :global-host common-lisp:nil))
 (common-lisp:export 'sso-oidc-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AuthorizationPendingException" . authorization-pending-exception)
    ("ExpiredTokenException" . expired-token-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidClientException" . invalid-client-exception)
    ("InvalidClientMetadataException" . invalid-client-metadata-exception)
    ("InvalidGrantException" . invalid-grant-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidRequestRegionException" . invalid-request-region-exception)
    ("InvalidScopeException" . invalid-scope-exception)
    ("SlowDownException" . slow-down-exception)
    ("UnauthorizedClientException" . unauthorized-client-exception)
    ("UnsupportedGrantTypeException" . unsupported-grant-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       access-denied-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader access-denied-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-error
                    'access-denied-exception-error-description)))
(common-lisp:deftype access-token () 'common-lisp:string)
(common-lisp:deftype assertion () 'common-lisp:string)
(common-lisp:deftype auth-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition authorization-pending-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       authorization-pending-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader authorization-pending-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'authorization-pending-exception
                    'authorization-pending-exception-error
                    'authorization-pending-exception-error-description)))
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-name () 'common-lisp:string)
(common-lisp:deftype client-secret () 'common-lisp:string)
(common-lisp:deftype client-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-token-request-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (grant-type (common-lisp:error ":granttype is required") :type
    (common-lisp:or grant-type common-lisp:null))
   (device-code common-lisp:nil :type
    (common-lisp:or device-code common-lisp:null))
   (code common-lisp:nil :type (common-lisp:or auth-code common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or scopes common-lisp:null))
   (redirect-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-token-request 'make-create-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-type))
      (common-lisp:list
       (common-lisp:cons "grantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-code))
      (common-lisp:list
       (common-lisp:cons "deviceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-uri))
      (common-lisp:list
       (common-lisp:cons "redirectUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-token-response-"))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (token-type common-lisp:nil :type
    (common-lisp:or token-type common-lisp:null))
   (expires-in common-lisp:nil :type
    (common-lisp:or expiration-in-seconds common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (id-token common-lisp:nil :type (common-lisp:or id-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-token-response 'make-create-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "tokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token))
      (common-lisp:list
       (common-lisp:cons "idToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-token-with-iamrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-token-with-iamrequest-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (grant-type (common-lisp:error ":granttype is required") :type
    (common-lisp:or grant-type common-lisp:null))
   (code common-lisp:nil :type (common-lisp:or auth-code common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (assertion common-lisp:nil :type
    (common-lisp:or assertion common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or scopes common-lisp:null))
   (redirect-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (subject-token common-lisp:nil :type
    (common-lisp:or subject-token common-lisp:null))
   (subject-token-type common-lisp:nil :type
    (common-lisp:or token-type-uri common-lisp:null))
   (requested-token-type common-lisp:nil :type
    (common-lisp:or token-type-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-token-with-iamrequest
                    'make-create-token-with-iamrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-with-iamrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-with-iamrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-type))
      (common-lisp:list
       (common-lisp:cons "grantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assertion))
      (common-lisp:list
       (common-lisp:cons "assertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-uri))
      (common-lisp:list
       (common-lisp:cons "redirectUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-token))
      (common-lisp:list
       (common-lisp:cons "subjectToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-token-type))
      (common-lisp:list
       (common-lisp:cons "subjectTokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-token-type))
      (common-lisp:list
       (common-lisp:cons "requestedTokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-with-iamrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-token-with-iamresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-token-with-iamresponse-"))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (token-type common-lisp:nil :type
    (common-lisp:or token-type common-lisp:null))
   (expires-in common-lisp:nil :type
    (common-lisp:or expiration-in-seconds common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (id-token common-lisp:nil :type (common-lisp:or id-token common-lisp:null))
   (issued-token-type common-lisp:nil :type
    (common-lisp:or token-type-uri common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or scopes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-token-with-iamresponse
                    'make-create-token-with-iamresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-with-iamresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-with-iamresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "tokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token))
      (common-lisp:list
       (common-lisp:cons "idToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-token-type))
      (common-lisp:list
       (common-lisp:cons "issuedTokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-with-iamresponse))
   common-lisp:nil))
(common-lisp:deftype device-code () 'common-lisp:string)
(common-lisp:deftype error () 'common-lisp:string)
(common-lisp:deftype error-description () 'common-lisp:string)
(common-lisp:deftype expiration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition expired-token-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       expired-token-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader expired-token-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'expired-token-exception 'expired-token-exception-error
                    'expired-token-exception-error-description)))
(common-lisp:deftype grant-type () 'common-lisp:string)
(common-lisp:deftype id-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       internal-server-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader internal-server-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception 'internal-server-exception-error
                    'internal-server-exception-error-description)))
(common-lisp:deftype interval-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-client-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       invalid-client-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader invalid-client-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'invalid-client-exception 'invalid-client-exception-error
                    'invalid-client-exception-error-description)))
(common-lisp:progn
 (common-lisp:define-condition invalid-client-metadata-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       invalid-client-metadata-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader invalid-client-metadata-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'invalid-client-metadata-exception
                    'invalid-client-metadata-exception-error
                    'invalid-client-metadata-exception-error-description)))
(common-lisp:progn
 (common-lisp:define-condition invalid-grant-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       invalid-grant-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader invalid-grant-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'invalid-grant-exception 'invalid-grant-exception-error
                    'invalid-grant-exception-error-description)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       invalid-request-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader invalid-request-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception 'invalid-request-exception-error
                    'invalid-request-exception-error-description)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-region-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       invalid-request-region-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader invalid-request-region-exception-error-description)
      (endpoint :initarg :endpoint :initform common-lisp:nil :reader
       invalid-request-region-exception-endpoint)
      (region :initarg :region :initform common-lisp:nil :reader
       invalid-request-region-exception-region)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-region-exception
                    'invalid-request-region-exception-error
                    'invalid-request-region-exception-error-description
                    'invalid-request-region-exception-endpoint
                    'invalid-request-region-exception-region)))
(common-lisp:progn
 (common-lisp:define-condition invalid-scope-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       invalid-scope-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader invalid-scope-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'invalid-scope-exception 'invalid-scope-exception-error
                    'invalid-scope-exception-error-description)))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype long-time-stamp-type () 'common-lisp:integer)
(common-lisp:deftype refresh-token () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-client-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-client-request-"))
   (client-name (common-lisp:error ":clientname is required") :type
    (common-lisp:or client-name common-lisp:null))
   (client-type (common-lisp:error ":clienttype is required") :type
    (common-lisp:or client-type common-lisp:null))
   (scopes common-lisp:nil :type (common-lisp:or scopes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-client-request 'make-register-client-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-client-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-client-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-name))
      (common-lisp:list
       (common-lisp:cons "clientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-type))
      (common-lisp:list
       (common-lisp:cons "clientType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-client-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-client-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-client-response-"))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret common-lisp:nil :type
    (common-lisp:or client-secret common-lisp:null))
   (client-id-issued-at common-lisp:nil :type
    (common-lisp:or long-time-stamp-type common-lisp:null))
   (client-secret-expires-at common-lisp:nil :type
    (common-lisp:or long-time-stamp-type common-lisp:null))
   (authorization-endpoint common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (token-endpoint common-lisp:nil :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-client-response 'make-register-client-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-client-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-client-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id-issued-at))
      (common-lisp:list
       (common-lisp:cons "clientIdIssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-secret-expires-at))
      (common-lisp:list
       (common-lisp:cons "clientSecretExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "authorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-endpoint))
      (common-lisp:list
       (common-lisp:cons "tokenEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-client-response))
   common-lisp:nil))
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scopes () '(trivial-types:proper-list scope))
 (common-lisp:defun make-scopes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scope))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition slow-down-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       slow-down-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader slow-down-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'slow-down-exception 'slow-down-exception-error
                    'slow-down-exception-error-description)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-device-authorization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-device-authorization-request-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (start-url (common-lisp:error ":starturl is required") :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-device-authorization-request
                    'make-start-device-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-device-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-device-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-url))
      (common-lisp:list
       (common-lisp:cons "startUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-device-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-device-authorization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-device-authorization-response-"))
   (device-code common-lisp:nil :type
    (common-lisp:or device-code common-lisp:null))
   (user-code common-lisp:nil :type
    (common-lisp:or user-code common-lisp:null))
   (verification-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (verification-uri-complete common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (expires-in common-lisp:nil :type
    (common-lisp:or expiration-in-seconds common-lisp:null))
   (interval common-lisp:nil :type
    (common-lisp:or interval-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-device-authorization-response
                    'make-start-device-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-device-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-device-authorization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-code))
      (common-lisp:list
       (common-lisp:cons "deviceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-code))
      (common-lisp:list
       (common-lisp:cons "userCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-uri))
      (common-lisp:list
       (common-lisp:cons "verificationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-uri-complete))
      (common-lisp:list
       (common-lisp:cons "verificationUriComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-device-authorization-response))
   common-lisp:nil))
(common-lisp:deftype subject-token () 'common-lisp:string)
(common-lisp:deftype token-type () 'common-lisp:string)
(common-lisp:deftype token-type-uri () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-client-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       unauthorized-client-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader unauthorized-client-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-client-exception
                    'unauthorized-client-exception-error
                    'unauthorized-client-exception-error-description)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-grant-type-exception
     (sso-oidc-error)
     ((error :initarg :error :initform common-lisp:nil :reader
       unsupported-grant-type-exception-error)
      (error-description :initarg :error-description :initform common-lisp:nil
       :reader unsupported-grant-type-exception-error-description)))
 (common-lisp:export
  (common-lisp:list 'unsupported-grant-type-exception
                    'unsupported-grant-type-exception-error
                    'unsupported-grant-type-exception-error-description)))
(common-lisp:deftype user-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id client-secret grant-type
                     device-code code refresh-token scope redirect-uri)
   (common-lisp:declare
    (common-lisp:ignorable client-id client-secret grant-type device-code code
     refresh-token scope redirect-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sso-oidc-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/token"
                                                        "CreateToken"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-token))
(common-lisp:progn
 (common-lisp:defun create-token-with-iam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id grant-type code refresh-token
                     assertion scope redirect-uri subject-token
                     subject-token-type requested-token-type)
   (common-lisp:declare
    (common-lisp:ignorable client-id grant-type code refresh-token assertion
     scope redirect-uri subject-token subject-token-type requested-token-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-token-with-iamrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sso-oidc-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/token?aws_iam=t"
                                                        "CreateTokenWithIAM"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-token-with-iam))
(common-lisp:progn
 (common-lisp:defun register-client
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-name client-type scopes)
   (common-lisp:declare (common-lisp:ignorable client-name client-type scopes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-client-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sso-oidc-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/client/register"
                                                        "RegisterClient"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-client))
(common-lisp:progn
 (common-lisp:defun start-device-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id client-secret start-url)
   (common-lisp:declare
    (common-lisp:ignorable client-id client-secret start-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-device-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sso-oidc-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/device_authorization"
                                                        "StartDeviceAuthorization"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-device-authorization))
