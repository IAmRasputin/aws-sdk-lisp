;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/bedrock-agent/api
  (:use)
  (:nicknames #:aws/bedrock-agent)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/bedrock-agent/api)
(common-lisp:progn
 (common-lisp:define-condition bedrock-agent-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'bedrock-agent-error))
(common-lisp:progn
 (common-lisp:defclass bedrock-agent-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "bedrock-agent" :api-version
                        "2023-06-05" :host-prefix "bedrock-agent" :signing-name
                        "bedrock" :global-host common-lisp:nil))
 (common-lisp:export 'bedrock-agent-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (apischema (:copier common-lisp:nil)
      (:conc-name "struct-shape-apischema-"))
   (s3 common-lisp:nil :type (common-lisp:or s3identifier common-lisp:null))
   (payload common-lisp:nil :type (common-lisp:or payload common-lisp:null)))
 (common-lisp:export (common-lisp:list 'apischema 'make-apischema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apischema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apischema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apischema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (action-group-executor (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-group-executor-"))
   (lambda common-lisp:nil :type (common-lisp:or lambda-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-group-executor 'make-action-group-executor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-group-executor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-group-executor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-group-executor))
   common-lisp:nil))
(common-lisp:deftype action-group-signature () 'common-lisp:string)
(common-lisp:deftype action-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-group-summaries ()
   '(trivial-types:proper-list action-group-summary))
 (common-lisp:defun make-action-group-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-group-summary-"))
   (action-group-id (common-lisp:error ":actiongroupid is required") :type
    (common-lisp:or id common-lisp:null))
   (action-group-name (common-lisp:error ":actiongroupname is required") :type
    (common-lisp:or name common-lisp:null))
   (action-group-state (common-lisp:error ":actiongroupstate is required")
    :type (common-lisp:or action-group-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-group-summary 'make-action-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-id))
      (common-lisp:list
       (common-lisp:cons "actionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-name))
      (common-lisp:list
       (common-lisp:cons "actionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-state))
      (common-lisp:list
       (common-lisp:cons "actionGroupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (agent (:copier common-lisp:nil) (:conc-name "struct-shape-agent-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-name (common-lisp:error ":agentname is required") :type
    (common-lisp:or name common-lisp:null))
   (agent-arn (common-lisp:error ":agentarn is required") :type
    (common-lisp:or agent-arn common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (instruction common-lisp:nil :type
    (common-lisp:or instruction common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null))
   (foundation-model common-lisp:nil :type
    (common-lisp:or model-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (idle-session-ttlin-seconds
    (common-lisp:error ":idlesessionttlinseconds is required") :type
    (common-lisp:or session-ttl common-lisp:null))
   (agent-resource-role-arn
    (common-lisp:error ":agentresourcerolearn is required") :type
    (common-lisp:or agent-role-arn common-lisp:null))
   (customer-encryption-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (prepared-at common-lisp:nil :type
    (common-lisp:or date-timestamp common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (recommended-actions common-lisp:nil :type
    (common-lisp:or recommended-actions common-lisp:null))
   (prompt-override-configuration common-lisp:nil :type
    (common-lisp:or prompt-override-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent 'make-agent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-name))
      (common-lisp:list
       (common-lisp:cons "agentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-arn))
      (common-lisp:list
       (common-lisp:cons "agentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instruction))
      (common-lisp:list
       (common-lisp:cons "instruction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foundation-model))
      (common-lisp:list
       (common-lisp:cons "foundationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-resource-role-arn))
      (common-lisp:list
       (common-lisp:cons "agentResourceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "customerEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-at))
      (common-lisp:list
       (common-lisp:cons "preparedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "recommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-override-configuration))
      (common-lisp:list
       (common-lisp:cons "promptOverrideConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-action-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-action-group-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (action-group-id (common-lisp:error ":actiongroupid is required") :type
    (common-lisp:or id common-lisp:null))
   (action-group-name (common-lisp:error ":actiongroupname is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (parent-action-signature common-lisp:nil :type
    (common-lisp:or action-group-signature common-lisp:null))
   (action-group-executor common-lisp:nil :type
    (common-lisp:or action-group-executor common-lisp:null))
   (api-schema common-lisp:nil :type
    (common-lisp:or apischema common-lisp:null))
   (action-group-state (common-lisp:error ":actiongroupstate is required")
    :type (common-lisp:or action-group-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-action-group 'make-agent-action-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-action-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-action-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-id))
      (common-lisp:list
       (common-lisp:cons "actionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-name))
      (common-lisp:list
       (common-lisp:cons "actionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-action-signature))
      (common-lisp:list
       (common-lisp:cons "parentActionSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-group-executor))
      (common-lisp:list
       (common-lisp:cons "actionGroupExecutor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-schema))
      (common-lisp:list
       (common-lisp:cons "apiSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-state))
      (common-lisp:list
       (common-lisp:cons "actionGroupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-action-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-alias (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-alias-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-alias-id (common-lisp:error ":agentaliasid is required") :type
    (common-lisp:or agent-alias-id common-lisp:null))
   (agent-alias-name (common-lisp:error ":agentaliasname is required") :type
    (common-lisp:or name common-lisp:null))
   (agent-alias-arn (common-lisp:error ":agentaliasarn is required") :type
    (common-lisp:or agent-alias-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (routing-configuration
    (common-lisp:error ":routingconfiguration is required") :type
    (common-lisp:or agent-alias-routing-configuration common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (agent-alias-history-events common-lisp:nil :type
    (common-lisp:or agent-alias-history-events common-lisp:null))
   (agent-alias-status (common-lisp:error ":agentaliasstatus is required")
    :type (common-lisp:or agent-alias-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-alias 'make-agent-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-id))
      (common-lisp:list
       (common-lisp:cons "agentAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-name))
      (common-lisp:list
       (common-lisp:cons "agentAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-arn))
      (common-lisp:list
       (common-lisp:cons "agentAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-alias-history-events))
      (common-lisp:list
       (common-lisp:cons "agentAliasHistoryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-status))
      (common-lisp:list
       (common-lisp:cons "agentAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-alias))
   common-lisp:nil))
(common-lisp:deftype agent-alias-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-alias-history-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-alias-history-event-"))
   (routing-configuration common-lisp:nil :type
    (common-lisp:or agent-alias-routing-configuration common-lisp:null))
   (end-date common-lisp:nil :type
    (common-lisp:or date-timestamp common-lisp:null))
   (start-date common-lisp:nil :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-alias-history-event
                    'make-agent-alias-history-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-alias-history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-alias-history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-alias-history-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-alias-history-events ()
   '(trivial-types:proper-list agent-alias-history-event))
 (common-lisp:defun make-agent-alias-history-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-alias-history-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-alias-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-alias-routing-configuration ()
   '(trivial-types:proper-list agent-alias-routing-configuration-list-item))
 (common-lisp:defun make-agent-alias-routing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-alias-routing-configuration-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-alias-routing-configuration-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-alias-routing-configuration-list-item-"))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-alias-routing-configuration-list-item
                    'make-agent-alias-routing-configuration-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-alias-routing-configuration-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-alias-routing-configuration-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-alias-routing-configuration-list-item))
   common-lisp:nil))
(common-lisp:deftype agent-alias-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-alias-summaries ()
   '(trivial-types:proper-list agent-alias-summary))
 (common-lisp:defun make-agent-alias-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-alias-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-alias-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-alias-summary-"))
   (agent-alias-id (common-lisp:error ":agentaliasid is required") :type
    (common-lisp:or agent-alias-id common-lisp:null))
   (agent-alias-name (common-lisp:error ":agentaliasname is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (routing-configuration common-lisp:nil :type
    (common-lisp:or agent-alias-routing-configuration common-lisp:null))
   (agent-alias-status (common-lisp:error ":agentaliasstatus is required")
    :type (common-lisp:or agent-alias-status common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-alias-summary 'make-agent-alias-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-alias-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-alias-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-id))
      (common-lisp:list
       (common-lisp:cons "agentAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-name))
      (common-lisp:list
       (common-lisp:cons "agentAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-status))
      (common-lisp:list
       (common-lisp:cons "agentAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-alias-summary))
   common-lisp:nil))
(common-lisp:deftype agent-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-knowledge-base (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-knowledge-base-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (knowledge-base-state (common-lisp:error ":knowledgebasestate is required")
    :type (common-lisp:or knowledge-base-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-knowledge-base 'make-agent-knowledge-base))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-knowledge-base))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-knowledge-base))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-state))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-knowledge-base))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-knowledge-base-summaries ()
   '(trivial-types:proper-list agent-knowledge-base-summary))
 (common-lisp:defun make-agent-knowledge-base-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-knowledge-base-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-knowledge-base-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-knowledge-base-summary-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (knowledge-base-state (common-lisp:error ":knowledgebasestate is required")
    :type (common-lisp:or knowledge-base-state common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-knowledge-base-summary
                    'make-agent-knowledge-base-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-knowledge-base-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-knowledge-base-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-state))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-knowledge-base-summary))
   common-lisp:nil))
(common-lisp:deftype agent-role-arn () 'common-lisp:string)
(common-lisp:deftype agent-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-summaries ()
   '(trivial-types:proper-list agent-summary))
 (common-lisp:defun make-agent-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-summary-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-name (common-lisp:error ":agentname is required") :type
    (common-lisp:or name common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (latest-agent-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-summary 'make-agent-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-name))
      (common-lisp:list
       (common-lisp:cons "agentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-agent-version))
      (common-lisp:list
       (common-lisp:cons "latestAgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-version-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-name (common-lisp:error ":agentname is required") :type
    (common-lisp:or name common-lisp:null))
   (agent-arn (common-lisp:error ":agentarn is required") :type
    (common-lisp:or agent-arn common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or numerical-version common-lisp:null))
   (instruction common-lisp:nil :type
    (common-lisp:or instruction common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null))
   (foundation-model common-lisp:nil :type
    (common-lisp:or model-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (idle-session-ttlin-seconds
    (common-lisp:error ":idlesessionttlinseconds is required") :type
    (common-lisp:or session-ttl common-lisp:null))
   (agent-resource-role-arn
    (common-lisp:error ":agentresourcerolearn is required") :type
    (common-lisp:or agent-role-arn common-lisp:null))
   (customer-encryption-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (recommended-actions common-lisp:nil :type
    (common-lisp:or recommended-actions common-lisp:null))
   (prompt-override-configuration common-lisp:nil :type
    (common-lisp:or prompt-override-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-version 'make-agent-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-name))
      (common-lisp:list
       (common-lisp:cons "agentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-arn))
      (common-lisp:list
       (common-lisp:cons "agentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instruction))
      (common-lisp:list
       (common-lisp:cons "instruction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foundation-model))
      (common-lisp:list
       (common-lisp:cons "foundationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-resource-role-arn))
      (common-lisp:list
       (common-lisp:cons "agentResourceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "customerEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "recommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-override-configuration))
      (common-lisp:list
       (common-lisp:cons "promptOverrideConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-version-summaries ()
   '(trivial-types:proper-list agent-version-summary))
 (common-lisp:defun make-agent-version-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-version-summary-"))
   (agent-name (common-lisp:error ":agentname is required") :type
    (common-lisp:or name common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-version-summary 'make-agent-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-name))
      (common-lisp:list
       (common-lisp:cons "agentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-agent-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-agent-knowledge-base-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (knowledge-base-state common-lisp:nil :type
    (common-lisp:or knowledge-base-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-agent-knowledge-base-request
                    'make-associate-agent-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-agent-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-agent-knowledge-base-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-state))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-agent-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-agent-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-agent-knowledge-base-response-"))
   (agent-knowledge-base (common-lisp:error ":agentknowledgebase is required")
    :type (common-lisp:or agent-knowledge-base common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-agent-knowledge-base-response
                    'make-associate-agent-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-agent-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-agent-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-knowledge-base))
      (common-lisp:list
       (common-lisp:cons "agentKnowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-agent-knowledge-base-response))
   common-lisp:nil))
(common-lisp:deftype base-prompt-template () 'common-lisp:string)
(common-lisp:deftype bedrock-embedding-model-arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (chunking-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-chunking-configuration-"))
   (chunking-strategy (common-lisp:error ":chunkingstrategy is required") :type
    (common-lisp:or chunking-strategy common-lisp:null))
   (fixed-size-chunking-configuration common-lisp:nil :type
    (common-lisp:or fixed-size-chunking-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chunking-configuration 'make-chunking-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chunking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chunking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chunking-strategy))
      (common-lisp:list
       (common-lisp:cons "chunkingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-size-chunking-configuration))
      (common-lisp:list
       (common-lisp:cons "fixedSizeChunkingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chunking-configuration))
   common-lisp:nil))
(common-lisp:deftype chunking-strategy () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-action-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-action-group-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (action-group-name (common-lisp:error ":actiongroupname is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parent-action-group-signature common-lisp:nil :type
    (common-lisp:or action-group-signature common-lisp:null))
   (action-group-executor common-lisp:nil :type
    (common-lisp:or action-group-executor common-lisp:null))
   (api-schema common-lisp:nil :type
    (common-lisp:or apischema common-lisp:null))
   (action-group-state common-lisp:nil :type
    (common-lisp:or action-group-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-action-group-request
                    'make-create-agent-action-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-action-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-action-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-name))
      (common-lisp:list
       (common-lisp:cons "actionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-action-group-signature))
      (common-lisp:list
       (common-lisp:cons "parentActionGroupSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-group-executor))
      (common-lisp:list
       (common-lisp:cons "actionGroupExecutor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-schema))
      (common-lisp:list
       (common-lisp:cons "apiSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-state))
      (common-lisp:list
       (common-lisp:cons "actionGroupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-action-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-action-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-action-group-response-"))
   (agent-action-group (common-lisp:error ":agentactiongroup is required")
    :type (common-lisp:or agent-action-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-action-group-response
                    'make-create-agent-action-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-action-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-action-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-action-group))
      (common-lisp:list
       (common-lisp:cons "agentActionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-action-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-alias-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-alias-name (common-lisp:error ":agentaliasname is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (routing-configuration common-lisp:nil :type
    (common-lisp:or agent-alias-routing-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-alias-request
                    'make-create-agent-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-name))
      (common-lisp:list
       (common-lisp:cons "agentAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-alias-response-"))
   (agent-alias (common-lisp:error ":agentalias is required") :type
    (common-lisp:or agent-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-alias-response
                    'make-create-agent-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias))
      (common-lisp:list
       (common-lisp:cons "agentAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-request-"))
   (agent-name (common-lisp:error ":agentname is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (instruction common-lisp:nil :type
    (common-lisp:or instruction common-lisp:null))
   (foundation-model common-lisp:nil :type
    (common-lisp:or model-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (idle-session-ttlin-seconds common-lisp:nil :type
    (common-lisp:or session-ttl common-lisp:null))
   (agent-resource-role-arn
    (common-lisp:error ":agentresourcerolearn is required") :type
    (common-lisp:or agent-role-arn common-lisp:null))
   (customer-encryption-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (prompt-override-configuration common-lisp:nil :type
    (common-lisp:or prompt-override-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-request 'make-create-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-name))
      (common-lisp:list
       (common-lisp:cons "agentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instruction))
      (common-lisp:list
       (common-lisp:cons "instruction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foundation-model))
      (common-lisp:list
       (common-lisp:cons "foundationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-resource-role-arn))
      (common-lisp:list
       (common-lisp:cons "agentResourceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "customerEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-override-configuration))
      (common-lisp:list
       (common-lisp:cons "promptOverrideConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-response-"))
   (agent (common-lisp:error ":agent is required") :type
    (common-lisp:or agent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-response 'make-create-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent))
      (common-lisp:list
       (common-lisp:cons "agent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (data-source-configuration
    (common-lisp:error ":datasourceconfiguration is required") :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (vector-ingestion-configuration common-lisp:nil :type
    (common-lisp:or vector-ingestion-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-request
                    'make-create-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-ingestion-configuration))
      (common-lisp:list
       (common-lisp:cons "vectorIngestionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-response-"))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-knowledge-base-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or knowledge-base-role-arn common-lisp:null))
   (knowledge-base-configuration
    (common-lisp:error ":knowledgebaseconfiguration is required") :type
    (common-lisp:or knowledge-base-configuration common-lisp:null))
   (storage-configuration
    (common-lisp:error ":storageconfiguration is required") :type
    (common-lisp:or storage-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-knowledge-base-request
                    'make-create-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-configuration))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-configuration))
      (common-lisp:list
       (common-lisp:cons "storageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-knowledge-base-response-"))
   (knowledge-base (common-lisp:error ":knowledgebase is required") :type
    (common-lisp:or knowledge-base common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-knowledge-base-response
                    'make-create-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   common-lisp:nil))
(common-lisp:deftype creation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (data-source-configuration
    (common-lisp:error ":datasourceconfiguration is required") :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (vector-ingestion-configuration common-lisp:nil :type
    (common-lisp:or vector-ingestion-configuration common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-ingestion-configuration))
      (common-lisp:list
       (common-lisp:cons "vectorIngestionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-configuration-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-type common-lisp:null))
   (s3configuration common-lisp:nil :type
    (common-lisp:or s3data-source-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration
                    'make-data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   common-lisp:nil))
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-summaries ()
   '(trivial-types:proper-list data-source-summary))
 (common-lisp:defun make-data-source-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-summary-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-summary 'make-data-source-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-summary))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:deftype date-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-action-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-action-group-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (action-group-id (common-lisp:error ":actiongroupid is required") :type
    (common-lisp:or id common-lisp:null))
   (skip-resource-in-use-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-action-group-request
                    'make-delete-agent-action-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-action-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-action-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-action-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-action-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-action-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-agent-action-group-response
                    'make-delete-agent-action-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-action-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-action-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-action-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-alias-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-alias-id (common-lisp:error ":agentaliasid is required") :type
    (common-lisp:or agent-alias-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-alias-request
                    'make-delete-agent-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-alias-response-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-alias-id (common-lisp:error ":agentaliasid is required") :type
    (common-lisp:or agent-alias-id common-lisp:null))
   (agent-alias-status (common-lisp:error ":agentaliasstatus is required")
    :type (common-lisp:or agent-alias-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-alias-response
                    'make-delete-agent-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-id))
      (common-lisp:list
       (common-lisp:cons "agentAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-status))
      (common-lisp:list
       (common-lisp:cons "agentAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (skip-resource-in-use-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-request 'make-delete-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-response-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-response 'make-delete-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-version-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or numerical-version common-lisp:null))
   (skip-resource-in-use-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-version-request
                    'make-delete-agent-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agent-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agent-version-response-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or numerical-version common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agent-version-response
                    'make-delete-agent-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agent-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-response-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or data-source-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-knowledge-base-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-knowledge-base-request
                    'make-delete-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-knowledge-base-response-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or knowledge-base-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-knowledge-base-response
                    'make-delete-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-agent-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-agent-knowledge-base-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-agent-knowledge-base-request
                    'make-disassociate-agent-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-agent-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-agent-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-agent-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-agent-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-agent-knowledge-base-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-agent-knowledge-base-response
                    'make-disassociate-agent-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-agent-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-agent-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-agent-knowledge-base-response))
   common-lisp:nil))
(common-lisp:deftype draft-version () 'common-lisp:string)
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype failure-reasons ()
   '(trivial-types:proper-list failure-reason))
 (common-lisp:defun make-failure-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fixed-size-chunking-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-fixed-size-chunking-configuration-"))
   (max-tokens (common-lisp:error ":maxtokens is required") :type
    (common-lisp:or fixed-size-chunking-configuration-max-tokens-integer
                    common-lisp:null))
   (overlap-percentage (common-lisp:error ":overlappercentage is required")
    :type
    (common-lisp:or
     fixed-size-chunking-configuration-overlap-percentage-integer
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fixed-size-chunking-configuration
                    'make-fixed-size-chunking-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-size-chunking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-size-chunking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-tokens))
      (common-lisp:list
       (common-lisp:cons "maxTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overlap-percentage))
      (common-lisp:list
       (common-lisp:cons "overlapPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-size-chunking-configuration))
   common-lisp:nil))
(common-lisp:deftype fixed-size-chunking-configuration-max-tokens-integer ()
  'common-lisp:integer)
(common-lisp:deftype fixed-size-chunking-configuration-overlap-percentage-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-action-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-action-group-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (action-group-id (common-lisp:error ":actiongroupid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-action-group-request
                    'make-get-agent-action-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-action-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-action-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-action-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-action-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-action-group-response-"))
   (agent-action-group (common-lisp:error ":agentactiongroup is required")
    :type (common-lisp:or agent-action-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-action-group-response
                    'make-get-agent-action-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-action-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-action-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-action-group))
      (common-lisp:list
       (common-lisp:cons "agentActionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-action-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-alias-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-alias-id (common-lisp:error ":agentaliasid is required") :type
    (common-lisp:or agent-alias-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-alias-request 'make-get-agent-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-alias-response-"))
   (agent-alias (common-lisp:error ":agentalias is required") :type
    (common-lisp:or agent-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-alias-response 'make-get-agent-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias))
      (common-lisp:list
       (common-lisp:cons "agentAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-knowledge-base-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-knowledge-base-request
                    'make-get-agent-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-knowledge-base-response-"))
   (agent-knowledge-base (common-lisp:error ":agentknowledgebase is required")
    :type (common-lisp:or agent-knowledge-base common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-knowledge-base-response
                    'make-get-agent-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-knowledge-base))
      (common-lisp:list
       (common-lisp:cons "agentKnowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-request 'make-get-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-response-"))
   (agent (common-lisp:error ":agent is required") :type
    (common-lisp:or agent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-response 'make-get-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent))
      (common-lisp:list
       (common-lisp:cons "agent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-version-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or numerical-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-version-request
                    'make-get-agent-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-version-response-"))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or agent-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-version-response
                    'make-get-agent-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-request 'make-get-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-source-response-"))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-response 'make-get-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ingestion-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-ingestion-job-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (ingestion-job-id (common-lisp:error ":ingestionjobid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ingestion-job-request
                    'make-get-ingestion-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ingestion-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ingestion-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ingestion-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ingestion-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-ingestion-job-response-"))
   (ingestion-job (common-lisp:error ":ingestionjob is required") :type
    (common-lisp:or ingestion-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ingestion-job-response
                    'make-get-ingestion-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ingestion-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ingestion-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-job))
      (common-lisp:list
       (common-lisp:cons "ingestionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ingestion-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-knowledge-base-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-knowledge-base-request
                    'make-get-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-knowledge-base-response-"))
   (knowledge-base (common-lisp:error ":knowledgebase is required") :type
    (common-lisp:or knowledge-base common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-knowledge-base-response
                    'make-get-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inference-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-configuration-"))
   (temperature common-lisp:nil :type
    (common-lisp:or temperature common-lisp:null))
   (top-p common-lisp:nil :type (common-lisp:or top-p common-lisp:null))
   (top-k common-lisp:nil :type (common-lisp:or top-k common-lisp:null))
   (maximum-length common-lisp:nil :type
    (common-lisp:or maximum-length common-lisp:null))
   (stop-sequences common-lisp:nil :type
    (common-lisp:or stop-sequences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-configuration 'make-inference-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temperature))
      (common-lisp:list
       (common-lisp:cons "temperature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-p))
      (common-lisp:list
       (common-lisp:cons "topP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-k))
      (common-lisp:list
       (common-lisp:cons "topK"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-length))
      (common-lisp:list
       (common-lisp:cons "maximumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-sequences))
      (common-lisp:list
       (common-lisp:cons "stopSequences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-job-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (ingestion-job-id (common-lisp:error ":ingestionjobid is required") :type
    (common-lisp:or id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or ingestion-job-status common-lisp:null))
   (statistics common-lisp:nil :type
    (common-lisp:or ingestion-job-statistics common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null))
   (started-at (common-lisp:error ":startedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ingestion-job 'make-ingestion-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ingestion-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ingestion-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-job-id))
      (common-lisp:list
       (common-lisp:cons "ingestionJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ingestion-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-job-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-job-filter-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or ingestion-job-filter-attribute common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or ingestion-job-filter-operator common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or ingestion-job-filter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-job-filter 'make-ingestion-job-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ingestion-job-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ingestion-job-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ingestion-job-filter))
   common-lisp:nil))
(common-lisp:deftype ingestion-job-filter-attribute () 'common-lisp:string)
(common-lisp:deftype ingestion-job-filter-operator () 'common-lisp:string)
(common-lisp:deftype ingestion-job-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ingestion-job-filter-values ()
   '(trivial-types:proper-list ingestion-job-filter-value))
 (common-lisp:defun make-ingestion-job-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ingestion-job-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ingestion-job-filters ()
   '(trivial-types:proper-list ingestion-job-filter))
 (common-lisp:defun make-ingestion-job-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ingestion-job-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-job-sort-by (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-job-sort-by-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or ingestion-job-sort-by-attribute common-lisp:null))
   (order (common-lisp:error ":order is required") :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-job-sort-by 'make-ingestion-job-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-sort-by))
   common-lisp:nil))
(common-lisp:deftype ingestion-job-sort-by-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-job-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-job-statistics-"))
   (number-of-documents-scanned common-lisp:nil :type
    (common-lisp:or primitive-long common-lisp:null))
   (number-of-new-documents-indexed common-lisp:nil :type
    (common-lisp:or primitive-long common-lisp:null))
   (number-of-modified-documents-indexed common-lisp:nil :type
    (common-lisp:or primitive-long common-lisp:null))
   (number-of-documents-deleted common-lisp:nil :type
    (common-lisp:or primitive-long common-lisp:null))
   (number-of-documents-failed common-lisp:nil :type
    (common-lisp:or primitive-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-job-statistics 'make-ingestion-job-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-documents-scanned))
      (common-lisp:list
       (common-lisp:cons "numberOfDocumentsScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-new-documents-indexed))
      (common-lisp:list
       (common-lisp:cons "numberOfNewDocumentsIndexed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-modified-documents-indexed))
      (common-lisp:list
       (common-lisp:cons "numberOfModifiedDocumentsIndexed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-documents-deleted))
      (common-lisp:list
       (common-lisp:cons "numberOfDocumentsDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-documents-failed))
      (common-lisp:list
       (common-lisp:cons "numberOfDocumentsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-statistics))
   common-lisp:nil))
(common-lisp:deftype ingestion-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ingestion-job-summaries ()
   '(trivial-types:proper-list ingestion-job-summary))
 (common-lisp:defun make-ingestion-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ingestion-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-job-summary-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (ingestion-job-id (common-lisp:error ":ingestionjobid is required") :type
    (common-lisp:or id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or ingestion-job-status common-lisp:null))
   (started-at (common-lisp:error ":startedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (statistics common-lisp:nil :type
    (common-lisp:or ingestion-job-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-job-summary 'make-ingestion-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-job-id))
      (common-lisp:list
       (common-lisp:cons "ingestionJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-job-summary))
   common-lisp:nil))
(common-lisp:deftype instruction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (knowledge-base (:copier common-lisp:nil)
      (:conc-name "struct-shape-knowledge-base-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or knowledge-base-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or knowledge-base-role-arn common-lisp:null))
   (knowledge-base-configuration
    (common-lisp:error ":knowledgebaseconfiguration is required") :type
    (common-lisp:or knowledge-base-configuration common-lisp:null))
   (storage-configuration
    (common-lisp:error ":storageconfiguration is required") :type
    (common-lisp:or storage-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or knowledge-base-status common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null))
   (failure-reasons common-lisp:nil :type
    (common-lisp:or failure-reasons common-lisp:null)))
 (common-lisp:export (common-lisp:list 'knowledge-base 'make-knowledge-base))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input knowledge-base))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input knowledge-base))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-configuration))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-configuration))
      (common-lisp:list
       (common-lisp:cons "storageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input knowledge-base))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (knowledge-base-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-knowledge-base-configuration-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or knowledge-base-type common-lisp:null))
   (vector-knowledge-base-configuration common-lisp:nil :type
    (common-lisp:or vector-knowledge-base-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-configuration
                    'make-knowledge-base-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-knowledge-base-configuration))
      (common-lisp:list
       (common-lisp:cons "vectorKnowledgeBaseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-configuration))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-role-arn () 'common-lisp:string)
(common-lisp:deftype knowledge-base-state () 'common-lisp:string)
(common-lisp:deftype knowledge-base-status () 'common-lisp:string)
(common-lisp:deftype knowledge-base-storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype knowledge-base-summaries ()
   '(trivial-types:proper-list knowledge-base-summary))
 (common-lisp:defun make-knowledge-base-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list knowledge-base-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (knowledge-base-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-knowledge-base-summary-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or knowledge-base-status common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-summary 'make-knowledge-base-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-type () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-action-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-action-groups-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-action-groups-request
                    'make-list-agent-action-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-action-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-action-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-action-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-action-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-action-groups-response-"))
   (action-group-summaries
    (common-lisp:error ":actiongroupsummaries is required") :type
    (common-lisp:or action-group-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-action-groups-response
                    'make-list-agent-action-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-action-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-action-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-group-summaries))
      (common-lisp:list
       (common-lisp:cons "actionGroupSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-action-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-aliases-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-aliases-request
                    'make-list-agent-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-aliases-response-"))
   (agent-alias-summaries
    (common-lisp:error ":agentaliassummaries is required") :type
    (common-lisp:or agent-alias-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-aliases-response
                    'make-list-agent-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-alias-summaries))
      (common-lisp:list
       (common-lisp:cons "agentAliasSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-knowledge-bases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-knowledge-bases-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-knowledge-bases-request
                    'make-list-agent-knowledge-bases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-knowledge-bases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-knowledge-bases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-knowledge-bases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-knowledge-bases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-knowledge-bases-response-"))
   (agent-knowledge-base-summaries
    (common-lisp:error ":agentknowledgebasesummaries is required") :type
    (common-lisp:or agent-knowledge-base-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-knowledge-bases-response
                    'make-list-agent-knowledge-bases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-knowledge-bases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-knowledge-bases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-knowledge-base-summaries))
      (common-lisp:list
       (common-lisp:cons "agentKnowledgeBaseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-knowledge-bases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-versions-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-versions-request
                    'make-list-agent-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-versions-response-"))
   (agent-version-summaries
    (common-lisp:error ":agentversionsummaries is required") :type
    (common-lisp:or agent-version-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-versions-response
                    'make-list-agent-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-version-summaries))
      (common-lisp:list
       (common-lisp:cons "agentVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agents-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agents-request 'make-list-agents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agents-response-"))
   (agent-summaries (common-lisp:error ":agentsummaries is required") :type
    (common-lisp:or agent-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agents-response 'make-list-agents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-summaries))
      (common-lisp:list
       (common-lisp:cons "agentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-response-"))
   (data-source-summaries
    (common-lisp:error ":datasourcesummaries is required") :type
    (common-lisp:or data-source-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-summaries))
      (common-lisp:list
       (common-lisp:cons "dataSourceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ingestion-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ingestion-jobs-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or ingestion-job-filters common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or ingestion-job-sort-by common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ingestion-jobs-request
                    'make-list-ingestion-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestion-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestion-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestion-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ingestion-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ingestion-jobs-response-"))
   (ingestion-job-summaries
    (common-lisp:error ":ingestionjobsummaries is required") :type
    (common-lisp:or ingestion-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ingestion-jobs-response
                    'make-list-ingestion-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestion-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestion-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-job-summaries))
      (common-lisp:list
       (common-lisp:cons "ingestionJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ingestion-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-knowledge-bases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-knowledge-bases-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-knowledge-bases-request
                    'make-list-knowledge-bases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-knowledge-bases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-knowledge-bases-response-"))
   (knowledge-base-summaries
    (common-lisp:error ":knowledgebasesummaries is required") :type
    (common-lisp:or knowledge-base-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-knowledge-bases-response
                    'make-list-knowledge-bases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-summaries))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or taggable-resources-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-length () 'common-lisp:integer)
(common-lisp:deftype model-identifier () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-blank-string () 'common-lisp:string)
(common-lisp:deftype numerical-version () 'common-lisp:string)
(common-lisp:deftype open-search-serverless-collection-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (open-search-serverless-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-search-serverless-configuration-"))
   (collection-arn (common-lisp:error ":collectionarn is required") :type
    (common-lisp:or open-search-serverless-collection-arn common-lisp:null))
   (vector-index-name (common-lisp:error ":vectorindexname is required") :type
    (common-lisp:or open-search-serverless-index-name common-lisp:null))
   (field-mapping (common-lisp:error ":fieldmapping is required") :type
    (common-lisp:or open-search-serverless-field-mapping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-search-serverless-configuration
                    'make-open-search-serverless-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-serverless-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-serverless-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-arn))
      (common-lisp:list
       (common-lisp:cons "collectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vector-index-name))
      (common-lisp:list
       (common-lisp:cons "vectorIndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mapping))
      (common-lisp:list
       (common-lisp:cons "fieldMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-serverless-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (open-search-serverless-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-search-serverless-field-mapping-"))
   (vector-field (common-lisp:error ":vectorfield is required") :type
    (common-lisp:or field-name common-lisp:null))
   (text-field (common-lisp:error ":textfield is required") :type
    (common-lisp:or field-name common-lisp:null))
   (metadata-field (common-lisp:error ":metadatafield is required") :type
    (common-lisp:or field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-search-serverless-field-mapping
                    'make-open-search-serverless-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-serverless-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-serverless-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vector-field))
      (common-lisp:list
       (common-lisp:cons "vectorField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "textField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-field))
      (common-lisp:list
       (common-lisp:cons "metadataField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-serverless-field-mapping))
   common-lisp:nil))
(common-lisp:deftype open-search-serverless-index-name () 'common-lisp:string)
(common-lisp:deftype payload () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pinecone-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pinecone-configuration-"))
   (connection-string (common-lisp:error ":connectionstring is required") :type
    (common-lisp:or pinecone-connection-string common-lisp:null))
   (credentials-secret-arn
    (common-lisp:error ":credentialssecretarn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or pinecone-namespace common-lisp:null))
   (field-mapping (common-lisp:error ":fieldmapping is required") :type
    (common-lisp:or pinecone-field-mapping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pinecone-configuration 'make-pinecone-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pinecone-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pinecone-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-string))
      (common-lisp:list
       (common-lisp:cons "connectionString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-secret-arn))
      (common-lisp:list
       (common-lisp:cons "credentialsSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mapping))
      (common-lisp:list
       (common-lisp:cons "fieldMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pinecone-configuration))
   common-lisp:nil))
(common-lisp:deftype pinecone-connection-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pinecone-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-pinecone-field-mapping-"))
   (text-field (common-lisp:error ":textfield is required") :type
    (common-lisp:or field-name common-lisp:null))
   (metadata-field (common-lisp:error ":metadatafield is required") :type
    (common-lisp:or field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pinecone-field-mapping 'make-pinecone-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pinecone-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pinecone-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "textField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-field))
      (common-lisp:list
       (common-lisp:cons "metadataField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pinecone-field-mapping))
   common-lisp:nil))
(common-lisp:deftype pinecone-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (prepare-agent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-prepare-agent-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prepare-agent-request 'make-prepare-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prepare-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prepare-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prepare-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (prepare-agent-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-prepare-agent-response-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-status (common-lisp:error ":agentstatus is required") :type
    (common-lisp:or agent-status common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version common-lisp:null))
   (prepared-at (common-lisp:error ":preparedat is required") :type
    (common-lisp:or date-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prepare-agent-response 'make-prepare-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prepare-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prepare-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prepared-at))
      (common-lisp:list
       (common-lisp:cons "preparedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prepare-agent-response))
   common-lisp:nil))
(common-lisp:deftype primitive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (prompt-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-prompt-configuration-"))
   (prompt-type common-lisp:nil :type
    (common-lisp:or prompt-type common-lisp:null))
   (prompt-creation-mode common-lisp:nil :type
    (common-lisp:or creation-mode common-lisp:null))
   (prompt-state common-lisp:nil :type
    (common-lisp:or prompt-state common-lisp:null))
   (base-prompt-template common-lisp:nil :type
    (common-lisp:or base-prompt-template common-lisp:null))
   (inference-configuration common-lisp:nil :type
    (common-lisp:or inference-configuration common-lisp:null))
   (parser-mode common-lisp:nil :type
    (common-lisp:or creation-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prompt-configuration 'make-prompt-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prompt-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prompt-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prompt-type))
      (common-lisp:list
       (common-lisp:cons "promptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-creation-mode))
      (common-lisp:list
       (common-lisp:cons "promptCreationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prompt-state))
      (common-lisp:list
       (common-lisp:cons "promptState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-prompt-template))
      (common-lisp:list
       (common-lisp:cons "basePromptTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-configuration))
      (common-lisp:list
       (common-lisp:cons "inferenceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parser-mode))
      (common-lisp:list
       (common-lisp:cons "parserMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prompt-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prompt-configurations ()
   '(trivial-types:proper-list prompt-configuration))
 (common-lisp:defun make-prompt-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prompt-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (prompt-override-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-prompt-override-configuration-"))
   (prompt-configurations
    (common-lisp:error ":promptconfigurations is required") :type
    (common-lisp:or prompt-configurations common-lisp:null))
   (override-lambda common-lisp:nil :type
    (common-lisp:or lambda-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prompt-override-configuration
                    'make-prompt-override-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prompt-override-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prompt-override-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-configurations))
      (common-lisp:list
       (common-lisp:cons "promptConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-lambda))
      (common-lisp:list
       (common-lisp:cons "overrideLambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prompt-override-configuration))
   common-lisp:nil))
(common-lisp:deftype prompt-state () 'common-lisp:string)
(common-lisp:deftype prompt-type () 'common-lisp:string)
(common-lisp:deftype rds-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rds-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-configuration-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or rds-arn common-lisp:null))
   (credentials-secret-arn
    (common-lisp:error ":credentialssecretarn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (database-name (common-lisp:error ":databasename is required") :type
    (common-lisp:or rds-database-name common-lisp:null))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or rds-table-name common-lisp:null))
   (field-mapping (common-lisp:error ":fieldmapping is required") :type
    (common-lisp:or rds-field-mapping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-configuration 'make-rds-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-secret-arn))
      (common-lisp:list
       (common-lisp:cons "credentialsSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mapping))
      (common-lisp:list
       (common-lisp:cons "fieldMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rds-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-field-mapping-"))
   (primary-key-field (common-lisp:error ":primarykeyfield is required") :type
    (common-lisp:or column-name common-lisp:null))
   (vector-field (common-lisp:error ":vectorfield is required") :type
    (common-lisp:or column-name common-lisp:null))
   (text-field (common-lisp:error ":textfield is required") :type
    (common-lisp:or column-name common-lisp:null))
   (metadata-field (common-lisp:error ":metadatafield is required") :type
    (common-lisp:or column-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-field-mapping 'make-rds-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key-field))
      (common-lisp:list
       (common-lisp:cons "primaryKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vector-field))
      (common-lisp:list
       (common-lisp:cons "vectorField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "textField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-field))
      (common-lisp:list
       (common-lisp:cons "metadataField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-field-mapping))
   common-lisp:nil))
(common-lisp:deftype rds-table-name () 'common-lisp:string)
(common-lisp:deftype recommended-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommended-actions ()
   '(trivial-types:proper-list recommended-action))
 (common-lisp:defun make-recommended-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommended-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (redis-enterprise-cloud-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-redis-enterprise-cloud-configuration-"))
   (endpoint (common-lisp:error ":endpoint is required") :type
    (common-lisp:or redis-enterprise-cloud-endpoint common-lisp:null))
   (vector-index-name (common-lisp:error ":vectorindexname is required") :type
    (common-lisp:or redis-enterprise-cloud-index-name common-lisp:null))
   (credentials-secret-arn
    (common-lisp:error ":credentialssecretarn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (field-mapping (common-lisp:error ":fieldmapping is required") :type
    (common-lisp:or redis-enterprise-cloud-field-mapping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redis-enterprise-cloud-configuration
                    'make-redis-enterprise-cloud-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redis-enterprise-cloud-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redis-enterprise-cloud-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vector-index-name))
      (common-lisp:list
       (common-lisp:cons "vectorIndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-secret-arn))
      (common-lisp:list
       (common-lisp:cons "credentialsSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mapping))
      (common-lisp:list
       (common-lisp:cons "fieldMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redis-enterprise-cloud-configuration))
   common-lisp:nil))
(common-lisp:deftype redis-enterprise-cloud-endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redis-enterprise-cloud-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-redis-enterprise-cloud-field-mapping-"))
   (vector-field (common-lisp:error ":vectorfield is required") :type
    (common-lisp:or field-name common-lisp:null))
   (text-field (common-lisp:error ":textfield is required") :type
    (common-lisp:or field-name common-lisp:null))
   (metadata-field (common-lisp:error ":metadatafield is required") :type
    (common-lisp:or field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redis-enterprise-cloud-field-mapping
                    'make-redis-enterprise-cloud-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redis-enterprise-cloud-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redis-enterprise-cloud-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vector-field))
      (common-lisp:list
       (common-lisp:cons "vectorField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-field))
      (common-lisp:list
       (common-lisp:cons "textField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-field))
      (common-lisp:list
       (common-lisp:cons "metadataField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redis-enterprise-cloud-field-mapping))
   common-lisp:nil))
(common-lisp:deftype redis-enterprise-cloud-index-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3data-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3data-source-configuration-"))
   (bucket-arn (common-lisp:error ":bucketarn is required") :type
    (common-lisp:or s3bucket-arn common-lisp:null))
   (inclusion-prefixes common-lisp:nil :type
    (common-lisp:or s3prefixes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3data-source-configuration
                    'make-s3data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-prefixes))
      (common-lisp:list
       (common-lisp:cons "inclusionPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3data-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3identifier-"))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (s3object-key common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3identifier 'make-s3identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-key))
      (common-lisp:list
       (common-lisp:cons "s3ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3identifier))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype s3prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3prefixes () '(trivial-types:proper-list s3prefix))
 (common-lisp:defun make-s3prefixes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-configuration-"))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-ttl () 'common-lisp:integer)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-ingestion-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-ingestion-job-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-ingestion-job-request
                    'make-start-ingestion-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-ingestion-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-ingestion-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-ingestion-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-ingestion-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-ingestion-job-response-"))
   (ingestion-job (common-lisp:error ":ingestionjob is required") :type
    (common-lisp:or ingestion-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-ingestion-job-response
                    'make-start-ingestion-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-ingestion-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-ingestion-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-job))
      (common-lisp:list
       (common-lisp:cons "ingestionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-ingestion-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stop-sequences () '(trivial-types:proper-list string))
 (common-lisp:defun make-stop-sequences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-configuration-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or knowledge-base-storage-type common-lisp:null))
   (opensearch-serverless-configuration common-lisp:nil :type
    (common-lisp:or open-search-serverless-configuration common-lisp:null))
   (pinecone-configuration common-lisp:nil :type
    (common-lisp:or pinecone-configuration common-lisp:null))
   (redis-enterprise-cloud-configuration common-lisp:nil :type
    (common-lisp:or redis-enterprise-cloud-configuration common-lisp:null))
   (rds-configuration common-lisp:nil :type
    (common-lisp:or rds-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-configuration 'make-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'opensearch-serverless-configuration))
      (common-lisp:list
       (common-lisp:cons "opensearchServerlessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pinecone-configuration))
      (common-lisp:list
       (common-lisp:cons "pineconeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redis-enterprise-cloud-configuration))
      (common-lisp:list
       (common-lisp:cons "redisEnterpriseCloudConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-configuration))
      (common-lisp:list
       (common-lisp:cons "rdsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or taggable-resources-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype taggable-resources-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype temperature () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype top-k () 'common-lisp:integer)
(common-lisp:deftype top-p () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or taggable-resources-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-action-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-action-group-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (action-group-id (common-lisp:error ":actiongroupid is required") :type
    (common-lisp:or id common-lisp:null))
   (action-group-name (common-lisp:error ":actiongroupname is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parent-action-group-signature common-lisp:nil :type
    (common-lisp:or action-group-signature common-lisp:null))
   (action-group-executor common-lisp:nil :type
    (common-lisp:or action-group-executor common-lisp:null))
   (action-group-state common-lisp:nil :type
    (common-lisp:or action-group-state common-lisp:null))
   (api-schema common-lisp:nil :type
    (common-lisp:or apischema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-action-group-request
                    'make-update-agent-action-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-action-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-action-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-name))
      (common-lisp:list
       (common-lisp:cons "actionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-action-group-signature))
      (common-lisp:list
       (common-lisp:cons "parentActionGroupSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-group-executor))
      (common-lisp:list
       (common-lisp:cons "actionGroupExecutor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-state))
      (common-lisp:list
       (common-lisp:cons "actionGroupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-schema))
      (common-lisp:list
       (common-lisp:cons "apiSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-action-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-action-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-action-group-response-"))
   (agent-action-group (common-lisp:error ":agentactiongroup is required")
    :type (common-lisp:or agent-action-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-action-group-response
                    'make-update-agent-action-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-action-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-action-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-action-group))
      (common-lisp:list
       (common-lisp:cons "agentActionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-action-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-alias-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-alias-id (common-lisp:error ":agentaliasid is required") :type
    (common-lisp:or agent-alias-id common-lisp:null))
   (agent-alias-name (common-lisp:error ":agentaliasname is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (routing-configuration common-lisp:nil :type
    (common-lisp:or agent-alias-routing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-alias-request
                    'make-update-agent-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-name))
      (common-lisp:list
       (common-lisp:cons "agentAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-configuration))
      (common-lisp:list
       (common-lisp:cons "routingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-alias-response-"))
   (agent-alias (common-lisp:error ":agentalias is required") :type
    (common-lisp:or agent-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-alias-response
                    'make-update-agent-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias))
      (common-lisp:list
       (common-lisp:cons "agentAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-knowledge-base-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or draft-version common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (knowledge-base-state common-lisp:nil :type
    (common-lisp:or knowledge-base-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-knowledge-base-request
                    'make-update-agent-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-knowledge-base-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-state))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-knowledge-base-response-"))
   (agent-knowledge-base (common-lisp:error ":agentknowledgebase is required")
    :type (common-lisp:or agent-knowledge-base common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-knowledge-base-response
                    'make-update-agent-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-knowledge-base))
      (common-lisp:list
       (common-lisp:cons "agentKnowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or id common-lisp:null))
   (agent-name (common-lisp:error ":agentname is required") :type
    (common-lisp:or name common-lisp:null))
   (instruction common-lisp:nil :type
    (common-lisp:or instruction common-lisp:null))
   (foundation-model common-lisp:nil :type
    (common-lisp:or model-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (idle-session-ttlin-seconds common-lisp:nil :type
    (common-lisp:or session-ttl common-lisp:null))
   (agent-resource-role-arn
    (common-lisp:error ":agentresourcerolearn is required") :type
    (common-lisp:or agent-role-arn common-lisp:null))
   (customer-encryption-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (prompt-override-configuration common-lisp:nil :type
    (common-lisp:or prompt-override-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-request 'make-update-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-name))
      (common-lisp:list
       (common-lisp:cons "agentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instruction))
      (common-lisp:list
       (common-lisp:cons "instruction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'foundation-model))
      (common-lisp:list
       (common-lisp:cons "foundationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-resource-role-arn))
      (common-lisp:list
       (common-lisp:cons "agentResourceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "customerEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-override-configuration))
      (common-lisp:list
       (common-lisp:cons "promptOverrideConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-response-"))
   (agent (common-lisp:error ":agent is required") :type
    (common-lisp:or agent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-response 'make-update-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent))
      (common-lisp:list
       (common-lisp:cons "agent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (data-source-id (common-lisp:error ":datasourceid is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (data-source-configuration
    (common-lisp:error ":datasourceconfiguration is required") :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (vector-ingestion-configuration common-lisp:nil :type
    (common-lisp:or vector-ingestion-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-ingestion-configuration))
      (common-lisp:list
       (common-lisp:cons "vectorIngestionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-response-"))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-knowledge-base-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or knowledge-base-role-arn common-lisp:null))
   (knowledge-base-configuration
    (common-lisp:error ":knowledgebaseconfiguration is required") :type
    (common-lisp:or knowledge-base-configuration common-lisp:null))
   (storage-configuration
    (common-lisp:error ":storageconfiguration is required") :type
    (common-lisp:or storage-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-knowledge-base-request
                    'make-update-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-configuration))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-configuration))
      (common-lisp:list
       (common-lisp:cons "storageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-knowledge-base-response-"))
   (knowledge-base (common-lisp:error ":knowledgebase is required") :type
    (common-lisp:or knowledge-base common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-knowledge-base-response
                    'make-update-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (bedrock-agent-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-blank-string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or non-blank-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vector-ingestion-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-ingestion-configuration-"))
   (chunking-configuration common-lisp:nil :type
    (common-lisp:or chunking-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-ingestion-configuration
                    'make-vector-ingestion-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-ingestion-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-ingestion-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chunking-configuration))
      (common-lisp:list
       (common-lisp:cons "chunkingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-ingestion-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vector-knowledge-base-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vector-knowledge-base-configuration-"))
   (embedding-model-arn (common-lisp:error ":embeddingmodelarn is required")
    :type (common-lisp:or bedrock-embedding-model-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vector-knowledge-base-configuration
                    'make-vector-knowledge-base-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-knowledge-base-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-knowledge-base-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embedding-model-arn))
      (common-lisp:list
       (common-lisp:cons "embeddingModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-knowledge-base-configuration))
   common-lisp:nil))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-agent-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version knowledge-base-id
                     description knowledge-base-state)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version knowledge-base-id description
     knowledge-base-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-agent-knowledge-base-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/knowledgebases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))))
                                                        "AssociateAgentKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-agent-knowledge-base))
(common-lisp:progn
 (common-lisp:defun create-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-name client-token instruction
                     foundation-model description idle-session-ttlin-seconds
                     agent-resource-role-arn customer-encryption-key-arn tags
                     prompt-override-configuration)
   (common-lisp:declare
    (common-lisp:ignorable agent-name client-token instruction foundation-model
     description idle-session-ttlin-seconds agent-resource-role-arn
     customer-encryption-key-arn tags prompt-override-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/agents/"
                                                        "CreateAgent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-agent))
(common-lisp:progn
 (common-lisp:defun create-agent-action-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version action-group-name
                     client-token description parent-action-group-signature
                     action-group-executor api-schema action-group-state)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version action-group-name
     client-token description parent-action-group-signature
     action-group-executor api-schema action-group-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-agent-action-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/actiongroups/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))))
                                                        "CreateAgentActionGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-agent-action-group))
(common-lisp:progn
 (common-lisp:defun create-agent-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-alias-name client-token
                     description routing-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-alias-name client-token description
     routing-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-agent-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "CreateAgentAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-agent-alias))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id client-token name
                     description data-source-configuration
                     server-side-encryption-configuration
                     vector-ingestion-configuration)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id client-token name description
     data-source-configuration server-side-encryption-configuration
     vector-ingestion-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "CreateDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token name description role-arn
                     knowledge-base-configuration storage-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token name description role-arn
     knowledge-base-configuration storage-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/knowledgebases/"
                                                        "CreateKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-knowledge-base))
(common-lisp:progn
 (common-lisp:defun delete-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable agent-id skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "DeleteAgent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-agent))
(common-lisp:progn
 (common-lisp:defun delete-agent-action-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version action-group-id
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version action-group-id
     skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-agent-action-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/actiongroups/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-group-id))))
                                                        "DeleteAgentActionGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-agent-action-group))
(common-lisp:progn
 (common-lisp:defun delete-agent-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-alias-id)
   (common-lisp:declare (common-lisp:ignorable agent-id agent-alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-agent-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-alias-id))))
                                                        "DeleteAgentAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-agent-alias))
(common-lisp:progn
 (common-lisp:defun delete-agent-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-agent-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))))
                                                        "DeleteAgentVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-agent-version))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id data-source-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "DeleteKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-knowledge-base))
(common-lisp:progn
 (common-lisp:defun disassociate-agent-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version knowledge-base-id)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-agent-knowledge-base-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/knowledgebases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "DisassociateAgentKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-agent-knowledge-base))
(common-lisp:progn
 (common-lisp:defun get-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id)
   (common-lisp:declare (common-lisp:ignorable agent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "GetAgent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent))
(common-lisp:progn
 (common-lisp:defun get-agent-action-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version action-group-id)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version action-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-action-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/actiongroups/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-group-id))))
                                                        "GetAgentActionGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent-action-group))
(common-lisp:progn
 (common-lisp:defun get-agent-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-alias-id)
   (common-lisp:declare (common-lisp:ignorable agent-id agent-alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-alias-id))))
                                                        "GetAgentAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent-alias))
(common-lisp:progn
 (common-lisp:defun get-agent-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version knowledge-base-id)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/knowledgebases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "GetAgentKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent-knowledge-base))
(common-lisp:progn
 (common-lisp:defun get-agent-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version)
   (common-lisp:declare (common-lisp:ignorable agent-id agent-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))))
                                                        "GetAgentVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent-version))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id data-source-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id data-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-ingestion-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id data-source-id
                     ingestion-job-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id data-source-id ingestion-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ingestion-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/~A/ingestionjobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ingestion-job-id))))
                                                        "GetIngestionJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-ingestion-job))
(common-lisp:progn
 (common-lisp:defun get-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "GetKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-knowledge-base))
(common-lisp:progn
 (common-lisp:defun list-agent-action-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agent-action-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/actiongroups/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))))
                                                        "ListAgentActionGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agent-action-groups))
(common-lisp:progn
 (common-lisp:defun list-agent-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable agent-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agent-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "ListAgentAliases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agent-aliases))
(common-lisp:progn
 (common-lisp:defun list-agent-knowledge-bases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-agent-knowledge-bases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/knowledgebases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))))
                                                        "ListAgentKnowledgeBases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agent-knowledge-bases))
(common-lisp:progn
 (common-lisp:defun list-agent-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable agent-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agent-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "ListAgentVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agent-versions))
(common-lisp:progn
 (common-lisp:defun list-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/agents/"
                                                        "ListAgents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agents))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListDataSources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-ingestion-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id data-source-id filters
                     sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id data-source-id filters sort-by
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ingestion-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/~A/ingestionjobs/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "ListIngestionJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ingestion-jobs))
(common-lisp:progn
 (common-lisp:defun list-knowledge-bases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-knowledge-bases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/knowledgebases/"
                                                        "ListKnowledgeBases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-knowledge-bases))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun prepare-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id)
   (common-lisp:declare (common-lisp:ignorable agent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-prepare-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "PrepareAgent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'prepare-agent))
(common-lisp:progn
 (common-lisp:defun start-ingestion-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id data-source-id
                     client-token description)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id data-source-id client-token
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-ingestion-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/~A/ingestionjobs/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "StartIngestionJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-ingestion-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-name instruction
                     foundation-model description idle-session-ttlin-seconds
                     agent-resource-role-arn customer-encryption-key-arn
                     prompt-override-configuration)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-name instruction foundation-model
     description idle-session-ttlin-seconds agent-resource-role-arn
     customer-encryption-key-arn prompt-override-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "UpdateAgent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent))
(common-lisp:progn
 (common-lisp:defun update-agent-action-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version action-group-id
                     action-group-name description
                     parent-action-group-signature action-group-executor
                     action-group-state api-schema)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version action-group-id
     action-group-name description parent-action-group-signature
     action-group-executor action-group-state api-schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-agent-action-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/actiongroups/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-group-id))))
                                                        "UpdateAgentActionGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent-action-group))
(common-lisp:progn
 (common-lisp:defun update-agent-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-alias-id agent-alias-name
                     description routing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-alias-id agent-alias-name description
     routing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agent-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-alias-id))))
                                                        "UpdateAgentAlias"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent-alias))
(common-lisp:progn
 (common-lisp:defun update-agent-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id agent-version knowledge-base-id
                     description knowledge-base-state)
   (common-lisp:declare
    (common-lisp:ignorable agent-id agent-version knowledge-base-id description
     knowledge-base-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-agent-knowledge-base-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agents/~A/agentversions/~A/knowledgebases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "UpdateAgentKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent-knowledge-base))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id data-source-id name
                     description data-source-configuration
                     server-side-encryption-configuration
                     vector-ingestion-configuration)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id data-source-id name description
     data-source-configuration server-side-encryption-configuration
     vector-ingestion-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-id))))
                                                        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id name description
                     role-arn knowledge-base-configuration
                     storage-configuration)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id name description role-arn
     knowledge-base-configuration storage-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'bedrock-agent-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgebases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "UpdateKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-knowledge-base))
