;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/snowball/api
  (:use)
  (:nicknames #:aws/snowball)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/snowball/api)
(common-lisp:progn
 (common-lisp:defclass snowball-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "snowball"))
 (common-lisp:export 'snowball-request))
(common-lisp:progn
 (common-lisp:define-condition snowball-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'snowball-error))
(common-lisp:defvar *error-map*
  '(("ClusterLimitExceededException" . cluster-limit-exceeded-exception)
    ("ConflictException" . conflict-exception)
    ("Ec2RequestFailedException" . ec2request-failed-exception)
    ("InvalidAddressException" . invalid-address-exception)
    ("InvalidInputCombinationException" . invalid-input-combination-exception)
    ("InvalidJobStateException" . invalid-job-state-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidResourceException" . invalid-resource-exception)
    ("KMSRequestFailedException" . kmsrequest-failed-exception)
    ("ReturnShippingLabelAlreadyExistsException"
     . return-shipping-label-already-exists-exception)
    ("UnsupportedAddressException" . unsupported-address-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (address (:copier common-lisp:nil) (:conc-name "struct-shape-address-"))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (company common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street1 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street2 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street3 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (city common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state-or-province common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (prefecture-or-district common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (landmark common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (postal-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-restricted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street1))
      (common-lisp:list
       (common-lisp:cons "Street1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street2))
      (common-lisp:list
       (common-lisp:cons "Street2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street3))
      (common-lisp:list
       (common-lisp:cons "Street3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-province))
      (common-lisp:list
       (common-lisp:cons "StateOrProvince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prefecture-or-district))
      (common-lisp:list
       (common-lisp:cons "PrefectureOrDistrict"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'landmark))
      (common-lisp:list
       (common-lisp:cons "Landmark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-restricted))
      (common-lisp:list
       (common-lisp:cons "IsRestricted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:deftype address-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype address-list () '(trivial-types:proper-list address))
 (common-lisp:defun |make-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-cluster-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-cluster-request 'make-cancel-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-cluster-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-cluster-result 'make-cancel-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-job-result 'make-cancel-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-result))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition cluster-limit-exceeded-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cluster-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cluster-limit-exceeded-exception
                    'cluster-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-list-entry-"))
   (cluster-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-state common-lisp:nil :type
    (common-lisp:or cluster-state common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-list-entry 'make-cluster-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-state))
      (common-lisp:list
       (common-lisp:cons "ClusterState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-list-entry-list ()
   '(trivial-types:proper-list cluster-list-entry))
 (common-lisp:defun |make-cluster-list-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-metadata-"))
   (cluster-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (cluster-state common-lisp:nil :type
    (common-lisp:or cluster-state common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (tax-documents common-lisp:nil :type
    (common-lisp:or tax-documents common-lisp:null))
   (on-device-service-configuration common-lisp:nil :type
    (common-lisp:or on-device-service-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-metadata 'make-cluster-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-state))
      (common-lisp:list
       (common-lisp:cons "ClusterState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-metadata))
   common-lisp:nil))
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (compatible-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-compatible-image-"))
   (ami-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compatible-image 'make-compatible-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compatible-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compatible-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compatible-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compatible-image-list ()
   '(trivial-types:proper-list compatible-image))
 (common-lisp:defun |make-compatible-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatible-image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (snowball-error)
     ((conflict-resource :initarg :conflict-resource :initform common-lisp:nil
       :reader conflict-exception-conflict-resource)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-conflict-resource
                    'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-address-request-"))
   (address (common-lisp:error ":address is required") :type
    (common-lisp:or address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-address-request 'make-create-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-address-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-address-result-"))
   (address-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-address-result 'make-create-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-request-"))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or job-type common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (on-device-service-configuration common-lisp:nil :type
    (common-lisp:or on-device-service-configuration common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (address-id (common-lisp:error ":address-id is required") :type
    (common-lisp:or address-id common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (snowball-type (common-lisp:error ":snowball-type is required") :type
    (common-lisp:or snowball-type common-lisp:null))
   (shipping-option (common-lisp:error ":shipping-option is required") :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (tax-documents common-lisp:nil :type
    (common-lisp:or tax-documents common-lisp:null))
   (remote-management common-lisp:nil :type
    (common-lisp:or remote-management common-lisp:null))
   (initial-cluster-size common-lisp:nil :type
    (common-lisp:or initial-cluster-size common-lisp:null))
   (force-create-jobs common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (long-term-pricing-ids common-lisp:nil :type
    (common-lisp:or long-term-pricing-id-list common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-management))
      (common-lisp:list
       (common-lisp:cons "RemoteManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-cluster-size))
      (common-lisp:list
       (common-lisp:cons "InitialClusterSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-create-jobs))
      (common-lisp:list
       (common-lisp:cons "ForceCreateJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-ids))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-result-"))
   (cluster-id common-lisp:nil :type
    (common-lisp:or cluster-id common-lisp:null))
   (job-list-entries common-lisp:nil :type
    (common-lisp:or job-list-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-result 'make-create-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-request-"))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (on-device-service-configuration common-lisp:nil :type
    (common-lisp:or on-device-service-configuration common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (cluster-id common-lisp:nil :type
    (common-lisp:or cluster-id common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (tax-documents common-lisp:nil :type
    (common-lisp:or tax-documents common-lisp:null))
   (device-configuration common-lisp:nil :type
    (common-lisp:or device-configuration common-lisp:null))
   (remote-management common-lisp:nil :type
    (common-lisp:or remote-management common-lisp:null))
   (long-term-pricing-id common-lisp:nil :type
    (common-lisp:or long-term-pricing-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-management))
      (common-lisp:list
       (common-lisp:cons "RemoteManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-result-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-result 'make-create-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-long-term-pricing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-long-term-pricing-request-"))
   (long-term-pricing-type
    (common-lisp:error ":long-term-pricing-type is required") :type
    (common-lisp:or long-term-pricing-type common-lisp:null))
   (is-long-term-pricing-auto-renew common-lisp:nil :type
    (common-lisp:or java-boolean common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-long-term-pricing-request
                    'make-create-long-term-pricing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-type))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-long-term-pricing-auto-renew))
      (common-lisp:list
       (common-lisp:cons "IsLongTermPricingAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-long-term-pricing-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-long-term-pricing-result-"))
   (long-term-pricing-id common-lisp:nil :type
    (common-lisp:or long-term-pricing-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-long-term-pricing-result
                    'make-create-long-term-pricing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-return-shipping-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-return-shipping-label-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-return-shipping-label-request
                    'make-create-return-shipping-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-return-shipping-label-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-return-shipping-label-result-"))
   (status common-lisp:nil :type
    (common-lisp:or shipping-label-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-return-shipping-label-result
                    'make-create-return-shipping-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-transfer (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-transfer-"))
   (bytes-transferred common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (objects-transferred common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (total-bytes common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (total-objects common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-transfer 'make-data-transfer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-transfer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-transfer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-transferred))
      (common-lisp:list
       (common-lisp:cons "BytesTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects-transferred))
      (common-lisp:list
       (common-lisp:cons "ObjectsTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-objects))
      (common-lisp:list
       (common-lisp:cons "TotalObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-transfer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dependent-service (:copier common-lisp:nil)
      (:conc-name "struct-shape-dependent-service-"))
   (service-name common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null))
   (service-version common-lisp:nil :type
    (common-lisp:or service-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dependent-service 'make-dependent-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dependent-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dependent-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-version))
      (common-lisp:list
       (common-lisp:cons "ServiceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dependent-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dependent-service-list ()
   '(trivial-types:proper-list dependent-service))
 (common-lisp:defun |make-dependent-service-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dependent-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-address-request-"))
   (address-id (common-lisp:error ":address-id is required") :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-address-request 'make-describe-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-address-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-address-result-"))
   (address common-lisp:nil :type (common-lisp:or address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-address-result 'make-describe-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addresses-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-request
                    'make-describe-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addresses-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addresses-result-"))
   (addresses common-lisp:nil :type
    (common-lisp:or address-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-result
                    'make-describe-addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-result-"))
   (cluster-metadata common-lisp:nil :type
    (common-lisp:or cluster-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-result 'make-describe-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-metadata))
      (common-lisp:list
       (common-lisp:cons "ClusterMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-result-"))
   (job-metadata common-lisp:nil :type
    (common-lisp:or job-metadata common-lisp:null))
   (sub-job-metadata common-lisp:nil :type
    (common-lisp:or job-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-result 'make-describe-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-metadata))
      (common-lisp:list
       (common-lisp:cons "JobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-job-metadata))
      (common-lisp:list
       (common-lisp:cons "SubJobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-return-shipping-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-return-shipping-label-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-return-shipping-label-request
                    'make-describe-return-shipping-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-return-shipping-label-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-return-shipping-label-result-"))
   (status common-lisp:nil :type
    (common-lisp:or shipping-label-status common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (return-shipping-label-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-return-shipping-label-result
                    'make-describe-return-shipping-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-shipping-label-uri))
      (common-lisp:list
       (common-lisp:cons "ReturnShippingLabelURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (device-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-configuration-"))
   (snowcone-device-configuration common-lisp:nil :type
    (common-lisp:or snowcone-device-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'device-configuration 'make-device-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowcone-device-configuration))
      (common-lisp:list
       (common-lisp:cons "SnowconeDeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-configuration))
   common-lisp:nil))
(common-lisp:deftype device-service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ekson-device-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ekson-device-service-configuration-"))
   (kubernetes-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (eksanywhere-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ekson-device-service-configuration
                    'make-ekson-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ekson-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ekson-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-version))
      (common-lisp:list
       (common-lisp:cons "KubernetesVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eksanywhere-version))
      (common-lisp:list
       (common-lisp:cons "EKSAnywhereVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ekson-device-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2ami-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2ami-resource-"))
   (ami-id (common-lisp:error ":ami-id is required") :type
    (common-lisp:or ami-id common-lisp:null))
   (snowball-ami-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ec2ami-resource 'make-ec2ami-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2ami-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2ami-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-ami-id))
      (common-lisp:list
       (common-lisp:cons "SnowballAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2ami-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2ami-resource-list ()
   '(trivial-types:proper-list ec2ami-resource))
 (common-lisp:defun |make-ec2ami-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2ami-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ec2request-failed-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ec2request-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2request-failed-exception
                    'ec2request-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (event-trigger-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-trigger-definition-"))
   (event-resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-trigger-definition 'make-event-trigger-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EventResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-trigger-definition-list ()
   '(trivial-types:proper-list event-trigger-definition))
 (common-lisp:defun |make-event-trigger-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-trigger-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype gstin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-manifest-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-manifest-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-manifest-request 'make-get-job-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-manifest-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-manifest-result-"))
   (manifest-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-manifest-result 'make-get-job-manifest-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-uri))
      (common-lisp:list
       (common-lisp:cons "ManifestURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-unlock-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-unlock-code-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-unlock-code-request
                    'make-get-job-unlock-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-unlock-code-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-unlock-code-result-"))
   (unlock-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-unlock-code-result
                    'make-get-job-unlock-code-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlock-code))
      (common-lisp:list
       (common-lisp:cons "UnlockCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snowball-usage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snowball-usage-request-")))
 (common-lisp:export
  (common-lisp:list 'get-snowball-usage-request
                    'make-get-snowball-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snowball-usage-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snowball-usage-result-"))
   (snowball-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snowballs-in-use common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snowball-usage-result
                    'make-get-snowball-usage-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-limit))
      (common-lisp:list
       (common-lisp:cons "SnowballLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowballs-in-use))
      (common-lisp:list
       (common-lisp:cons "SnowballsInUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-software-updates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-software-updates-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-software-updates-request
                    'make-get-software-updates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-software-updates-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-software-updates-result-"))
   (updates-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-software-updates-result
                    'make-get-software-updates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates-uri))
      (common-lisp:list
       (common-lisp:cons "UpdatesURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (indtax-documents (:copier common-lisp:nil)
      (:conc-name "struct-shape-indtax-documents-"))
   (gstin common-lisp:nil :type (common-lisp:or gstin common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'indtax-documents 'make-indtax-documents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input indtax-documents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input indtax-documents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gstin))
      (common-lisp:list
       (common-lisp:cons "GSTIN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input indtax-documents))
   common-lisp:nil))
(common-lisp:deftype initial-cluster-size () 'common-lisp:integer)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-address-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-address-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-address-exception
                    'invalid-address-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-combination-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-combination-exception
                    'invalid-input-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-state-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-job-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-job-state-exception
                    'invalid-job-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       invalid-resource-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-exception
                    'invalid-resource-exception-message
                    'invalid-resource-exception-resource-type)))
(common-lisp:deftype java-boolean () 'common-lisp:boolean)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-list-entry-"))
   (job-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (job-state common-lisp:nil :type
    (common-lisp:or job-state common-lisp:null))
   (is-master common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-list-entry 'make-job-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-state))
      (common-lisp:list
       (common-lisp:cons "JobState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-master))
      (common-lisp:list
       (common-lisp:cons "IsMaster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list-entry-list ()
   '(trivial-types:proper-list job-list-entry))
 (common-lisp:defun |make-job-list-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-logs (:copier common-lisp:nil) (:conc-name "struct-shape-job-logs-"))
   (job-completion-report-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (job-success-log-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (job-failure-log-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-logs 'make-job-logs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-completion-report-uri))
      (common-lisp:list
       (common-lisp:cons "JobCompletionReportURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-success-log-uri))
      (common-lisp:list
       (common-lisp:cons "JobSuccessLogURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-failure-log-uri))
      (common-lisp:list
       (common-lisp:cons "JobFailureLogURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-metadata-"))
   (job-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (job-state common-lisp:nil :type
    (common-lisp:or job-state common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-details common-lisp:nil :type
    (common-lisp:or shipping-details common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (data-transfer-progress common-lisp:nil :type
    (common-lisp:or data-transfer common-lisp:null))
   (job-log-info common-lisp:nil :type
    (common-lisp:or job-logs common-lisp:null))
   (cluster-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (tax-documents common-lisp:nil :type
    (common-lisp:or tax-documents common-lisp:null))
   (device-configuration common-lisp:nil :type
    (common-lisp:or device-configuration common-lisp:null))
   (remote-management common-lisp:nil :type
    (common-lisp:or remote-management common-lisp:null))
   (long-term-pricing-id common-lisp:nil :type
    (common-lisp:or long-term-pricing-id common-lisp:null))
   (on-device-service-configuration common-lisp:nil :type
    (common-lisp:or on-device-service-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-metadata 'make-job-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-state))
      (common-lisp:list
       (common-lisp:cons "JobState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-details))
      (common-lisp:list
       (common-lisp:cons "ShippingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-progress))
      (common-lisp:list
       (common-lisp:cons "DataTransferProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-log-info))
      (common-lisp:list
       (common-lisp:cons "JobLogInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-management))
      (common-lisp:list
       (common-lisp:cons "RemoteManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-metadata-list ()
   '(trivial-types:proper-list job-metadata))
 (common-lisp:defun |make-job-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-resource-"))
   (s3resources common-lisp:nil :type
    (common-lisp:or s3resource-list common-lisp:null))
   (lambda-resources common-lisp:nil :type
    (common-lisp:or lambda-resource-list common-lisp:null))
   (ec2ami-resources common-lisp:nil :type
    (common-lisp:or ec2ami-resource-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-resource 'make-job-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resources))
      (common-lisp:list
       (common-lisp:cons "S3Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-resources))
      (common-lisp:list
       (common-lisp:cons "LambdaResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2ami-resources))
      (common-lisp:list
       (common-lisp:cons "Ec2AmiResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-resource))
   common-lisp:nil))
(common-lisp:deftype job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-state-list () '(trivial-types:proper-list job-state))
 (common-lisp:defun |make-job-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition kmsrequest-failed-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsrequest-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsrequest-failed-exception
                    'kmsrequest-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (key-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-range-"))
   (begin-marker common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (end-marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-range 'make-key-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-marker))
      (common-lisp:list
       (common-lisp:cons "BeginMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-marker))
      (common-lisp:list
       (common-lisp:cons "EndMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-range))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-resource-"))
   (lambda-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (event-triggers common-lisp:nil :type
    (common-lisp:or event-trigger-definition-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-resource 'make-lambda-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-triggers))
      (common-lisp:list
       (common-lisp:cons "EventTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-resource-list ()
   '(trivial-types:proper-list lambda-resource))
 (common-lisp:defun |make-lambda-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lambda-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cluster-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cluster-jobs-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-jobs-request
                    'make-list-cluster-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cluster-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cluster-jobs-result-"))
   (job-list-entries common-lisp:nil :type
    (common-lisp:or job-list-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-jobs-result 'make-list-cluster-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-clusters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-clusters-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-clusters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-clusters-result-"))
   (cluster-list-entries common-lisp:nil :type
    (common-lisp:or cluster-list-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-result 'make-list-clusters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-list-entries))
      (common-lisp:list
       (common-lisp:cons "ClusterListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-compatible-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-compatible-images-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-compatible-images-request
                    'make-list-compatible-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-compatible-images-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-compatible-images-result-"))
   (compatible-images common-lisp:nil :type
    (common-lisp:or compatible-image-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-compatible-images-result
                    'make-list-compatible-images-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-images))
      (common-lisp:list
       (common-lisp:cons "CompatibleImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-result-"))
   (job-list-entries common-lisp:nil :type
    (common-lisp:or job-list-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:deftype list-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-long-term-pricing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-long-term-pricing-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-long-term-pricing-request
                    'make-list-long-term-pricing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-long-term-pricing-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-long-term-pricing-result-"))
   (long-term-pricing-entries common-lisp:nil :type
    (common-lisp:or long-term-pricing-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-long-term-pricing-result
                    'make-list-long-term-pricing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-entries))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-versions-request-"))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or service-name common-lisp:null))
   (dependent-services common-lisp:nil :type
    (common-lisp:or dependent-service-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-versions-request
                    'make-list-service-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-services))
      (common-lisp:list
       (common-lisp:cons "DependentServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-versions-result-"))
   (service-versions (common-lisp:error ":service-versions is required") :type
    (common-lisp:or service-version-list common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or service-name common-lisp:null))
   (dependent-services common-lisp:nil :type
    (common-lisp:or dependent-service-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-versions-result
                    'make-list-service-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-versions))
      (common-lisp:list
       (common-lisp:cons "ServiceVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-services))
      (common-lisp:list
       (common-lisp:cons "DependentServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-result))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype long-term-pricing-associated-job-id-list ()
   '(trivial-types:proper-list job-id))
 (common-lisp:defun |make-long-term-pricing-associated-job-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype long-term-pricing-entry-list ()
   '(trivial-types:proper-list long-term-pricing-list-entry))
 (common-lisp:defun |make-long-term-pricing-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            long-term-pricing-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long-term-pricing-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype long-term-pricing-id-list ()
   '(trivial-types:proper-list long-term-pricing-id))
 (common-lisp:defun |make-long-term-pricing-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list long-term-pricing-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (long-term-pricing-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-long-term-pricing-list-entry-"))
   (long-term-pricing-id common-lisp:nil :type
    (common-lisp:or long-term-pricing-id common-lisp:null))
   (long-term-pricing-end-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (long-term-pricing-start-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (long-term-pricing-type common-lisp:nil :type
    (common-lisp:or long-term-pricing-type common-lisp:null))
   (current-active-job common-lisp:nil :type
    (common-lisp:or job-id common-lisp:null))
   (replacement-job common-lisp:nil :type
    (common-lisp:or job-id common-lisp:null))
   (is-long-term-pricing-auto-renew common-lisp:nil :type
    (common-lisp:or java-boolean common-lisp:null))
   (long-term-pricing-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (job-ids common-lisp:nil :type
    (common-lisp:or long-term-pricing-associated-job-id-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'long-term-pricing-list-entry
                    'make-long-term-pricing-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          long-term-pricing-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          long-term-pricing-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-end-date))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-start-date))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-type))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-active-job))
      (common-lisp:list
       (common-lisp:cons "CurrentActiveJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement-job))
      (common-lisp:list
       (common-lisp:cons "ReplacementJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-long-term-pricing-auto-renew))
      (common-lisp:list
       (common-lisp:cons "IsLongTermPricingAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-status))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-ids))
      (common-lisp:list
       (common-lisp:cons "JobIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          long-term-pricing-list-entry))
   common-lisp:nil))
(common-lisp:deftype long-term-pricing-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (nfson-device-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-nfson-device-service-configuration-"))
   (storage-limit common-lisp:nil :type
    (common-lisp:or storage-limit common-lisp:null))
   (storage-unit common-lisp:nil :type
    (common-lisp:or storage-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nfson-device-service-configuration
                    'make-nfson-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nfson-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nfson-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-limit))
      (common-lisp:list
       (common-lisp:cons "StorageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-unit))
      (common-lisp:list
       (common-lisp:cons "StorageUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nfson-device-service-configuration))
   common-lisp:nil))
(common-lisp:deftype node-fault-tolerance () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (notification (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-"))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (job-states-to-notify common-lisp:nil :type
    (common-lisp:or job-state-list common-lisp:null))
   (notify-all common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'notification 'make-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-states-to-notify))
      (common-lisp:list
       (common-lisp:cons "JobStatesToNotify"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notify-all))
      (common-lisp:list
       (common-lisp:cons "NotifyAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (on-device-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-on-device-service-configuration-"))
   (nfson-device-service common-lisp:nil :type
    (common-lisp:or nfson-device-service-configuration common-lisp:null))
   (tgwon-device-service common-lisp:nil :type
    (common-lisp:or tgwon-device-service-configuration common-lisp:null))
   (ekson-device-service common-lisp:nil :type
    (common-lisp:or ekson-device-service-configuration common-lisp:null))
   (s3on-device-service common-lisp:nil :type
    (common-lisp:or s3on-device-service-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'on-device-service-configuration
                    'make-on-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          on-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          on-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nfson-device-service))
      (common-lisp:list
       (common-lisp:cons "NFSOnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tgwon-device-service))
      (common-lisp:list
       (common-lisp:cons "TGWOnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ekson-device-service))
      (common-lisp:list
       (common-lisp:cons "EKSOnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3on-device-service))
      (common-lisp:list
       (common-lisp:cons "S3OnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          on-device-service-configuration))
   common-lisp:nil))
(common-lisp:deftype remote-management () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition return-shipping-label-already-exists-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       return-shipping-label-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'return-shipping-label-already-exists-exception
                    'return-shipping-label-already-exists-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3on-device-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3on-device-service-configuration-"))
   (storage-limit common-lisp:nil :type
    (common-lisp:or s3storage-limit common-lisp:null))
   (storage-unit common-lisp:nil :type
    (common-lisp:or storage-unit common-lisp:null))
   (service-size common-lisp:nil :type
    (common-lisp:or service-size common-lisp:null))
   (fault-tolerance common-lisp:nil :type
    (common-lisp:or node-fault-tolerance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3on-device-service-configuration
                    'make-s3on-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3on-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3on-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-limit))
      (common-lisp:list
       (common-lisp:cons "StorageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-unit))
      (common-lisp:list
       (common-lisp:cons "StorageUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-size))
      (common-lisp:list
       (common-lisp:cons "ServiceSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-tolerance))
      (common-lisp:list
       (common-lisp:cons "FaultTolerance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3on-device-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3resource-"))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (key-range common-lisp:nil :type
    (common-lisp:or key-range common-lisp:null))
   (target-on-device-services common-lisp:nil :type
    (common-lisp:or target-on-device-service-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3resource 'make-s3resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-range))
      (common-lisp:list
       (common-lisp:cons "KeyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-on-device-services))
      (common-lisp:list
       (common-lisp:cons "TargetOnDeviceServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3resource-list ()
   '(trivial-types:proper-list s3resource))
 (common-lisp:defun |make-s3resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3storage-limit () 'common-lisp:double-float)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:deftype service-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (service-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-version-"))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-version 'make-service-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-version-list ()
   '(trivial-types:proper-list service-version))
 (common-lisp:defun |make-service-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (shipment (:copier common-lisp:nil) (:conc-name "struct-shape-shipment-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tracking-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'shipment 'make-shipment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-number))
      (common-lisp:list
       (common-lisp:cons "TrackingNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipment))
   common-lisp:nil))
(common-lisp:deftype shipment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (shipping-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-shipping-details-"))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (inbound-shipment common-lisp:nil :type
    (common-lisp:or shipment common-lisp:null))
   (outbound-shipment common-lisp:nil :type
    (common-lisp:or shipment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'shipping-details 'make-shipping-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipping-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipping-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-shipment))
      (common-lisp:list
       (common-lisp:cons "InboundShipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outbound-shipment))
      (common-lisp:list
       (common-lisp:cons "OutboundShipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipping-details))
   common-lisp:nil))
(common-lisp:deftype shipping-label-status () 'common-lisp:string)
(common-lisp:deftype shipping-option () 'common-lisp:string)
(common-lisp:deftype snowball-capacity () 'common-lisp:string)
(common-lisp:deftype snowball-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (snowcone-device-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-snowcone-device-configuration-"))
   (wireless-connection common-lisp:nil :type
    (common-lisp:or wireless-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snowcone-device-configuration
                    'make-snowcone-device-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snowcone-device-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snowcone-device-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-connection))
      (common-lisp:list
       (common-lisp:cons "WirelessConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snowcone-device-configuration))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype storage-limit () 'common-lisp:integer)
(common-lisp:deftype storage-unit () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tgwon-device-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-tgwon-device-service-configuration-"))
   (storage-limit common-lisp:nil :type
    (common-lisp:or storage-limit common-lisp:null))
   (storage-unit common-lisp:nil :type
    (common-lisp:or storage-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tgwon-device-service-configuration
                    'make-tgwon-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tgwon-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tgwon-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-limit))
      (common-lisp:list
       (common-lisp:cons "StorageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-unit))
      (common-lisp:list
       (common-lisp:cons "StorageUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tgwon-device-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (target-on-device-service (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-on-device-service-"))
   (service-name common-lisp:nil :type
    (common-lisp:or device-service-name common-lisp:null))
   (transfer-option common-lisp:nil :type
    (common-lisp:or transfer-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-on-device-service 'make-target-on-device-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-on-device-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-on-device-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-option))
      (common-lisp:list
       (common-lisp:cons "TransferOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-on-device-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-on-device-service-list ()
   '(trivial-types:proper-list target-on-device-service))
 (common-lisp:defun |make-target-on-device-service-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-on-device-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tax-documents (:copier common-lisp:nil)
      (:conc-name "struct-shape-tax-documents-"))
   (ind common-lisp:nil :type
    (common-lisp:or indtax-documents common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tax-documents 'make-tax-documents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tax-documents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tax-documents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ind))
      (common-lisp:list
       (common-lisp:cons "IND"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tax-documents))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype transfer-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-address-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-address-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-address-exception
                    'unsupported-address-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (on-device-service-configuration common-lisp:nil :type
    (common-lisp:or on-device-service-configuration common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-result-")))
 (common-lisp:export
  (common-lisp:list 'update-cluster-result 'make-update-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (on-device-service-configuration common-lisp:nil :type
    (common-lisp:or on-device-service-configuration common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-result-")))
 (common-lisp:export
  (common-lisp:list 'update-job-result 'make-update-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-shipment-state-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-shipment-state-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (shipment-state (common-lisp:error ":shipment-state is required") :type
    (common-lisp:or shipment-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-shipment-state-request
                    'make-update-job-shipment-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipment-state))
      (common-lisp:list
       (common-lisp:cons "ShipmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-shipment-state-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-shipment-state-result-")))
 (common-lisp:export
  (common-lisp:list 'update-job-shipment-state-result
                    'make-update-job-shipment-state-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-long-term-pricing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-long-term-pricing-request-"))
   (long-term-pricing-id
    (common-lisp:error ":long-term-pricing-id is required") :type
    (common-lisp:or long-term-pricing-id common-lisp:null))
   (replacement-job common-lisp:nil :type
    (common-lisp:or job-id common-lisp:null))
   (is-long-term-pricing-auto-renew common-lisp:nil :type
    (common-lisp:or java-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-long-term-pricing-request
                    'make-update-long-term-pricing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement-job))
      (common-lisp:list
       (common-lisp:cons "ReplacementJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-long-term-pricing-auto-renew))
      (common-lisp:list
       (common-lisp:cons "IsLongTermPricingAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-long-term-pricing-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-long-term-pricing-result-")))
 (common-lisp:export
  (common-lisp:list 'update-long-term-pricing-result
                    'make-update-long-term-pricing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (wireless-connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-wireless-connection-"))
   (is-wifi-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'wireless-connection 'make-wireless-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wireless-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wireless-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-wifi-enabled))
      (common-lisp:list
       (common-lisp:cons "IsWifiEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wireless-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-cluster))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CancelJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address)
   (common-lisp:declare (common-lisp:ignorable address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAddress"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-address))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type resources
                     on-device-service-configuration description address-id
                     kms-key-arn role-arn snowball-type shipping-option
                     notification forwarding-address-id tax-documents
                     remote-management initial-cluster-size force-create-jobs
                     long-term-pricing-ids snowball-capacity-preference)
   (common-lisp:declare
    (common-lisp:ignorable job-type resources on-device-service-configuration
     description address-id kms-key-arn role-arn snowball-type shipping-option
     notification forwarding-address-id tax-documents remote-management
     initial-cluster-size force-create-jobs long-term-pricing-ids
     snowball-capacity-preference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type resources
                     on-device-service-configuration description address-id
                     kms-key-arn role-arn snowball-capacity-preference
                     shipping-option notification cluster-id snowball-type
                     forwarding-address-id tax-documents device-configuration
                     remote-management long-term-pricing-id)
   (common-lisp:declare
    (common-lisp:ignorable job-type resources on-device-service-configuration
     description address-id kms-key-arn role-arn snowball-capacity-preference
     shipping-option notification cluster-id snowball-type
     forwarding-address-id tax-documents device-configuration remote-management
     long-term-pricing-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-long-term-pricing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key long-term-pricing-type
                     is-long-term-pricing-auto-renew snowball-type)
   (common-lisp:declare
    (common-lisp:ignorable long-term-pricing-type
     is-long-term-pricing-auto-renew snowball-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-long-term-pricing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLongTermPricing"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-long-term-pricing))
(common-lisp:progn
 (common-lisp:defun create-return-shipping-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id shipping-option)
   (common-lisp:declare (common-lisp:ignorable job-id shipping-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-return-shipping-label-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReturnShippingLabel"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-return-shipping-label))
(common-lisp:progn
 (common-lisp:defun describe-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address-id)
   (common-lisp:declare (common-lisp:ignorable address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddress"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-address))
(common-lisp:progn
 (common-lisp:defun describe-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addresses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddresses"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addresses))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun describe-return-shipping-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-return-shipping-label-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReturnShippingLabel"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-return-shipping-label))
(common-lisp:progn
 (common-lisp:defun get-job-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobManifest"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-manifest))
(common-lisp:progn
 (common-lisp:defun get-job-unlock-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-unlock-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobUnlockCode"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-unlock-code))
(common-lisp:progn
 (common-lisp:defun get-snowball-usage ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'snowball-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"GetSnowballUsage")
                                  ("Version" ,@"2016-06-30"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-snowball-usage))
(common-lisp:progn
 (common-lisp:defun get-software-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-software-updates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSoftwareUpdates"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-software-updates))
(common-lisp:progn
 (common-lisp:defun list-cluster-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cluster-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusterJobs"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cluster-jobs))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusters"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-compatible-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compatible-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCompatibleImages"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compatible-images))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListJobs"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-long-term-pricing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-long-term-pricing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLongTermPricing"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-long-term-pricing))
(common-lisp:progn
 (common-lisp:defun list-service-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name dependent-services
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-name dependent-services max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceVersions"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-versions))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id role-arn description resources
                     on-device-service-configuration address-id shipping-option
                     notification forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id role-arn description resources
     on-device-service-configuration address-id shipping-option notification
     forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id role-arn notification resources
                     on-device-service-configuration address-id shipping-option
                     description snowball-capacity-preference
                     forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable job-id role-arn notification resources
     on-device-service-configuration address-id shipping-option description
     snowball-capacity-preference forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-job-shipment-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id shipment-state)
   (common-lisp:declare (common-lisp:ignorable job-id shipment-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-job-shipment-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateJobShipmentState"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-shipment-state))
(common-lisp:progn
 (common-lisp:defun update-long-term-pricing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key long-term-pricing-id replacement-job
                     is-long-term-pricing-auto-renew)
   (common-lisp:declare
    (common-lisp:ignorable long-term-pricing-id replacement-job
     is-long-term-pricing-auto-renew))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-long-term-pricing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLongTermPricing"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-long-term-pricing))
