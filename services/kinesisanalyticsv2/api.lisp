;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kinesisanalyticsv2/api
  (:use)
  (:nicknames #:aws/kinesisanalyticsv2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kinesisanalyticsv2/api)
(common-lisp:progn
 (common-lisp:defclass kinesisanalyticsv2-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "kinesisanalyticsv2"
                        :protocol :json))
 (common-lisp:export 'kinesisanalyticsv2-request))
(common-lisp:progn
 (common-lisp:define-condition kinesisanalyticsv2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kinesisanalyticsv2-error))
(common-lisp:defvar *error-map*
  '(("CodeValidationException" . code-validation-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("InvalidApplicationConfigurationException"
     . invalid-application-configuration-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceProvisionedThroughputExceededException"
     . resource-provisioned-throughput-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnableToDetectSchemaException" . unable-to-detect-schema-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-cloud-watch-logging-option-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-cloud-watch-logging-option-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (cloud-watch-logging-option
    (common-lisp:error ":cloud-watch-logging-option is required") :type
    (common-lisp:or cloud-watch-logging-option common-lisp:null))
   (conditional-token common-lisp:nil :type
    (common-lisp:or conditional-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-cloud-watch-logging-option-request
                    'make-add-application-cloud-watch-logging-option-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-token))
      (common-lisp:list
       (common-lisp:cons "ConditionalToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-cloud-watch-logging-option-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-cloud-watch-logging-option-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (cloud-watch-logging-option-descriptions common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-option-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-cloud-watch-logging-option-response
                    'make-add-application-cloud-watch-logging-option-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-descriptions))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-input-processing-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-input-processing-configuration-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or id common-lisp:null))
   (input-processing-configuration
    (common-lisp:error ":input-processing-configuration is required") :type
    (common-lisp:or input-processing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-input-processing-configuration-request
                    'make-add-application-input-processing-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-input-processing-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-input-processing-configuration-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (input-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (input-processing-configuration-description common-lisp:nil :type
    (common-lisp:or input-processing-configuration-description
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-input-processing-configuration-response
                    'make-add-application-input-processing-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration-description))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-processing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-input-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (input (common-lisp:error ":input is required") :type
    (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-input-request
                    'make-add-application-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-input-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (input-descriptions common-lisp:nil :type
    (common-lisp:or input-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-input-response
                    'make-add-application-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-descriptions))
      (common-lisp:list
       (common-lisp:cons "InputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-output-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-output-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (output (common-lisp:error ":output is required") :type
    (common-lisp:or output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-output-request
                    'make-add-application-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-output-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-output-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (output-descriptions common-lisp:nil :type
    (common-lisp:or output-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-output-response
                    'make-add-application-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-descriptions))
      (common-lisp:list
       (common-lisp:cons "OutputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-reference-data-source-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-reference-data-source-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (reference-data-source
    (common-lisp:error ":reference-data-source is required") :type
    (common-lisp:or reference-data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-reference-data-source-request
                    'make-add-application-reference-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-reference-data-source-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-reference-data-source-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (reference-data-source-descriptions common-lisp:nil :type
    (common-lisp:or reference-data-source-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-reference-data-source-response
                    'make-add-application-reference-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-descriptions))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-vpc-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-vpc-configuration-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (vpc-configuration (common-lisp:error ":vpc-configuration is required")
    :type (common-lisp:or vpc-configuration common-lisp:null))
   (conditional-token common-lisp:nil :type
    (common-lisp:or conditional-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-vpc-configuration-request
                    'make-add-application-vpc-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-vpc-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-vpc-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-token))
      (common-lisp:list
       (common-lisp:cons "ConditionalToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-vpc-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-vpc-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-vpc-configuration-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (vpc-configuration-description common-lisp:nil :type
    (common-lisp:or vpc-configuration-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-vpc-configuration-response
                    'make-add-application-vpc-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-vpc-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-vpc-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-configuration-description))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-vpc-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-code-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-code-configuration-"))
   (code-content common-lisp:nil :type
    (common-lisp:or code-content common-lisp:null))
   (code-content-type (common-lisp:error ":code-content-type is required")
    :type (common-lisp:or code-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-code-configuration
                    'make-application-code-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-content))
      (common-lisp:list
       (common-lisp:cons "CodeContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-content-type))
      (common-lisp:list
       (common-lisp:cons "CodeContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-code-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-code-configuration-description-"))
   (code-content-type (common-lisp:error ":code-content-type is required")
    :type (common-lisp:or code-content-type common-lisp:null))
   (code-content-description common-lisp:nil :type
    (common-lisp:or code-content-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-code-configuration-description
                    'make-application-code-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-content-type))
      (common-lisp:list
       (common-lisp:cons "CodeContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-content-description))
      (common-lisp:list
       (common-lisp:cons "CodeContentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-code-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-code-configuration-update-"))
   (code-content-type-update common-lisp:nil :type
    (common-lisp:or code-content-type common-lisp:null))
   (code-content-update common-lisp:nil :type
    (common-lisp:or code-content-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-code-configuration-update
                    'make-application-code-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-content-type-update))
      (common-lisp:list
       (common-lisp:cons "CodeContentTypeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-content-update))
      (common-lisp:list
       (common-lisp:cons "CodeContentUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-code-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-configuration-"))
   (sql-application-configuration common-lisp:nil :type
    (common-lisp:or sql-application-configuration common-lisp:null))
   (flink-application-configuration common-lisp:nil :type
    (common-lisp:or flink-application-configuration common-lisp:null))
   (environment-properties common-lisp:nil :type
    (common-lisp:or environment-properties common-lisp:null))
   (application-code-configuration common-lisp:nil :type
    (common-lisp:or application-code-configuration common-lisp:null))
   (application-snapshot-configuration common-lisp:nil :type
    (common-lisp:or application-snapshot-configuration common-lisp:null))
   (vpc-configurations common-lisp:nil :type
    (common-lisp:or vpc-configurations common-lisp:null))
   (zeppelin-application-configuration common-lisp:nil :type
    (common-lisp:or zeppelin-application-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-configuration
                    'make-application-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-application-configuration))
      (common-lisp:list
       (common-lisp:cons "SqlApplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flink-application-configuration))
      (common-lisp:list
       (common-lisp:cons "FlinkApplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-properties))
      (common-lisp:list
       (common-lisp:cons "EnvironmentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-code-configuration))
      (common-lisp:list
       (common-lisp:cons "ApplicationCodeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-snapshot-configuration))
      (common-lisp:list
       (common-lisp:cons "ApplicationSnapshotConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configurations))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-application-configuration))
      (common-lisp:list
       (common-lisp:cons "ZeppelinApplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-configuration-description-"))
   (sql-application-configuration-description common-lisp:nil :type
    (common-lisp:or sql-application-configuration-description
                    common-lisp:null))
   (application-code-configuration-description common-lisp:nil :type
    (common-lisp:or application-code-configuration-description
                    common-lisp:null))
   (run-configuration-description common-lisp:nil :type
    (common-lisp:or run-configuration-description common-lisp:null))
   (flink-application-configuration-description common-lisp:nil :type
    (common-lisp:or flink-application-configuration-description
                    common-lisp:null))
   (environment-property-descriptions common-lisp:nil :type
    (common-lisp:or environment-property-descriptions common-lisp:null))
   (application-snapshot-configuration-description common-lisp:nil :type
    (common-lisp:or application-snapshot-configuration-description
                    common-lisp:null))
   (vpc-configuration-descriptions common-lisp:nil :type
    (common-lisp:or vpc-configuration-descriptions common-lisp:null))
   (zeppelin-application-configuration-description common-lisp:nil :type
    (common-lisp:or zeppelin-application-configuration-description
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-configuration-description
                    'make-application-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-application-configuration-description))
      (common-lisp:list
       (common-lisp:cons "SqlApplicationConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-code-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationCodeConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-configuration-description))
      (common-lisp:list
       (common-lisp:cons "RunConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flink-application-configuration-description))
      (common-lisp:list
       (common-lisp:cons "FlinkApplicationConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-property-descriptions))
      (common-lisp:list
       (common-lisp:cons "EnvironmentPropertyDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-snapshot-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationSnapshotConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-configuration-descriptions))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurationDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-application-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ZeppelinApplicationConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-configuration-update-"))
   (sql-application-configuration-update common-lisp:nil :type
    (common-lisp:or sql-application-configuration-update common-lisp:null))
   (application-code-configuration-update common-lisp:nil :type
    (common-lisp:or application-code-configuration-update common-lisp:null))
   (flink-application-configuration-update common-lisp:nil :type
    (common-lisp:or flink-application-configuration-update common-lisp:null))
   (environment-property-updates common-lisp:nil :type
    (common-lisp:or environment-property-updates common-lisp:null))
   (application-snapshot-configuration-update common-lisp:nil :type
    (common-lisp:or application-snapshot-configuration-update
                    common-lisp:null))
   (vpc-configuration-updates common-lisp:nil :type
    (common-lisp:or vpc-configuration-updates common-lisp:null))
   (zeppelin-application-configuration-update common-lisp:nil :type
    (common-lisp:or zeppelin-application-configuration-update
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-configuration-update
                    'make-application-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-application-configuration-update))
      (common-lisp:list
       (common-lisp:cons "SqlApplicationConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-code-configuration-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationCodeConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flink-application-configuration-update))
      (common-lisp:list
       (common-lisp:cons "FlinkApplicationConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-property-updates))
      (common-lisp:list
       (common-lisp:cons "EnvironmentPropertyUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-snapshot-configuration-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationSnapshotConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-configuration-updates))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-application-configuration-update))
      (common-lisp:list
       (common-lisp:cons "ZeppelinApplicationConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-configuration-update))
   common-lisp:nil))
(common-lisp:deftype application-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-detail-"))
   (application-arn (common-lisp:error ":application-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-description common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (runtime-environment (common-lisp:error ":runtime-environment is required")
    :type (common-lisp:or runtime-environment common-lisp:null))
   (service-execution-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (application-status (common-lisp:error ":application-status is required")
    :type (common-lisp:or application-status common-lisp:null))
   (application-version-id
    (common-lisp:error ":application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (create-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (application-configuration-description common-lisp:nil :type
    (common-lisp:or application-configuration-description common-lisp:null))
   (cloud-watch-logging-option-descriptions common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-option-descriptions common-lisp:null))
   (application-maintenance-configuration-description common-lisp:nil :type
    (common-lisp:or application-maintenance-configuration-description
                    common-lisp:null))
   (application-version-updated-from common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (application-version-rolled-back-from common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (conditional-token common-lisp:nil :type
    (common-lisp:or conditional-token common-lisp:null))
   (application-version-rolled-back-to common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (application-mode common-lisp:nil :type
    (common-lisp:or application-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-detail 'make-application-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-environment))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role))
      (common-lisp:list
       (common-lisp:cons "ServiceExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-descriptions))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-maintenance-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationMaintenanceConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-updated-from))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionUpdatedFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-rolled-back-from))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionRolledBackFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-token))
      (common-lisp:list
       (common-lisp:cons "ConditionalToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-rolled-back-to))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionRolledBackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "ApplicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-maintenance-configuration-description
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-application-maintenance-configuration-description-"))
   (application-maintenance-window-start-time
    (common-lisp:error
     ":application-maintenance-window-start-time is required")
    :type
    (common-lisp:or application-maintenance-window-start-time
                    common-lisp:null))
   (application-maintenance-window-end-time
    (common-lisp:error ":application-maintenance-window-end-time is required")
    :type
    (common-lisp:or application-maintenance-window-end-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-maintenance-configuration-description
                    'make-application-maintenance-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-maintenance-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-maintenance-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-maintenance-window-start-time))
      (common-lisp:list
       (common-lisp:cons "ApplicationMaintenanceWindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-maintenance-window-end-time))
      (common-lisp:list
       (common-lisp:cons "ApplicationMaintenanceWindowEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-maintenance-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-maintenance-configuration-update (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-application-maintenance-configuration-update-"))
   (application-maintenance-window-start-time-update
    (common-lisp:error
     ":application-maintenance-window-start-time-update is required")
    :type
    (common-lisp:or application-maintenance-window-start-time
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-maintenance-configuration-update
                    'make-application-maintenance-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-maintenance-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-maintenance-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-maintenance-window-start-time-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationMaintenanceWindowStartTimeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-maintenance-configuration-update))
   common-lisp:nil))
(common-lisp:deftype application-maintenance-window-end-time ()
  'common-lisp:string)
(common-lisp:deftype application-maintenance-window-start-time ()
  'common-lisp:string)
(common-lisp:deftype application-mode () 'common-lisp:string)
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-restore-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-restore-configuration-"))
   (application-restore-type
    (common-lisp:error ":application-restore-type is required") :type
    (common-lisp:or application-restore-type common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or snapshot-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-restore-configuration
                    'make-application-restore-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-restore-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-restore-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-restore-type))
      (common-lisp:list
       (common-lisp:cons "ApplicationRestoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-restore-configuration))
   common-lisp:nil))
(common-lisp:deftype application-restore-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-snapshot-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-snapshot-configuration-"))
   (snapshots-enabled (common-lisp:error ":snapshots-enabled is required")
    :type (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-snapshot-configuration
                    'make-application-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots-enabled))
      (common-lisp:list
       (common-lisp:cons "SnapshotsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-snapshot-configuration-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-application-snapshot-configuration-description-"))
   (snapshots-enabled (common-lisp:error ":snapshots-enabled is required")
    :type (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-snapshot-configuration-description
                    'make-application-snapshot-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots-enabled))
      (common-lisp:list
       (common-lisp:cons "SnapshotsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-snapshot-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-snapshot-configuration-update-"))
   (snapshots-enabled-update
    (common-lisp:error ":snapshots-enabled-update is required") :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-snapshot-configuration-update
                    'make-application-snapshot-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshots-enabled-update))
      (common-lisp:list
       (common-lisp:cons "SnapshotsEnabledUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-snapshot-configuration-update))
   common-lisp:nil))
(common-lisp:deftype application-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-summaries ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun |make-application-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-summary-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-arn (common-lisp:error ":application-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-status (common-lisp:error ":application-status is required")
    :type (common-lisp:or application-status common-lisp:null))
   (application-version-id
    (common-lisp:error ":application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (runtime-environment (common-lisp:error ":runtime-environment is required")
    :type (common-lisp:or runtime-environment common-lisp:null))
   (application-mode common-lisp:nil :type
    (common-lisp:or application-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-environment))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "ApplicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:deftype application-version-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype application-version-summaries ()
   '(trivial-types:proper-list application-version-summary))
 (common-lisp:defun |make-application-version-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-version-summary-"))
   (application-version-id
    (common-lisp:error ":application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (application-status (common-lisp:error ":application-status is required")
    :type (common-lisp:or application-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-version-summary
                    'make-application-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-summary))
   common-lisp:nil))
(common-lisp:deftype artifact-type () 'common-lisp:string)
(common-lisp:deftype authorized-url () 'common-lisp:string)
(common-lisp:deftype base-path () 'common-lisp:string)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:deftype bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (csvmapping-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-csvmapping-parameters-"))
   (record-row-delimiter
    (common-lisp:error ":record-row-delimiter is required") :type
    (common-lisp:or record-row-delimiter common-lisp:null))
   (record-column-delimiter
    (common-lisp:error ":record-column-delimiter is required") :type
    (common-lisp:or record-column-delimiter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'csvmapping-parameters 'make-csvmapping-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-row-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordRowDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-column-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordColumnDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-configuration-"))
   (glue-data-catalog-configuration
    (common-lisp:error ":glue-data-catalog-configuration is required") :type
    (common-lisp:or glue-data-catalog-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-configuration 'make-catalog-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-data-catalog-configuration))
      (common-lisp:list
       (common-lisp:cons "GlueDataCatalogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-configuration-description-"))
   (glue-data-catalog-configuration-description
    (common-lisp:error
     ":glue-data-catalog-configuration-description is required")
    :type
    (common-lisp:or glue-data-catalog-configuration-description
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-configuration-description
                    'make-catalog-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-data-catalog-configuration-description))
      (common-lisp:list
       (common-lisp:cons "GlueDataCatalogConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-configuration-update-"))
   (glue-data-catalog-configuration-update
    (common-lisp:error ":glue-data-catalog-configuration-update is required")
    :type
    (common-lisp:or glue-data-catalog-configuration-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-configuration-update
                    'make-catalog-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-data-catalog-configuration-update))
      (common-lisp:list
       (common-lisp:cons "GlueDataCatalogConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkpoint-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkpoint-configuration-"))
   (configuration-type (common-lisp:error ":configuration-type is required")
    :type (common-lisp:or configuration-type common-lisp:null))
   (checkpointing-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (checkpoint-interval common-lisp:nil :type
    (common-lisp:or checkpoint-interval common-lisp:null))
   (min-pause-between-checkpoints common-lisp:nil :type
    (common-lisp:or min-pause-between-checkpoints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkpoint-configuration 'make-checkpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "ConfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpointing-enabled))
      (common-lisp:list
       (common-lisp:cons "CheckpointingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-interval))
      (common-lisp:list
       (common-lisp:cons "CheckpointInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-pause-between-checkpoints))
      (common-lisp:list
       (common-lisp:cons "MinPauseBetweenCheckpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkpoint-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkpoint-configuration-description-"))
   (configuration-type common-lisp:nil :type
    (common-lisp:or configuration-type common-lisp:null))
   (checkpointing-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (checkpoint-interval common-lisp:nil :type
    (common-lisp:or checkpoint-interval common-lisp:null))
   (min-pause-between-checkpoints common-lisp:nil :type
    (common-lisp:or min-pause-between-checkpoints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkpoint-configuration-description
                    'make-checkpoint-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "ConfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpointing-enabled))
      (common-lisp:list
       (common-lisp:cons "CheckpointingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-interval))
      (common-lisp:list
       (common-lisp:cons "CheckpointInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-pause-between-checkpoints))
      (common-lisp:list
       (common-lisp:cons "MinPauseBetweenCheckpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkpoint-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkpoint-configuration-update-"))
   (configuration-type-update common-lisp:nil :type
    (common-lisp:or configuration-type common-lisp:null))
   (checkpointing-enabled-update common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (checkpoint-interval-update common-lisp:nil :type
    (common-lisp:or checkpoint-interval common-lisp:null))
   (min-pause-between-checkpoints-update common-lisp:nil :type
    (common-lisp:or min-pause-between-checkpoints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkpoint-configuration-update
                    'make-checkpoint-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-type-update))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTypeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpointing-enabled-update))
      (common-lisp:list
       (common-lisp:cons "CheckpointingEnabledUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpoint-interval-update))
      (common-lisp:list
       (common-lisp:cons "CheckpointIntervalUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-pause-between-checkpoints-update))
      (common-lisp:list
       (common-lisp:cons "MinPauseBetweenCheckpointsUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkpoint-configuration-update))
   common-lisp:nil))
(common-lisp:deftype checkpoint-interval () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-option-"))
   (log-stream-arn (common-lisp:error ":log-stream-arn is required") :type
    (common-lisp:or log-stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option
                    'make-cloud-watch-logging-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LogStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-option-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-option-description-"))
   (cloud-watch-logging-option-id common-lisp:nil :type
    (common-lisp:or id common-lisp:null))
   (log-stream-arn (common-lisp:error ":log-stream-arn is required") :type
    (common-lisp:or log-stream-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option-description
                    'make-cloud-watch-logging-option-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LogStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-option-descriptions ()
   '(trivial-types:proper-list cloud-watch-logging-option-description))
 (common-lisp:defun |make-cloud-watch-logging-option-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-option-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-option-update-"))
   (cloud-watch-logging-option-id
    (common-lisp:error ":cloud-watch-logging-option-id is required") :type
    (common-lisp:or id common-lisp:null))
   (log-stream-arnupdate common-lisp:nil :type
    (common-lisp:or log-stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option-update
                    'make-cloud-watch-logging-option-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-arnupdate))
      (common-lisp:list
       (common-lisp:cons "LogStreamARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-option-updates ()
   '(trivial-types:proper-list cloud-watch-logging-option-update))
 (common-lisp:defun |make-cloud-watch-logging-option-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-options ()
   '(trivial-types:proper-list cloud-watch-logging-option))
 (common-lisp:defun |make-cloud-watch-logging-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-content-"))
   (text-content common-lisp:nil :type
    (common-lisp:or text-content common-lisp:null))
   (zip-file-content common-lisp:nil :type
    (common-lisp:or zip-file-content common-lisp:null))
   (s3content-location common-lisp:nil :type
    (common-lisp:or s3content-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-content 'make-code-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-content))
      (common-lisp:list
       (common-lisp:cons "TextContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file-content))
      (common-lisp:list
       (common-lisp:cons "ZipFileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3content-location))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-content-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-content-description-"))
   (text-content common-lisp:nil :type
    (common-lisp:or text-content common-lisp:null))
   (code-md5 common-lisp:nil :type (common-lisp:or code-md5 common-lisp:null))
   (code-size common-lisp:nil :type
    (common-lisp:or code-size common-lisp:null))
   (s3application-code-location-description common-lisp:nil :type
    (common-lisp:or s3application-code-location-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-content-description 'make-code-content-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-content-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-content-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-content))
      (common-lisp:list
       (common-lisp:cons "TextContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-md5))
      (common-lisp:list
       (common-lisp:cons "CodeMD5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3application-code-location-description))
      (common-lisp:list
       (common-lisp:cons "S3ApplicationCodeLocationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-content-description))
   common-lisp:nil))
(common-lisp:deftype code-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-content-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-content-update-"))
   (text-content-update common-lisp:nil :type
    (common-lisp:or text-content common-lisp:null))
   (zip-file-content-update common-lisp:nil :type
    (common-lisp:or zip-file-content common-lisp:null))
   (s3content-location-update common-lisp:nil :type
    (common-lisp:or s3content-location-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-content-update 'make-code-content-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-content-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-content-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-content-update))
      (common-lisp:list
       (common-lisp:cons "TextContentUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zip-file-content-update))
      (common-lisp:list
       (common-lisp:cons "ZipFileContentUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3content-location-update))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-content-update))
   common-lisp:nil))
(common-lisp:deftype code-md5 () 'common-lisp:string)
(common-lisp:deftype code-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition code-validation-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       code-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-validation-exception
                    'code-validation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype conditional-token () 'common-lisp:string)
(common-lisp:deftype configuration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-presigned-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-presigned-url-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (url-type (common-lisp:error ":url-type is required") :type
    (common-lisp:or url-type common-lisp:null))
   (session-expiration-duration-in-seconds common-lisp:nil :type
    (common-lisp:or session-expiration-duration-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-presigned-url-request
                    'make-create-application-presigned-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-presigned-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-presigned-url-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-type))
      (common-lisp:list
       (common-lisp:cons "UrlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-expiration-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "SessionExpirationDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-presigned-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-presigned-url-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-presigned-url-response-"))
   (authorized-url common-lisp:nil :type
    (common-lisp:or authorized-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-presigned-url-response
                    'make-create-application-presigned-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-presigned-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-presigned-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-url))
      (common-lisp:list
       (common-lisp:cons "AuthorizedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-presigned-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-description common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null))
   (runtime-environment (common-lisp:error ":runtime-environment is required")
    :type (common-lisp:or runtime-environment common-lisp:null))
   (service-execution-role
    (common-lisp:error ":service-execution-role is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (application-configuration common-lisp:nil :type
    (common-lisp:or application-configuration common-lisp:null))
   (cloud-watch-logging-options common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-options common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (application-mode common-lisp:nil :type
    (common-lisp:or application-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-environment))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role))
      (common-lisp:list
       (common-lisp:cons "ServiceExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration))
      (common-lisp:list
       (common-lisp:cons "ApplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-options))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-mode))
      (common-lisp:list
       (common-lisp:cons "ApplicationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (application-detail (common-lisp:error ":application-detail is required")
    :type (common-lisp:or application-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-snapshot-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshot-name is required") :type
    (common-lisp:or snapshot-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-snapshot-request
                    'make-create-application-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-snapshot-response-")))
 (common-lisp:export
  (common-lisp:list 'create-application-snapshot-response
                    'make-create-application-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-artifact-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-artifact-configuration-"))
   (artifact-type (common-lisp:error ":artifact-type is required") :type
    (common-lisp:or artifact-type common-lisp:null))
   (s3content-location common-lisp:nil :type
    (common-lisp:or s3content-location common-lisp:null))
   (maven-reference common-lisp:nil :type
    (common-lisp:or maven-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-artifact-configuration
                    'make-custom-artifact-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-artifact-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-artifact-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-type))
      (common-lisp:list
       (common-lisp:cons "ArtifactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3content-location))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maven-reference))
      (common-lisp:list
       (common-lisp:cons "MavenReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-artifact-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-artifact-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-artifact-configuration-description-"))
   (artifact-type common-lisp:nil :type
    (common-lisp:or artifact-type common-lisp:null))
   (s3content-location-description common-lisp:nil :type
    (common-lisp:or s3content-location common-lisp:null))
   (maven-reference-description common-lisp:nil :type
    (common-lisp:or maven-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-artifact-configuration-description
                    'make-custom-artifact-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-artifact-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-artifact-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-type))
      (common-lisp:list
       (common-lisp:cons "ArtifactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3content-location-description))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maven-reference-description))
      (common-lisp:list
       (common-lisp:cons "MavenReferenceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-artifact-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-artifacts-configuration-description-list ()
   '(trivial-types:proper-list custom-artifact-configuration-description))
 (common-lisp:defun |make-custom-artifacts-configuration-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-artifact-configuration-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype custom-artifacts-configuration-list ()
   '(trivial-types:proper-list custom-artifact-configuration))
 (common-lisp:defun |make-custom-artifacts-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-artifact-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-cloud-watch-logging-option-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-cloud-watch-logging-option-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (cloud-watch-logging-option-id
    (common-lisp:error ":cloud-watch-logging-option-id is required") :type
    (common-lisp:or id common-lisp:null))
   (conditional-token common-lisp:nil :type
    (common-lisp:or conditional-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-cloud-watch-logging-option-request
                    'make-delete-application-cloud-watch-logging-option-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-token))
      (common-lisp:list
       (common-lisp:cons "ConditionalToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-cloud-watch-logging-option-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-cloud-watch-logging-option-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (cloud-watch-logging-option-descriptions common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-option-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-cloud-watch-logging-option-response
                    'make-delete-application-cloud-watch-logging-option-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-descriptions))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-input-processing-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-input-processing-configuration-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-input-processing-configuration-request
                    'make-delete-application-input-processing-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-input-processing-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-input-processing-configuration-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-input-processing-configuration-response
                    'make-delete-application-input-processing-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input-processing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-output-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-output-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (output-id (common-lisp:error ":output-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-output-request
                    'make-delete-application-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-output-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-output-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-output-response
                    'make-delete-application-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-reference-data-source-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-reference-data-source-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-reference-data-source-request
                    'make-delete-application-reference-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-reference-data-source-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-reference-data-source-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-reference-data-source-response
                    'make-delete-application-reference-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (create-timestamp (common-lisp:error ":create-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-snapshot-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshot-name is required") :type
    (common-lisp:or snapshot-name common-lisp:null))
   (snapshot-creation-timestamp
    (common-lisp:error ":snapshot-creation-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-snapshot-request
                    'make-delete-application-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-snapshot-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-snapshot-response
                    'make-delete-application-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-vpc-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-vpc-configuration-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (vpc-configuration-id
    (common-lisp:error ":vpc-configuration-id is required") :type
    (common-lisp:or id common-lisp:null))
   (conditional-token common-lisp:nil :type
    (common-lisp:or conditional-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-vpc-configuration-request
                    'make-delete-application-vpc-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-vpc-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-vpc-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-configuration-id))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-token))
      (common-lisp:list
       (common-lisp:cons "ConditionalToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-vpc-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-vpc-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-vpc-configuration-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-vpc-configuration-response
                    'make-delete-application-vpc-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-vpc-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-vpc-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-vpc-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deploy-as-application-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-deploy-as-application-configuration-"))
   (s3content-location (common-lisp:error ":s3content-location is required")
    :type (common-lisp:or s3content-base-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deploy-as-application-configuration
                    'make-deploy-as-application-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3content-location))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deploy-as-application-configuration-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-deploy-as-application-configuration-description-"))
   (s3content-location-description
    (common-lisp:error ":s3content-location-description is required") :type
    (common-lisp:or s3content-base-location-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deploy-as-application-configuration-description
                    'make-deploy-as-application-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3content-location-description))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deploy-as-application-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-deploy-as-application-configuration-update-"))
   (s3content-location-update common-lisp:nil :type
    (common-lisp:or s3content-base-location-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deploy-as-application-configuration-update
                    'make-deploy-as-application-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3content-location-update))
      (common-lisp:list
       (common-lisp:cons "S3ContentLocationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deploy-as-application-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (include-additional-details common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-request
                    'make-describe-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-additional-details))
      (common-lisp:list
       (common-lisp:cons "IncludeAdditionalDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-response-"))
   (application-detail (common-lisp:error ":application-detail is required")
    :type (common-lisp:or application-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-response
                    'make-describe-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-snapshot-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshot-name is required") :type
    (common-lisp:or snapshot-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-snapshot-request
                    'make-describe-application-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-snapshot-response-"))
   (snapshot-details (common-lisp:error ":snapshot-details is required") :type
    (common-lisp:or snapshot-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-snapshot-response
                    'make-describe-application-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-details))
      (common-lisp:list
       (common-lisp:cons "SnapshotDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-version-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-version-id
    (common-lisp:error ":application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-version-request
                    'make-describe-application-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-version-response-"))
   (application-version-detail common-lisp:nil :type
    (common-lisp:or application-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-version-response
                    'make-describe-application-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-schema-"))
   (record-format-type (common-lisp:error ":record-format-type is required")
    :type (common-lisp:or record-format-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-schema 'make-destination-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format-type))
      (common-lisp:list
       (common-lisp:cons "RecordFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-input-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-input-schema-request-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (service-execution-role
    (common-lisp:error ":service-execution-role is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (input-starting-position-configuration common-lisp:nil :type
    (common-lisp:or input-starting-position-configuration common-lisp:null))
   (s3configuration common-lisp:nil :type
    (common-lisp:or s3configuration common-lisp:null))
   (input-processing-configuration common-lisp:nil :type
    (common-lisp:or input-processing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-input-schema-request
                    'make-discover-input-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role))
      (common-lisp:list
       (common-lisp:cons "ServiceExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "S3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-input-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-input-schema-response-"))
   (input-schema common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null))
   (parsed-input-records common-lisp:nil :type
    (common-lisp:or parsed-input-records common-lisp:null))
   (processed-input-records common-lisp:nil :type
    (common-lisp:or processed-input-records common-lisp:null))
   (raw-input-records common-lisp:nil :type
    (common-lisp:or raw-input-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-input-schema-response
                    'make-discover-input-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parsed-input-records))
      (common-lisp:list
       (common-lisp:cons "ParsedInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processed-input-records))
      (common-lisp:list
       (common-lisp:cons "ProcessedInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-input-records))
      (common-lisp:list
       (common-lisp:cons "RawInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-properties-"))
   (property-groups (common-lisp:error ":property-groups is required") :type
    (common-lisp:or property-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-properties 'make-environment-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "PropertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-property-descriptions (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-property-descriptions-"))
   (property-group-descriptions common-lisp:nil :type
    (common-lisp:or property-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-property-descriptions
                    'make-environment-property-descriptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-property-descriptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-property-descriptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-group-descriptions))
      (common-lisp:list
       (common-lisp:cons "PropertyGroupDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-property-descriptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-property-updates (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-property-updates-"))
   (property-groups (common-lisp:error ":property-groups is required") :type
    (common-lisp:or property-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-property-updates
                    'make-environment-property-updates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-property-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-property-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "PropertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-property-updates))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype file-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (flink-application-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-flink-application-configuration-"))
   (checkpoint-configuration common-lisp:nil :type
    (common-lisp:or checkpoint-configuration common-lisp:null))
   (monitoring-configuration common-lisp:nil :type
    (common-lisp:or monitoring-configuration common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'flink-application-configuration
                    'make-flink-application-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpoint-configuration))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "MonitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (flink-application-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-flink-application-configuration-description-"))
   (checkpoint-configuration-description common-lisp:nil :type
    (common-lisp:or checkpoint-configuration-description common-lisp:null))
   (monitoring-configuration-description common-lisp:nil :type
    (common-lisp:or monitoring-configuration-description common-lisp:null))
   (parallelism-configuration-description common-lisp:nil :type
    (common-lisp:or parallelism-configuration-description common-lisp:null))
   (job-plan-description common-lisp:nil :type
    (common-lisp:or job-plan-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'flink-application-configuration-description
                    'make-flink-application-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpoint-configuration-description))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration-description))
      (common-lisp:list
       (common-lisp:cons "MonitoringConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-plan-description))
      (common-lisp:list
       (common-lisp:cons "JobPlanDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (flink-application-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-flink-application-configuration-update-"))
   (checkpoint-configuration-update common-lisp:nil :type
    (common-lisp:or checkpoint-configuration-update common-lisp:null))
   (monitoring-configuration-update common-lisp:nil :type
    (common-lisp:or monitoring-configuration-update common-lisp:null))
   (parallelism-configuration-update common-lisp:nil :type
    (common-lisp:or parallelism-configuration-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'flink-application-configuration-update
                    'make-flink-application-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpoint-configuration-update))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration-update))
      (common-lisp:list
       (common-lisp:cons "MonitoringConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration-update))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flink-application-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (flink-run-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-flink-run-configuration-"))
   (allow-non-restored-state common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'flink-run-configuration 'make-flink-run-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flink-run-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flink-run-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-non-restored-state))
      (common-lisp:list
       (common-lisp:cons "AllowNonRestoredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flink-run-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-data-catalog-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-data-catalog-configuration-"))
   (database-arn (common-lisp:error ":database-arn is required") :type
    (common-lisp:or database-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-data-catalog-configuration
                    'make-glue-data-catalog-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-arn))
      (common-lisp:list
       (common-lisp:cons "DatabaseARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-data-catalog-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-data-catalog-configuration-description-"))
   (database-arn (common-lisp:error ":database-arn is required") :type
    (common-lisp:or database-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-data-catalog-configuration-description
                    'make-glue-data-catalog-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-arn))
      (common-lisp:list
       (common-lisp:cons "DatabaseARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-data-catalog-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-data-catalog-configuration-update-"))
   (database-arnupdate (common-lisp:error ":database-arnupdate is required")
    :type (common-lisp:or database-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-data-catalog-configuration-update
                    'make-glue-data-catalog-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-arnupdate))
      (common-lisp:list
       (common-lisp:cons "DatabaseARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-configuration-update))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype in-app-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype in-app-stream-names ()
   '(trivial-types:proper-list in-app-stream-name))
 (common-lisp:defun |make-in-app-stream-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list in-app-stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype in-app-table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input (:copier common-lisp:nil) (:conc-name "struct-shape-input-"))
   (name-prefix (common-lisp:error ":name-prefix is required") :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (input-processing-configuration common-lisp:nil :type
    (common-lisp:or input-processing-configuration common-lisp:null))
   (kinesis-streams-input common-lisp:nil :type
    (common-lisp:or kinesis-streams-input common-lisp:null))
   (kinesis-firehose-input common-lisp:nil :type
    (common-lisp:or kinesis-firehose-input common-lisp:null))
   (input-parallelism common-lisp:nil :type
    (common-lisp:or input-parallelism common-lisp:null))
   (input-schema (common-lisp:error ":input-schema is required") :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parallelism))
      (common-lisp:list
       (common-lisp:cons "InputParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-description-"))
   (input-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name-prefix common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (in-app-stream-names common-lisp:nil :type
    (common-lisp:or in-app-stream-names common-lisp:null))
   (input-processing-configuration-description common-lisp:nil :type
    (common-lisp:or input-processing-configuration-description
                    common-lisp:null))
   (kinesis-streams-input-description common-lisp:nil :type
    (common-lisp:or kinesis-streams-input-description common-lisp:null))
   (kinesis-firehose-input-description common-lisp:nil :type
    (common-lisp:or kinesis-firehose-input-description common-lisp:null))
   (input-schema common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null))
   (input-parallelism common-lisp:nil :type
    (common-lisp:or input-parallelism common-lisp:null))
   (input-starting-position-configuration common-lisp:nil :type
    (common-lisp:or input-starting-position-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-description 'make-input-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-app-stream-names))
      (common-lisp:list
       (common-lisp:cons "InAppStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration-description))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input-description))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input-description))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parallelism))
      (common-lisp:list
       (common-lisp:cons "InputParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-descriptions ()
   '(trivial-types:proper-list input-description))
 (common-lisp:defun |make-input-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (input-lambda-processor (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-lambda-processor-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-lambda-processor 'make-input-lambda-processor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-lambda-processor-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-lambda-processor-description-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-lambda-processor-description
                    'make-input-lambda-processor-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-lambda-processor-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-lambda-processor-update-"))
   (resource-arnupdate (common-lisp:error ":resource-arnupdate is required")
    :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-lambda-processor-update
                    'make-input-lambda-processor-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-lambda-processor-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-parallelism (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-parallelism-"))
   (count common-lisp:nil :type
    (common-lisp:or input-parallelism-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-parallelism 'make-input-parallelism))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-parallelism))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-parallelism))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-parallelism))
   common-lisp:nil))
(common-lisp:deftype input-parallelism-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (input-parallelism-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-parallelism-update-"))
   (count-update (common-lisp:error ":count-update is required") :type
    (common-lisp:or input-parallelism-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-parallelism-update 'make-input-parallelism-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-update))
      (common-lisp:list
       (common-lisp:cons "CountUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-processing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-processing-configuration-"))
   (input-lambda-processor
    (common-lisp:error ":input-lambda-processor is required") :type
    (common-lisp:or input-lambda-processor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-processing-configuration
                    'make-input-processing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-lambda-processor))
      (common-lisp:list
       (common-lisp:cons "InputLambdaProcessor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-processing-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-processing-configuration-description-"))
   (input-lambda-processor-description common-lisp:nil :type
    (common-lisp:or input-lambda-processor-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-processing-configuration-description
                    'make-input-processing-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-lambda-processor-description))
      (common-lisp:list
       (common-lisp:cons "InputLambdaProcessorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-processing-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-processing-configuration-update-"))
   (input-lambda-processor-update
    (common-lisp:error ":input-lambda-processor-update is required") :type
    (common-lisp:or input-lambda-processor-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-processing-configuration-update
                    'make-input-processing-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-lambda-processor-update))
      (common-lisp:list
       (common-lisp:cons "InputLambdaProcessorUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-processing-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-schema-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-schema-update-"))
   (record-format-update common-lisp:nil :type
    (common-lisp:or record-format common-lisp:null))
   (record-encoding-update common-lisp:nil :type
    (common-lisp:or record-encoding common-lisp:null))
   (record-column-updates common-lisp:nil :type
    (common-lisp:or record-columns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-schema-update 'make-input-schema-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-schema-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-schema-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-format-update))
      (common-lisp:list
       (common-lisp:cons "RecordFormatUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-encoding-update))
      (common-lisp:list
       (common-lisp:cons "RecordEncodingUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-column-updates))
      (common-lisp:list
       (common-lisp:cons "RecordColumnUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-schema-update))
   common-lisp:nil))
(common-lisp:deftype input-starting-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-starting-position-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-starting-position-configuration-"))
   (input-starting-position common-lisp:nil :type
    (common-lisp:or input-starting-position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-starting-position-configuration
                    'make-input-starting-position-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position))
      (common-lisp:list
       (common-lisp:cons "InputStartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-update-"))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or id common-lisp:null))
   (name-prefix-update common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (input-processing-configuration-update common-lisp:nil :type
    (common-lisp:or input-processing-configuration-update common-lisp:null))
   (kinesis-streams-input-update common-lisp:nil :type
    (common-lisp:or kinesis-streams-input-update common-lisp:null))
   (kinesis-firehose-input-update common-lisp:nil :type
    (common-lisp:or kinesis-firehose-input-update common-lisp:null))
   (input-schema-update common-lisp:nil :type
    (common-lisp:or input-schema-update common-lisp:null))
   (input-parallelism-update common-lisp:nil :type
    (common-lisp:or input-parallelism-update common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-update 'make-input-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix-update))
      (common-lisp:list
       (common-lisp:cons "NamePrefixUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-processing-configuration-update))
      (common-lisp:list
       (common-lisp:cons "InputProcessingConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input-update))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input-update))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema-update))
      (common-lisp:list
       (common-lisp:cons "InputSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-parallelism-update))
      (common-lisp:list
       (common-lisp:cons "InputParallelismUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-updates ()
   '(trivial-types:proper-list input-update))
 (common-lisp:defun |make-input-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inputs () '(trivial-types:proper-list input))
 (common-lisp:defun |make-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-application-configuration-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-application-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-application-configuration-exception
                    'invalid-application-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (jsonmapping-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-jsonmapping-parameters-"))
   (record-row-path (common-lisp:error ":record-row-path is required") :type
    (common-lisp:or record-row-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jsonmapping-parameters 'make-jsonmapping-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-row-path))
      (common-lisp:list
       (common-lisp:cons "RecordRowPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   common-lisp:nil))
(common-lisp:deftype job-plan-description () 'common-lisp:string)
(common-lisp:deftype kinesis-analytics-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input 'make-kinesis-firehose-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-input-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-input-description-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input-description
                    'make-kinesis-firehose-input-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-input-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-input-update-"))
   (resource-arnupdate (common-lisp:error ":resource-arnupdate is required")
    :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input-update
                    'make-kinesis-firehose-input-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-output-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output 'make-kinesis-firehose-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-output-description-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output-description
                    'make-kinesis-firehose-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-output-update-"))
   (resource-arnupdate (common-lisp:error ":resource-arnupdate is required")
    :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output-update
                    'make-kinesis-firehose-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input 'make-kinesis-streams-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-input-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-input-description-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input-description
                    'make-kinesis-streams-input-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-input-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-input-update-"))
   (resource-arnupdate (common-lisp:error ":resource-arnupdate is required")
    :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input-update
                    'make-kinesis-streams-input-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-output-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output 'make-kinesis-streams-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-output-description-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output-description
                    'make-kinesis-streams-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-output-update-"))
   (resource-arnupdate (common-lisp:error ":resource-arnupdate is required")
    :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output-update
                    'make-kinesis-streams-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-output-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-output 'make-lambda-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-output-description-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-output-description
                    'make-lambda-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-output-update-"))
   (resource-arnupdate (common-lisp:error ":resource-arnupdate is required")
    :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-output-update 'make-lambda-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-snapshots-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or list-snapshots-input-limit common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-snapshots-request
                    'make-list-application-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-snapshots-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-snapshots-response-"))
   (snapshot-summaries common-lisp:nil :type
    (common-lisp:or snapshot-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-snapshots-response
                    'make-list-application-snapshots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-summaries))
      (common-lisp:list
       (common-lisp:cons "SnapshotSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-snapshots-response))
   common-lisp:nil))
(common-lisp:deftype list-application-versions-input-limit ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-versions-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or list-application-versions-input-limit common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-versions-request
                    'make-list-application-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-versions-response-"))
   (application-version-summaries common-lisp:nil :type
    (common-lisp:or application-version-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-versions-response
                    'make-list-application-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-summaries))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   common-lisp:nil))
(common-lisp:deftype list-applications-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-request-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-applications-input-limit common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-response-"))
   (application-summaries
    (common-lisp:error ":application-summaries is required") :type
    (common-lisp:or application-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-summaries))
      (common-lisp:list
       (common-lisp:cons "ApplicationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:deftype list-snapshots-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or kinesis-analytics-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:deftype log-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mapping-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-mapping-parameters-"))
   (jsonmapping-parameters common-lisp:nil :type
    (common-lisp:or jsonmapping-parameters common-lisp:null))
   (csvmapping-parameters common-lisp:nil :type
    (common-lisp:or csvmapping-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mapping-parameters 'make-mapping-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jsonmapping-parameters))
      (common-lisp:list
       (common-lisp:cons "JSONMappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csvmapping-parameters))
      (common-lisp:list
       (common-lisp:cons "CSVMappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping-parameters))
   common-lisp:nil))
(common-lisp:deftype maven-artifact-id () 'common-lisp:string)
(common-lisp:deftype maven-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (maven-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-maven-reference-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or maven-group-id common-lisp:null))
   (artifact-id (common-lisp:error ":artifact-id is required") :type
    (common-lisp:or maven-artifact-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or maven-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'maven-reference 'make-maven-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maven-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maven-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-id))
      (common-lisp:list
       (common-lisp:cons "ArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maven-reference))
   common-lisp:nil))
(common-lisp:deftype maven-version () 'common-lisp:string)
(common-lisp:deftype metrics-level () 'common-lisp:string)
(common-lisp:deftype min-pause-between-checkpoints () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-configuration-"))
   (configuration-type (common-lisp:error ":configuration-type is required")
    :type (common-lisp:or configuration-type common-lisp:null))
   (metrics-level common-lisp:nil :type
    (common-lisp:or metrics-level common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-configuration 'make-monitoring-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "ConfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-level))
      (common-lisp:list
       (common-lisp:cons "MetricsLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-configuration-description-"))
   (configuration-type common-lisp:nil :type
    (common-lisp:or configuration-type common-lisp:null))
   (metrics-level common-lisp:nil :type
    (common-lisp:or metrics-level common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-configuration-description
                    'make-monitoring-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "ConfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-level))
      (common-lisp:list
       (common-lisp:cons "MetricsLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-configuration-update-"))
   (configuration-type-update common-lisp:nil :type
    (common-lisp:or configuration-type common-lisp:null))
   (metrics-level-update common-lisp:nil :type
    (common-lisp:or metrics-level common-lisp:null))
   (log-level-update common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-configuration-update
                    'make-monitoring-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-type-update))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTypeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-level-update))
      (common-lisp:list
       (common-lisp:cons "MetricsLevelUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level-update))
      (common-lisp:list
       (common-lisp:cons "LogLevelUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-configuration-update))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype object-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output (:copier common-lisp:nil) (:conc-name "struct-shape-output-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-output common-lisp:nil :type
    (common-lisp:or kinesis-streams-output common-lisp:null))
   (kinesis-firehose-output common-lisp:nil :type
    (common-lisp:or kinesis-firehose-output common-lisp:null))
   (lambda-output common-lisp:nil :type
    (common-lisp:or lambda-output common-lisp:null))
   (destination-schema (common-lisp:error ":destination-schema is required")
    :type (common-lisp:or destination-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-output))
      (common-lisp:list
       (common-lisp:cons "LambdaOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-schema))
      (common-lisp:list
       (common-lisp:cons "DestinationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-description-"))
   (output-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-output-description common-lisp:nil :type
    (common-lisp:or kinesis-streams-output-description common-lisp:null))
   (kinesis-firehose-output-description common-lisp:nil :type
    (common-lisp:or kinesis-firehose-output-description common-lisp:null))
   (lambda-output-description common-lisp:nil :type
    (common-lisp:or lambda-output-description common-lisp:null))
   (destination-schema common-lisp:nil :type
    (common-lisp:or destination-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-description 'make-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output-description))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output-description))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-output-description))
      (common-lisp:list
       (common-lisp:cons "LambdaOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-schema))
      (common-lisp:list
       (common-lisp:cons "DestinationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-descriptions ()
   '(trivial-types:proper-list output-description))
 (common-lisp:defun |make-output-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-update-"))
   (output-id (common-lisp:error ":output-id is required") :type
    (common-lisp:or id common-lisp:null))
   (name-update common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-output-update common-lisp:nil :type
    (common-lisp:or kinesis-streams-output-update common-lisp:null))
   (kinesis-firehose-output-update common-lisp:nil :type
    (common-lisp:or kinesis-firehose-output-update common-lisp:null))
   (lambda-output-update common-lisp:nil :type
    (common-lisp:or lambda-output-update common-lisp:null))
   (destination-schema-update common-lisp:nil :type
    (common-lisp:or destination-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-update 'make-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-update))
      (common-lisp:list
       (common-lisp:cons "NameUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output-update))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output-update))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-output-update))
      (common-lisp:list
       (common-lisp:cons "LambdaOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-schema-update))
      (common-lisp:list
       (common-lisp:cons "DestinationSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-updates ()
   '(trivial-types:proper-list output-update))
 (common-lisp:defun |make-output-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype outputs () '(trivial-types:proper-list output))
 (common-lisp:defun |make-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parallelism () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (parallelism-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallelism-configuration-"))
   (configuration-type (common-lisp:error ":configuration-type is required")
    :type (common-lisp:or configuration-type common-lisp:null))
   (parallelism common-lisp:nil :type
    (common-lisp:or parallelism common-lisp:null))
   (parallelism-per-kpu common-lisp:nil :type
    (common-lisp:or parallelism-per-kpu common-lisp:null))
   (auto-scaling-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallelism-configuration
                    'make-parallelism-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "ConfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism))
      (common-lisp:list
       (common-lisp:cons "Parallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism-per-kpu))
      (common-lisp:list
       (common-lisp:cons "ParallelismPerKPU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoScalingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parallelism-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallelism-configuration-description-"))
   (configuration-type common-lisp:nil :type
    (common-lisp:or configuration-type common-lisp:null))
   (parallelism common-lisp:nil :type
    (common-lisp:or parallelism common-lisp:null))
   (parallelism-per-kpu common-lisp:nil :type
    (common-lisp:or parallelism-per-kpu common-lisp:null))
   (current-parallelism common-lisp:nil :type
    (common-lisp:or parallelism common-lisp:null))
   (auto-scaling-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallelism-configuration-description
                    'make-parallelism-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "ConfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism))
      (common-lisp:list
       (common-lisp:cons "Parallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism-per-kpu))
      (common-lisp:list
       (common-lisp:cons "ParallelismPerKPU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-parallelism))
      (common-lisp:list
       (common-lisp:cons "CurrentParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoScalingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parallelism-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallelism-configuration-update-"))
   (configuration-type-update common-lisp:nil :type
    (common-lisp:or configuration-type common-lisp:null))
   (parallelism-update common-lisp:nil :type
    (common-lisp:or parallelism common-lisp:null))
   (parallelism-per-kpuupdate common-lisp:nil :type
    (common-lisp:or parallelism-per-kpu common-lisp:null))
   (auto-scaling-enabled-update common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallelism-configuration-update
                    'make-parallelism-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-type-update))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTypeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism-update))
      (common-lisp:list
       (common-lisp:cons "ParallelismUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-per-kpuupdate))
      (common-lisp:list
       (common-lisp:cons "ParallelismPerKPUUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-enabled-update))
      (common-lisp:list
       (common-lisp:cons "AutoScalingEnabledUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration-update))
   common-lisp:nil))
(common-lisp:deftype parallelism-per-kpu () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parsed-input-record ()
   '(trivial-types:proper-list parsed-input-record-field))
 (common-lisp:defun |make-parsed-input-record|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parsed-input-record-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parsed-input-record-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parsed-input-records ()
   '(trivial-types:proper-list parsed-input-record))
 (common-lisp:defun |make-parsed-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parsed-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype processed-input-record () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype processed-input-records ()
   '(trivial-types:proper-list processed-input-record))
 (common-lisp:defun |make-processed-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processed-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (property-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-group-"))
   (property-group-id (common-lisp:error ":property-group-id is required")
    :type (common-lisp:or id common-lisp:null))
   (property-map (common-lisp:error ":property-map is required") :type
    (common-lisp:or property-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'property-group 'make-property-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-group-id))
      (common-lisp:list
       (common-lisp:cons "PropertyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-map))
      (common-lisp:list
       (common-lisp:cons "PropertyMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-groups ()
   '(trivial-types:proper-list property-group))
 (common-lisp:defun |make-property-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype property-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype property-value () 'common-lisp:string)
(common-lisp:deftype raw-input-record () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype raw-input-records ()
   '(trivial-types:proper-list raw-input-record))
 (common-lisp:defun |make-raw-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list raw-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (record-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-column-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or record-column-name common-lisp:null))
   (mapping common-lisp:nil :type
    (common-lisp:or record-column-mapping common-lisp:null))
   (sql-type (common-lisp:error ":sql-type is required") :type
    (common-lisp:or record-column-sql-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record-column 'make-record-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-type))
      (common-lisp:list
       (common-lisp:cons "SqlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-column))
   common-lisp:nil))
(common-lisp:deftype record-column-delimiter () 'common-lisp:string)
(common-lisp:deftype record-column-mapping () 'common-lisp:string)
(common-lisp:deftype record-column-name () 'common-lisp:string)
(common-lisp:deftype record-column-sql-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-columns ()
   '(trivial-types:proper-list record-column))
 (common-lisp:defun |make-record-columns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (record-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-format-"))
   (record-format-type (common-lisp:error ":record-format-type is required")
    :type (common-lisp:or record-format-type common-lisp:null))
   (mapping-parameters common-lisp:nil :type
    (common-lisp:or mapping-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record-format 'make-record-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format-type))
      (common-lisp:list
       (common-lisp:cons "RecordFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-parameters))
      (common-lisp:list
       (common-lisp:cons "MappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-format))
   common-lisp:nil))
(common-lisp:deftype record-format-type () 'common-lisp:string)
(common-lisp:deftype record-row-delimiter () 'common-lisp:string)
(common-lisp:deftype record-row-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reference-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-data-source-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or in-app-table-name common-lisp:null))
   (s3reference-data-source common-lisp:nil :type
    (common-lisp:or s3reference-data-source common-lisp:null))
   (reference-schema (common-lisp:error ":reference-schema is required") :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-data-source 'make-reference-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-schema))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-data-source-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-data-source-description-"))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or id common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or in-app-table-name common-lisp:null))
   (s3reference-data-source-description
    (common-lisp:error ":s3reference-data-source-description is required")
    :type
    (common-lisp:or s3reference-data-source-description common-lisp:null))
   (reference-schema common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-data-source-description
                    'make-reference-data-source-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source-description))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-schema))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-data-source-descriptions ()
   '(trivial-types:proper-list reference-data-source-description))
 (common-lisp:defun |make-reference-data-source-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reference-data-source-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-data-source-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-data-source-update-"))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or id common-lisp:null))
   (table-name-update common-lisp:nil :type
    (common-lisp:or in-app-table-name common-lisp:null))
   (s3reference-data-source-update common-lisp:nil :type
    (common-lisp:or s3reference-data-source-update common-lisp:null))
   (reference-schema-update common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-data-source-update
                    'make-reference-data-source-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name-update))
      (common-lisp:list
       (common-lisp:cons "TableNameUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source-update))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSourceUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-schema-update))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-data-source-updates ()
   '(trivial-types:proper-list reference-data-source-update))
 (common-lisp:defun |make-reference-data-source-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reference-data-source-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reference-data-sources ()
   '(trivial-types:proper-list reference-data-source))
 (common-lisp:defun |make-reference-data-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-data-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-provisioned-throughput-exceeded-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-provisioned-throughput-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-provisioned-throughput-exceeded-exception
                    'resource-provisioned-throughput-exceeded-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rollback-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-rollback-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rollback-application-request
                    'make-rollback-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rollback-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-rollback-application-response-"))
   (application-detail (common-lisp:error ":application-detail is required")
    :type (common-lisp:or application-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rollback-application-response
                    'make-rollback-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-configuration-"))
   (flink-run-configuration common-lisp:nil :type
    (common-lisp:or flink-run-configuration common-lisp:null))
   (sql-run-configurations common-lisp:nil :type
    (common-lisp:or sql-run-configurations common-lisp:null))
   (application-restore-configuration common-lisp:nil :type
    (common-lisp:or application-restore-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-configuration 'make-run-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flink-run-configuration))
      (common-lisp:list
       (common-lisp:cons "FlinkRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-run-configurations))
      (common-lisp:list
       (common-lisp:cons "SqlRunConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-restore-configuration))
      (common-lisp:list
       (common-lisp:cons "ApplicationRestoreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-configuration-description-"))
   (application-restore-configuration-description common-lisp:nil :type
    (common-lisp:or application-restore-configuration common-lisp:null))
   (flink-run-configuration-description common-lisp:nil :type
    (common-lisp:or flink-run-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-configuration-description
                    'make-run-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-restore-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationRestoreConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flink-run-configuration-description))
      (common-lisp:list
       (common-lisp:cons "FlinkRunConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-configuration-update-"))
   (flink-run-configuration common-lisp:nil :type
    (common-lisp:or flink-run-configuration common-lisp:null))
   (application-restore-configuration common-lisp:nil :type
    (common-lisp:or application-restore-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-configuration-update 'make-run-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flink-run-configuration))
      (common-lisp:list
       (common-lisp:cons "FlinkRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-restore-configuration))
      (common-lisp:list
       (common-lisp:cons "ApplicationRestoreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-configuration-update))
   common-lisp:nil))
(common-lisp:deftype runtime-environment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3application-code-location-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3application-code-location-description-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key (common-lisp:error ":file-key is required") :type
    (common-lisp:or file-key common-lisp:null))
   (object-version common-lisp:nil :type
    (common-lisp:or object-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3application-code-location-description
                    'make-s3application-code-location-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3application-code-location-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3application-code-location-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version))
      (common-lisp:list
       (common-lisp:cons "ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3application-code-location-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3configuration-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key (common-lisp:error ":file-key is required") :type
    (common-lisp:or file-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3configuration 'make-s3configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3content-base-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3content-base-location-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (base-path common-lisp:nil :type
    (common-lisp:or base-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3content-base-location 'make-s3content-base-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-path))
      (common-lisp:list
       (common-lisp:cons "BasePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3content-base-location-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3content-base-location-description-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (base-path common-lisp:nil :type
    (common-lisp:or base-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3content-base-location-description
                    'make-s3content-base-location-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-path))
      (common-lisp:list
       (common-lisp:cons "BasePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3content-base-location-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3content-base-location-update-"))
   (bucket-arnupdate common-lisp:nil :type
    (common-lisp:or bucket-arn common-lisp:null))
   (base-path-update common-lisp:nil :type
    (common-lisp:or base-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3content-base-location-update
                    'make-s3content-base-location-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arnupdate))
      (common-lisp:list
       (common-lisp:cons "BucketARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-path-update))
      (common-lisp:list
       (common-lisp:cons "BasePathUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3content-base-location-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3content-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3content-location-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key (common-lisp:error ":file-key is required") :type
    (common-lisp:or file-key common-lisp:null))
   (object-version common-lisp:nil :type
    (common-lisp:or object-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3content-location 'make-s3content-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3content-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3content-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version))
      (common-lisp:list
       (common-lisp:cons "ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3content-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3content-location-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3content-location-update-"))
   (bucket-arnupdate common-lisp:nil :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key-update common-lisp:nil :type
    (common-lisp:or file-key common-lisp:null))
   (object-version-update common-lisp:nil :type
    (common-lisp:or object-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3content-location-update
                    'make-s3content-location-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3content-location-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3content-location-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arnupdate))
      (common-lisp:list
       (common-lisp:cons "BucketARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key-update))
      (common-lisp:list
       (common-lisp:cons "FileKeyUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-version-update))
      (common-lisp:list
       (common-lisp:cons "ObjectVersionUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3content-location-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3reference-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3reference-data-source-"))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key common-lisp:nil :type (common-lisp:or file-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source 'make-s3reference-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3reference-data-source-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3reference-data-source-description-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key (common-lisp:error ":file-key is required") :type
    (common-lisp:or file-key common-lisp:null))
   (reference-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source-description
                    'make-s3reference-data-source-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-role-arn))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3reference-data-source-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3reference-data-source-update-"))
   (bucket-arnupdate common-lisp:nil :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key-update common-lisp:nil :type
    (common-lisp:or file-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source-update
                    'make-s3reference-data-source-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arnupdate))
      (common-lisp:list
       (common-lisp:cons "BucketARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key-update))
      (common-lisp:list
       (common-lisp:cons "FileKeyUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   common-lisp:nil))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype session-expiration-duration-in-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-details-"))
   (snapshot-name (common-lisp:error ":snapshot-name is required") :type
    (common-lisp:or snapshot-name common-lisp:null))
   (snapshot-status (common-lisp:error ":snapshot-status is required") :type
    (common-lisp:or snapshot-status common-lisp:null))
   (application-version-id
    (common-lisp:error ":application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (snapshot-creation-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-details 'make-snapshot-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-status))
      (common-lisp:list
       (common-lisp:cons "SnapshotStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-details))
   common-lisp:nil))
(common-lisp:deftype snapshot-name () 'common-lisp:string)
(common-lisp:deftype snapshot-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshot-summaries ()
   '(trivial-types:proper-list snapshot-details))
 (common-lisp:defun |make-snapshot-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-schema-"))
   (record-format (common-lisp:error ":record-format is required") :type
    (common-lisp:or record-format common-lisp:null))
   (record-encoding common-lisp:nil :type
    (common-lisp:or record-encoding common-lisp:null))
   (record-columns (common-lisp:error ":record-columns is required") :type
    (common-lisp:or record-columns common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-schema 'make-source-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format))
      (common-lisp:list
       (common-lisp:cons "RecordFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-encoding))
      (common-lisp:list
       (common-lisp:cons "RecordEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-columns))
      (common-lisp:list
       (common-lisp:cons "RecordColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-application-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-application-configuration-"))
   (inputs common-lisp:nil :type (common-lisp:or inputs common-lisp:null))
   (outputs common-lisp:nil :type (common-lisp:or outputs common-lisp:null))
   (reference-data-sources common-lisp:nil :type
    (common-lisp:or reference-data-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-application-configuration
                    'make-sql-application-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-sources))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-application-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-application-configuration-description-"))
   (input-descriptions common-lisp:nil :type
    (common-lisp:or input-descriptions common-lisp:null))
   (output-descriptions common-lisp:nil :type
    (common-lisp:or output-descriptions common-lisp:null))
   (reference-data-source-descriptions common-lisp:nil :type
    (common-lisp:or reference-data-source-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-application-configuration-description
                    'make-sql-application-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-descriptions))
      (common-lisp:list
       (common-lisp:cons "InputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-descriptions))
      (common-lisp:list
       (common-lisp:cons "OutputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-descriptions))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-application-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-application-configuration-update-"))
   (input-updates common-lisp:nil :type
    (common-lisp:or input-updates common-lisp:null))
   (output-updates common-lisp:nil :type
    (common-lisp:or output-updates common-lisp:null))
   (reference-data-source-updates common-lisp:nil :type
    (common-lisp:or reference-data-source-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-application-configuration-update
                    'make-sql-application-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-updates))
      (common-lisp:list
       (common-lisp:cons "InputUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-updates))
      (common-lisp:list
       (common-lisp:cons "OutputUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-updates))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-application-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-run-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-run-configuration-"))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or id common-lisp:null))
   (input-starting-position-configuration
    (common-lisp:error ":input-starting-position-configuration is required")
    :type
    (common-lisp:or input-starting-position-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-run-configuration 'make-sql-run-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-run-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-run-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-run-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-run-configurations ()
   '(trivial-types:proper-list sql-run-configuration))
 (common-lisp:defun |make-sql-run-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-run-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (run-configuration common-lisp:nil :type
    (common-lisp:or run-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-application-request
                    'make-start-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-configuration))
      (common-lisp:list
       (common-lisp:cons "RunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-response-")))
 (common-lisp:export
  (common-lisp:list 'start-application-response
                    'make-start-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (force common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-application-request 'make-stop-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-application-response
                    'make-stop-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or kinesis-analytics-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype text-content () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unable-to-detect-schema-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-detect-schema-exception-message)
      (raw-input-records :initarg :raw-input-records :initform common-lisp:nil
       :reader unable-to-detect-schema-exception-raw-input-records)
      (processed-input-records :initarg :processed-input-records :initform
       common-lisp:nil :reader
       unable-to-detect-schema-exception-processed-input-records)))
 (common-lisp:export
  (common-lisp:list 'unable-to-detect-schema-exception
                    'unable-to-detect-schema-exception-message
                    'unable-to-detect-schema-exception-raw-input-records
                    'unable-to-detect-schema-exception-processed-input-records)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (kinesisanalyticsv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or kinesis-analytics-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-maintenance-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-application-maintenance-configuration-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-maintenance-configuration-update
    (common-lisp:error
     ":application-maintenance-configuration-update is required")
    :type
    (common-lisp:or application-maintenance-configuration-update
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-maintenance-configuration-request
                    'make-update-application-maintenance-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-maintenance-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-maintenance-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-maintenance-configuration-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationMaintenanceConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-maintenance-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-maintenance-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-application-maintenance-configuration-response-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-maintenance-configuration-description common-lisp:nil :type
    (common-lisp:or application-maintenance-configuration-description
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-maintenance-configuration-response
                    'make-update-application-maintenance-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-maintenance-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-maintenance-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-maintenance-configuration-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationMaintenanceConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-maintenance-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id common-lisp:nil :type
    (common-lisp:or application-version-id common-lisp:null))
   (application-configuration-update common-lisp:nil :type
    (common-lisp:or application-configuration-update common-lisp:null))
   (service-execution-role-update common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (run-configuration-update common-lisp:nil :type
    (common-lisp:or run-configuration-update common-lisp:null))
   (cloud-watch-logging-option-updates common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-option-updates common-lisp:null))
   (conditional-token common-lisp:nil :type
    (common-lisp:or conditional-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-execution-role-update))
      (common-lisp:list
       (common-lisp:cons "ServiceExecutionRoleUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-configuration-update))
      (common-lisp:list
       (common-lisp:cons "RunConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-updates))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-token))
      (common-lisp:list
       (common-lisp:cons "ConditionalToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-"))
   (application-detail (common-lisp:error ":application-detail is required")
    :type (common-lisp:or application-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:deftype url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-configuration-"))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or security-group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-configuration-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-configuration-description-"))
   (vpc-configuration-id
    (common-lisp:error ":vpc-configuration-id is required") :type
    (common-lisp:or id common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or vpc-id common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or security-group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration-description
                    'make-vpc-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-configuration-id))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-configuration-descriptions ()
   '(trivial-types:proper-list vpc-configuration-description))
 (common-lisp:defun |make-vpc-configuration-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-configuration-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-configuration-update-"))
   (vpc-configuration-id
    (common-lisp:error ":vpc-configuration-id is required") :type
    (common-lisp:or id common-lisp:null))
   (subnet-id-updates common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-id-updates common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration-update 'make-vpc-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-configuration-id))
      (common-lisp:list
       (common-lisp:cons "VpcConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id-updates))
      (common-lisp:list
       (common-lisp:cons "SubnetIdUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-updates))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-configuration-updates ()
   '(trivial-types:proper-list vpc-configuration-update))
 (common-lisp:defun |make-vpc-configuration-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-configuration-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-configurations ()
   '(trivial-types:proper-list vpc-configuration))
 (common-lisp:defun |make-vpc-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (zeppelin-application-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-zeppelin-application-configuration-"))
   (monitoring-configuration common-lisp:nil :type
    (common-lisp:or zeppelin-monitoring-configuration common-lisp:null))
   (catalog-configuration common-lisp:nil :type
    (common-lisp:or catalog-configuration common-lisp:null))
   (deploy-as-application-configuration common-lisp:nil :type
    (common-lisp:or deploy-as-application-configuration common-lisp:null))
   (custom-artifacts-configuration common-lisp:nil :type
    (common-lisp:or custom-artifacts-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zeppelin-application-configuration
                    'make-zeppelin-application-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration))
      (common-lisp:list
       (common-lisp:cons "MonitoringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-configuration))
      (common-lisp:list
       (common-lisp:cons "CatalogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deploy-as-application-configuration))
      (common-lisp:list
       (common-lisp:cons "DeployAsApplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-artifacts-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomArtifactsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zeppelin-application-configuration-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-zeppelin-application-configuration-description-"))
   (monitoring-configuration-description
    (common-lisp:error ":monitoring-configuration-description is required")
    :type
    (common-lisp:or zeppelin-monitoring-configuration-description
                    common-lisp:null))
   (catalog-configuration-description common-lisp:nil :type
    (common-lisp:or catalog-configuration-description common-lisp:null))
   (deploy-as-application-configuration-description common-lisp:nil :type
    (common-lisp:or deploy-as-application-configuration-description
                    common-lisp:null))
   (custom-artifacts-configuration-description common-lisp:nil :type
    (common-lisp:or custom-artifacts-configuration-description-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zeppelin-application-configuration-description
                    'make-zeppelin-application-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration-description))
      (common-lisp:list
       (common-lisp:cons "MonitoringConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-configuration-description))
      (common-lisp:list
       (common-lisp:cons "CatalogConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deploy-as-application-configuration-description))
      (common-lisp:list
       (common-lisp:cons "DeployAsApplicationConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-artifacts-configuration-description))
      (common-lisp:list
       (common-lisp:cons "CustomArtifactsConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zeppelin-application-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-zeppelin-application-configuration-update-"))
   (monitoring-configuration-update common-lisp:nil :type
    (common-lisp:or zeppelin-monitoring-configuration-update common-lisp:null))
   (catalog-configuration-update common-lisp:nil :type
    (common-lisp:or catalog-configuration-update common-lisp:null))
   (deploy-as-application-configuration-update common-lisp:nil :type
    (common-lisp:or deploy-as-application-configuration-update
                    common-lisp:null))
   (custom-artifacts-configuration-update common-lisp:nil :type
    (common-lisp:or custom-artifacts-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zeppelin-application-configuration-update
                    'make-zeppelin-application-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-configuration-update))
      (common-lisp:list
       (common-lisp:cons "MonitoringConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-configuration-update))
      (common-lisp:list
       (common-lisp:cons "CatalogConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deploy-as-application-configuration-update))
      (common-lisp:list
       (common-lisp:cons "DeployAsApplicationConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-artifacts-configuration-update))
      (common-lisp:list
       (common-lisp:cons "CustomArtifactsConfigurationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-application-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zeppelin-monitoring-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-zeppelin-monitoring-configuration-"))
   (log-level (common-lisp:error ":log-level is required") :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zeppelin-monitoring-configuration
                    'make-zeppelin-monitoring-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zeppelin-monitoring-configuration-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-zeppelin-monitoring-configuration-description-"))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zeppelin-monitoring-configuration-description
                    'make-zeppelin-monitoring-configuration-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zeppelin-monitoring-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-zeppelin-monitoring-configuration-update-"))
   (log-level-update (common-lisp:error ":log-level-update is required") :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zeppelin-monitoring-configuration-update
                    'make-zeppelin-monitoring-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level-update))
      (common-lisp:list
       (common-lisp:cons "LogLevelUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zeppelin-monitoring-configuration-update))
   common-lisp:nil))
(common-lisp:deftype zip-file-content ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defun add-application-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id cloud-watch-logging-option
                     conditional-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     cloud-watch-logging-option conditional-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-cloud-watch-logging-option-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationCloudWatchLoggingOption" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-cloud-watch-logging-option))
(common-lisp:progn
 (common-lisp:defun add-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-application-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationInput" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-input))
(common-lisp:progn
 (common-lisp:defun add-application-input-processing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input-id
                     input-processing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input-id input-processing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-input-processing-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationInputProcessingConfiguration" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-input-processing-configuration))
(common-lisp:progn
 (common-lisp:defun add-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id output)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     output))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-application-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationOutput" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-output))
(common-lisp:progn
 (common-lisp:defun add-application-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id reference-data-source)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     reference-data-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-reference-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationReferenceDataSource" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-reference-data-source))
(common-lisp:progn
 (common-lisp:defun add-application-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id vpc-configuration
                     conditional-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     vpc-configuration conditional-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-vpc-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "AddApplicationVpcConfiguration" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-application-vpc-configuration))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name application-description
                     runtime-environment service-execution-role
                     application-configuration cloud-watch-logging-options tags
                     application-mode)
   (common-lisp:declare
    (common-lisp:ignorable application-name application-description
     runtime-environment service-execution-role application-configuration
     cloud-watch-logging-options tags application-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-application-presigned-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name url-type
                     session-expiration-duration-in-seconds)
   (common-lisp:declare
    (common-lisp:ignorable application-name url-type
     session-expiration-duration-in-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-presigned-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateApplicationPresignedUrl" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application-presigned-url))
(common-lisp:progn
 (common-lisp:defun create-application-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name snapshot-name)
   (common-lisp:declare (common-lisp:ignorable application-name snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateApplicationSnapshot" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name create-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable application-name create-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-application-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id
                     cloud-watch-logging-option-id conditional-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     cloud-watch-logging-option-id conditional-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-cloud-watch-logging-option-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationCloudWatchLoggingOption" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-cloud-watch-logging-option))
(common-lisp:progn
 (common-lisp:defun delete-application-input-processing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-input-processing-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationInputProcessingConfiguration"
        "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-input-processing-configuration))
(common-lisp:progn
 (common-lisp:defun delete-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id output-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     output-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-output-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationOutput" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-output))
(common-lisp:progn
 (common-lisp:defun delete-application-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id reference-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     reference-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-reference-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationReferenceDataSource" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-reference-data-source))
(common-lisp:progn
 (common-lisp:defun delete-application-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name snapshot-name
                     snapshot-creation-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable application-name snapshot-name
     snapshot-creation-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationSnapshot" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-application-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id vpc-configuration-id
                     conditional-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     vpc-configuration-id conditional-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-vpc-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplicationVpcConfiguration" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-vpc-configuration))
(common-lisp:progn
 (common-lisp:defun describe-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     include-additional-details)
   (common-lisp:declare
    (common-lisp:ignorable application-name include-additional-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application))
(common-lisp:progn
 (common-lisp:defun describe-application-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name snapshot-name)
   (common-lisp:declare (common-lisp:ignorable application-name snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeApplicationSnapshot" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-snapshot))
(common-lisp:progn
 (common-lisp:defun describe-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name application-version-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name application-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeApplicationVersion" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-version))
(common-lisp:progn
 (common-lisp:defun discover-input-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn service-execution-role
                     input-starting-position-configuration s3configuration
                     input-processing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn service-execution-role
     input-starting-position-configuration s3configuration
     input-processing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-discover-input-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "DiscoverInputSchema" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'discover-input-schema))
(common-lisp:progn
 (common-lisp:defun list-application-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListApplicationSnapshots" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-snapshots))
(common-lisp:progn
 (common-lisp:defun list-application-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListApplicationVersions" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-versions))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListApplications" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun rollback-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rollback-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "RollbackApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rollback-application))
(common-lisp:progn
 (common-lisp:defun start-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name run-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-name run-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "StartApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-application))
(common-lisp:progn
 (common-lisp:defun stop-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name force)
   (common-lisp:declare (common-lisp:ignorable application-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "StopApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-application))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id
                     application-configuration-update
                     service-execution-role-update run-configuration-update
                     cloud-watch-logging-option-updates conditional-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     application-configuration-update service-execution-role-update
     run-configuration-update cloud-watch-logging-option-updates
     conditional-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateApplication" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-application-maintenance-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     application-maintenance-configuration-update)
   (common-lisp:declare
    (common-lisp:ignorable application-name
     application-maintenance-configuration-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-maintenance-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalyticsv2-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateApplicationMaintenanceConfiguration" "2018-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application-maintenance-configuration))
