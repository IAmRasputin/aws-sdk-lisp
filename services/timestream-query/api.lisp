;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/timestream-query/api
  (:use)
  (:nicknames #:aws/timestream-query)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/timestream-query/api)
(common-lisp:progn
 (common-lisp:defclass timestream-query-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "timestream-query" :protocol
                        :json))
 (common-lisp:export 'timestream-query-request))
(common-lisp:progn
 (common-lisp:define-condition timestream-query-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'timestream-query-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidEndpointException" . invalid-endpoint-exception)
    ("QueryExecutionException" . query-execution-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-query-request common-lisp:nil
                       ((query-id :initarg :query-id :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         %cancel-query-request-query-id :initform
                         (common-lisp:error ":query-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-query-request 'make-cancel-query-request))
 (common-lisp:defun make-cancel-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-query-response common-lisp:nil
                       ((cancellation-message :initarg :cancellation-message
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %cancel-query-response-cancellation-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-query-response 'make-cancel-query-response))
 (common-lisp:defun make-cancel-query-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cancellation-message)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancellation-message))
      (common-lisp:list
       (common-lisp:cons "CancellationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-query-response))
   common-lisp:nil))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-info common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %column-info-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %column-info-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'column-info 'make-column-info))
 (common-lisp:defun make-column-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name)
   (common-lisp:apply #'common-lisp:make-instance 'column-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-info-list ()
   '(trivial-types:proper-list column-info))
 (common-lisp:defun |make-column-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-scheduled-query-request common-lisp:nil
                       ((error-report-configuration :initarg
                         :error-report-configuration :type
                         (common-lisp:or error-report-configuration
                                         common-lisp:null)
                         :accessor
                         %create-scheduled-query-request-error-report-configuration
                         :initform
                         (common-lisp:error
                          ":error-report-configuration is required"))
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor %create-scheduled-query-request-kms-key-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-scheduled-query-request-tags :initform
                         common-lisp:nil)
                        (scheduled-query-execution-role-arn :initarg
                         :scheduled-query-execution-role-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %create-scheduled-query-request-scheduled-query-execution-role-arn
                         :initform
                         (common-lisp:error
                          ":scheduled-query-execution-role-arn is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-scheduled-query-request-client-token
                         :initform common-lisp:nil)
                        (target-configuration :initarg :target-configuration
                         :type
                         (common-lisp:or target-configuration common-lisp:null)
                         :accessor
                         %create-scheduled-query-request-target-configuration
                         :initform common-lisp:nil)
                        (notification-configuration :initarg
                         :notification-configuration :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         %create-scheduled-query-request-notification-configuration
                         :initform
                         (common-lisp:error
                          ":notification-configuration is required"))
                        (schedule-configuration :initarg
                         :schedule-configuration :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         %create-scheduled-query-request-schedule-configuration
                         :initform
                         (common-lisp:error
                          ":schedule-configuration is required"))
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %create-scheduled-query-request-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))
                        (name :initarg :name :type
                         (common-lisp:or scheduled-query-name common-lisp:null)
                         :accessor %create-scheduled-query-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-query-request
                    'make-create-scheduled-query-request))
 (common-lisp:defun make-create-scheduled-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-report-configuration kms-key-id
                     tags scheduled-query-execution-role-arn client-token
                     target-configuration notification-configuration
                     schedule-configuration query-string name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-scheduled-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-configuration))
      (common-lisp:list
       (common-lisp:cons "ScheduleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-query-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueryExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-configuration))
      (common-lisp:list
       (common-lisp:cons "ErrorReportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scheduled-query-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %create-scheduled-query-response-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-query-response
                    'make-create-scheduled-query-response))
 (common-lisp:defun make-create-scheduled-query-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-scheduled-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datum common-lisp:nil
                       ((null-value :initarg :null-value :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %datum-null-value :initform common-lisp:nil)
                        (row-value :initarg :row-value :type
                         (common-lisp:or row common-lisp:null) :accessor
                         %datum-row-value :initform common-lisp:nil)
                        (array-value :initarg :array-value :type
                         (common-lisp:or datum-list common-lisp:null) :accessor
                         %datum-array-value :initform common-lisp:nil)
                        (time-series-value :initarg :time-series-value :type
                         (common-lisp:or time-series-data-point-list
                                         common-lisp:null)
                         :accessor %datum-time-series-value :initform
                         common-lisp:nil)
                        (scalar-value :initarg :scalar-value :type
                         (common-lisp:or scalar-value common-lisp:null)
                         :accessor %datum-scalar-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'datum 'make-datum))
 (common-lisp:defun make-datum
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key null-value row-value array-value
                     time-series-value scalar-value)
   (common-lisp:apply #'common-lisp:make-instance 'datum
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-value))
      (common-lisp:list
       (common-lisp:cons "ScalarValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-value))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-value))
      (common-lisp:list
       (common-lisp:cons "ArrayValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-value))
      (common-lisp:list
       (common-lisp:cons "RowValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-value))
      (common-lisp:list
       (common-lisp:cons "NullValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datum))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype datum-list () '(trivial-types:proper-list datum))
 (common-lisp:defun |make-datum-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-query-request common-lisp:nil
                       ((scheduled-query-arn :initarg :scheduled-query-arn
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %delete-scheduled-query-request-scheduled-query-arn
                         :initform
                         (common-lisp:error
                          ":scheduled-query-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-query-request
                    'make-delete-scheduled-query-request))
 (common-lisp:defun make-delete-scheduled-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-query-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scheduled-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-query-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-request
                    'make-describe-endpoints-request))
 (common-lisp:defun make-describe-endpoints-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-response common-lisp:nil
                       ((endpoints :initarg :endpoints :type
                         (common-lisp:or endpoints common-lisp:null) :accessor
                         %describe-endpoints-response-endpoints :initform
                         (common-lisp:error ":endpoints is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-response
                    'make-describe-endpoints-response))
 (common-lisp:defun make-describe-endpoints-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoints)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-query-request common-lisp:nil
                       ((scheduled-query-arn :initarg :scheduled-query-arn
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %describe-scheduled-query-request-scheduled-query-arn
                         :initform
                         (common-lisp:error
                          ":scheduled-query-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-query-request
                    'make-describe-scheduled-query-request))
 (common-lisp:defun make-describe-scheduled-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-query-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-query-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-query-response common-lisp:nil
                       ((scheduled-query :initarg :scheduled-query :type
                         (common-lisp:or scheduled-query-description
                                         common-lisp:null)
                         :accessor
                         %describe-scheduled-query-response-scheduled-query
                         :initform
                         (common-lisp:error ":scheduled-query is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-query-response
                    'make-describe-scheduled-query-response))
 (common-lisp:defun make-describe-scheduled-query-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-query)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-query))
      (common-lisp:list
       (common-lisp:cons "ScheduledQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension-mapping common-lisp:nil
                       ((dimension-value-type :initarg :dimension-value-type
                         :type
                         (common-lisp:or dimension-value-type common-lisp:null)
                         :accessor %dimension-mapping-dimension-value-type
                         :initform
                         (common-lisp:error
                          ":dimension-value-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor %dimension-mapping-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'dimension-mapping 'make-dimension-mapping))
 (common-lisp:defun make-dimension-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimension-value-type name)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-type))
      (common-lisp:list
       (common-lisp:cons "DimensionValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-mapping-list ()
   '(trivial-types:proper-list dimension-mapping))
 (common-lisp:defun |make-dimension-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-value-type () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((cache-period-in-minutes :initarg
                         :cache-period-in-minutes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %endpoint-cache-period-in-minutes :initform
                         (common-lisp:error
                          ":cache-period-in-minutes is required"))
                        (address :initarg :address :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %endpoint-address :initform
                         (common-lisp:error ":address is required"))))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defun make-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cache-period-in-minutes address)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-period-in-minutes))
      (common-lisp:list
       (common-lisp:cons "CachePeriodInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoints () '(trivial-types:proper-list endpoint))
 (common-lisp:defun |make-endpoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-report-configuration common-lisp:nil
                       ((s3configuration :initarg :s3configuration :type
                         (common-lisp:or s3configuration common-lisp:null)
                         :accessor %error-report-configuration-s3configuration
                         :initform
                         (common-lisp:error ":s3configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'error-report-configuration
                    'make-error-report-configuration))
 (common-lisp:defun make-error-report-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3configuration)
   (common-lisp:apply #'common-lisp:make-instance 'error-report-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-report-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-report-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "S3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-report-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error-report-location common-lisp:nil
                       ((s3report-location :initarg :s3report-location :type
                         (common-lisp:or s3report-location common-lisp:null)
                         :accessor %error-report-location-s3report-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'error-report-location 'make-error-report-location))
 (common-lisp:defun make-error-report-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3report-location)
   (common-lisp:apply #'common-lisp:make-instance 'error-report-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3report-location))
      (common-lisp:list
       (common-lisp:cons "S3ReportLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-scheduled-query-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %execute-scheduled-query-request-client-token
                         :initform common-lisp:nil)
                        (invocation-time :initarg :invocation-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %execute-scheduled-query-request-invocation-time
                         :initform
                         (common-lisp:error ":invocation-time is required"))
                        (scheduled-query-arn :initarg :scheduled-query-arn
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %execute-scheduled-query-request-scheduled-query-arn
                         :initform
                         (common-lisp:error
                          ":scheduled-query-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-scheduled-query-request
                    'make-execute-scheduled-query-request))
 (common-lisp:defun make-execute-scheduled-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token invocation-time
                     scheduled-query-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-scheduled-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-scheduled-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-scheduled-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-query-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-time))
      (common-lisp:list
       (common-lisp:cons "InvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-scheduled-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execution-stats common-lisp:nil
                       ((query-result-rows :initarg :query-result-rows :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %execution-stats-query-result-rows :initform
                         common-lisp:nil)
                        (records-ingested :initarg :records-ingested :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %execution-stats-records-ingested :initform
                         common-lisp:nil)
                        (bytes-metered :initarg :bytes-metered :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %execution-stats-bytes-metered :initform
                         common-lisp:nil)
                        (data-writes :initarg :data-writes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %execution-stats-data-writes :initform
                         common-lisp:nil)
                        (execution-time-in-millis :initarg
                         :execution-time-in-millis :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %execution-stats-execution-time-in-millis :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'execution-stats 'make-execution-stats))
 (common-lisp:defun make-execution-stats
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-result-rows records-ingested
                     bytes-metered data-writes execution-time-in-millis)
   (common-lisp:apply #'common-lisp:make-instance 'execution-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-writes))
      (common-lisp:list
       (common-lisp:cons "DataWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-metered))
      (common-lisp:list
       (common-lisp:cons "BytesMetered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-ingested))
      (common-lisp:list
       (common-lisp:cons "RecordsIngested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-result-rows))
      (common-lisp:list
       (common-lisp:cons "QueryResultRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-endpoint-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-endpoint-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-endpoint-exception
                    'invalid-endpoint-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-scheduled-queries-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-scheduled-queries-results-token
                                         common-lisp:null)
                         :accessor %list-scheduled-queries-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-scheduled-queries-results
                                         common-lisp:null)
                         :accessor %list-scheduled-queries-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-queries-request
                    'make-list-scheduled-queries-request))
 (common-lisp:defun make-list-scheduled-queries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-scheduled-queries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-queries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-queries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-queries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scheduled-queries-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-scheduled-queries-results-token
                                         common-lisp:null)
                         :accessor %list-scheduled-queries-response-next-token
                         :initform common-lisp:nil)
                        (scheduled-queries :initarg :scheduled-queries :type
                         (common-lisp:or scheduled-query-list common-lisp:null)
                         :accessor
                         %list-scheduled-queries-response-scheduled-queries
                         :initform
                         (common-lisp:error
                          ":scheduled-queries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-queries-response
                    'make-list-scheduled-queries-response))
 (common-lisp:defun make-list-scheduled-queries-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scheduled-queries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-scheduled-queries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-queries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-queries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-queries))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-queries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-tags-for-resource-results-token
                                         common-lisp:null)
                         :accessor %list-tags-for-resource-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-tags-for-resource-result
                                         common-lisp:null)
                         :accessor %list-tags-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-tags-for-resource-results-token
                                         common-lisp:null)
                         :accessor %list-tags-for-resource-response-next-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-query-results () 'common-lisp:integer)
(common-lisp:deftype max-scheduled-queries-results () 'common-lisp:integer)
(common-lisp:deftype max-tags-for-resource-result () 'common-lisp:integer)
(common-lisp:deftype measure-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mixed-measure-mapping common-lisp:nil
                       ((multi-measure-attribute-mappings :initarg
                         :multi-measure-attribute-mappings :type
                         (common-lisp:or multi-measure-attribute-mapping-list
                                         common-lisp:null)
                         :accessor
                         %mixed-measure-mapping-multi-measure-attribute-mappings
                         :initform common-lisp:nil)
                        (measure-value-type :initarg :measure-value-type :type
                         (common-lisp:or measure-value-type common-lisp:null)
                         :accessor %mixed-measure-mapping-measure-value-type
                         :initform
                         (common-lisp:error ":measure-value-type is required"))
                        (target-measure-name :initarg :target-measure-name
                         :type (common-lisp:or schema-name common-lisp:null)
                         :accessor %mixed-measure-mapping-target-measure-name
                         :initform common-lisp:nil)
                        (source-column :initarg :source-column :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor %mixed-measure-mapping-source-column
                         :initform common-lisp:nil)
                        (measure-name :initarg :measure-name :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor %mixed-measure-mapping-measure-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mixed-measure-mapping 'make-mixed-measure-mapping))
 (common-lisp:defun make-mixed-measure-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multi-measure-attribute-mappings
                     measure-value-type target-measure-name source-column
                     measure-name)
   (common-lisp:apply #'common-lisp:make-instance 'mixed-measure-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mixed-measure-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mixed-measure-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-name))
      (common-lisp:list
       (common-lisp:cons "MeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-column))
      (common-lisp:list
       (common-lisp:cons "SourceColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-measure-name))
      (common-lisp:list
       (common-lisp:cons "TargetMeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-value-type))
      (common-lisp:list
       (common-lisp:cons "MeasureValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-measure-attribute-mappings))
      (common-lisp:list
       (common-lisp:cons "MultiMeasureAttributeMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mixed-measure-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mixed-measure-mapping-list ()
   '(trivial-types:proper-list mixed-measure-mapping))
 (common-lisp:defun |make-mixed-measure-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mixed-measure-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass multi-measure-attribute-mapping common-lisp:nil
                       ((measure-value-type :initarg :measure-value-type :type
                         (common-lisp:or scalar-measure-value-type
                                         common-lisp:null)
                         :accessor
                         %multi-measure-attribute-mapping-measure-value-type
                         :initform
                         (common-lisp:error ":measure-value-type is required"))
                        (target-multi-measure-attribute-name :initarg
                         :target-multi-measure-attribute-name :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         %multi-measure-attribute-mapping-target-multi-measure-attribute-name
                         :initform common-lisp:nil)
                        (source-column :initarg :source-column :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         %multi-measure-attribute-mapping-source-column
                         :initform
                         (common-lisp:error ":source-column is required"))))
 (common-lisp:export
  (common-lisp:list 'multi-measure-attribute-mapping
                    'make-multi-measure-attribute-mapping))
 (common-lisp:defun make-multi-measure-attribute-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key measure-value-type
                     target-multi-measure-attribute-name source-column)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-measure-attribute-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-attribute-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-attribute-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-column))
      (common-lisp:list
       (common-lisp:cons "SourceColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-multi-measure-attribute-name))
      (common-lisp:list
       (common-lisp:cons "TargetMultiMeasureAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-value-type))
      (common-lisp:list
       (common-lisp:cons "MeasureValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-attribute-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-measure-attribute-mapping-list ()
   '(trivial-types:proper-list multi-measure-attribute-mapping))
 (common-lisp:defun |make-multi-measure-attribute-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-measure-attribute-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass multi-measure-mappings common-lisp:nil
                       ((multi-measure-attribute-mappings :initarg
                         :multi-measure-attribute-mappings :type
                         (common-lisp:or multi-measure-attribute-mapping-list
                                         common-lisp:null)
                         :accessor
                         %multi-measure-mappings-multi-measure-attribute-mappings
                         :initform
                         (common-lisp:error
                          ":multi-measure-attribute-mappings is required"))
                        (target-multi-measure-name :initarg
                         :target-multi-measure-name :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         %multi-measure-mappings-target-multi-measure-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multi-measure-mappings 'make-multi-measure-mappings))
 (common-lisp:defun make-multi-measure-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multi-measure-attribute-mappings
                     target-multi-measure-name)
   (common-lisp:apply #'common-lisp:make-instance 'multi-measure-mappings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-mappings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-mappings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-multi-measure-name))
      (common-lisp:list
       (common-lisp:cons "TargetMultiMeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-measure-attribute-mappings))
      (common-lisp:list
       (common-lisp:cons "MultiMeasureAttributeMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-mappings))
   common-lisp:nil))
(common-lisp:deftype next-scheduled-queries-results-token ()
  'common-lisp:string)
(common-lisp:deftype next-tags-for-resource-results-token ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((sns-configuration :initarg :sns-configuration :type
                         (common-lisp:or sns-configuration common-lisp:null)
                         :accessor
                         %notification-configuration-sns-configuration
                         :initform
                         (common-lisp:error
                          ":sns-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defun make-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-configuration))
      (common-lisp:list
       (common-lisp:cons "SnsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-mapping common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %parameter-mapping-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-mapping-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-mapping 'make-parameter-mapping))
 (common-lisp:defun make-parameter-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-mapping-list ()
   '(trivial-types:proper-list parameter-mapping))
 (common-lisp:defun |make-parameter-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass prepare-query-request common-lisp:nil
                       ((validate-only :initarg :validate-only :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %prepare-query-request-validate-only
                         :initform common-lisp:nil)
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %prepare-query-request-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))))
 (common-lisp:export
  (common-lisp:list 'prepare-query-request 'make-prepare-query-request))
 (common-lisp:defun make-prepare-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validate-only query-string)
   (common-lisp:apply #'common-lisp:make-instance 'prepare-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prepare-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prepare-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validate-only))
      (common-lisp:list
       (common-lisp:cons "ValidateOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prepare-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass prepare-query-response common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameter-mapping-list
                                         common-lisp:null)
                         :accessor %prepare-query-response-parameters :initform
                         (common-lisp:error ":parameters is required"))
                        (columns :initarg :columns :type
                         (common-lisp:or select-column-list common-lisp:null)
                         :accessor %prepare-query-response-columns :initform
                         (common-lisp:error ":columns is required"))
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %prepare-query-response-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))))
 (common-lisp:export
  (common-lisp:list 'prepare-query-response 'make-prepare-query-response))
 (common-lisp:defun make-prepare-query-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters columns query-string)
   (common-lisp:apply #'common-lisp:make-instance 'prepare-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prepare-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prepare-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prepare-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition query-execution-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       query-execution-exception-message)))
 (common-lisp:export
  (common-lisp:list 'query-execution-exception
                    'query-execution-exception-message)))
(common-lisp:deftype query-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-request common-lisp:nil
                       ((max-rows :initarg :max-rows :type
                         (common-lisp:or max-query-results common-lisp:null)
                         :accessor %query-request-max-rows :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %query-request-next-token :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %query-request-client-token :initform
                         common-lisp:nil)
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %query-request-query-string :initform
                         (common-lisp:error ":query-string is required"))))
 (common-lisp:export (common-lisp:list 'query-request 'make-query-request))
 (common-lisp:defun make-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-rows next-token client-token
                     query-string)
   (common-lisp:apply #'common-lisp:make-instance 'query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-rows))
      (common-lisp:list
       (common-lisp:cons "MaxRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-response common-lisp:nil
                       ((query-status :initarg :query-status :type
                         (common-lisp:or query-status common-lisp:null)
                         :accessor %query-response-query-status :initform
                         common-lisp:nil)
                        (column-info :initarg :column-info :type
                         (common-lisp:or column-info-list common-lisp:null)
                         :accessor %query-response-column-info :initform
                         (common-lisp:error ":column-info is required"))
                        (rows :initarg :rows :type
                         (common-lisp:or row-list common-lisp:null) :accessor
                         %query-response-rows :initform
                         (common-lisp:error ":rows is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %query-response-next-token :initform
                         common-lisp:nil)
                        (query-id :initarg :query-id :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         %query-response-query-id :initform
                         (common-lisp:error ":query-id is required"))))
 (common-lisp:export (common-lisp:list 'query-response 'make-query-response))
 (common-lisp:defun make-query-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-status column-info rows next-token
                     query-id)
   (common-lisp:apply #'common-lisp:make-instance 'query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-info))
      (common-lisp:list
       (common-lisp:cons "ColumnInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-status))
      (common-lisp:list
       (common-lisp:cons "QueryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-status common-lisp:nil
                       ((cumulative-bytes-metered :initarg
                         :cumulative-bytes-metered :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-status-cumulative-bytes-metered :initform
                         common-lisp:nil)
                        (cumulative-bytes-scanned :initarg
                         :cumulative-bytes-scanned :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %query-status-cumulative-bytes-scanned :initform
                         common-lisp:nil)
                        (progress-percentage :initarg :progress-percentage
                         :type (common-lisp:or double common-lisp:null)
                         :accessor %query-status-progress-percentage :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'query-status 'make-query-status))
 (common-lisp:defun make-query-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cumulative-bytes-metered
                     cumulative-bytes-scanned progress-percentage)
   (common-lisp:apply #'common-lisp:make-instance 'query-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percentage))
      (common-lisp:list
       (common-lisp:cons "ProgressPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cumulative-bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "CumulativeBytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cumulative-bytes-metered))
      (common-lisp:list
       (common-lisp:cons "CumulativeBytesMetered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-status))
   common-lisp:nil))
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (scheduled-query-arn :initarg :scheduled-query-arn :initform
       common-lisp:nil :reader
       resource-not-found-exception-scheduled-query-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-scheduled-query-arn)))
(common-lisp:progn
 (common-lisp:defclass row common-lisp:nil
                       ((data :initarg :data :type
                         (common-lisp:or datum-list common-lisp:null) :accessor
                         %row-data :initform
                         (common-lisp:error ":data is required"))))
 (common-lisp:export (common-lisp:list 'row 'make-row))
 (common-lisp:defun make-row
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data)
   (common-lisp:apply #'common-lisp:make-instance 'row
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-list () '(trivial-types:proper-list row))
 (common-lisp:defun |make-row-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3configuration common-lisp:nil
                       ((encryption-option :initarg :encryption-option :type
                         (common-lisp:or s3encryption-option common-lisp:null)
                         :accessor %s3configuration-encryption-option :initform
                         common-lisp:nil)
                        (object-key-prefix :initarg :object-key-prefix :type
                         (common-lisp:or s3object-key-prefix common-lisp:null)
                         :accessor %s3configuration-object-key-prefix :initform
                         common-lisp:nil)
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3configuration-bucket-name :initform
                         (common-lisp:error ":bucket-name is required"))))
 (common-lisp:export (common-lisp:list 's3configuration 'make-s3configuration))
 (common-lisp:defun make-s3configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-option object-key-prefix
                     bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key-prefix))
      (common-lisp:list
       (common-lisp:cons "ObjectKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3configuration))
   common-lisp:nil))
(common-lisp:deftype s3encryption-option () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype s3object-key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3report-location common-lisp:nil
                       ((object-key :initarg :object-key :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor %s3report-location-object-key :initform
                         common-lisp:nil)
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3report-location-bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3report-location 'make-s3report-location))
 (common-lisp:defun make-s3report-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-key bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3report-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3report-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3report-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3report-location))
   common-lisp:nil))
(common-lisp:deftype scalar-measure-value-type () 'common-lisp:string)
(common-lisp:deftype scalar-type () 'common-lisp:string)
(common-lisp:deftype scalar-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule-configuration common-lisp:nil
                       ((schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor %schedule-configuration-schedule-expression
                         :initform
                         (common-lisp:error
                          ":schedule-expression is required"))))
 (common-lisp:export
  (common-lisp:list 'schedule-configuration 'make-schedule-configuration))
 (common-lisp:defun make-schedule-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-expression)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-query common-lisp:nil
                       ((last-run-status :initarg :last-run-status :type
                         (common-lisp:or scheduled-query-run-status
                                         common-lisp:null)
                         :accessor %scheduled-query-last-run-status :initform
                         common-lisp:nil)
                        (target-destination :initarg :target-destination :type
                         (common-lisp:or target-destination common-lisp:null)
                         :accessor %scheduled-query-target-destination
                         :initform common-lisp:nil)
                        (error-report-configuration :initarg
                         :error-report-configuration :type
                         (common-lisp:or error-report-configuration
                                         common-lisp:null)
                         :accessor %scheduled-query-error-report-configuration
                         :initform common-lisp:nil)
                        (next-invocation-time :initarg :next-invocation-time
                         :type (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-next-invocation-time :initform
                         common-lisp:nil)
                        (previous-invocation-time :initarg
                         :previous-invocation-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-previous-invocation-time :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or scheduled-query-state
                                         common-lisp:null)
                         :accessor %scheduled-query-state :initform
                         (common-lisp:error ":state is required"))
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-creation-time :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or scheduled-query-name common-lisp:null)
                         :accessor %scheduled-query-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %scheduled-query-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'scheduled-query 'make-scheduled-query))
 (common-lisp:defun make-scheduled-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-run-status target-destination
                     error-report-configuration next-invocation-time
                     previous-invocation-time state creation-time name arn)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduled-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduled-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-invocation-time))
      (common-lisp:list
       (common-lisp:cons "PreviousInvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-invocation-time))
      (common-lisp:list
       (common-lisp:cons "NextInvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-configuration))
      (common-lisp:list
       (common-lisp:cons "ErrorReportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-destination))
      (common-lisp:list
       (common-lisp:cons "TargetDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "LastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduled-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scheduled-query-description common-lisp:nil
                       ((recently-failed-runs :initarg :recently-failed-runs
                         :type
                         (common-lisp:or scheduled-query-run-summary-list
                                         common-lisp:null)
                         :accessor
                         %scheduled-query-description-recently-failed-runs
                         :initform common-lisp:nil)
                        (last-run-summary :initarg :last-run-summary :type
                         (common-lisp:or scheduled-query-run-summary
                                         common-lisp:null)
                         :accessor
                         %scheduled-query-description-last-run-summary
                         :initform common-lisp:nil)
                        (error-report-configuration :initarg
                         :error-report-configuration :type
                         (common-lisp:or error-report-configuration
                                         common-lisp:null)
                         :accessor
                         %scheduled-query-description-error-report-configuration
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor %scheduled-query-description-kms-key-id
                         :initform common-lisp:nil)
                        (scheduled-query-execution-role-arn :initarg
                         :scheduled-query-execution-role-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %scheduled-query-description-scheduled-query-execution-role-arn
                         :initform common-lisp:nil)
                        (target-configuration :initarg :target-configuration
                         :type
                         (common-lisp:or target-configuration common-lisp:null)
                         :accessor
                         %scheduled-query-description-target-configuration
                         :initform common-lisp:nil)
                        (notification-configuration :initarg
                         :notification-configuration :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         %scheduled-query-description-notification-configuration
                         :initform
                         (common-lisp:error
                          ":notification-configuration is required"))
                        (schedule-configuration :initarg
                         :schedule-configuration :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         %scheduled-query-description-schedule-configuration
                         :initform
                         (common-lisp:error
                          ":schedule-configuration is required"))
                        (next-invocation-time :initarg :next-invocation-time
                         :type (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-description-next-invocation-time
                         :initform common-lisp:nil)
                        (previous-invocation-time :initarg
                         :previous-invocation-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-description-previous-invocation-time
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or scheduled-query-state
                                         common-lisp:null)
                         :accessor %scheduled-query-description-state :initform
                         (common-lisp:error ":state is required"))
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-description-creation-time :initform
                         common-lisp:nil)
                        (query-string :initarg :query-string :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor %scheduled-query-description-query-string
                         :initform
                         (common-lisp:error ":query-string is required"))
                        (name :initarg :name :type
                         (common-lisp:or scheduled-query-name common-lisp:null)
                         :accessor %scheduled-query-description-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %scheduled-query-description-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'scheduled-query-description
                    'make-scheduled-query-description))
 (common-lisp:defun make-scheduled-query-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recently-failed-runs last-run-summary
                     error-report-configuration kms-key-id
                     scheduled-query-execution-role-arn target-configuration
                     notification-configuration schedule-configuration
                     next-invocation-time previous-invocation-time state
                     creation-time query-string name arn)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-query-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-query-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-query-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-invocation-time))
      (common-lisp:list
       (common-lisp:cons "PreviousInvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-invocation-time))
      (common-lisp:list
       (common-lisp:cons "NextInvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-configuration))
      (common-lisp:list
       (common-lisp:cons "ScheduleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-query-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueryExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-configuration))
      (common-lisp:list
       (common-lisp:cons "ErrorReportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-summary))
      (common-lisp:list
       (common-lisp:cons "LastRunSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recently-failed-runs))
      (common-lisp:list
       (common-lisp:cons "RecentlyFailedRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-query-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-query-list ()
   '(trivial-types:proper-list scheduled-query))
 (common-lisp:defun |make-scheduled-query-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-query))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scheduled-query-name () 'common-lisp:string)
(common-lisp:deftype scheduled-query-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-query-run-summary common-lisp:nil
                       ((failure-reason :initarg :failure-reason :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %scheduled-query-run-summary-failure-reason
                         :initform common-lisp:nil)
                        (error-report-location :initarg :error-report-location
                         :type
                         (common-lisp:or error-report-location
                                         common-lisp:null)
                         :accessor
                         %scheduled-query-run-summary-error-report-location
                         :initform common-lisp:nil)
                        (execution-stats :initarg :execution-stats :type
                         (common-lisp:or execution-stats common-lisp:null)
                         :accessor %scheduled-query-run-summary-execution-stats
                         :initform common-lisp:nil)
                        (run-status :initarg :run-status :type
                         (common-lisp:or scheduled-query-run-status
                                         common-lisp:null)
                         :accessor %scheduled-query-run-summary-run-status
                         :initform common-lisp:nil)
                        (trigger-time :initarg :trigger-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-run-summary-trigger-time :initform
                         common-lisp:nil)
                        (invocation-time :initarg :invocation-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %scheduled-query-run-summary-invocation-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scheduled-query-run-summary
                    'make-scheduled-query-run-summary))
 (common-lisp:defun make-scheduled-query-run-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reason error-report-location
                     execution-stats run-status trigger-time invocation-time)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-query-run-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-query-run-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-query-run-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-time))
      (common-lisp:list
       (common-lisp:cons "InvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-time))
      (common-lisp:list
       (common-lisp:cons "TriggerTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-status))
      (common-lisp:list
       (common-lisp:cons "RunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-stats))
      (common-lisp:list
       (common-lisp:cons "ExecutionStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-location))
      (common-lisp:list
       (common-lisp:cons "ErrorReportLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-query-run-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-query-run-summary-list ()
   '(trivial-types:proper-list scheduled-query-run-summary))
 (common-lisp:defun |make-scheduled-query-run-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-query-run-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scheduled-query-state () 'common-lisp:string)
(common-lisp:deftype schema-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass select-column common-lisp:nil
                       ((aliased :initarg :aliased :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %select-column-aliased :initform
                         common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %select-column-table-name :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %select-column-database-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %select-column-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %select-column-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'select-column 'make-select-column))
 (common-lisp:defun make-select-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aliased table-name database-name type
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'select-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliased))
      (common-lisp:list
       (common-lisp:cons "Aliased"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype select-column-list ()
   '(trivial-types:proper-list select-column))
 (common-lisp:defun |make-select-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list select-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sns-configuration common-lisp:nil
                       ((topic-arn :initarg :topic-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %sns-configuration-topic-arn :initform
                         (common-lisp:error ":topic-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'sns-configuration 'make-sns-configuration))
 (common-lisp:defun make-sns-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-arn)
   (common-lisp:apply #'common-lisp:make-instance 'sns-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-configuration))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-value2048 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-configuration common-lisp:nil
                       ((timestream-configuration :initarg
                         :timestream-configuration :type
                         (common-lisp:or timestream-configuration
                                         common-lisp:null)
                         :accessor
                         %target-configuration-timestream-configuration
                         :initform
                         (common-lisp:error
                          ":timestream-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'target-configuration 'make-target-configuration))
 (common-lisp:defun make-target-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestream-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'target-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-configuration))
      (common-lisp:list
       (common-lisp:cons "TimestreamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-destination common-lisp:nil
                       ((timestream-destination :initarg
                         :timestream-destination :type
                         (common-lisp:or timestream-destination
                                         common-lisp:null)
                         :accessor %target-destination-timestream-destination
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-destination 'make-target-destination))
 (common-lisp:defun make-target-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestream-destination)
   (common-lisp:apply #'common-lisp:make-instance 'target-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-destination))
      (common-lisp:list
       (common-lisp:cons "TimestreamDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-series-data-point common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or datum common-lisp:null) :accessor
                         %time-series-data-point-value :initform
                         (common-lisp:error ":value is required"))
                        (time :initarg :time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-series-data-point-time :initform
                         (common-lisp:error ":time is required"))))
 (common-lisp:export
  (common-lisp:list 'time-series-data-point 'make-time-series-data-point))
 (common-lisp:defun make-time-series-data-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value time)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype time-series-data-point-list ()
   '(trivial-types:proper-list time-series-data-point))
 (common-lisp:defun |make-time-series-data-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-series-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestream-configuration common-lisp:nil
                       ((measure-name-column :initarg :measure-name-column
                         :type (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         %timestream-configuration-measure-name-column
                         :initform common-lisp:nil)
                        (mixed-measure-mappings :initarg
                         :mixed-measure-mappings :type
                         (common-lisp:or mixed-measure-mapping-list
                                         common-lisp:null)
                         :accessor
                         %timestream-configuration-mixed-measure-mappings
                         :initform common-lisp:nil)
                        (multi-measure-mappings :initarg
                         :multi-measure-mappings :type
                         (common-lisp:or multi-measure-mappings
                                         common-lisp:null)
                         :accessor
                         %timestream-configuration-multi-measure-mappings
                         :initform common-lisp:nil)
                        (dimension-mappings :initarg :dimension-mappings :type
                         (common-lisp:or dimension-mapping-list
                                         common-lisp:null)
                         :accessor %timestream-configuration-dimension-mappings
                         :initform
                         (common-lisp:error ":dimension-mappings is required"))
                        (time-column :initarg :time-column :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor %timestream-configuration-time-column
                         :initform
                         (common-lisp:error ":time-column is required"))
                        (table-name :initarg :table-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %timestream-configuration-table-name
                         :initform
                         (common-lisp:error ":table-name is required"))
                        (database-name :initarg :database-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %timestream-configuration-database-name
                         :initform
                         (common-lisp:error ":database-name is required"))))
 (common-lisp:export
  (common-lisp:list 'timestream-configuration 'make-timestream-configuration))
 (common-lisp:defun make-timestream-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key measure-name-column
                     mixed-measure-mappings multi-measure-mappings
                     dimension-mappings time-column table-name database-name)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timestream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timestream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-column))
      (common-lisp:list
       (common-lisp:cons "TimeColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-mappings))
      (common-lisp:list
       (common-lisp:cons "DimensionMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-measure-mappings))
      (common-lisp:list
       (common-lisp:cons "MultiMeasureMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-measure-mappings))
      (common-lisp:list
       (common-lisp:cons "MixedMeasureMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-name-column))
      (common-lisp:list
       (common-lisp:cons "MeasureNameColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timestream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timestream-destination common-lisp:nil
                       ((table-name :initarg :table-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %timestream-destination-table-name :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %timestream-destination-database-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'timestream-destination 'make-timestream-destination))
 (common-lisp:defun make-timestream-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-name database-name)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timestream-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timestream-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timestream-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass type common-lisp:nil
                       ((row-column-info :initarg :row-column-info :type
                         (common-lisp:or column-info-list common-lisp:null)
                         :accessor %type-row-column-info :initform
                         common-lisp:nil)
                        (time-series-measure-value-column-info :initarg
                         :time-series-measure-value-column-info :type
                         (common-lisp:or column-info common-lisp:null)
                         :accessor %type-time-series-measure-value-column-info
                         :initform common-lisp:nil)
                        (array-column-info :initarg :array-column-info :type
                         (common-lisp:or column-info common-lisp:null)
                         :accessor %type-array-column-info :initform
                         common-lisp:nil)
                        (scalar-type :initarg :scalar-type :type
                         (common-lisp:or scalar-type common-lisp:null)
                         :accessor %type-scalar-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'type 'make-type))
 (common-lisp:defun make-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row-column-info
                     time-series-measure-value-column-info array-column-info
                     scalar-type)
   (common-lisp:apply #'common-lisp:make-instance 'type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-type))
      (common-lisp:list
       (common-lisp:cons "ScalarType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-column-info))
      (common-lisp:list
       (common-lisp:cons "ArrayColumnInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-measure-value-column-info))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesMeasureValueColumnInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-column-info))
      (common-lisp:list
       (common-lisp:cons "RowColumnInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scheduled-query-request common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or scheduled-query-state
                                         common-lisp:null)
                         :accessor %update-scheduled-query-request-state
                         :initform (common-lisp:error ":state is required"))
                        (scheduled-query-arn :initarg :scheduled-query-arn
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         %update-scheduled-query-request-scheduled-query-arn
                         :initform
                         (common-lisp:error
                          ":scheduled-query-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-query-request
                    'make-update-scheduled-query-request))
 (common-lisp:defun make-update-scheduled-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state scheduled-query-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scheduled-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-query-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledQueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (timestream-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun cancel-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-id)
   (common-lisp:declare (common-lisp:ignorable query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "CancelQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-query))
(common-lisp:progn
 (common-lisp:defun create-scheduled-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name query-string schedule-configuration
                     notification-configuration target-configuration
                     client-token scheduled-query-execution-role-arn tags
                     kms-key-id error-report-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name query-string schedule-configuration
     notification-configuration target-configuration client-token
     scheduled-query-execution-role-arn tags kms-key-id
     error-report-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scheduled-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateScheduledQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-scheduled-query))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-query-arn)
   (common-lisp:declare (common-lisp:ignorable scheduled-query-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteScheduledQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scheduled-query))
(common-lisp:progn
 (common-lisp:defun describe-endpoints ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'timestream-query-request :method "POST" :path
                                "/" :protocol :json :operation
                                "DescribeEndpoints" :params
                                `(("Action" ,@"DescribeEndpoints")
                                  ("Version" ,@"2018-11-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-query-arn)
   (common-lisp:declare (common-lisp:ignorable scheduled-query-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scheduled-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeScheduledQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-scheduled-query))
(common-lisp:progn
 (common-lisp:defun execute-scheduled-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-query-arn invocation-time
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable scheduled-query-arn invocation-time client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-scheduled-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "ExecuteScheduledQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-scheduled-query))
(common-lisp:progn
 (common-lisp:defun list-scheduled-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scheduled-queries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListScheduledQueries" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scheduled-queries))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun prepare-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-string validate-only)
   (common-lisp:declare (common-lisp:ignorable query-string validate-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-prepare-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "PrepareQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'prepare-query))
(common-lisp:progn
 (common-lisp:defun query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-string client-token next-token
                     max-rows)
   (common-lisp:declare
    (common-lisp:ignorable query-string client-token next-token max-rows))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "Query" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-scheduled-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-query-arn state)
   (common-lisp:declare (common-lisp:ignorable scheduled-query-arn state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scheduled-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-query-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateScheduledQuery" "2018-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-scheduled-query))
