;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/backup/api
  (:use)
  (:nicknames #:aws/backup)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/backup/api)
(common-lisp:progn
 (common-lisp:defclass backup-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "backup" :protocol
                        :rest-json))
 (common-lisp:export 'backup-request))
(common-lisp:progn
 (common-lisp:define-condition backup-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'backup-error))
(common-lisp:defvar *error-map*
  '(("AlreadyExistsException" . already-exists-exception)
    ("ConflictException" . conflict-exception)
    ("DependencyFailureException" . dependency-failure-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidResourceStateException" . invalid-resource-state-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MissingParameterValueException" . missing-parameter-value-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass advanced-backup-setting common-lisp:nil
                       ((backup-options :initarg :backup-options :type
                         (common-lisp:or backup-options common-lisp:null)
                         :accessor %advanced-backup-setting-backup-options
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %advanced-backup-setting-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-backup-setting 'make-advanced-backup-setting))
 (common-lisp:defun make-advanced-backup-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-options resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-backup-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-backup-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-backup-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-options))
      (common-lisp:list
       (common-lisp:cons "BackupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-backup-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype advanced-backup-settings ()
   '(trivial-types:proper-list advanced-backup-setting))
 (common-lisp:defun |make-advanced-backup-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list advanced-backup-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       already-exists-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)
      (creator-request-id :initarg :creator-request-id :initform
       common-lisp:nil :reader already-exists-exception-creator-request-id)
      (arn :initarg :arn :initform common-lisp:nil :reader
       already-exists-exception-arn)
      (type :initarg :type :initform common-lisp:nil :reader
       already-exists-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       already-exists-exception-context)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception 'already-exists-exception-code
                    'already-exists-exception-message
                    'already-exists-exception-creator-request-id
                    'already-exists-exception-arn
                    'already-exists-exception-type
                    'already-exists-exception-context)))
(common-lisp:progn
 (common-lisp:defclass backup-job common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-resource-name :initform
                         common-lisp:nil)
                        (is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %backup-job-is-parent :initform
                         common-lisp:nil)
                        (parent-job-id :initarg :parent-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-parent-job-id :initform
                         common-lisp:nil)
                        (backup-type :initarg :backup-type :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-backup-type :initform
                         common-lisp:nil)
                        (backup-options :initarg :backup-options :type
                         (common-lisp:or backup-options common-lisp:null)
                         :accessor %backup-job-backup-options :initform
                         common-lisp:nil)
                        (bytes-transferred :initarg :bytes-transferred :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %backup-job-bytes-transferred :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %backup-job-resource-type :initform
                         common-lisp:nil)
                        (start-by :initarg :start-by :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-start-by :initform
                         common-lisp:nil)
                        (expected-completion-date :initarg
                         :expected-completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-expected-completion-date
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or recovery-point-creator
                                         common-lisp:null)
                         :accessor %backup-job-created-by :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %backup-job-iam-role-arn :initform
                         common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %backup-job-backup-size-in-bytes :initform
                         common-lisp:nil)
                        (percent-done :initarg :percent-done :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-percent-done :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-status-message :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or backup-job-state common-lisp:null)
                         :accessor %backup-job-state :initform common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-completion-date :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-creation-date :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %backup-job-resource-arn :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %backup-job-recovery-point-arn :initform
                         common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %backup-job-backup-vault-arn :initform
                         common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %backup-job-backup-vault-name :initform
                         common-lisp:nil)
                        (backup-job-id :initarg :backup-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-job-backup-job-id :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %backup-job-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'backup-job 'make-backup-job))
 (common-lisp:defun make-backup-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name is-parent parent-job-id
                     backup-type backup-options bytes-transferred resource-type
                     start-by expected-completion-date created-by iam-role-arn
                     backup-size-in-bytes percent-done status-message state
                     completion-date creation-date resource-arn
                     recovery-point-arn backup-vault-arn backup-vault-name
                     backup-job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'backup-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-job-id))
      (common-lisp:list
       (common-lisp:cons "BackupJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-done))
      (common-lisp:list
       (common-lisp:cons "PercentDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-completion-date))
      (common-lisp:list
       (common-lisp:cons "ExpectedCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-by))
      (common-lisp:list
       (common-lisp:cons "StartBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-transferred))
      (common-lisp:list
       (common-lisp:cons "BytesTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-options))
      (common-lisp:list
       (common-lisp:cons "BackupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-type))
      (common-lisp:list
       (common-lisp:cons "BackupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-job-id))
      (common-lisp:list
       (common-lisp:cons "ParentJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backup-job-child-jobs-in-state ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-backup-job-child-jobs-in-state|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype backup-job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-jobs-list ()
   '(trivial-types:proper-list backup-job))
 (common-lisp:defun |make-backup-jobs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype backup-option-key () 'common-lisp:string)
(common-lisp:deftype backup-option-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-backup-options| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass backup-plan common-lisp:nil
                       ((advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or advanced-backup-settings
                                         common-lisp:null)
                         :accessor %backup-plan-advanced-backup-settings
                         :initform common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or backup-rules common-lisp:null)
                         :accessor %backup-plan-rules :initform
                         (common-lisp:error ":rules is required"))
                        (backup-plan-name :initarg :backup-plan-name :type
                         (common-lisp:or backup-plan-name common-lisp:null)
                         :accessor %backup-plan-backup-plan-name :initform
                         (common-lisp:error ":backup-plan-name is required"))))
 (common-lisp:export (common-lisp:list 'backup-plan 'make-backup-plan))
 (common-lisp:defun make-backup-plan
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-backup-settings rules
                     backup-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'backup-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-name))
      (common-lisp:list
       (common-lisp:cons "BackupPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-plan))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backup-plan-input common-lisp:nil
                       ((advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or advanced-backup-settings
                                         common-lisp:null)
                         :accessor %backup-plan-input-advanced-backup-settings
                         :initform common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or backup-rules-input common-lisp:null)
                         :accessor %backup-plan-input-rules :initform
                         (common-lisp:error ":rules is required"))
                        (backup-plan-name :initarg :backup-plan-name :type
                         (common-lisp:or backup-plan-name common-lisp:null)
                         :accessor %backup-plan-input-backup-plan-name
                         :initform
                         (common-lisp:error ":backup-plan-name is required"))))
 (common-lisp:export
  (common-lisp:list 'backup-plan-input 'make-backup-plan-input))
 (common-lisp:defun make-backup-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-backup-settings rules
                     backup-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'backup-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-name))
      (common-lisp:list
       (common-lisp:cons "BackupPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-plan-input))
   common-lisp:nil))
(common-lisp:deftype backup-plan-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-plan-templates-list ()
   '(trivial-types:proper-list backup-plan-templates-list-member))
 (common-lisp:defun |make-backup-plan-templates-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backup-plan-templates-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass backup-plan-templates-list-member common-lisp:nil
                       ((backup-plan-template-name :initarg
                         :backup-plan-template-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %backup-plan-templates-list-member-backup-plan-template-name
                         :initform common-lisp:nil)
                        (backup-plan-template-id :initarg
                         :backup-plan-template-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %backup-plan-templates-list-member-backup-plan-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backup-plan-templates-list-member
                    'make-backup-plan-templates-list-member))
 (common-lisp:defun make-backup-plan-templates-list-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-template-name
                     backup-plan-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'backup-plan-templates-list-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-plan-templates-list-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-plan-templates-list-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-template-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-template-name))
      (common-lisp:list
       (common-lisp:cons "BackupPlanTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-plan-templates-list-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backup-plan-versions-list ()
   '(trivial-types:proper-list backup-plans-list-member))
 (common-lisp:defun |make-backup-plan-versions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backup-plans-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype backup-plans-list ()
   '(trivial-types:proper-list backup-plans-list-member))
 (common-lisp:defun |make-backup-plans-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backup-plans-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass backup-plans-list-member common-lisp:nil
                       ((advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or advanced-backup-settings
                                         common-lisp:null)
                         :accessor
                         %backup-plans-list-member-advanced-backup-settings
                         :initform common-lisp:nil)
                        (last-execution-date :initarg :last-execution-date
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %backup-plans-list-member-last-execution-date
                         :initform common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-plans-list-member-creator-request-id
                         :initform common-lisp:nil)
                        (backup-plan-name :initarg :backup-plan-name :type
                         (common-lisp:or backup-plan-name common-lisp:null)
                         :accessor %backup-plans-list-member-backup-plan-name
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-plans-list-member-version-id
                         :initform common-lisp:nil)
                        (deletion-date :initarg :deletion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-plans-list-member-deletion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-plans-list-member-creation-date
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-plans-list-member-backup-plan-id
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %backup-plans-list-member-backup-plan-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backup-plans-list-member 'make-backup-plans-list-member))
 (common-lisp:defun make-backup-plans-list-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-backup-settings
                     last-execution-date creator-request-id backup-plan-name
                     version-id deletion-date creation-date backup-plan-id
                     backup-plan-arn)
   (common-lisp:apply #'common-lisp:make-instance 'backup-plans-list-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-plans-list-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-plans-list-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-name))
      (common-lisp:list
       (common-lisp:cons "BackupPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-plans-list-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backup-rule common-lisp:nil
                       ((enable-continuous-backup :initarg
                         :enable-continuous-backup :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %backup-rule-enable-continuous-backup :initform
                         common-lisp:nil)
                        (copy-actions :initarg :copy-actions :type
                         (common-lisp:or copy-actions common-lisp:null)
                         :accessor %backup-rule-copy-actions :initform
                         common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-rule-rule-id :initform
                         common-lisp:nil)
                        (recovery-point-tags :initarg :recovery-point-tags
                         :type (common-lisp:or tags common-lisp:null) :accessor
                         %backup-rule-recovery-point-tags :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %backup-rule-lifecycle :initform common-lisp:nil)
                        (completion-window-minutes :initarg
                         :completion-window-minutes :type
                         (common-lisp:or window-minutes common-lisp:null)
                         :accessor %backup-rule-completion-window-minutes
                         :initform common-lisp:nil)
                        (start-window-minutes :initarg :start-window-minutes
                         :type (common-lisp:or window-minutes common-lisp:null)
                         :accessor %backup-rule-start-window-minutes :initform
                         common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor %backup-rule-schedule-expression :initform
                         common-lisp:nil)
                        (target-backup-vault-name :initarg
                         :target-backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %backup-rule-target-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":target-backup-vault-name is required"))
                        (rule-name :initarg :rule-name :type
                         (common-lisp:or backup-rule-name common-lisp:null)
                         :accessor %backup-rule-rule-name :initform
                         (common-lisp:error ":rule-name is required"))))
 (common-lisp:export (common-lisp:list 'backup-rule 'make-backup-rule))
 (common-lisp:defun make-backup-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-continuous-backup copy-actions
                     rule-id recovery-point-tags lifecycle
                     completion-window-minutes start-window-minutes
                     schedule-expression target-backup-vault-name rule-name)
   (common-lisp:apply #'common-lisp:make-instance 'backup-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "TargetBackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-window-minutes))
      (common-lisp:list
       (common-lisp:cons "StartWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-window-minutes))
      (common-lisp:list
       (common-lisp:cons "CompletionWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-tags))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-actions))
      (common-lisp:list
       (common-lisp:cons "CopyActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-continuous-backup))
      (common-lisp:list
       (common-lisp:cons "EnableContinuousBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backup-rule-input common-lisp:nil
                       ((enable-continuous-backup :initarg
                         :enable-continuous-backup :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %backup-rule-input-enable-continuous-backup :initform
                         common-lisp:nil)
                        (copy-actions :initarg :copy-actions :type
                         (common-lisp:or copy-actions common-lisp:null)
                         :accessor %backup-rule-input-copy-actions :initform
                         common-lisp:nil)
                        (recovery-point-tags :initarg :recovery-point-tags
                         :type (common-lisp:or tags common-lisp:null) :accessor
                         %backup-rule-input-recovery-point-tags :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %backup-rule-input-lifecycle :initform
                         common-lisp:nil)
                        (completion-window-minutes :initarg
                         :completion-window-minutes :type
                         (common-lisp:or window-minutes common-lisp:null)
                         :accessor %backup-rule-input-completion-window-minutes
                         :initform common-lisp:nil)
                        (start-window-minutes :initarg :start-window-minutes
                         :type (common-lisp:or window-minutes common-lisp:null)
                         :accessor %backup-rule-input-start-window-minutes
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor %backup-rule-input-schedule-expression
                         :initform common-lisp:nil)
                        (target-backup-vault-name :initarg
                         :target-backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %backup-rule-input-target-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":target-backup-vault-name is required"))
                        (rule-name :initarg :rule-name :type
                         (common-lisp:or backup-rule-name common-lisp:null)
                         :accessor %backup-rule-input-rule-name :initform
                         (common-lisp:error ":rule-name is required"))))
 (common-lisp:export
  (common-lisp:list 'backup-rule-input 'make-backup-rule-input))
 (common-lisp:defun make-backup-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-continuous-backup copy-actions
                     recovery-point-tags lifecycle completion-window-minutes
                     start-window-minutes schedule-expression
                     target-backup-vault-name rule-name)
   (common-lisp:apply #'common-lisp:make-instance 'backup-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "TargetBackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-window-minutes))
      (common-lisp:list
       (common-lisp:cons "StartWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-window-minutes))
      (common-lisp:list
       (common-lisp:cons "CompletionWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-tags))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-actions))
      (common-lisp:list
       (common-lisp:cons "CopyActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-continuous-backup))
      (common-lisp:list
       (common-lisp:cons "EnableContinuousBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-rule-input))
   common-lisp:nil))
(common-lisp:deftype backup-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-rules () '(trivial-types:proper-list backup-rule))
 (common-lisp:defun |make-backup-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype backup-rules-input ()
   '(trivial-types:proper-list backup-rule-input))
 (common-lisp:defun |make-backup-rules-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup-rule-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass backup-selection common-lisp:nil
                       ((conditions :initarg :conditions :type
                         (common-lisp:or conditions common-lisp:null) :accessor
                         %backup-selection-conditions :initform
                         common-lisp:nil)
                        (not-resources :initarg :not-resources :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor %backup-selection-not-resources :initform
                         common-lisp:nil)
                        (list-of-tags :initarg :list-of-tags :type
                         (common-lisp:or list-of-tags common-lisp:null)
                         :accessor %backup-selection-list-of-tags :initform
                         common-lisp:nil)
                        (resources :initarg :resources :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor %backup-selection-resources :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %backup-selection-iam-role-arn :initform
                         (common-lisp:error ":iam-role-arn is required"))
                        (selection-name :initarg :selection-name :type
                         (common-lisp:or backup-selection-name
                                         common-lisp:null)
                         :accessor %backup-selection-selection-name :initform
                         (common-lisp:error ":selection-name is required"))))
 (common-lisp:export
  (common-lisp:list 'backup-selection 'make-backup-selection))
 (common-lisp:defun make-backup-selection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditions not-resources list-of-tags
                     resources iam-role-arn selection-name)
   (common-lisp:apply #'common-lisp:make-instance 'backup-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-name))
      (common-lisp:list
       (common-lisp:cons "SelectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-of-tags))
      (common-lisp:list
       (common-lisp:cons "ListOfTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-resources))
      (common-lisp:list
       (common-lisp:cons "NotResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup-selection))
   common-lisp:nil))
(common-lisp:deftype backup-selection-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-selections-list ()
   '(trivial-types:proper-list backup-selections-list-member))
 (common-lisp:defun |make-backup-selections-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backup-selections-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass backup-selections-list-member common-lisp:nil
                       ((iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %backup-selections-list-member-iam-role-arn
                         :initform common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %backup-selections-list-member-creator-request-id
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-selections-list-member-creation-date
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %backup-selections-list-member-backup-plan-id
                         :initform common-lisp:nil)
                        (selection-name :initarg :selection-name :type
                         (common-lisp:or backup-selection-name
                                         common-lisp:null)
                         :accessor
                         %backup-selections-list-member-selection-name
                         :initform common-lisp:nil)
                        (selection-id :initarg :selection-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-selections-list-member-selection-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backup-selections-list-member
                    'make-backup-selections-list-member))
 (common-lisp:defun make-backup-selections-list-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-arn creator-request-id
                     creation-date backup-plan-id selection-name selection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'backup-selections-list-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-selections-list-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-selections-list-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-id))
      (common-lisp:list
       (common-lisp:cons "SelectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-name))
      (common-lisp:list
       (common-lisp:cons "SelectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-selections-list-member))
   common-lisp:nil))
(common-lisp:deftype backup-vault-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-vault-events ()
   '(trivial-types:proper-list backup-vault-event))
 (common-lisp:defun |make-backup-vault-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup-vault-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype backup-vault-list ()
   '(trivial-types:proper-list backup-vault-list-member))
 (common-lisp:defun |make-backup-vault-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backup-vault-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass backup-vault-list-member common-lisp:nil
                       ((lock-date :initarg :lock-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-vault-list-member-lock-date
                         :initform common-lisp:nil)
                        (max-retention-days :initarg :max-retention-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %backup-vault-list-member-max-retention-days :initform
                         common-lisp:nil)
                        (min-retention-days :initarg :min-retention-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %backup-vault-list-member-min-retention-days :initform
                         common-lisp:nil)
                        (locked :initarg :locked :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %backup-vault-list-member-locked :initform
                         common-lisp:nil)
                        (number-of-recovery-points :initarg
                         :number-of-recovery-points :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %backup-vault-list-member-number-of-recovery-points
                         :initform common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-vault-list-member-creator-request-id
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %backup-vault-list-member-encryption-key-arn :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %backup-vault-list-member-creation-date
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %backup-vault-list-member-backup-vault-arn :initform
                         common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %backup-vault-list-member-backup-vault-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backup-vault-list-member 'make-backup-vault-list-member))
 (common-lisp:defun make-backup-vault-list-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lock-date max-retention-days
                     min-retention-days locked number-of-recovery-points
                     creator-request-id encryption-key-arn creation-date
                     backup-vault-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'backup-vault-list-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-vault-list-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-vault-list-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-recovery-points))
      (common-lisp:list
       (common-lisp:cons "NumberOfRecoveryPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locked))
      (common-lisp:list
       (common-lisp:cons "Locked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-retention-days))
      (common-lisp:list
       (common-lisp:cons "MinRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retention-days))
      (common-lisp:list
       (common-lisp:cons "MaxRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-date))
      (common-lisp:list
       (common-lisp:cons "LockDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-vault-list-member))
   common-lisp:nil))
(common-lisp:deftype backup-vault-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass calculated-lifecycle common-lisp:nil
                       ((delete-at :initarg :delete-at :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %calculated-lifecycle-delete-at :initform
                         common-lisp:nil)
                        (move-to-cold-storage-at :initarg
                         :move-to-cold-storage-at :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %calculated-lifecycle-move-to-cold-storage-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'calculated-lifecycle 'make-calculated-lifecycle))
 (common-lisp:defun make-calculated-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-at move-to-cold-storage-at)
   (common-lisp:apply #'common-lisp:make-instance 'calculated-lifecycle
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculated-lifecycle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculated-lifecycle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-at))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-at))
      (common-lisp:list
       (common-lisp:cons "DeleteAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculated-lifecycle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-legal-hold-input common-lisp:nil
                       ((retain-record-in-days :initarg :retain-record-in-days
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %cancel-legal-hold-input-retain-record-in-days
                         :initform common-lisp:nil)
                        (cancel-description :initarg :cancel-description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cancel-legal-hold-input-cancel-description
                         :initform
                         (common-lisp:error ":cancel-description is required"))
                        (legal-hold-id :initarg :legal-hold-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cancel-legal-hold-input-legal-hold-id
                         :initform
                         (common-lisp:error ":legal-hold-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-legal-hold-input 'make-cancel-legal-hold-input))
 (common-lisp:defun make-cancel-legal-hold-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retain-record-in-days cancel-description
                     legal-hold-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-legal-hold-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-legal-hold-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-legal-hold-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-legal-hold-output 'make-cancel-legal-hold-output))
 (common-lisp:defun make-cancel-legal-hold-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-resource-id-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-compliance-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((condition-value :initarg :condition-value :type
                         (common-lisp:or condition-value common-lisp:null)
                         :accessor %condition-condition-value :initform
                         (common-lisp:error ":condition-value is required"))
                        (condition-key :initarg :condition-key :type
                         (common-lisp:or condition-key common-lisp:null)
                         :accessor %condition-condition-key :initform
                         (common-lisp:error ":condition-key is required"))
                        (condition-type :initarg :condition-type :type
                         (common-lisp:or condition-type common-lisp:null)
                         :accessor %condition-condition-type :initform
                         (common-lisp:error ":condition-type is required"))))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defun make-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key condition-value condition-key
                     condition-type)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition-type))
      (common-lisp:list
       (common-lisp:cons "ConditionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition-key))
      (common-lisp:list
       (common-lisp:cons "ConditionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition-value))
      (common-lisp:list
       (common-lisp:cons "ConditionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype condition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass condition-parameter common-lisp:nil
                       ((condition-value :initarg :condition-value :type
                         (common-lisp:or condition-value common-lisp:null)
                         :accessor %condition-parameter-condition-value
                         :initform common-lisp:nil)
                        (condition-key :initarg :condition-key :type
                         (common-lisp:or condition-key common-lisp:null)
                         :accessor %condition-parameter-condition-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'condition-parameter 'make-condition-parameter))
 (common-lisp:defun make-condition-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key condition-value condition-key)
   (common-lisp:apply #'common-lisp:make-instance 'condition-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition-key))
      (common-lisp:list
       (common-lisp:cons "ConditionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition-value))
      (common-lisp:list
       (common-lisp:cons "ConditionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype condition-parameters ()
   '(trivial-types:proper-list condition-parameter))
 (common-lisp:defun |make-condition-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list condition-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition-type () 'common-lisp:string)
(common-lisp:deftype condition-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conditions common-lisp:nil
                       ((string-not-like :initarg :string-not-like :type
                         (common-lisp:or condition-parameters common-lisp:null)
                         :accessor %conditions-string-not-like :initform
                         common-lisp:nil)
                        (string-like :initarg :string-like :type
                         (common-lisp:or condition-parameters common-lisp:null)
                         :accessor %conditions-string-like :initform
                         common-lisp:nil)
                        (string-not-equals :initarg :string-not-equals :type
                         (common-lisp:or condition-parameters common-lisp:null)
                         :accessor %conditions-string-not-equals :initform
                         common-lisp:nil)
                        (string-equals :initarg :string-equals :type
                         (common-lisp:or condition-parameters common-lisp:null)
                         :accessor %conditions-string-equals :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'conditions 'make-conditions))
 (common-lisp:defun make-conditions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key string-not-like string-like
                     string-not-equals string-equals)
   (common-lisp:apply #'common-lisp:make-instance 'conditions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conditions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conditions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-equals))
      (common-lisp:list
       (common-lisp:cons "StringEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-not-equals))
      (common-lisp:list
       (common-lisp:cons "StringNotEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-like))
      (common-lisp:list
       (common-lisp:cons "StringLike"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-not-like))
      (common-lisp:list
       (common-lisp:cons "StringNotLike"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conditions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       conflict-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       conflict-exception-context)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-message 'conflict-exception-type
                    'conflict-exception-context)))
(common-lisp:progn
 (common-lisp:defclass control-input-parameter common-lisp:nil
                       ((parameter-value :initarg :parameter-value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %control-input-parameter-parameter-value
                         :initform common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor %control-input-parameter-parameter-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'control-input-parameter 'make-control-input-parameter))
 (common-lisp:defun make-control-input-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-value parameter-name)
   (common-lisp:apply #'common-lisp:make-instance 'control-input-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-input-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-input-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-input-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-input-parameters ()
   '(trivial-types:proper-list control-input-parameter))
 (common-lisp:defun |make-control-input-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-input-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass control-scope common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |stringMap| common-lisp:null)
                         :accessor %control-scope-tags :initform
                         common-lisp:nil)
                        (compliance-resource-types :initarg
                         :compliance-resource-types :type
                         (common-lisp:or resource-type-list common-lisp:null)
                         :accessor %control-scope-compliance-resource-types
                         :initform common-lisp:nil)
                        (compliance-resource-ids :initarg
                         :compliance-resource-ids :type
                         (common-lisp:or compliance-resource-id-list
                                         common-lisp:null)
                         :accessor %control-scope-compliance-resource-ids
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'control-scope 'make-control-scope))
 (common-lisp:defun make-control-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags compliance-resource-types
                     compliance-resource-ids)
   (common-lisp:apply #'common-lisp:make-instance 'control-scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-ids))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-types))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-action common-lisp:nil
                       ((destination-backup-vault-arn :initarg
                         :destination-backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %copy-action-destination-backup-vault-arn :initform
                         (common-lisp:error
                          ":destination-backup-vault-arn is required"))
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %copy-action-lifecycle :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'copy-action 'make-copy-action))
 (common-lisp:defun make-copy-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-backup-vault-arn lifecycle)
   (common-lisp:apply #'common-lisp:make-instance 'copy-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype copy-actions () '(trivial-types:proper-list copy-action))
 (common-lisp:defun |make-copy-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list copy-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass copy-job common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-resource-name :initform
                         common-lisp:nil)
                        (child-jobs-in-state :initarg :child-jobs-in-state
                         :type
                         (common-lisp:or copy-job-child-jobs-in-state
                                         common-lisp:null)
                         :accessor %copy-job-child-jobs-in-state :initform
                         common-lisp:nil)
                        (number-of-child-jobs :initarg :number-of-child-jobs
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %copy-job-number-of-child-jobs :initform
                         common-lisp:nil)
                        (composite-member-identifier :initarg
                         :composite-member-identifier :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-composite-member-identifier
                         :initform common-lisp:nil)
                        (is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %copy-job-is-parent :initform
                         common-lisp:nil)
                        (parent-job-id :initarg :parent-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-parent-job-id :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %copy-job-resource-type :initform
                         common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or recovery-point-creator
                                         common-lisp:null)
                         :accessor %copy-job-created-by :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %copy-job-iam-role-arn :initform
                         common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %copy-job-backup-size-in-bytes :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-status-message :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or copy-job-state common-lisp:null)
                         :accessor %copy-job-state :initform common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-completion-date :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-creation-date :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %copy-job-resource-arn :initform common-lisp:nil)
                        (destination-recovery-point-arn :initarg
                         :destination-recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %copy-job-destination-recovery-point-arn :initform
                         common-lisp:nil)
                        (destination-backup-vault-arn :initarg
                         :destination-backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %copy-job-destination-backup-vault-arn :initform
                         common-lisp:nil)
                        (source-recovery-point-arn :initarg
                         :source-recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %copy-job-source-recovery-point-arn :initform
                         common-lisp:nil)
                        (source-backup-vault-arn :initarg
                         :source-backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %copy-job-source-backup-vault-arn :initform
                         common-lisp:nil)
                        (copy-job-id :initarg :copy-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-job-copy-job-id :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %copy-job-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'copy-job 'make-copy-job))
 (common-lisp:defun make-copy-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name child-jobs-in-state
                     number-of-child-jobs composite-member-identifier is-parent
                     parent-job-id resource-type created-by iam-role-arn
                     backup-size-in-bytes status-message state completion-date
                     creation-date resource-arn destination-recovery-point-arn
                     destination-backup-vault-arn source-recovery-point-arn
                     source-backup-vault-arn copy-job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'copy-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-job-id))
      (common-lisp:list
       (common-lisp:cons "CopyJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "SourceRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-job-id))
      (common-lisp:list
       (common-lisp:cons "ParentJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-member-identifier))
      (common-lisp:list
       (common-lisp:cons "CompositeMemberIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-child-jobs))
      (common-lisp:list
       (common-lisp:cons "NumberOfChildJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-jobs-in-state))
      (common-lisp:list
       (common-lisp:cons "ChildJobsInState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype copy-job-child-jobs-in-state () 'common-lisp:hash-table)
 (common-lisp:defun |make-copy-job-child-jobs-in-state|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype copy-job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype copy-jobs-list () '(trivial-types:proper-list copy-job))
 (common-lisp:defun |make-copy-jobs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list copy-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-backup-plan-input common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-backup-plan-input-creator-request-id
                         :initform common-lisp:nil)
                        (backup-plan-tags :initarg :backup-plan-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-backup-plan-input-backup-plan-tags :initform
                         common-lisp:nil)
                        (backup-plan :initarg :backup-plan :type
                         (common-lisp:or backup-plan-input common-lisp:null)
                         :accessor %create-backup-plan-input-backup-plan
                         :initform
                         (common-lisp:error ":backup-plan is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backup-plan-input 'make-create-backup-plan-input))
 (common-lisp:defun make-create-backup-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creator-request-id backup-plan-tags
                     backup-plan)
   (common-lisp:apply #'common-lisp:make-instance 'create-backup-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan))
      (common-lisp:list
       (common-lisp:cons "BackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-tags))
      (common-lisp:list
       (common-lisp:cons "BackupPlanTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backup-plan-output common-lisp:nil
                       ((advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or advanced-backup-settings
                                         common-lisp:null)
                         :accessor
                         %create-backup-plan-output-advanced-backup-settings
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-backup-plan-output-version-id
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-backup-plan-output-creation-date
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-backup-plan-output-backup-plan-arn :initform
                         common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-backup-plan-output-backup-plan-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backup-plan-output
                    'make-create-backup-plan-output))
 (common-lisp:defun make-create-backup-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-backup-settings version-id
                     creation-date backup-plan-arn backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backup-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backup-selection-input common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-backup-selection-input-creator-request-id
                         :initform common-lisp:nil)
                        (backup-selection :initarg :backup-selection :type
                         (common-lisp:or backup-selection common-lisp:null)
                         :accessor
                         %create-backup-selection-input-backup-selection
                         :initform
                         (common-lisp:error ":backup-selection is required"))
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-backup-selection-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backup-selection-input
                    'make-create-backup-selection-input))
 (common-lisp:defun make-create-backup-selection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creator-request-id backup-selection
                     backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backup-selection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-selection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-selection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-selection))
      (common-lisp:list
       (common-lisp:cons "BackupSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-selection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backup-selection-output common-lisp:nil
                       ((creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-backup-selection-output-creation-date
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-backup-selection-output-backup-plan-id
                         :initform common-lisp:nil)
                        (selection-id :initarg :selection-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-backup-selection-output-selection-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backup-selection-output
                    'make-create-backup-selection-output))
 (common-lisp:defun make-create-backup-selection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date backup-plan-id
                     selection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backup-selection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-selection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-selection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-id))
      (common-lisp:list
       (common-lisp:cons "SelectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-selection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backup-vault-input common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-backup-vault-input-creator-request-id
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-backup-vault-input-encryption-key-arn
                         :initform common-lisp:nil)
                        (backup-vault-tags :initarg :backup-vault-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-backup-vault-input-backup-vault-tags :initform
                         common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %create-backup-vault-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backup-vault-input
                    'make-create-backup-vault-input))
 (common-lisp:defun make-create-backup-vault-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creator-request-id encryption-key-arn
                     backup-vault-tags backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-backup-vault-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-vault-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-tags))
      (common-lisp:list
       (common-lisp:cons "BackupVaultTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-vault-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backup-vault-output common-lisp:nil
                       ((creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-backup-vault-output-creation-date
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-backup-vault-output-backup-vault-arn :initform
                         common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %create-backup-vault-output-backup-vault-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backup-vault-output
                    'make-create-backup-vault-output))
 (common-lisp:defun make-create-backup-vault-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date backup-vault-arn
                     backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-backup-vault-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-vault-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-vault-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-vault-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-framework-input common-lisp:nil
                       ((framework-tags :initarg :framework-tags :type
                         (common-lisp:or |stringMap| common-lisp:null)
                         :accessor %create-framework-input-framework-tags
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-framework-input-idempotency-token
                         :initform common-lisp:nil)
                        (framework-controls :initarg :framework-controls :type
                         (common-lisp:or framework-controls common-lisp:null)
                         :accessor %create-framework-input-framework-controls
                         :initform
                         (common-lisp:error ":framework-controls is required"))
                        (framework-description :initarg :framework-description
                         :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         %create-framework-input-framework-description
                         :initform common-lisp:nil)
                        (framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %create-framework-input-framework-name
                         :initform
                         (common-lisp:error ":framework-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-framework-input 'make-create-framework-input))
 (common-lisp:defun make-create-framework-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framework-tags idempotency-token
                     framework-controls framework-description framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-framework-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-framework-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-framework-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "FrameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-description))
      (common-lisp:list
       (common-lisp:cons "FrameworkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-controls))
      (common-lisp:list
       (common-lisp:cons "FrameworkControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-tags))
      (common-lisp:list
       (common-lisp:cons "FrameworkTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-framework-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-framework-output common-lisp:nil
                       ((framework-arn :initarg :framework-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-framework-output-framework-arn :initform
                         common-lisp:nil)
                        (framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %create-framework-output-framework-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-framework-output 'make-create-framework-output))
 (common-lisp:defun make-create-framework-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framework-arn framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-framework-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-framework-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-framework-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "FrameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-arn))
      (common-lisp:list
       (common-lisp:cons "FrameworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-framework-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-legal-hold-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-legal-hold-input-tags :initform
                         common-lisp:nil)
                        (recovery-point-selection :initarg
                         :recovery-point-selection :type
                         (common-lisp:or recovery-point-selection
                                         common-lisp:null)
                         :accessor
                         %create-legal-hold-input-recovery-point-selection
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-input-idempotency-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-input-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (title :initarg :title :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-input-title :initform
                         (common-lisp:error ":title is required"))))
 (common-lisp:export
  (common-lisp:list 'create-legal-hold-input 'make-create-legal-hold-input))
 (common-lisp:defun make-create-legal-hold-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags recovery-point-selection
                     idempotency-token description title)
   (common-lisp:apply #'common-lisp:make-instance 'create-legal-hold-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-legal-hold-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-point-selection))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-legal-hold-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-legal-hold-output common-lisp:nil
                       ((recovery-point-selection :initarg
                         :recovery-point-selection :type
                         (common-lisp:or recovery-point-selection
                                         common-lisp:null)
                         :accessor
                         %create-legal-hold-output-recovery-point-selection
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-output-creation-date
                         :initform common-lisp:nil)
                        (legal-hold-arn :initarg :legal-hold-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-legal-hold-output-legal-hold-arn :initform
                         common-lisp:nil)
                        (legal-hold-id :initarg :legal-hold-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-output-legal-hold-id
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-output-description
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or legal-hold-status common-lisp:null)
                         :accessor %create-legal-hold-output-status :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-legal-hold-output-title :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-legal-hold-output 'make-create-legal-hold-output))
 (common-lisp:defun make-create-legal-hold-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-selection creation-date
                     legal-hold-arn legal-hold-id description status title)
   (common-lisp:apply #'common-lisp:make-instance 'create-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold-id))
      (common-lisp:list
       (common-lisp:cons "LegalHoldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold-arn))
      (common-lisp:list
       (common-lisp:cons "LegalHoldArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-point-selection))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-report-plan-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-report-plan-input-idempotency-token
                         :initform common-lisp:nil)
                        (report-plan-tags :initarg :report-plan-tags :type
                         (common-lisp:or |stringMap| common-lisp:null)
                         :accessor %create-report-plan-input-report-plan-tags
                         :initform common-lisp:nil)
                        (report-setting :initarg :report-setting :type
                         (common-lisp:or report-setting common-lisp:null)
                         :accessor %create-report-plan-input-report-setting
                         :initform
                         (common-lisp:error ":report-setting is required"))
                        (report-delivery-channel :initarg
                         :report-delivery-channel :type
                         (common-lisp:or report-delivery-channel
                                         common-lisp:null)
                         :accessor
                         %create-report-plan-input-report-delivery-channel
                         :initform
                         (common-lisp:error
                          ":report-delivery-channel is required"))
                        (report-plan-description :initarg
                         :report-plan-description :type
                         (common-lisp:or report-plan-description
                                         common-lisp:null)
                         :accessor
                         %create-report-plan-input-report-plan-description
                         :initform common-lisp:nil)
                        (report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %create-report-plan-input-report-plan-name
                         :initform
                         (common-lisp:error ":report-plan-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-report-plan-input 'make-create-report-plan-input))
 (common-lisp:defun make-create-report-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token report-plan-tags
                     report-setting report-delivery-channel
                     report-plan-description report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-report-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-report-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-report-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-name))
      (common-lisp:list
       (common-lisp:cons "ReportPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-plan-description))
      (common-lisp:list
       (common-lisp:cons "ReportPlanDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-delivery-channel))
      (common-lisp:list
       (common-lisp:cons "ReportDeliveryChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-setting))
      (common-lisp:list
       (common-lisp:cons "ReportSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-tags))
      (common-lisp:list
       (common-lisp:cons "ReportPlanTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-report-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-report-plan-output common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-report-plan-output-creation-time
                         :initform common-lisp:nil)
                        (report-plan-arn :initarg :report-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-report-plan-output-report-plan-arn :initform
                         common-lisp:nil)
                        (report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %create-report-plan-output-report-plan-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-report-plan-output
                    'make-create-report-plan-output))
 (common-lisp:defun make-create-report-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time report-plan-arn
                     report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-report-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-report-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-report-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-name))
      (common-lisp:list
       (common-lisp:cons "ReportPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-arn))
      (common-lisp:list
       (common-lisp:cons "ReportPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-report-plan-output))
   common-lisp:nil))
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass date-range common-lisp:nil
                       ((to-date :initarg :to-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %date-range-to-date :initform
                         (common-lisp:error ":to-date is required"))
                        (from-date :initarg :from-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %date-range-from-date :initform
                         (common-lisp:error ":from-date is required"))))
 (common-lisp:export (common-lisp:list 'date-range 'make-date-range))
 (common-lisp:defun make-date-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key to-date from-date)
   (common-lisp:apply #'common-lisp:make-instance 'date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-date))
      (common-lisp:list
       (common-lisp:cons "FromDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-date))
      (common-lisp:list
       (common-lisp:cons "ToDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-plan-input common-lisp:nil
                       ((backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-backup-plan-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-plan-input 'make-delete-backup-plan-input))
 (common-lisp:defun make-delete-backup-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-plan-output common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-backup-plan-output-version-id
                         :initform common-lisp:nil)
                        (deletion-date :initarg :deletion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-backup-plan-output-deletion-date
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-backup-plan-output-backup-plan-arn :initform
                         common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-backup-plan-output-backup-plan-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-backup-plan-output
                    'make-delete-backup-plan-output))
 (common-lisp:defun make-delete-backup-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id deletion-date backup-plan-arn
                     backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-selection-input common-lisp:nil
                       ((selection-id :initarg :selection-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-backup-selection-input-selection-id
                         :initform
                         (common-lisp:error ":selection-id is required"))
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-backup-selection-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-selection-input
                    'make-delete-backup-selection-input))
 (common-lisp:defun make-delete-backup-selection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selection-id backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backup-selection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-selection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-selection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-selection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-vault-access-policy-input common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %delete-backup-vault-access-policy-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-vault-access-policy-input
                    'make-delete-backup-vault-access-policy-input))
 (common-lisp:defun make-delete-backup-vault-access-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backup-vault-access-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-access-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-access-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-access-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-vault-input common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-backup-vault-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-vault-input
                    'make-delete-backup-vault-input))
 (common-lisp:defun make-delete-backup-vault-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-vault-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-vault-lock-configuration-input
                       common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %delete-backup-vault-lock-configuration-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-vault-lock-configuration-input
                    'make-delete-backup-vault-lock-configuration-input))
 (common-lisp:defun make-delete-backup-vault-lock-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backup-vault-lock-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-lock-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-lock-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-lock-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-vault-notifications-input common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %delete-backup-vault-notifications-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-vault-notifications-input
                    'make-delete-backup-vault-notifications-input))
 (common-lisp:defun make-delete-backup-vault-notifications-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backup-vault-notifications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-vault-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-framework-input common-lisp:nil
                       ((framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %delete-framework-input-framework-name
                         :initform
                         (common-lisp:error ":framework-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-framework-input 'make-delete-framework-input))
 (common-lisp:defun make-delete-framework-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-framework-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-framework-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-framework-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-framework-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-recovery-point-input common-lisp:nil
                       ((recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-recovery-point-input-recovery-point-arn
                         :initform
                         (common-lisp:error ":recovery-point-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %delete-recovery-point-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-recovery-point-input
                    'make-delete-recovery-point-input))
 (common-lisp:defun make-delete-recovery-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-recovery-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-recovery-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-recovery-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-recovery-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-report-plan-input common-lisp:nil
                       ((report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %delete-report-plan-input-report-plan-name
                         :initform
                         (common-lisp:error ":report-plan-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-report-plan-input 'make-delete-report-plan-input))
 (common-lisp:defun make-delete-report-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-report-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-failure-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       dependency-failure-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       dependency-failure-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       dependency-failure-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       dependency-failure-exception-context)))
 (common-lisp:export
  (common-lisp:list 'dependency-failure-exception
                    'dependency-failure-exception-code
                    'dependency-failure-exception-message
                    'dependency-failure-exception-type
                    'dependency-failure-exception-context)))
(common-lisp:progn
 (common-lisp:defclass describe-backup-job-input common-lisp:nil
                       ((backup-job-id :initarg :backup-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-input-backup-job-id
                         :initform
                         (common-lisp:error ":backup-job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-backup-job-input
                    'make-describe-backup-job-input))
 (common-lisp:defun make-describe-backup-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backup-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backup-job-output common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-resource-name
                         :initform common-lisp:nil)
                        (child-jobs-in-state :initarg :child-jobs-in-state
                         :type
                         (common-lisp:or backup-job-child-jobs-in-state
                                         common-lisp:null)
                         :accessor
                         %describe-backup-job-output-child-jobs-in-state
                         :initform common-lisp:nil)
                        (number-of-child-jobs :initarg :number-of-child-jobs
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %describe-backup-job-output-number-of-child-jobs
                         :initform common-lisp:nil)
                        (is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %describe-backup-job-output-is-parent
                         :initform common-lisp:nil)
                        (parent-job-id :initarg :parent-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-parent-job-id
                         :initform common-lisp:nil)
                        (backup-type :initarg :backup-type :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-backup-type
                         :initform common-lisp:nil)
                        (backup-options :initarg :backup-options :type
                         (common-lisp:or backup-options common-lisp:null)
                         :accessor %describe-backup-job-output-backup-options
                         :initform common-lisp:nil)
                        (start-by :initarg :start-by :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-start-by
                         :initform common-lisp:nil)
                        (expected-completion-date :initarg
                         :expected-completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-backup-job-output-expected-completion-date
                         :initform common-lisp:nil)
                        (bytes-transferred :initarg :bytes-transferred :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %describe-backup-job-output-bytes-transferred
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %describe-backup-job-output-resource-type
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or recovery-point-creator
                                         common-lisp:null)
                         :accessor %describe-backup-job-output-created-by
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %describe-backup-job-output-iam-role-arn
                         :initform common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %describe-backup-job-output-backup-size-in-bytes
                         :initform common-lisp:nil)
                        (percent-done :initarg :percent-done :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-percent-done
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-status-message
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or backup-job-state common-lisp:null)
                         :accessor %describe-backup-job-output-state :initform
                         common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-completion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-creation-date
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-backup-job-output-resource-arn :initform
                         common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-backup-job-output-recovery-point-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-backup-job-output-backup-vault-arn :initform
                         common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %describe-backup-job-output-backup-vault-name
                         :initform common-lisp:nil)
                        (backup-job-id :initarg :backup-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-job-output-backup-job-id
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-backup-job-output-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-backup-job-output
                    'make-describe-backup-job-output))
 (common-lisp:defun make-describe-backup-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name child-jobs-in-state
                     number-of-child-jobs is-parent parent-job-id backup-type
                     backup-options start-by expected-completion-date
                     bytes-transferred resource-type created-by iam-role-arn
                     backup-size-in-bytes percent-done status-message state
                     completion-date creation-date resource-arn
                     recovery-point-arn backup-vault-arn backup-vault-name
                     backup-job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backup-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-job-id))
      (common-lisp:list
       (common-lisp:cons "BackupJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-done))
      (common-lisp:list
       (common-lisp:cons "PercentDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-transferred))
      (common-lisp:list
       (common-lisp:cons "BytesTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-completion-date))
      (common-lisp:list
       (common-lisp:cons "ExpectedCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-by))
      (common-lisp:list
       (common-lisp:cons "StartBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-options))
      (common-lisp:list
       (common-lisp:cons "BackupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-type))
      (common-lisp:list
       (common-lisp:cons "BackupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-job-id))
      (common-lisp:list
       (common-lisp:cons "ParentJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-child-jobs))
      (common-lisp:list
       (common-lisp:cons "NumberOfChildJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-jobs-in-state))
      (common-lisp:list
       (common-lisp:cons "ChildJobsInState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backup-vault-input common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-backup-vault-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-backup-vault-input
                    'make-describe-backup-vault-input))
 (common-lisp:defun make-describe-backup-vault-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backup-vault-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-vault-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backup-vault-output common-lisp:nil
                       ((lock-date :initarg :lock-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-vault-output-lock-date
                         :initform common-lisp:nil)
                        (max-retention-days :initarg :max-retention-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %describe-backup-vault-output-max-retention-days
                         :initform common-lisp:nil)
                        (min-retention-days :initarg :min-retention-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %describe-backup-vault-output-min-retention-days
                         :initform common-lisp:nil)
                        (locked :initarg :locked :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-backup-vault-output-locked :initform
                         common-lisp:nil)
                        (number-of-recovery-points :initarg
                         :number-of-recovery-points :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %describe-backup-vault-output-number-of-recovery-points
                         :initform common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-backup-vault-output-creator-request-id
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-backup-vault-output-creation-date
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-backup-vault-output-encryption-key-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-backup-vault-output-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-backup-vault-output-backup-vault-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-backup-vault-output
                    'make-describe-backup-vault-output))
 (common-lisp:defun make-describe-backup-vault-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lock-date max-retention-days
                     min-retention-days locked number-of-recovery-points
                     creator-request-id creation-date encryption-key-arn
                     backup-vault-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backup-vault-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-vault-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-vault-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-recovery-points))
      (common-lisp:list
       (common-lisp:cons "NumberOfRecoveryPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locked))
      (common-lisp:list
       (common-lisp:cons "Locked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-retention-days))
      (common-lisp:list
       (common-lisp:cons "MinRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retention-days))
      (common-lisp:list
       (common-lisp:cons "MaxRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-date))
      (common-lisp:list
       (common-lisp:cons "LockDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backup-vault-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-copy-job-input common-lisp:nil
                       ((copy-job-id :initarg :copy-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-copy-job-input-copy-job-id
                         :initform
                         (common-lisp:error ":copy-job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-copy-job-input 'make-describe-copy-job-input))
 (common-lisp:defun make-describe-copy-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-copy-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-copy-job-output common-lisp:nil
                       ((copy-job :initarg :copy-job :type
                         (common-lisp:or copy-job common-lisp:null) :accessor
                         %describe-copy-job-output-copy-job :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-copy-job-output 'make-describe-copy-job-output))
 (common-lisp:defun make-describe-copy-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-job)
   (common-lisp:apply #'common-lisp:make-instance 'describe-copy-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-job))
      (common-lisp:list
       (common-lisp:cons "CopyJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-copy-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-framework-input common-lisp:nil
                       ((framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %describe-framework-input-framework-name
                         :initform
                         (common-lisp:error ":framework-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-framework-input 'make-describe-framework-input))
 (common-lisp:defun make-describe-framework-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-framework-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-framework-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-framework-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-framework-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-framework-output common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-framework-output-idempotency-token
                         :initform common-lisp:nil)
                        (framework-status :initarg :framework-status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-framework-output-framework-status
                         :initform common-lisp:nil)
                        (deployment-status :initarg :deployment-status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-framework-output-deployment-status
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-framework-output-creation-time
                         :initform common-lisp:nil)
                        (framework-controls :initarg :framework-controls :type
                         (common-lisp:or framework-controls common-lisp:null)
                         :accessor
                         %describe-framework-output-framework-controls
                         :initform common-lisp:nil)
                        (framework-description :initarg :framework-description
                         :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         %describe-framework-output-framework-description
                         :initform common-lisp:nil)
                        (framework-arn :initarg :framework-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-framework-output-framework-arn :initform
                         common-lisp:nil)
                        (framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %describe-framework-output-framework-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-framework-output
                    'make-describe-framework-output))
 (common-lisp:defun make-describe-framework-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token framework-status
                     deployment-status creation-time framework-controls
                     framework-description framework-arn framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-framework-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-framework-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-framework-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "FrameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-arn))
      (common-lisp:list
       (common-lisp:cons "FrameworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-description))
      (common-lisp:list
       (common-lisp:cons "FrameworkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-controls))
      (common-lisp:list
       (common-lisp:cons "FrameworkControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-status))
      (common-lisp:list
       (common-lisp:cons "FrameworkStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-framework-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-settings-input common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-global-settings-input
                    'make-describe-global-settings-input))
 (common-lisp:defun make-describe-global-settings-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-settings-output common-lisp:nil
                       ((last-update-time :initarg :last-update-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-global-settings-output-last-update-time
                         :initform common-lisp:nil)
                        (global-settings :initarg :global-settings :type
                         (common-lisp:or global-settings common-lisp:null)
                         :accessor
                         %describe-global-settings-output-global-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-global-settings-output
                    'make-describe-global-settings-output))
 (common-lisp:defun make-describe-global-settings-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-update-time global-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-settings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-settings))
      (common-lisp:list
       (common-lisp:cons "GlobalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-protected-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-protected-resource-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-protected-resource-input
                    'make-describe-protected-resource-input))
 (common-lisp:defun make-describe-protected-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-protected-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-protected-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-protected-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-protected-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-protected-resource-output common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-protected-resource-output-resource-name
                         :initform common-lisp:nil)
                        (last-backup-time :initarg :last-backup-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-protected-resource-output-last-backup-time
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %describe-protected-resource-output-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-protected-resource-output-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-protected-resource-output
                    'make-describe-protected-resource-output))
 (common-lisp:defun make-describe-protected-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name last-backup-time
                     resource-type resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-protected-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-protected-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-protected-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-backup-time))
      (common-lisp:list
       (common-lisp:cons "LastBackupTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-protected-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recovery-point-input common-lisp:nil
                       ((recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-input-recovery-point-arn
                         :initform
                         (common-lisp:error ":recovery-point-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %describe-recovery-point-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-point-input
                    'make-describe-recovery-point-input))
 (common-lisp:defun make-describe-recovery-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recovery-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recovery-point-output common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-resource-name
                         :initform common-lisp:nil)
                        (is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %describe-recovery-point-output-is-parent
                         :initform common-lisp:nil)
                        (composite-member-identifier :initarg
                         :composite-member-identifier :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-composite-member-identifier
                         :initform common-lisp:nil)
                        (parent-recovery-point-arn :initarg
                         :parent-recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-output-parent-recovery-point-arn
                         :initform common-lisp:nil)
                        (last-restore-time :initarg :last-restore-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-last-restore-time
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-storage-class
                         :initform common-lisp:nil)
                        (is-encrypted :initarg :is-encrypted :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %describe-recovery-point-output-is-encrypted
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-output-encryption-key-arn
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %describe-recovery-point-output-lifecycle :initform
                         common-lisp:nil)
                        (calculated-lifecycle :initarg :calculated-lifecycle
                         :type
                         (common-lisp:or calculated-lifecycle common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-calculated-lifecycle
                         :initform common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %describe-recovery-point-output-backup-size-in-bytes
                         :initform common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-completion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-creation-date
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or recovery-point-status
                                         common-lisp:null)
                         :accessor %describe-recovery-point-output-status
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %describe-recovery-point-output-iam-role-arn
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or recovery-point-creator
                                         common-lisp:null)
                         :accessor %describe-recovery-point-output-created-by
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-output-resource-arn :initform
                         common-lisp:nil)
                        (source-backup-vault-arn :initarg
                         :source-backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-output-source-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-output-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %describe-recovery-point-output-backup-vault-name
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recovery-point-output-recovery-point-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-point-output
                    'make-describe-recovery-point-output))
 (common-lisp:defun make-describe-recovery-point-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name is-parent
                     composite-member-identifier parent-recovery-point-arn
                     last-restore-time storage-class is-encrypted
                     encryption-key-arn lifecycle calculated-lifecycle
                     backup-size-in-bytes completion-date creation-date
                     status-message status iam-role-arn created-by
                     resource-type resource-arn source-backup-vault-arn
                     backup-vault-arn backup-vault-name recovery-point-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recovery-point-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-point-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-lifecycle))
      (common-lisp:list
       (common-lisp:cons "CalculatedLifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-encrypted))
      (common-lisp:list
       (common-lisp:cons "IsEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-restore-time))
      (common-lisp:list
       (common-lisp:cons "LastRestoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "ParentRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-member-identifier))
      (common-lisp:list
       (common-lisp:cons "CompositeMemberIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-point-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-region-settings-input common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-region-settings-input
                    'make-describe-region-settings-input))
 (common-lisp:defun make-describe-region-settings-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-region-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-region-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-region-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-region-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-region-settings-output common-lisp:nil
                       ((resource-type-management-preference :initarg
                         :resource-type-management-preference :type
                         (common-lisp:or resource-type-management-preference
                                         common-lisp:null)
                         :accessor
                         %describe-region-settings-output-resource-type-management-preference
                         :initform common-lisp:nil)
                        (resource-type-opt-in-preference :initarg
                         :resource-type-opt-in-preference :type
                         (common-lisp:or resource-type-opt-in-preference
                                         common-lisp:null)
                         :accessor
                         %describe-region-settings-output-resource-type-opt-in-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-region-settings-output
                    'make-describe-region-settings-output))
 (common-lisp:defun make-describe-region-settings-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type-management-preference
                     resource-type-opt-in-preference)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-region-settings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-region-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-region-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-type-opt-in-preference))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeOptInPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-type-management-preference))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeManagementPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-region-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-report-job-input common-lisp:nil
                       ((report-job-id :initarg :report-job-id :type
                         (common-lisp:or report-job-id common-lisp:null)
                         :accessor %describe-report-job-input-report-job-id
                         :initform
                         (common-lisp:error ":report-job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-report-job-input
                    'make-describe-report-job-input))
 (common-lisp:defun make-describe-report-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-report-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-report-job-output common-lisp:nil
                       ((report-job :initarg :report-job :type
                         (common-lisp:or report-job common-lisp:null) :accessor
                         %describe-report-job-output-report-job :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-report-job-output
                    'make-describe-report-job-output))
 (common-lisp:defun make-describe-report-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-job)
   (common-lisp:apply #'common-lisp:make-instance 'describe-report-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-job))
      (common-lisp:list
       (common-lisp:cons "ReportJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-report-plan-input common-lisp:nil
                       ((report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %describe-report-plan-input-report-plan-name
                         :initform
                         (common-lisp:error ":report-plan-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-report-plan-input
                    'make-describe-report-plan-input))
 (common-lisp:defun make-describe-report-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-report-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-report-plan-output common-lisp:nil
                       ((report-plan :initarg :report-plan :type
                         (common-lisp:or report-plan common-lisp:null)
                         :accessor %describe-report-plan-output-report-plan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-report-plan-output
                    'make-describe-report-plan-output))
 (common-lisp:defun make-describe-report-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-plan)
   (common-lisp:apply #'common-lisp:make-instance 'describe-report-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan))
      (common-lisp:list
       (common-lisp:cons "ReportPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-report-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-restore-job-input common-lisp:nil
                       ((restore-job-id :initarg :restore-job-id :type
                         (common-lisp:or restore-job-id common-lisp:null)
                         :accessor %describe-restore-job-input-restore-job-id
                         :initform
                         (common-lisp:error ":restore-job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-restore-job-input
                    'make-describe-restore-job-input))
 (common-lisp:defun make-describe-restore-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restore-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-restore-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-restore-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-restore-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-restore-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-restore-job-output common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %describe-restore-job-output-resource-type
                         :initform common-lisp:nil)
                        (created-resource-arn :initarg :created-resource-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-restore-job-output-created-resource-arn
                         :initform common-lisp:nil)
                        (expected-completion-time-minutes :initarg
                         :expected-completion-time-minutes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %describe-restore-job-output-expected-completion-time-minutes
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %describe-restore-job-output-iam-role-arn
                         :initform common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %describe-restore-job-output-backup-size-in-bytes
                         :initform common-lisp:nil)
                        (percent-done :initarg :percent-done :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-restore-job-output-percent-done
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-restore-job-output-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or restore-job-status common-lisp:null)
                         :accessor %describe-restore-job-output-status
                         :initform common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-restore-job-output-completion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-restore-job-output-creation-date
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-restore-job-output-recovery-point-arn
                         :initform common-lisp:nil)
                        (restore-job-id :initarg :restore-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-restore-job-output-restore-job-id
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-restore-job-output-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-restore-job-output
                    'make-describe-restore-job-output))
 (common-lisp:defun make-describe-restore-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type created-resource-arn
                     expected-completion-time-minutes iam-role-arn
                     backup-size-in-bytes percent-done status-message status
                     completion-date creation-date recovery-point-arn
                     restore-job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-restore-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-restore-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-restore-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-job-id))
      (common-lisp:list
       (common-lisp:cons "RestoreJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-done))
      (common-lisp:list
       (common-lisp:cons "PercentDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-completion-time-minutes))
      (common-lisp:list
       (common-lisp:cons "ExpectedCompletionTimeMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-resource-arn))
      (common-lisp:list
       (common-lisp:cons "CreatedResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-restore-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-recovery-point-from-parent-input
                       common-lisp:nil
                       ((recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-recovery-point-from-parent-input-recovery-point-arn
                         :initform
                         (common-lisp:error ":recovery-point-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %disassociate-recovery-point-from-parent-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-recovery-point-from-parent-input
                    'make-disassociate-recovery-point-from-parent-input))
 (common-lisp:defun make-disassociate-recovery-point-from-parent-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-recovery-point-from-parent-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-recovery-point-from-parent-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-recovery-point-from-parent-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-recovery-point-from-parent-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-recovery-point-input common-lisp:nil
                       ((recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-recovery-point-input-recovery-point-arn
                         :initform
                         (common-lisp:error ":recovery-point-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %disassociate-recovery-point-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-recovery-point-input
                    'make-disassociate-recovery-point-input))
 (common-lisp:defun make-disassociate-recovery-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-recovery-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-recovery-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-recovery-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-recovery-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-backup-plan-template-input common-lisp:nil
                       ((backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %export-backup-plan-template-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-backup-plan-template-input
                    'make-export-backup-plan-template-input))
 (common-lisp:defun make-export-backup-plan-template-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-backup-plan-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-backup-plan-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-backup-plan-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-backup-plan-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-backup-plan-template-output common-lisp:nil
                       ((backup-plan-template-json :initarg
                         :backup-plan-template-json :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %export-backup-plan-template-output-backup-plan-template-json
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-backup-plan-template-output
                    'make-export-backup-plan-template-output))
 (common-lisp:defun make-export-backup-plan-template-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-template-json)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-backup-plan-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-backup-plan-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-backup-plan-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-template-json))
      (common-lisp:list
       (common-lisp:cons "BackupPlanTemplateJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-backup-plan-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype format-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-format-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass framework common-lisp:nil
                       ((deployment-status :initarg :deployment-status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %framework-deployment-status :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %framework-creation-time :initform
                         common-lisp:nil)
                        (number-of-controls :initarg :number-of-controls :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %framework-number-of-controls :initform
                         common-lisp:nil)
                        (framework-description :initarg :framework-description
                         :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor %framework-framework-description :initform
                         common-lisp:nil)
                        (framework-arn :initarg :framework-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %framework-framework-arn :initform common-lisp:nil)
                        (framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %framework-framework-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'framework 'make-framework))
 (common-lisp:defun make-framework
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-status creation-time
                     number-of-controls framework-description framework-arn
                     framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'framework
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "FrameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-arn))
      (common-lisp:list
       (common-lisp:cons "FrameworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-description))
      (common-lisp:list
       (common-lisp:cons "FrameworkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-controls))
      (common-lisp:list
       (common-lisp:cons "NumberOfControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input framework))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass framework-control common-lisp:nil
                       ((control-scope :initarg :control-scope :type
                         (common-lisp:or control-scope common-lisp:null)
                         :accessor %framework-control-control-scope :initform
                         common-lisp:nil)
                        (control-input-parameters :initarg
                         :control-input-parameters :type
                         (common-lisp:or control-input-parameters
                                         common-lisp:null)
                         :accessor %framework-control-control-input-parameters
                         :initform common-lisp:nil)
                        (control-name :initarg :control-name :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor %framework-control-control-name :initform
                         (common-lisp:error ":control-name is required"))))
 (common-lisp:export
  (common-lisp:list 'framework-control 'make-framework-control))
 (common-lisp:defun make-framework-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-scope control-input-parameters
                     control-name)
   (common-lisp:apply #'common-lisp:make-instance 'framework-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input framework-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input framework-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-name))
      (common-lisp:list
       (common-lisp:cons "ControlName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-input-parameters))
      (common-lisp:list
       (common-lisp:cons "ControlInputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-scope))
      (common-lisp:list
       (common-lisp:cons "ControlScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input framework-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype framework-controls ()
   '(trivial-types:proper-list framework-control))
 (common-lisp:defun |make-framework-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list framework-control))
   aws-sdk/generator/shape::members))
(common-lisp:deftype framework-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype framework-list () '(trivial-types:proper-list framework))
 (common-lisp:defun |make-framework-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list framework))
   aws-sdk/generator/shape::members))
(common-lisp:deftype framework-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-backup-plan-from-jsoninput common-lisp:nil
                       ((backup-plan-template-json :initarg
                         :backup-plan-template-json :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-backup-plan-from-jsoninput-backup-plan-template-json
                         :initform
                         (common-lisp:error
                          ":backup-plan-template-json is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backup-plan-from-jsoninput
                    'make-get-backup-plan-from-jsoninput))
 (common-lisp:defun make-get-backup-plan-from-jsoninput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-template-json)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-plan-from-jsoninput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-jsoninput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-jsoninput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-template-json))
      (common-lisp:list
       (common-lisp:cons "BackupPlanTemplateJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-jsoninput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-plan-from-jsonoutput common-lisp:nil
                       ((backup-plan :initarg :backup-plan :type
                         (common-lisp:or backup-plan common-lisp:null)
                         :accessor %get-backup-plan-from-jsonoutput-backup-plan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backup-plan-from-jsonoutput
                    'make-get-backup-plan-from-jsonoutput))
 (common-lisp:defun make-get-backup-plan-from-jsonoutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-plan-from-jsonoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-jsonoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-jsonoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan))
      (common-lisp:list
       (common-lisp:cons "BackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-jsonoutput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-plan-from-template-input common-lisp:nil
                       ((backup-plan-template-id :initarg
                         :backup-plan-template-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-backup-plan-from-template-input-backup-plan-template-id
                         :initform
                         (common-lisp:error
                          ":backup-plan-template-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backup-plan-from-template-input
                    'make-get-backup-plan-from-template-input))
 (common-lisp:defun make-get-backup-plan-from-template-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-plan-from-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-plan-from-template-output common-lisp:nil
                       ((backup-plan-document :initarg :backup-plan-document
                         :type (common-lisp:or backup-plan common-lisp:null)
                         :accessor
                         %get-backup-plan-from-template-output-backup-plan-document
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backup-plan-from-template-output
                    'make-get-backup-plan-from-template-output))
 (common-lisp:defun make-get-backup-plan-from-template-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-document)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-plan-from-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-document))
      (common-lisp:list
       (common-lisp:cons "BackupPlanDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-from-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-plan-input common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-input-version-id :initform
                         common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backup-plan-input 'make-get-backup-plan-input))
 (common-lisp:defun make-get-backup-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backup-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-plan-output common-lisp:nil
                       ((advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or advanced-backup-settings
                                         common-lisp:null)
                         :accessor
                         %get-backup-plan-output-advanced-backup-settings
                         :initform common-lisp:nil)
                        (last-execution-date :initarg :last-execution-date
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-output-last-execution-date
                         :initform common-lisp:nil)
                        (deletion-date :initarg :deletion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-output-deletion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-output-creation-date
                         :initform common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-output-creator-request-id
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-output-version-id :initform
                         common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-backup-plan-output-backup-plan-arn :initform
                         common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-plan-output-backup-plan-id
                         :initform common-lisp:nil)
                        (backup-plan :initarg :backup-plan :type
                         (common-lisp:or backup-plan common-lisp:null)
                         :accessor %get-backup-plan-output-backup-plan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backup-plan-output 'make-get-backup-plan-output))
 (common-lisp:defun make-get-backup-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-backup-settings
                     last-execution-date deletion-date creation-date
                     creator-request-id version-id backup-plan-arn
                     backup-plan-id backup-plan)
   (common-lisp:apply #'common-lisp:make-instance 'get-backup-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan))
      (common-lisp:list
       (common-lisp:cons "BackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-selection-input common-lisp:nil
                       ((selection-id :initarg :selection-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-selection-input-selection-id
                         :initform
                         (common-lisp:error ":selection-id is required"))
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-selection-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backup-selection-input
                    'make-get-backup-selection-input))
 (common-lisp:defun make-get-backup-selection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selection-id backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backup-selection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-selection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-selection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-selection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-selection-output common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-backup-selection-output-creator-request-id
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-selection-output-creation-date
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-selection-output-backup-plan-id
                         :initform common-lisp:nil)
                        (selection-id :initarg :selection-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-backup-selection-output-selection-id
                         :initform common-lisp:nil)
                        (backup-selection :initarg :backup-selection :type
                         (common-lisp:or backup-selection common-lisp:null)
                         :accessor
                         %get-backup-selection-output-backup-selection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backup-selection-output
                    'make-get-backup-selection-output))
 (common-lisp:defun make-get-backup-selection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creator-request-id creation-date
                     backup-plan-id selection-id backup-selection)
   (common-lisp:apply #'common-lisp:make-instance 'get-backup-selection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-selection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-selection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-selection))
      (common-lisp:list
       (common-lisp:cons "BackupSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-id))
      (common-lisp:list
       (common-lisp:cons "SelectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-selection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-vault-access-policy-input common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %get-backup-vault-access-policy-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backup-vault-access-policy-input
                    'make-get-backup-vault-access-policy-input))
 (common-lisp:defun make-get-backup-vault-access-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-vault-access-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-access-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-access-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-access-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-vault-access-policy-output common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or iampolicy common-lisp:null) :accessor
                         %get-backup-vault-access-policy-output-policy
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-backup-vault-access-policy-output-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %get-backup-vault-access-policy-output-backup-vault-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backup-vault-access-policy-output
                    'make-get-backup-vault-access-policy-output))
 (common-lisp:defun make-get-backup-vault-access-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy backup-vault-arn
                     backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-vault-access-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-access-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-access-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-access-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-vault-notifications-input common-lisp:nil
                       ((backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %get-backup-vault-notifications-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backup-vault-notifications-input
                    'make-get-backup-vault-notifications-input))
 (common-lisp:defun make-get-backup-vault-notifications-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-vault-notifications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backup-vault-notifications-output common-lisp:nil
                       ((backup-vault-events :initarg :backup-vault-events
                         :type
                         (common-lisp:or backup-vault-events common-lisp:null)
                         :accessor
                         %get-backup-vault-notifications-output-backup-vault-events
                         :initform common-lisp:nil)
                        (snstopic-arn :initarg :snstopic-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-backup-vault-notifications-output-snstopic-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-backup-vault-notifications-output-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %get-backup-vault-notifications-output-backup-vault-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backup-vault-notifications-output
                    'make-get-backup-vault-notifications-output))
 (common-lisp:defun make-get-backup-vault-notifications-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-events snstopic-arn
                     backup-vault-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backup-vault-notifications-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "SNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-events))
      (common-lisp:list
       (common-lisp:cons "BackupVaultEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backup-vault-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-legal-hold-input common-lisp:nil
                       ((legal-hold-id :initarg :legal-hold-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-input-legal-hold-id
                         :initform
                         (common-lisp:error ":legal-hold-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-legal-hold-input 'make-get-legal-hold-input))
 (common-lisp:defun make-get-legal-hold-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key legal-hold-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-legal-hold-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-legal-hold-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-legal-hold-output common-lisp:nil
                       ((recovery-point-selection :initarg
                         :recovery-point-selection :type
                         (common-lisp:or recovery-point-selection
                                         common-lisp:null)
                         :accessor
                         %get-legal-hold-output-recovery-point-selection
                         :initform common-lisp:nil)
                        (retain-record-until :initarg :retain-record-until
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-retain-record-until
                         :initform common-lisp:nil)
                        (cancellation-date :initarg :cancellation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-cancellation-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-creation-date
                         :initform common-lisp:nil)
                        (legal-hold-arn :initarg :legal-hold-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-legal-hold-output-legal-hold-arn :initform
                         common-lisp:nil)
                        (legal-hold-id :initarg :legal-hold-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-legal-hold-id
                         :initform common-lisp:nil)
                        (cancel-description :initarg :cancel-description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-cancel-description
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-description :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or legal-hold-status common-lisp:null)
                         :accessor %get-legal-hold-output-status :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-legal-hold-output-title :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-legal-hold-output 'make-get-legal-hold-output))
 (common-lisp:defun make-get-legal-hold-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-selection
                     retain-record-until cancellation-date creation-date
                     legal-hold-arn legal-hold-id cancel-description
                     description status title)
   (common-lisp:apply #'common-lisp:make-instance 'get-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel-description))
      (common-lisp:list
       (common-lisp:cons "CancelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold-id))
      (common-lisp:list
       (common-lisp:cons "LegalHoldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold-arn))
      (common-lisp:list
       (common-lisp:cons "LegalHoldArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-date))
      (common-lisp:list
       (common-lisp:cons "CancellationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-record-until))
      (common-lisp:list
       (common-lisp:cons "RetainRecordUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-point-selection))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recovery-point-restore-metadata-input
                       common-lisp:nil
                       ((recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-recovery-point-restore-metadata-input-recovery-point-arn
                         :initform
                         (common-lisp:error ":recovery-point-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %get-recovery-point-restore-metadata-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-recovery-point-restore-metadata-input
                    'make-get-recovery-point-restore-metadata-input))
 (common-lisp:defun make-get-recovery-point-restore-metadata-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-arn backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-recovery-point-restore-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-restore-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-restore-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-restore-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recovery-point-restore-metadata-output
                       common-lisp:nil
                       ((restore-metadata :initarg :restore-metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %get-recovery-point-restore-metadata-output-restore-metadata
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-recovery-point-restore-metadata-output-recovery-point-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-recovery-point-restore-metadata-output-backup-vault-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-recovery-point-restore-metadata-output
                    'make-get-recovery-point-restore-metadata-output))
 (common-lisp:defun make-get-recovery-point-restore-metadata-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restore-metadata recovery-point-arn
                     backup-vault-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-recovery-point-restore-metadata-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-restore-metadata-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-restore-metadata-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-metadata))
      (common-lisp:list
       (common-lisp:cons "RestoreMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-restore-metadata-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-supported-resource-types-output common-lisp:nil
                       ((resource-types :initarg :resource-types :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor
                         %get-supported-resource-types-output-resource-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-supported-resource-types-output
                    'make-get-supported-resource-types-output))
 (common-lisp:defun make-get-supported-resource-types-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-supported-resource-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-supported-resource-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-supported-resource-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-supported-resource-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-settings () 'common-lisp:hash-table)
 (common-lisp:defun |make-global-settings|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype global-settings-name () 'common-lisp:string)
(common-lisp:deftype global-settings-value () 'common-lisp:string)
(common-lisp:deftype iampolicy () 'common-lisp:string)
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-parameter-value-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       invalid-parameter-value-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       invalid-parameter-value-exception-context)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-code
                    'invalid-parameter-value-exception-message
                    'invalid-parameter-value-exception-type
                    'invalid-parameter-value-exception-context)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-request-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       invalid-request-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       invalid-request-exception-context)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception 'invalid-request-exception-code
                    'invalid-request-exception-message
                    'invalid-request-exception-type
                    'invalid-request-exception-context)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-resource-state-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-state-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       invalid-resource-state-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       invalid-resource-state-exception-context)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-state-exception
                    'invalid-resource-state-exception-code
                    'invalid-resource-state-exception-message
                    'invalid-resource-state-exception-type
                    'invalid-resource-state-exception-context)))
(common-lisp:deftype is-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass legal-hold common-lisp:nil
                       ((cancellation-date :initarg :cancellation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %legal-hold-cancellation-date :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %legal-hold-creation-date :initform
                         common-lisp:nil)
                        (legal-hold-arn :initarg :legal-hold-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %legal-hold-legal-hold-arn :initform common-lisp:nil)
                        (legal-hold-id :initarg :legal-hold-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %legal-hold-legal-hold-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %legal-hold-description :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or legal-hold-status common-lisp:null)
                         :accessor %legal-hold-status :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %legal-hold-title :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'legal-hold 'make-legal-hold))
 (common-lisp:defun make-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cancellation-date creation-date
                     legal-hold-arn legal-hold-id description status title)
   (common-lisp:apply #'common-lisp:make-instance 'legal-hold
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input legal-hold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input legal-hold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold-id))
      (common-lisp:list
       (common-lisp:cons "LegalHoldId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold-arn))
      (common-lisp:list
       (common-lisp:cons "LegalHoldArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-date))
      (common-lisp:list
       (common-lisp:cons "CancellationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input legal-hold))
   common-lisp:nil))
(common-lisp:deftype legal-hold-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype legal-holds-list ()
   '(trivial-types:proper-list legal-hold))
 (common-lisp:defun |make-legal-holds-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list legal-hold))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lifecycle common-lisp:nil
                       ((delete-after-days :initarg :delete-after-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %lifecycle-delete-after-days :initform
                         common-lisp:nil)
                        (move-to-cold-storage-after-days :initarg
                         :move-to-cold-storage-after-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %lifecycle-move-to-cold-storage-after-days :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lifecycle 'make-lifecycle))
 (common-lisp:defun make-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-after-days
                     move-to-cold-storage-after-days)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-after-days))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-after-days))
      (common-lisp:list
       (common-lisp:cons "DeleteAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       limit-exceeded-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       limit-exceeded-exception-context)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-code
                    'limit-exceeded-exception-message
                    'limit-exceeded-exception-type
                    'limit-exceeded-exception-context)))
(common-lisp:progn
 (common-lisp:defclass list-backup-jobs-input common-lisp:nil
                       ((by-parent-job-id :initarg :by-parent-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-input-by-parent-job-id
                         :initform common-lisp:nil)
                        (by-complete-before :initarg :by-complete-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-input-by-complete-before
                         :initform common-lisp:nil)
                        (by-complete-after :initarg :by-complete-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-input-by-complete-after
                         :initform common-lisp:nil)
                        (by-account-id :initarg :by-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-backup-jobs-input-by-account-id :initform
                         common-lisp:nil)
                        (by-resource-type :initarg :by-resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %list-backup-jobs-input-by-resource-type
                         :initform common-lisp:nil)
                        (by-created-after :initarg :by-created-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-input-by-created-after
                         :initform common-lisp:nil)
                        (by-created-before :initarg :by-created-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-input-by-created-before
                         :initform common-lisp:nil)
                        (by-backup-vault-name :initarg :by-backup-vault-name
                         :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %list-backup-jobs-input-by-backup-vault-name
                         :initform common-lisp:nil)
                        (by-state :initarg :by-state :type
                         (common-lisp:or backup-job-state common-lisp:null)
                         :accessor %list-backup-jobs-input-by-state :initform
                         common-lisp:nil)
                        (by-resource-arn :initarg :by-resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-backup-jobs-input-by-resource-arn :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-backup-jobs-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-jobs-input 'make-list-backup-jobs-input))
 (common-lisp:defun make-list-backup-jobs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key by-parent-job-id by-complete-before
                     by-complete-after by-account-id by-resource-type
                     by-created-after by-created-before by-backup-vault-name
                     by-state by-resource-arn max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-jobs-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-jobs-output-next-token
                         :initform common-lisp:nil)
                        (backup-jobs :initarg :backup-jobs :type
                         (common-lisp:or backup-jobs-list common-lisp:null)
                         :accessor %list-backup-jobs-output-backup-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-jobs-output 'make-list-backup-jobs-output))
 (common-lisp:defun make-list-backup-jobs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token backup-jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-jobs))
      (common-lisp:list
       (common-lisp:cons "BackupJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-plan-templates-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-backup-plan-templates-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-plan-templates-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-plan-templates-input
                    'make-list-backup-plan-templates-input))
 (common-lisp:defun make-list-backup-plan-templates-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-backup-plan-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-plan-templates-output common-lisp:nil
                       ((backup-plan-templates-list :initarg
                         :backup-plan-templates-list :type
                         (common-lisp:or backup-plan-templates-list
                                         common-lisp:null)
                         :accessor
                         %list-backup-plan-templates-output-backup-plan-templates-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-backup-plan-templates-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-plan-templates-output
                    'make-list-backup-plan-templates-output))
 (common-lisp:defun make-list-backup-plan-templates-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-templates-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-backup-plan-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-templates-list))
      (common-lisp:list
       (common-lisp:cons "BackupPlanTemplatesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-plan-versions-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-backup-plan-versions-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-plan-versions-input-next-token
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-backup-plan-versions-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-backup-plan-versions-input
                    'make-list-backup-plan-versions-input))
 (common-lisp:defun make-list-backup-plan-versions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-backup-plan-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-plan-versions-output common-lisp:nil
                       ((backup-plan-versions-list :initarg
                         :backup-plan-versions-list :type
                         (common-lisp:or backup-plan-versions-list
                                         common-lisp:null)
                         :accessor
                         %list-backup-plan-versions-output-backup-plan-versions-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-plan-versions-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-plan-versions-output
                    'make-list-backup-plan-versions-output))
 (common-lisp:defun make-list-backup-plan-versions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-versions-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-backup-plan-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-plan-versions-list))
      (common-lisp:list
       (common-lisp:cons "BackupPlanVersionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plan-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-plans-input common-lisp:nil
                       ((include-deleted :initarg :include-deleted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-backup-plans-input-include-deleted :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-backup-plans-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-plans-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-plans-input 'make-list-backup-plans-input))
 (common-lisp:defun make-list-backup-plans-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-deleted max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-plans-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plans-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plans-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plans-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-plans-output common-lisp:nil
                       ((backup-plans-list :initarg :backup-plans-list :type
                         (common-lisp:or backup-plans-list common-lisp:null)
                         :accessor %list-backup-plans-output-backup-plans-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-plans-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-plans-output 'make-list-backup-plans-output))
 (common-lisp:defun make-list-backup-plans-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plans-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-plans-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plans-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plans-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plans-list))
      (common-lisp:list
       (common-lisp:cons "BackupPlansList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-plans-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-selections-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-backup-selections-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-selections-input-next-token
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-selections-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-backup-selections-input
                    'make-list-backup-selections-input))
 (common-lisp:defun make-list-backup-selections-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-selections-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-selections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-selections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-selections-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-selections-output common-lisp:nil
                       ((backup-selections-list :initarg
                         :backup-selections-list :type
                         (common-lisp:or backup-selections-list
                                         common-lisp:null)
                         :accessor
                         %list-backup-selections-output-backup-selections-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-selections-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-selections-output
                    'make-list-backup-selections-output))
 (common-lisp:defun make-list-backup-selections-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-selections-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-backup-selections-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-selections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-selections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-selections-list))
      (common-lisp:list
       (common-lisp:cons "BackupSelectionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-selections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-vaults-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-backup-vaults-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-vaults-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-vaults-input 'make-list-backup-vaults-input))
 (common-lisp:defun make-list-backup-vaults-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-vaults-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-vaults-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-vaults-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-vaults-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backup-vaults-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-backup-vaults-output-next-token
                         :initform common-lisp:nil)
                        (backup-vault-list :initarg :backup-vault-list :type
                         (common-lisp:or backup-vault-list common-lisp:null)
                         :accessor %list-backup-vaults-output-backup-vault-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backup-vaults-output
                    'make-list-backup-vaults-output))
 (common-lisp:defun make-list-backup-vaults-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token backup-vault-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-backup-vaults-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-vaults-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-vaults-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-list))
      (common-lisp:list
       (common-lisp:cons "BackupVaultList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backup-vaults-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-copy-jobs-input common-lisp:nil
                       ((by-parent-job-id :initarg :by-parent-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-input-by-parent-job-id
                         :initform common-lisp:nil)
                        (by-complete-after :initarg :by-complete-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-input-by-complete-after
                         :initform common-lisp:nil)
                        (by-complete-before :initarg :by-complete-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-input-by-complete-before
                         :initform common-lisp:nil)
                        (by-account-id :initarg :by-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-copy-jobs-input-by-account-id :initform
                         common-lisp:nil)
                        (by-destination-vault-arn :initarg
                         :by-destination-vault-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-copy-jobs-input-by-destination-vault-arn
                         :initform common-lisp:nil)
                        (by-resource-type :initarg :by-resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %list-copy-jobs-input-by-resource-type
                         :initform common-lisp:nil)
                        (by-created-after :initarg :by-created-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-input-by-created-after
                         :initform common-lisp:nil)
                        (by-created-before :initarg :by-created-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-input-by-created-before
                         :initform common-lisp:nil)
                        (by-state :initarg :by-state :type
                         (common-lisp:or copy-job-state common-lisp:null)
                         :accessor %list-copy-jobs-input-by-state :initform
                         common-lisp:nil)
                        (by-resource-arn :initarg :by-resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-copy-jobs-input-by-resource-arn :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-copy-jobs-input-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-copy-jobs-input 'make-list-copy-jobs-input))
 (common-lisp:defun make-list-copy-jobs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key by-parent-job-id by-complete-after
                     by-complete-before by-account-id by-destination-vault-arn
                     by-resource-type by-created-after by-created-before
                     by-state by-resource-arn max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-copy-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-copy-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-copy-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-copy-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-copy-jobs-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-copy-jobs-output-next-token :initform
                         common-lisp:nil)
                        (copy-jobs :initarg :copy-jobs :type
                         (common-lisp:or copy-jobs-list common-lisp:null)
                         :accessor %list-copy-jobs-output-copy-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-copy-jobs-output 'make-list-copy-jobs-output))
 (common-lisp:defun make-list-copy-jobs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token copy-jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-copy-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-copy-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-copy-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-jobs))
      (common-lisp:list
       (common-lisp:cons "CopyJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-copy-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-frameworks-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-frameworks-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-framework-inputs common-lisp:null)
                         :accessor %list-frameworks-input-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-frameworks-input 'make-list-frameworks-input))
 (common-lisp:defun make-list-frameworks-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-frameworks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-frameworks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-frameworks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-frameworks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-frameworks-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-frameworks-output-next-token :initform
                         common-lisp:nil)
                        (frameworks :initarg :frameworks :type
                         (common-lisp:or framework-list common-lisp:null)
                         :accessor %list-frameworks-output-frameworks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-frameworks-output 'make-list-frameworks-output))
 (common-lisp:defun make-list-frameworks-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token frameworks)
   (common-lisp:apply #'common-lisp:make-instance 'list-frameworks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-frameworks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-frameworks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frameworks))
      (common-lisp:list
       (common-lisp:cons "Frameworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-frameworks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-legal-holds-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-legal-holds-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-legal-holds-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-legal-holds-input 'make-list-legal-holds-input))
 (common-lisp:defun make-list-legal-holds-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-legal-holds-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-legal-holds-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-legal-holds-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-legal-holds-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-legal-holds-output common-lisp:nil
                       ((legal-holds :initarg :legal-holds :type
                         (common-lisp:or legal-holds-list common-lisp:null)
                         :accessor %list-legal-holds-output-legal-holds
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-legal-holds-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-legal-holds-output 'make-list-legal-holds-output))
 (common-lisp:defun make-list-legal-holds-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key legal-holds next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-legal-holds-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-legal-holds-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-legal-holds-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-holds))
      (common-lisp:list
       (common-lisp:cons "LegalHolds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-legal-holds-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-tags () '(trivial-types:proper-list condition))
 (common-lisp:defun |make-list-of-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-protected-resources-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-protected-resources-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-protected-resources-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-protected-resources-input
                    'make-list-protected-resources-input))
 (common-lisp:defun make-list-protected-resources-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-protected-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protected-resources-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-protected-resources-output-next-token
                         :initform common-lisp:nil)
                        (results :initarg :results :type
                         (common-lisp:or protected-resources-list
                                         common-lisp:null)
                         :accessor %list-protected-resources-output-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-protected-resources-output
                    'make-list-protected-resources-output))
 (common-lisp:defun make-list-protected-resources-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-protected-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recovery-points-by-backup-vault-input
                       common-lisp:nil
                       ((by-parent-recovery-point-arn :initarg
                         :by-parent-recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-recovery-points-by-backup-vault-input-by-parent-recovery-point-arn
                         :initform common-lisp:nil)
                        (by-created-after :initarg :by-created-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-by-created-after
                         :initform common-lisp:nil)
                        (by-created-before :initarg :by-created-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-by-created-before
                         :initform common-lisp:nil)
                        (by-backup-plan-id :initarg :by-backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-by-backup-plan-id
                         :initform common-lisp:nil)
                        (by-resource-type :initarg :by-resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-by-resource-type
                         :initform common-lisp:nil)
                        (by-resource-arn :initarg :by-resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-recovery-points-by-backup-vault-input-by-resource-arn
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-next-token
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-by-backup-vault-input
                    'make-list-recovery-points-by-backup-vault-input))
 (common-lisp:defun make-list-recovery-points-by-backup-vault-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key by-parent-recovery-point-arn
                     by-created-after by-created-before by-backup-plan-id
                     by-resource-type by-resource-arn max-results next-token
                     backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recovery-points-by-backup-vault-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-backup-vault-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-backup-vault-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recovery-points-by-backup-vault-output
                       common-lisp:nil
                       ((recovery-points :initarg :recovery-points :type
                         (common-lisp:or recovery-point-by-backup-vault-list
                                         common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-output-recovery-points
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-backup-vault-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-by-backup-vault-output
                    'make-list-recovery-points-by-backup-vault-output))
 (common-lisp:defun make-list-recovery-points-by-backup-vault-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-points next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recovery-points-by-backup-vault-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-backup-vault-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-backup-vault-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-points))
      (common-lisp:list
       (common-lisp:cons "RecoveryPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-backup-vault-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recovery-points-by-legal-hold-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-recovery-points-by-legal-hold-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-legal-hold-input-next-token
                         :initform common-lisp:nil)
                        (legal-hold-id :initarg :legal-hold-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-legal-hold-input-legal-hold-id
                         :initform
                         (common-lisp:error ":legal-hold-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-by-legal-hold-input
                    'make-list-recovery-points-by-legal-hold-input))
 (common-lisp:defun make-list-recovery-points-by-legal-hold-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token legal-hold-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recovery-points-by-legal-hold-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-legal-hold-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-legal-hold-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recovery-points-by-legal-hold-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-legal-hold-output-next-token
                         :initform common-lisp:nil)
                        (recovery-points :initarg :recovery-points :type
                         (common-lisp:or recovery-points-list common-lisp:null)
                         :accessor
                         %list-recovery-points-by-legal-hold-output-recovery-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-by-legal-hold-output
                    'make-list-recovery-points-by-legal-hold-output))
 (common-lisp:defun make-list-recovery-points-by-legal-hold-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token recovery-points)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recovery-points-by-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-points))
      (common-lisp:list
       (common-lisp:cons "RecoveryPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recovery-points-by-resource-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-recovery-points-by-resource-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-resource-input-next-token
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-recovery-points-by-resource-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-by-resource-input
                    'make-list-recovery-points-by-resource-input))
 (common-lisp:defun make-list-recovery-points-by-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recovery-points-by-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recovery-points-by-resource-output common-lisp:nil
                       ((recovery-points :initarg :recovery-points :type
                         (common-lisp:or recovery-point-by-resource-list
                                         common-lisp:null)
                         :accessor
                         %list-recovery-points-by-resource-output-recovery-points
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-recovery-points-by-resource-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-by-resource-output
                    'make-list-recovery-points-by-resource-output))
 (common-lisp:defun make-list-recovery-points-by-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-points next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recovery-points-by-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-points))
      (common-lisp:list
       (common-lisp:cons "RecoveryPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-by-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-report-jobs-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-jobs-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-report-jobs-input-max-results
                         :initform common-lisp:nil)
                        (by-status :initarg :by-status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-jobs-input-by-status :initform
                         common-lisp:nil)
                        (by-creation-after :initarg :by-creation-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-jobs-input-by-creation-after
                         :initform common-lisp:nil)
                        (by-creation-before :initarg :by-creation-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-jobs-input-by-creation-before
                         :initform common-lisp:nil)
                        (by-report-plan-name :initarg :by-report-plan-name
                         :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %list-report-jobs-input-by-report-plan-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-report-jobs-input 'make-list-report-jobs-input))
 (common-lisp:defun make-list-report-jobs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results by-status
                     by-creation-after by-creation-before by-report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-report-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-report-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-report-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-report-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-report-jobs-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-jobs-output-next-token
                         :initform common-lisp:nil)
                        (report-jobs :initarg :report-jobs :type
                         (common-lisp:or report-job-list common-lisp:null)
                         :accessor %list-report-jobs-output-report-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-report-jobs-output 'make-list-report-jobs-output))
 (common-lisp:defun make-list-report-jobs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token report-jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-report-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-report-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-report-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-jobs))
      (common-lisp:list
       (common-lisp:cons "ReportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-report-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-report-plans-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-plans-input-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-report-plans-input-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-report-plans-input 'make-list-report-plans-input))
 (common-lisp:defun make-list-report-plans-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-report-plans-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-report-plans-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-report-plans-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-report-plans-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-report-plans-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-report-plans-output-next-token
                         :initform common-lisp:nil)
                        (report-plans :initarg :report-plans :type
                         (common-lisp:or report-plan-list common-lisp:null)
                         :accessor %list-report-plans-output-report-plans
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-report-plans-output 'make-list-report-plans-output))
 (common-lisp:defun make-list-report-plans-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token report-plans)
   (common-lisp:apply #'common-lisp:make-instance 'list-report-plans-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-report-plans-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-report-plans-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plans))
      (common-lisp:list
       (common-lisp:cons "ReportPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-report-plans-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-restore-jobs-input common-lisp:nil
                       ((by-complete-after :initarg :by-complete-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-restore-jobs-input-by-complete-after
                         :initform common-lisp:nil)
                        (by-complete-before :initarg :by-complete-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-restore-jobs-input-by-complete-before
                         :initform common-lisp:nil)
                        (by-status :initarg :by-status :type
                         (common-lisp:or restore-job-status common-lisp:null)
                         :accessor %list-restore-jobs-input-by-status :initform
                         common-lisp:nil)
                        (by-created-after :initarg :by-created-after :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-restore-jobs-input-by-created-after
                         :initform common-lisp:nil)
                        (by-created-before :initarg :by-created-before :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-restore-jobs-input-by-created-before
                         :initform common-lisp:nil)
                        (by-account-id :initarg :by-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-restore-jobs-input-by-account-id :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-restore-jobs-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-restore-jobs-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-restore-jobs-input 'make-list-restore-jobs-input))
 (common-lisp:defun make-list-restore-jobs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key by-complete-after by-complete-before
                     by-status by-created-after by-created-before by-account-id
                     max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-restore-jobs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-restore-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-restore-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-restore-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-restore-jobs-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-restore-jobs-output-next-token
                         :initform common-lisp:nil)
                        (restore-jobs :initarg :restore-jobs :type
                         (common-lisp:or restore-jobs-list common-lisp:null)
                         :accessor %list-restore-jobs-output-restore-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-restore-jobs-output 'make-list-restore-jobs-output))
 (common-lisp:defun make-list-restore-jobs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token restore-jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-restore-jobs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-restore-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-restore-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-jobs))
      (common-lisp:list
       (common-lisp:cons "RestoreJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-restore-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-tags-input-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-tags-input-next-token :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export (common-lisp:list 'list-tags-input 'make-list-tags-input))
 (common-lisp:defun make-list-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-output-tags :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-tags-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-output 'make-list-tags-output))
 (common-lisp:defun make-list-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-framework-inputs () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-metadata| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-key () 'common-lisp:string)
(common-lisp:deftype metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition missing-parameter-value-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       missing-parameter-value-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       missing-parameter-value-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       missing-parameter-value-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       missing-parameter-value-exception-context)))
 (common-lisp:export
  (common-lisp:list 'missing-parameter-value-exception
                    'missing-parameter-value-exception-code
                    'missing-parameter-value-exception-message
                    'missing-parameter-value-exception-type
                    'missing-parameter-value-exception-context)))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-resource common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %protected-resource-resource-name :initform
                         common-lisp:nil)
                        (last-backup-time :initarg :last-backup-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %protected-resource-last-backup-time
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %protected-resource-resource-type :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %protected-resource-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protected-resource 'make-protected-resource))
 (common-lisp:defun make-protected-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name last-backup-time
                     resource-type resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'protected-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protected-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protected-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-backup-time))
      (common-lisp:list
       (common-lisp:cons "LastBackupTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protected-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protected-resources-list ()
   '(trivial-types:proper-list protected-resource))
 (common-lisp:defun |make-protected-resources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protected-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-backup-vault-access-policy-input common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or iampolicy common-lisp:null) :accessor
                         %put-backup-vault-access-policy-input-policy :initform
                         common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %put-backup-vault-access-policy-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-backup-vault-access-policy-input
                    'make-put-backup-vault-access-policy-input))
 (common-lisp:defun make-put-backup-vault-access-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-backup-vault-access-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-access-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-access-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-access-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-backup-vault-lock-configuration-input
                       common-lisp:nil
                       ((changeable-for-days :initarg :changeable-for-days
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %put-backup-vault-lock-configuration-input-changeable-for-days
                         :initform common-lisp:nil)
                        (max-retention-days :initarg :max-retention-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %put-backup-vault-lock-configuration-input-max-retention-days
                         :initform common-lisp:nil)
                        (min-retention-days :initarg :min-retention-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %put-backup-vault-lock-configuration-input-min-retention-days
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %put-backup-vault-lock-configuration-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-backup-vault-lock-configuration-input
                    'make-put-backup-vault-lock-configuration-input))
 (common-lisp:defun make-put-backup-vault-lock-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key changeable-for-days max-retention-days
                     min-retention-days backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-backup-vault-lock-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-lock-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-lock-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-retention-days))
      (common-lisp:list
       (common-lisp:cons "MinRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retention-days))
      (common-lisp:list
       (common-lisp:cons "MaxRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeable-for-days))
      (common-lisp:list
       (common-lisp:cons "ChangeableForDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-lock-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-backup-vault-notifications-input common-lisp:nil
                       ((backup-vault-events :initarg :backup-vault-events
                         :type
                         (common-lisp:or backup-vault-events common-lisp:null)
                         :accessor
                         %put-backup-vault-notifications-input-backup-vault-events
                         :initform
                         (common-lisp:error
                          ":backup-vault-events is required"))
                        (snstopic-arn :initarg :snstopic-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %put-backup-vault-notifications-input-snstopic-arn
                         :initform
                         (common-lisp:error ":snstopic-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %put-backup-vault-notifications-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-backup-vault-notifications-input
                    'make-put-backup-vault-notifications-input))
 (common-lisp:defun make-put-backup-vault-notifications-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-vault-events snstopic-arn
                     backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-backup-vault-notifications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-notifications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "SNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-events))
      (common-lisp:list
       (common-lisp:cons "BackupVaultEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-backup-vault-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recovery-point-by-backup-vault common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-resource-name
                         :initform common-lisp:nil)
                        (is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %recovery-point-by-backup-vault-is-parent
                         :initform common-lisp:nil)
                        (composite-member-identifier :initarg
                         :composite-member-identifier :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-composite-member-identifier
                         :initform common-lisp:nil)
                        (parent-recovery-point-arn :initarg
                         :parent-recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-parent-recovery-point-arn
                         :initform common-lisp:nil)
                        (last-restore-time :initarg :last-restore-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-last-restore-time
                         :initform common-lisp:nil)
                        (is-encrypted :initarg :is-encrypted :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %recovery-point-by-backup-vault-is-encrypted
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-encryption-key-arn
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-lifecycle :initform
                         common-lisp:nil)
                        (calculated-lifecycle :initarg :calculated-lifecycle
                         :type
                         (common-lisp:or calculated-lifecycle common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-calculated-lifecycle
                         :initform common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-backup-size-in-bytes
                         :initform common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-completion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-creation-date
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or recovery-point-status
                                         common-lisp:null)
                         :accessor %recovery-point-by-backup-vault-status
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %recovery-point-by-backup-vault-iam-role-arn
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or recovery-point-creator
                                         common-lisp:null)
                         :accessor %recovery-point-by-backup-vault-created-by
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-resource-arn :initform
                         common-lisp:nil)
                        (source-backup-vault-arn :initarg
                         :source-backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-source-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %recovery-point-by-backup-vault-backup-vault-name
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-backup-vault-recovery-point-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recovery-point-by-backup-vault
                    'make-recovery-point-by-backup-vault))
 (common-lisp:defun make-recovery-point-by-backup-vault
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name is-parent
                     composite-member-identifier parent-recovery-point-arn
                     last-restore-time is-encrypted encryption-key-arn
                     lifecycle calculated-lifecycle backup-size-in-bytes
                     completion-date creation-date status-message status
                     iam-role-arn created-by resource-type resource-arn
                     source-backup-vault-arn backup-vault-arn backup-vault-name
                     recovery-point-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'recovery-point-by-backup-vault
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-by-backup-vault))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-by-backup-vault))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-lifecycle))
      (common-lisp:list
       (common-lisp:cons "CalculatedLifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-encrypted))
      (common-lisp:list
       (common-lisp:cons "IsEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-restore-time))
      (common-lisp:list
       (common-lisp:cons "LastRestoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "ParentRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-member-identifier))
      (common-lisp:list
       (common-lisp:cons "CompositeMemberIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-by-backup-vault))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recovery-point-by-backup-vault-list ()
   '(trivial-types:proper-list recovery-point-by-backup-vault))
 (common-lisp:defun |make-recovery-point-by-backup-vault-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recovery-point-by-backup-vault))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recovery-point-by-resource common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %recovery-point-by-resource-resource-name
                         :initform common-lisp:nil)
                        (parent-recovery-point-arn :initarg
                         :parent-recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-resource-parent-recovery-point-arn
                         :initform common-lisp:nil)
                        (is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %recovery-point-by-resource-is-parent
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %recovery-point-by-resource-backup-vault-name
                         :initform common-lisp:nil)
                        (backup-size-bytes :initarg :backup-size-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %recovery-point-by-resource-backup-size-bytes
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-resource-encryption-key-arn
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %recovery-point-by-resource-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or recovery-point-status
                                         common-lisp:null)
                         :accessor %recovery-point-by-resource-status :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %recovery-point-by-resource-creation-date
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-by-resource-recovery-point-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recovery-point-by-resource
                    'make-recovery-point-by-resource))
 (common-lisp:defun make-recovery-point-by-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name parent-recovery-point-arn
                     is-parent backup-vault-name backup-size-bytes
                     encryption-key-arn status-message status creation-date
                     recovery-point-arn)
   (common-lisp:apply #'common-lisp:make-instance 'recovery-point-by-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-by-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-by-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-size-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "ParentRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-by-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recovery-point-by-resource-list ()
   '(trivial-types:proper-list recovery-point-by-resource))
 (common-lisp:defun |make-recovery-point-by-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recovery-point-by-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recovery-point-creator common-lisp:nil
                       ((backup-rule-id :initarg :backup-rule-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %recovery-point-creator-backup-rule-id
                         :initform common-lisp:nil)
                        (backup-plan-version :initarg :backup-plan-version
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %recovery-point-creator-backup-plan-version
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-creator-backup-plan-arn :initform
                         common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %recovery-point-creator-backup-plan-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recovery-point-creator 'make-recovery-point-creator))
 (common-lisp:defun make-recovery-point-creator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-rule-id backup-plan-version
                     backup-plan-arn backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'recovery-point-creator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-creator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-creator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-version))
      (common-lisp:list
       (common-lisp:cons "BackupPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-rule-id))
      (common-lisp:list
       (common-lisp:cons "BackupRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-creator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recovery-point-member common-lisp:nil
                       ((recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recovery-point-member-recovery-point-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recovery-point-member 'make-recovery-point-member))
 (common-lisp:defun make-recovery-point-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recovery-point-arn)
   (common-lisp:apply #'common-lisp:make-instance 'recovery-point-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recovery-point-selection common-lisp:nil
                       ((date-range :initarg :date-range :type
                         (common-lisp:or date-range common-lisp:null) :accessor
                         %recovery-point-selection-date-range :initform
                         common-lisp:nil)
                        (resource-identifiers :initarg :resource-identifiers
                         :type
                         (common-lisp:or resource-identifiers common-lisp:null)
                         :accessor
                         %recovery-point-selection-resource-identifiers
                         :initform common-lisp:nil)
                        (vault-names :initarg :vault-names :type
                         (common-lisp:or vault-names common-lisp:null)
                         :accessor %recovery-point-selection-vault-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recovery-point-selection 'make-recovery-point-selection))
 (common-lisp:defun make-recovery-point-selection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-range resource-identifiers
                     vault-names)
   (common-lisp:apply #'common-lisp:make-instance 'recovery-point-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vault-names))
      (common-lisp:list
       (common-lisp:cons "VaultNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-point-selection))
   common-lisp:nil))
(common-lisp:deftype recovery-point-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recovery-points-list ()
   '(trivial-types:proper-list recovery-point-member))
 (common-lisp:defun |make-recovery-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-point-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass report-delivery-channel common-lisp:nil
                       ((formats :initarg :formats :type
                         (common-lisp:or format-list common-lisp:null)
                         :accessor %report-delivery-channel-formats :initform
                         common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-delivery-channel-s3key-prefix
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-delivery-channel-s3bucket-name
                         :initform
                         (common-lisp:error ":s3bucket-name is required"))))
 (common-lisp:export
  (common-lisp:list 'report-delivery-channel 'make-report-delivery-channel))
 (common-lisp:defun make-report-delivery-channel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key formats s3key-prefix s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'report-delivery-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-delivery-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-delivery-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formats))
      (common-lisp:list
       (common-lisp:cons "Formats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-delivery-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-destination common-lisp:nil
                       ((s3keys :initarg :s3keys :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %report-destination-s3keys :initform
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-destination-s3bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'report-destination 'make-report-destination))
 (common-lisp:defun make-report-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3keys s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'report-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3keys))
      (common-lisp:list
       (common-lisp:cons "S3Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-job common-lisp:nil
                       ((report-destination :initarg :report-destination :type
                         (common-lisp:or report-destination common-lisp:null)
                         :accessor %report-job-report-destination :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-job-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-job-status :initform
                         common-lisp:nil)
                        (completion-time :initarg :completion-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-job-completion-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-job-creation-time :initform
                         common-lisp:nil)
                        (report-template :initarg :report-template :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-job-report-template :initform
                         common-lisp:nil)
                        (report-plan-arn :initarg :report-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %report-job-report-plan-arn :initform common-lisp:nil)
                        (report-job-id :initarg :report-job-id :type
                         (common-lisp:or report-job-id common-lisp:null)
                         :accessor %report-job-report-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'report-job 'make-report-job))
 (common-lisp:defun make-report-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-destination status-message status
                     completion-time creation-time report-template
                     report-plan-arn report-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'report-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-job-id))
      (common-lisp:list
       (common-lisp:cons "ReportJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-arn))
      (common-lisp:list
       (common-lisp:cons "ReportPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-template))
      (common-lisp:list
       (common-lisp:cons "ReportTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-destination))
      (common-lisp:list
       (common-lisp:cons "ReportDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-job))
   common-lisp:nil))
(common-lisp:deftype report-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype report-job-list ()
   '(trivial-types:proper-list report-job))
 (common-lisp:defun |make-report-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass report-plan common-lisp:nil
                       ((last-successful-execution-time :initarg
                         :last-successful-execution-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-plan-last-successful-execution-time
                         :initform common-lisp:nil)
                        (last-attempted-execution-time :initarg
                         :last-attempted-execution-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-plan-last-attempted-execution-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-plan-creation-time :initform
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-plan-deployment-status :initform
                         common-lisp:nil)
                        (report-delivery-channel :initarg
                         :report-delivery-channel :type
                         (common-lisp:or report-delivery-channel
                                         common-lisp:null)
                         :accessor %report-plan-report-delivery-channel
                         :initform common-lisp:nil)
                        (report-setting :initarg :report-setting :type
                         (common-lisp:or report-setting common-lisp:null)
                         :accessor %report-plan-report-setting :initform
                         common-lisp:nil)
                        (report-plan-description :initarg
                         :report-plan-description :type
                         (common-lisp:or report-plan-description
                                         common-lisp:null)
                         :accessor %report-plan-report-plan-description
                         :initform common-lisp:nil)
                        (report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %report-plan-report-plan-name :initform
                         common-lisp:nil)
                        (report-plan-arn :initarg :report-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %report-plan-report-plan-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'report-plan 'make-report-plan))
 (common-lisp:defun make-report-plan
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-successful-execution-time
                     last-attempted-execution-time creation-time
                     deployment-status report-delivery-channel report-setting
                     report-plan-description report-plan-name report-plan-arn)
   (common-lisp:apply #'common-lisp:make-instance 'report-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-arn))
      (common-lisp:list
       (common-lisp:cons "ReportPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-name))
      (common-lisp:list
       (common-lisp:cons "ReportPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-plan-description))
      (common-lisp:list
       (common-lisp:cons "ReportPlanDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-setting))
      (common-lisp:list
       (common-lisp:cons "ReportSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-delivery-channel))
      (common-lisp:list
       (common-lisp:cons "ReportDeliveryChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-execution-time))
      (common-lisp:list
       (common-lisp:cons "LastAttemptedExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-execution-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-plan))
   common-lisp:nil))
(common-lisp:deftype report-plan-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype report-plan-list ()
   '(trivial-types:proper-list report-plan))
 (common-lisp:defun |make-report-plan-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-plan))
   aws-sdk/generator/shape::members))
(common-lisp:deftype report-plan-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass report-setting common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %report-setting-regions :initform
                         common-lisp:nil)
                        (organization-units :initarg :organization-units :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %report-setting-organization-units :initform
                         common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %report-setting-accounts :initform
                         common-lisp:nil)
                        (number-of-frameworks :initarg :number-of-frameworks
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %report-setting-number-of-frameworks
                         :initform common-lisp:nil)
                        (framework-arns :initarg :framework-arns :type
                         (common-lisp:or |stringList| common-lisp:null)
                         :accessor %report-setting-framework-arns :initform
                         common-lisp:nil)
                        (report-template :initarg :report-template :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %report-setting-report-template :initform
                         (common-lisp:error ":report-template is required"))))
 (common-lisp:export (common-lisp:list 'report-setting 'make-report-setting))
 (common-lisp:defun make-report-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions organization-units accounts
                     number-of-frameworks framework-arns report-template)
   (common-lisp:apply #'common-lisp:make-instance 'report-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-template))
      (common-lisp:list
       (common-lisp:cons "ReportTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-arns))
      (common-lisp:list
       (common-lisp:cons "FrameworkArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-frameworks))
      (common-lisp:list
       (common-lisp:cons "NumberOfFrameworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-units))
      (common-lisp:list
       (common-lisp:cons "OrganizationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-arns () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-resource-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-identifiers ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-resource-identifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       resource-not-found-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       resource-not-found-exception-context)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-message
                    'resource-not-found-exception-type
                    'resource-not-found-exception-context)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-resource-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-type-management-preference ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-resource-type-management-preference|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype resource-type-opt-in-preference ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-resource-type-opt-in-preference|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype resource-types ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun |make-resource-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype restore-job-id () 'common-lisp:string)
(common-lisp:deftype restore-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype restore-jobs-list ()
   '(trivial-types:proper-list restore-jobs-list-member))
 (common-lisp:defun |make-restore-jobs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            restore-jobs-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass restore-jobs-list-member common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %restore-jobs-list-member-resource-type
                         :initform common-lisp:nil)
                        (created-resource-arn :initarg :created-resource-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %restore-jobs-list-member-created-resource-arn
                         :initform common-lisp:nil)
                        (expected-completion-time-minutes :initarg
                         :expected-completion-time-minutes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %restore-jobs-list-member-expected-completion-time-minutes
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %restore-jobs-list-member-iam-role-arn
                         :initform common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %restore-jobs-list-member-backup-size-in-bytes
                         :initform common-lisp:nil)
                        (percent-done :initarg :percent-done :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %restore-jobs-list-member-percent-done
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %restore-jobs-list-member-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or restore-job-status common-lisp:null)
                         :accessor %restore-jobs-list-member-status :initform
                         common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %restore-jobs-list-member-completion-date
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %restore-jobs-list-member-creation-date
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %restore-jobs-list-member-recovery-point-arn :initform
                         common-lisp:nil)
                        (restore-job-id :initarg :restore-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %restore-jobs-list-member-restore-job-id
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %restore-jobs-list-member-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-jobs-list-member 'make-restore-jobs-list-member))
 (common-lisp:defun make-restore-jobs-list-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type created-resource-arn
                     expected-completion-time-minutes iam-role-arn
                     backup-size-in-bytes percent-done status-message status
                     completion-date creation-date recovery-point-arn
                     restore-job-id account-id)
   (common-lisp:apply #'common-lisp:make-instance 'restore-jobs-list-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-jobs-list-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-jobs-list-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-job-id))
      (common-lisp:list
       (common-lisp:cons "RestoreJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-done))
      (common-lisp:list
       (common-lisp:cons "PercentDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-completion-time-minutes))
      (common-lisp:list
       (common-lisp:cons "ExpectedCompletionTimeMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-resource-arn))
      (common-lisp:list
       (common-lisp:cons "CreatedResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-jobs-list-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (backup-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-unavailable-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       service-unavailable-exception-type)
      (context :initarg :context :initform common-lisp:nil :reader
       service-unavailable-exception-context)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-code
                    'service-unavailable-exception-message
                    'service-unavailable-exception-type
                    'service-unavailable-exception-context)))
(common-lisp:progn
 (common-lisp:defclass start-backup-job-input common-lisp:nil
                       ((backup-options :initarg :backup-options :type
                         (common-lisp:or backup-options common-lisp:null)
                         :accessor %start-backup-job-input-backup-options
                         :initform common-lisp:nil)
                        (recovery-point-tags :initarg :recovery-point-tags
                         :type (common-lisp:or tags common-lisp:null) :accessor
                         %start-backup-job-input-recovery-point-tags :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %start-backup-job-input-lifecycle :initform
                         common-lisp:nil)
                        (complete-window-minutes :initarg
                         :complete-window-minutes :type
                         (common-lisp:or window-minutes common-lisp:null)
                         :accessor
                         %start-backup-job-input-complete-window-minutes
                         :initform common-lisp:nil)
                        (start-window-minutes :initarg :start-window-minutes
                         :type (common-lisp:or window-minutes common-lisp:null)
                         :accessor %start-backup-job-input-start-window-minutes
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-backup-job-input-idempotency-token
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %start-backup-job-input-iam-role-arn
                         :initform
                         (common-lisp:error ":iam-role-arn is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-backup-job-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor %start-backup-job-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-backup-job-input 'make-start-backup-job-input))
 (common-lisp:defun make-start-backup-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-options recovery-point-tags
                     lifecycle complete-window-minutes start-window-minutes
                     idempotency-token iam-role-arn resource-arn
                     backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-backup-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-backup-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-backup-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-window-minutes))
      (common-lisp:list
       (common-lisp:cons "StartWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'complete-window-minutes))
      (common-lisp:list
       (common-lisp:cons "CompleteWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-tags))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-options))
      (common-lisp:list
       (common-lisp:cons "BackupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-backup-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-backup-job-output common-lisp:nil
                       ((is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %start-backup-job-output-is-parent :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-backup-job-output-creation-date
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-backup-job-output-recovery-point-arn :initform
                         common-lisp:nil)
                        (backup-job-id :initarg :backup-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-backup-job-output-backup-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-backup-job-output 'make-start-backup-job-output))
 (common-lisp:defun make-start-backup-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-parent creation-date
                     recovery-point-arn backup-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-backup-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-backup-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-backup-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-job-id))
      (common-lisp:list
       (common-lisp:cons "BackupJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-backup-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-copy-job-input common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %start-copy-job-input-lifecycle :initform
                         common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-copy-job-input-idempotency-token
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %start-copy-job-input-iam-role-arn :initform
                         (common-lisp:error ":iam-role-arn is required"))
                        (destination-backup-vault-arn :initarg
                         :destination-backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-copy-job-input-destination-backup-vault-arn
                         :initform
                         (common-lisp:error
                          ":destination-backup-vault-arn is required"))
                        (source-backup-vault-name :initarg
                         :source-backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %start-copy-job-input-source-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":source-backup-vault-name is required"))
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-copy-job-input-recovery-point-arn :initform
                         (common-lisp:error
                          ":recovery-point-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-copy-job-input 'make-start-copy-job-input))
 (common-lisp:defun make-start-copy-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle idempotency-token iam-role-arn
                     destination-backup-vault-arn source-backup-vault-name
                     recovery-point-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-copy-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-copy-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-copy-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "SourceBackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-copy-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-copy-job-output common-lisp:nil
                       ((is-parent :initarg :is-parent :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %start-copy-job-output-is-parent :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-copy-job-output-creation-date
                         :initform common-lisp:nil)
                        (copy-job-id :initarg :copy-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-copy-job-output-copy-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-copy-job-output 'make-start-copy-job-output))
 (common-lisp:defun make-start-copy-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-parent creation-date copy-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-copy-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-copy-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-copy-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-job-id))
      (common-lisp:list
       (common-lisp:cons "CopyJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-parent))
      (common-lisp:list
       (common-lisp:cons "IsParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-copy-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-report-job-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-report-job-input-idempotency-token
                         :initform common-lisp:nil)
                        (report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %start-report-job-input-report-plan-name
                         :initform
                         (common-lisp:error ":report-plan-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-report-job-input 'make-start-report-job-input))
 (common-lisp:defun make-start-report-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-report-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-report-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-report-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-report-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-report-job-output common-lisp:nil
                       ((report-job-id :initarg :report-job-id :type
                         (common-lisp:or report-job-id common-lisp:null)
                         :accessor %start-report-job-output-report-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-report-job-output 'make-start-report-job-output))
 (common-lisp:defun make-start-report-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-report-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-report-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-report-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-job-id))
      (common-lisp:list
       (common-lisp:cons "ReportJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-report-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-restore-job-input common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %start-restore-job-input-resource-type
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %start-restore-job-input-idempotency-token
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %start-restore-job-input-iam-role-arn
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %start-restore-job-input-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-restore-job-input-recovery-point-arn :initform
                         (common-lisp:error
                          ":recovery-point-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-restore-job-input 'make-start-restore-job-input))
 (common-lisp:defun make-start-restore-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type idempotency-token
                     iam-role-arn metadata recovery-point-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-restore-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-restore-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-restore-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-restore-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-restore-job-output common-lisp:nil
                       ((restore-job-id :initarg :restore-job-id :type
                         (common-lisp:or restore-job-id common-lisp:null)
                         :accessor %start-restore-job-output-restore-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-restore-job-output 'make-start-restore-job-output))
 (common-lisp:defun make-start-restore-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restore-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-restore-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-restore-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-restore-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-job-id))
      (common-lisp:list
       (common-lisp:cons "RestoreJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-restore-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-backup-job-input common-lisp:nil
                       ((backup-job-id :initarg :backup-job-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %stop-backup-job-input-backup-job-id
                         :initform
                         (common-lisp:error ":backup-job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-backup-job-input 'make-stop-backup-job-input))
 (common-lisp:defun make-stop-backup-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-backup-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-backup-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-backup-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-backup-job-input))
   common-lisp:nil))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-key-list :initarg :tag-key-list :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-input-tag-key-list :initform
                         (common-lisp:error ":tag-key-list is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-key-list resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key-list))
      (common-lisp:list
       (common-lisp:cons "TagKeyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backup-plan-input common-lisp:nil
                       ((backup-plan :initarg :backup-plan :type
                         (common-lisp:or backup-plan-input common-lisp:null)
                         :accessor %update-backup-plan-input-backup-plan
                         :initform
                         (common-lisp:error ":backup-plan is required"))
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-backup-plan-input-backup-plan-id
                         :initform
                         (common-lisp:error ":backup-plan-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backup-plan-input 'make-update-backup-plan-input))
 (common-lisp:defun make-update-backup-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backup-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backup-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backup-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan))
      (common-lisp:list
       (common-lisp:cons "BackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backup-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backup-plan-output common-lisp:nil
                       ((advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or advanced-backup-settings
                                         common-lisp:null)
                         :accessor
                         %update-backup-plan-output-advanced-backup-settings
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-backup-plan-output-version-id
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-backup-plan-output-creation-date
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-backup-plan-output-backup-plan-arn :initform
                         common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-backup-plan-output-backup-plan-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backup-plan-output
                    'make-update-backup-plan-output))
 (common-lisp:defun make-update-backup-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-backup-settings version-id
                     creation-date backup-plan-arn backup-plan-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backup-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backup-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backup-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backup-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-framework-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-framework-input-idempotency-token
                         :initform common-lisp:nil)
                        (framework-controls :initarg :framework-controls :type
                         (common-lisp:or framework-controls common-lisp:null)
                         :accessor %update-framework-input-framework-controls
                         :initform common-lisp:nil)
                        (framework-description :initarg :framework-description
                         :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         %update-framework-input-framework-description
                         :initform common-lisp:nil)
                        (framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %update-framework-input-framework-name
                         :initform
                         (common-lisp:error ":framework-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-framework-input 'make-update-framework-input))
 (common-lisp:defun make-update-framework-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token framework-controls
                     framework-description framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-framework-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-framework-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-framework-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-description))
      (common-lisp:list
       (common-lisp:cons "FrameworkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-controls))
      (common-lisp:list
       (common-lisp:cons "FrameworkControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-framework-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-framework-output common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-framework-output-creation-time
                         :initform common-lisp:nil)
                        (framework-arn :initarg :framework-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-framework-output-framework-arn :initform
                         common-lisp:nil)
                        (framework-name :initarg :framework-name :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor %update-framework-output-framework-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-framework-output 'make-update-framework-output))
 (common-lisp:defun make-update-framework-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time framework-arn
                     framework-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-framework-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-framework-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-framework-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "FrameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-arn))
      (common-lisp:list
       (common-lisp:cons "FrameworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-framework-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-global-settings-input common-lisp:nil
                       ((global-settings :initarg :global-settings :type
                         (common-lisp:or global-settings common-lisp:null)
                         :accessor
                         %update-global-settings-input-global-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-global-settings-input
                    'make-update-global-settings-input))
 (common-lisp:defun make-update-global-settings-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-global-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-settings))
      (common-lisp:list
       (common-lisp:cons "GlobalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-recovery-point-lifecycle-input common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %update-recovery-point-lifecycle-input-lifecycle
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-recovery-point-lifecycle-input-recovery-point-arn
                         :initform
                         (common-lisp:error ":recovery-point-arn is required"))
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or backup-vault-name common-lisp:null)
                         :accessor
                         %update-recovery-point-lifecycle-input-backup-vault-name
                         :initform
                         (common-lisp:error
                          ":backup-vault-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-recovery-point-lifecycle-input
                    'make-update-recovery-point-lifecycle-input))
 (common-lisp:defun make-update-recovery-point-lifecycle-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle recovery-point-arn
                     backup-vault-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-recovery-point-lifecycle-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-recovery-point-lifecycle-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-recovery-point-lifecycle-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-recovery-point-lifecycle-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-recovery-point-lifecycle-output common-lisp:nil
                       ((calculated-lifecycle :initarg :calculated-lifecycle
                         :type
                         (common-lisp:or calculated-lifecycle common-lisp:null)
                         :accessor
                         %update-recovery-point-lifecycle-output-calculated-lifecycle
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle common-lisp:null) :accessor
                         %update-recovery-point-lifecycle-output-lifecycle
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-recovery-point-lifecycle-output-recovery-point-arn
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-recovery-point-lifecycle-output-backup-vault-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-recovery-point-lifecycle-output
                    'make-update-recovery-point-lifecycle-output))
 (common-lisp:defun make-update-recovery-point-lifecycle-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key calculated-lifecycle lifecycle
                     recovery-point-arn backup-vault-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-recovery-point-lifecycle-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-recovery-point-lifecycle-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-recovery-point-lifecycle-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-lifecycle))
      (common-lisp:list
       (common-lisp:cons "CalculatedLifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-recovery-point-lifecycle-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-region-settings-input common-lisp:nil
                       ((resource-type-management-preference :initarg
                         :resource-type-management-preference :type
                         (common-lisp:or resource-type-management-preference
                                         common-lisp:null)
                         :accessor
                         %update-region-settings-input-resource-type-management-preference
                         :initform common-lisp:nil)
                        (resource-type-opt-in-preference :initarg
                         :resource-type-opt-in-preference :type
                         (common-lisp:or resource-type-opt-in-preference
                                         common-lisp:null)
                         :accessor
                         %update-region-settings-input-resource-type-opt-in-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-region-settings-input
                    'make-update-region-settings-input))
 (common-lisp:defun make-update-region-settings-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type-management-preference
                     resource-type-opt-in-preference)
   (common-lisp:apply #'common-lisp:make-instance 'update-region-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-region-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-region-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-type-opt-in-preference))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeOptInPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-type-management-preference))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeManagementPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-region-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-report-plan-input common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-report-plan-input-idempotency-token
                         :initform common-lisp:nil)
                        (report-setting :initarg :report-setting :type
                         (common-lisp:or report-setting common-lisp:null)
                         :accessor %update-report-plan-input-report-setting
                         :initform common-lisp:nil)
                        (report-delivery-channel :initarg
                         :report-delivery-channel :type
                         (common-lisp:or report-delivery-channel
                                         common-lisp:null)
                         :accessor
                         %update-report-plan-input-report-delivery-channel
                         :initform common-lisp:nil)
                        (report-plan-description :initarg
                         :report-plan-description :type
                         (common-lisp:or report-plan-description
                                         common-lisp:null)
                         :accessor
                         %update-report-plan-input-report-plan-description
                         :initform common-lisp:nil)
                        (report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %update-report-plan-input-report-plan-name
                         :initform
                         (common-lisp:error ":report-plan-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-report-plan-input 'make-update-report-plan-input))
 (common-lisp:defun make-update-report-plan-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token report-setting
                     report-delivery-channel report-plan-description
                     report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-report-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-report-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-report-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-plan-description))
      (common-lisp:list
       (common-lisp:cons "ReportPlanDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-delivery-channel))
      (common-lisp:list
       (common-lisp:cons "ReportDeliveryChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-setting))
      (common-lisp:list
       (common-lisp:cons "ReportSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-report-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-report-plan-output common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-report-plan-output-creation-time
                         :initform common-lisp:nil)
                        (report-plan-arn :initarg :report-plan-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-report-plan-output-report-plan-arn :initform
                         common-lisp:nil)
                        (report-plan-name :initarg :report-plan-name :type
                         (common-lisp:or report-plan-name common-lisp:null)
                         :accessor %update-report-plan-output-report-plan-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-report-plan-output
                    'make-update-report-plan-output))
 (common-lisp:defun make-update-report-plan-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time report-plan-arn
                     report-plan-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-report-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-report-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-report-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-name))
      (common-lisp:list
       (common-lisp:cons "ReportPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-plan-arn))
      (common-lisp:list
       (common-lisp:cons "ReportPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-report-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vault-names ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-vault-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype window-minutes () 'common-lisp:integer)
common-lisp:nil
common-lisp:nil
common-lisp:nil
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |stringList| ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-stringlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |stringMap| () 'common-lisp:hash-table)
 (common-lisp:defun |make-stringmap| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun cancel-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key legal-hold-id cancel-description
                     retain-record-in-days)
   (common-lisp:declare
    (common-lisp:ignorable legal-hold-id cancel-description
     retain-record-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-legal-hold-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/legal-holds/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'legal-hold-id))))
                                                        "CancelLegalHold"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-legal-hold))
(common-lisp:progn
 (common-lisp:defun create-backup-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan backup-plan-tags
                     creator-request-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-plan backup-plan-tags creator-request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backup-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/backup/plans/"
                                                        "CreateBackupPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backup-plan))
(common-lisp:progn
 (common-lisp:defun create-backup-selection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id backup-selection
                     creator-request-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-plan-id backup-selection creator-request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backup-selection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/selections/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "CreateBackupSelection"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backup-selection))
(common-lisp:progn
 (common-lisp:defun create-backup-vault
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name backup-vault-tags
                     encryption-key-arn creator-request-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name backup-vault-tags
     encryption-key-arn creator-request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backup-vault-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "CreateBackupVault"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backup-vault))
(common-lisp:progn
 (common-lisp:defun create-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-name framework-description
                     framework-controls idempotency-token framework-tags)
   (common-lisp:declare
    (common-lisp:ignorable framework-name framework-description
     framework-controls idempotency-token framework-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-framework-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/audit/frameworks"
                                                        "CreateFramework"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-framework))
(common-lisp:progn
 (common-lisp:defun create-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key title description idempotency-token
                     recovery-point-selection tags)
   (common-lisp:declare
    (common-lisp:ignorable title description idempotency-token
     recovery-point-selection tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-legal-hold-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/legal-holds/"
                                                        "CreateLegalHold"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-legal-hold))
(common-lisp:progn
 (common-lisp:defun create-report-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-plan-name report-plan-description
                     report-delivery-channel report-setting report-plan-tags
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable report-plan-name report-plan-description
     report-delivery-channel report-setting report-plan-tags
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-report-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/audit/report-plans"
                                                        "CreateReportPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-report-plan))
(common-lisp:progn
 (common-lisp:defun delete-backup-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id)
   (common-lisp:declare (common-lisp:ignorable backup-plan-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backup-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "DeleteBackupPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup-plan))
(common-lisp:progn
 (common-lisp:defun delete-backup-selection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id selection-id)
   (common-lisp:declare (common-lisp:ignorable backup-plan-id selection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backup-selection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/selections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'selection-id))))
                                                        "DeleteBackupSelection"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup-selection))
(common-lisp:progn
 (common-lisp:defun delete-backup-vault
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backup-vault-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "DeleteBackupVault"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup-vault))
(common-lisp:progn
 (common-lisp:defun delete-backup-vault-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-backup-vault-access-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/access-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "DeleteBackupVaultAccessPolicy"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup-vault-access-policy))
(common-lisp:progn
 (common-lisp:defun delete-backup-vault-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-backup-vault-lock-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/vault-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "DeleteBackupVaultLockConfiguration"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup-vault-lock-configuration))
(common-lisp:progn
 (common-lisp:defun delete-backup-vault-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-backup-vault-notifications-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/notification-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "DeleteBackupVaultNotifications"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup-vault-notifications))
(common-lisp:progn
 (common-lisp:defun delete-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-name)
   (common-lisp:declare (common-lisp:ignorable framework-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-framework-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/frameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-name))))
                                                        "DeleteFramework"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-framework))
(common-lisp:progn
 (common-lisp:defun delete-recovery-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name recovery-point-arn)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name recovery-point-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-recovery-point-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recovery-point-arn))))
                                                        "DeleteRecoveryPoint"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-recovery-point))
(common-lisp:progn
 (common-lisp:defun delete-report-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-plan-name)
   (common-lisp:declare (common-lisp:ignorable report-plan-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-report-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/report-plans/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'report-plan-name))))
                                                        "DeleteReportPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-report-plan))
(common-lisp:progn
 (common-lisp:defun describe-backup-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-job-id)
   (common-lisp:declare (common-lisp:ignorable backup-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-backup-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-job-id))))
                                                        "DescribeBackupJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-backup-job))
(common-lisp:progn
 (common-lisp:defun describe-backup-vault
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-backup-vault-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "DescribeBackupVault"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-backup-vault))
(common-lisp:progn
 (common-lisp:defun describe-copy-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key copy-job-id)
   (common-lisp:declare (common-lisp:ignorable copy-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-copy-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/copy-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'copy-job-id))))
                                                        "DescribeCopyJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-copy-job))
(common-lisp:progn
 (common-lisp:defun describe-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-name)
   (common-lisp:declare (common-lisp:ignorable framework-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-framework-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/frameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-name))))
                                                        "DescribeFramework"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-framework))
(common-lisp:progn
 (common-lisp:defun describe-global-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'backup-request :method "GET" :path
                                "/global-settings" :protocol :rest-json
                                :operation "DescribeGlobalSettings" :params
                                `(("Action" ,@"DescribeGlobalSettings")
                                  ("Version" ,@"2018-11-15"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-global-settings))
(common-lisp:progn
 (common-lisp:defun describe-protected-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-protected-resource-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DescribeProtectedResource"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-protected-resource))
(common-lisp:progn
 (common-lisp:defun describe-recovery-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name recovery-point-arn)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name recovery-point-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-recovery-point-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recovery-point-arn))))
                                                        "DescribeRecoveryPoint"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-recovery-point))
(common-lisp:progn
 (common-lisp:defun describe-region-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'backup-request :method "GET" :path
                                "/account-settings" :protocol :rest-json
                                :operation "DescribeRegionSettings" :params
                                `(("Action" ,@"DescribeRegionSettings")
                                  ("Version" ,@"2018-11-15"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-region-settings))
(common-lisp:progn
 (common-lisp:defun describe-report-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-job-id)
   (common-lisp:declare (common-lisp:ignorable report-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-report-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/report-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'report-job-id))))
                                                        "DescribeReportJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-report-job))
(common-lisp:progn
 (common-lisp:defun describe-report-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-plan-name)
   (common-lisp:declare (common-lisp:ignorable report-plan-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-report-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/report-plans/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'report-plan-name))))
                                                        "DescribeReportPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-report-plan))
(common-lisp:progn
 (common-lisp:defun describe-restore-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key restore-job-id)
   (common-lisp:declare (common-lisp:ignorable restore-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-restore-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/restore-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'restore-job-id))))
                                                        "DescribeRestoreJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-restore-job))
(common-lisp:progn
 (common-lisp:defun disassociate-recovery-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name recovery-point-arn)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name recovery-point-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-recovery-point-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/~A/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recovery-point-arn))))
                                                        "DisassociateRecoveryPoint"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-recovery-point))
(common-lisp:progn
 (common-lisp:defun disassociate-recovery-point-from-parent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name recovery-point-arn)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name recovery-point-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-recovery-point-from-parent-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/~A/parentAssociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recovery-point-arn))))
                                                        "DisassociateRecoveryPointFromParent"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-recovery-point-from-parent))
(common-lisp:progn
 (common-lisp:defun export-backup-plan-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id)
   (common-lisp:declare (common-lisp:ignorable backup-plan-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-backup-plan-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/toTemplate/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "ExportBackupPlanTemplate"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-backup-plan-template))
(common-lisp:progn
 (common-lisp:defun get-backup-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id version-id)
   (common-lisp:declare (common-lisp:ignorable backup-plan-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backup-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "GetBackupPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backup-plan))
(common-lisp:progn
 (common-lisp:defun get-backup-plan-from-json
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-template-json)
   (common-lisp:declare (common-lisp:ignorable backup-plan-template-json))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backup-plan-from-jsoninput
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/backup/template/json/toPlan"
                                                        "GetBackupPlanFromJSON"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backup-plan-from-json))
(common-lisp:progn
 (common-lisp:defun get-backup-plan-from-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-template-id)
   (common-lisp:declare (common-lisp:ignorable backup-plan-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-backup-plan-from-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/template/plans/~A/toPlan"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "GetBackupPlanFromTemplate"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backup-plan-from-template))
(common-lisp:progn
 (common-lisp:defun get-backup-selection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id selection-id)
   (common-lisp:declare (common-lisp:ignorable backup-plan-id selection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backup-selection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/selections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'selection-id))))
                                                        "GetBackupSelection"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backup-selection))
(common-lisp:progn
 (common-lisp:defun get-backup-vault-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-backup-vault-access-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/access-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "GetBackupVaultAccessPolicy"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backup-vault-access-policy))
(common-lisp:progn
 (common-lisp:defun get-backup-vault-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-backup-vault-notifications-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/notification-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "GetBackupVaultNotifications"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backup-vault-notifications))
(common-lisp:progn
 (common-lisp:defun get-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key legal-hold-id)
   (common-lisp:declare (common-lisp:ignorable legal-hold-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-legal-hold-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/legal-holds/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'legal-hold-id))))
                                                        "GetLegalHold"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-legal-hold))
(common-lisp:progn
 (common-lisp:defun get-recovery-point-restore-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name recovery-point-arn)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name recovery-point-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-recovery-point-restore-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/~A/restore-metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recovery-point-arn))))
                                                        "GetRecoveryPointRestoreMetadata"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recovery-point-restore-metadata))
(common-lisp:progn
 (common-lisp:defun get-supported-resource-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'backup-request :method "GET" :path
                                "/supported-resource-types" :protocol
                                :rest-json :operation
                                "GetSupportedResourceTypes" :params
                                `(("Action" ,@"GetSupportedResourceTypes")
                                  ("Version" ,@"2018-11-15"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-supported-resource-types))
(common-lisp:progn
 (common-lisp:defun list-backup-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results by-resource-arn
                     by-state by-backup-vault-name by-created-before
                     by-created-after by-resource-type by-account-id
                     by-complete-after by-complete-before by-parent-job-id)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results by-resource-arn by-state
     by-backup-vault-name by-created-before by-created-after by-resource-type
     by-account-id by-complete-after by-complete-before by-parent-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backup-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/backup-jobs/"
                                                        "ListBackupJobs"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backup-jobs))
(common-lisp:progn
 (common-lisp:defun list-backup-plan-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backup-plan-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/backup/template/plans"
                                                        "ListBackupPlanTemplates"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backup-plan-templates))
(common-lisp:progn
 (common-lisp:defun list-backup-plan-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable backup-plan-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backup-plan-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/versions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "ListBackupPlanVersions"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backup-plan-versions))
(common-lisp:progn
 (common-lisp:defun list-backup-plans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results include-deleted)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results include-deleted))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backup-plans-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/backup/plans/"
                                                        "ListBackupPlans"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backup-plans))
(common-lisp:progn
 (common-lisp:defun list-backup-selections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable backup-plan-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backup-selections-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A/selections/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "ListBackupSelections"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backup-selections))
(common-lisp:progn
 (common-lisp:defun list-backup-vaults
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backup-vaults-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/backup-vaults/"
                                                        "ListBackupVaults"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backup-vaults))
(common-lisp:progn
 (common-lisp:defun list-copy-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results by-resource-arn
                     by-state by-created-before by-created-after
                     by-resource-type by-destination-vault-arn by-account-id
                     by-complete-before by-complete-after by-parent-job-id)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results by-resource-arn by-state
     by-created-before by-created-after by-resource-type
     by-destination-vault-arn by-account-id by-complete-before
     by-complete-after by-parent-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-copy-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/copy-jobs/"
                                                        "ListCopyJobs"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-copy-jobs))
(common-lisp:progn
 (common-lisp:defun list-frameworks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-frameworks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/audit/frameworks"
                                                        "ListFrameworks"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-frameworks))
(common-lisp:progn
 (common-lisp:defun list-legal-holds
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-legal-holds-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/legal-holds/"
                                                        "ListLegalHolds"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-legal-holds))
(common-lisp:progn
 (common-lisp:defun list-protected-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-protected-resources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/resources/"
                                                        "ListProtectedResources"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-protected-resources))
(common-lisp:progn
 (common-lisp:defun list-recovery-points-by-backup-vault
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name next-token max-results
                     by-resource-arn by-resource-type by-backup-plan-id
                     by-created-before by-created-after
                     by-parent-recovery-point-arn)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name next-token max-results
     by-resource-arn by-resource-type by-backup-plan-id by-created-before
     by-created-after by-parent-recovery-point-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recovery-points-by-backup-vault-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "ListRecoveryPointsByBackupVault"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recovery-points-by-backup-vault))
(common-lisp:progn
 (common-lisp:defun list-recovery-points-by-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key legal-hold-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable legal-hold-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recovery-points-by-legal-hold-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/legal-holds/~A/recovery-points"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'legal-hold-id))))
                                                        "ListRecoveryPointsByLegalHold"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recovery-points-by-legal-hold))
(common-lisp:progn
 (common-lisp:defun list-recovery-points-by-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recovery-points-by-resource-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resources/~A/recovery-points/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListRecoveryPointsByResource"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recovery-points-by-resource))
(common-lisp:progn
 (common-lisp:defun list-report-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key by-report-plan-name by-creation-before
                     by-creation-after by-status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable by-report-plan-name by-creation-before
     by-creation-after by-status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-report-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/audit/report-jobs"
                                                        "ListReportJobs"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-report-jobs))
(common-lisp:progn
 (common-lisp:defun list-report-plans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-report-plans-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/audit/report-plans"
                                                        "ListReportPlans"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-report-plans))
(common-lisp:progn
 (common-lisp:defun list-restore-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results by-account-id
                     by-created-before by-created-after by-status
                     by-complete-before by-complete-after)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results by-account-id
     by-created-before by-created-after by-status by-complete-before
     by-complete-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-restore-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/restore-jobs/"
                                                        "ListRestoreJobs"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-restore-jobs))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTags"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun put-backup-vault-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name policy)
   (common-lisp:declare (common-lisp:ignorable backup-vault-name policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-backup-vault-access-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/access-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "PutBackupVaultAccessPolicy"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-backup-vault-access-policy))
(common-lisp:progn
 (common-lisp:defun put-backup-vault-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name min-retention-days
                     max-retention-days changeable-for-days)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name min-retention-days
     max-retention-days changeable-for-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-backup-vault-lock-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/vault-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "PutBackupVaultLockConfiguration"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-backup-vault-lock-configuration))
(common-lisp:progn
 (common-lisp:defun put-backup-vault-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name snstopic-arn
                     backup-vault-events)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name snstopic-arn backup-vault-events))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-backup-vault-notifications-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/notification-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))))
                                                        "PutBackupVaultNotifications"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-backup-vault-notifications))
(common-lisp:progn
 (common-lisp:defun start-backup-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name resource-arn
                     iam-role-arn idempotency-token start-window-minutes
                     complete-window-minutes lifecycle recovery-point-tags
                     backup-options)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name resource-arn iam-role-arn
     idempotency-token start-window-minutes complete-window-minutes lifecycle
     recovery-point-tags backup-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-backup-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/backup-jobs"
                                                        "StartBackupJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-backup-job))
(common-lisp:progn
 (common-lisp:defun start-copy-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-point-arn
                     source-backup-vault-name destination-backup-vault-arn
                     iam-role-arn idempotency-token lifecycle)
   (common-lisp:declare
    (common-lisp:ignorable recovery-point-arn source-backup-vault-name
     destination-backup-vault-arn iam-role-arn idempotency-token lifecycle))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-copy-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/copy-jobs"
                                                        "StartCopyJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-copy-job))
(common-lisp:progn
 (common-lisp:defun start-report-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-plan-name idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable report-plan-name idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-report-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/report-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'report-plan-name))))
                                                        "StartReportJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-report-job))
(common-lisp:progn
 (common-lisp:defun start-restore-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-point-arn metadata iam-role-arn
                     idempotency-token resource-type)
   (common-lisp:declare
    (common-lisp:ignorable recovery-point-arn metadata iam-role-arn
     idempotency-token resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-restore-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/restore-jobs"
                                                        "StartRestoreJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-restore-job))
(common-lisp:progn
 (common-lisp:defun stop-backup-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-job-id)
   (common-lisp:declare (common-lisp:ignorable backup-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-backup-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-job-id))))
                                                        "StopBackupJob"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-backup-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-key-list)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-key-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/untag/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-backup-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-plan-id backup-plan)
   (common-lisp:declare (common-lisp:ignorable backup-plan-id backup-plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backup-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup/plans/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-plan-id))))
                                                        "UpdateBackupPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-backup-plan))
(common-lisp:progn
 (common-lisp:defun update-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-name framework-description
                     framework-controls idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable framework-name framework-description
     framework-controls idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-framework-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/frameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-name))))
                                                        "UpdateFramework"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-framework))
(common-lisp:progn
 (common-lisp:defun update-global-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-settings)
   (common-lisp:declare (common-lisp:ignorable global-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-global-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/global-settings"
                                                        "UpdateGlobalSettings"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-global-settings))
(common-lisp:progn
 (common-lisp:defun update-recovery-point-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-vault-name recovery-point-arn
                     lifecycle)
   (common-lisp:declare
    (common-lisp:ignorable backup-vault-name recovery-point-arn lifecycle))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-recovery-point-lifecycle-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backup-vaults/~A/recovery-points/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-vault-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recovery-point-arn))))
                                                        "UpdateRecoveryPointLifecycle"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-recovery-point-lifecycle))
(common-lisp:progn
 (common-lisp:defun update-region-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type-opt-in-preference
                     resource-type-management-preference)
   (common-lisp:declare
    (common-lisp:ignorable resource-type-opt-in-preference
     resource-type-management-preference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-region-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/account-settings"
                                                        "UpdateRegionSettings"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-region-settings))
(common-lisp:progn
 (common-lisp:defun update-report-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-plan-name report-plan-description
                     report-delivery-channel report-setting idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable report-plan-name report-plan-description
     report-delivery-channel report-setting idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-report-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'backup-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/report-plans/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'report-plan-name))))
                                                        "UpdateReportPlan"
                                                        "2018-11-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-report-plan))
