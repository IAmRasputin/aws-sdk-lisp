;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kendra/api
  (:use)
  (:nicknames #:aws/kendra)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kendra/api)
(common-lisp:progn
 (common-lisp:defclass kendra-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "kendra"))
 (common-lisp:export 'kendra-request))
(common-lisp:progn
 (common-lisp:define-condition kendra-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kendra-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ResourceAlreadyExistException" . resource-already-exist-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype access-control-configuration-id () 'common-lisp:string)
(common-lisp:deftype access-control-configuration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-configuration-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-control-configuration-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-configuration-summary
                    'make-access-control-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-control-configuration-summary-list ()
   '(trivial-types:proper-list access-control-configuration-summary))
 (common-lisp:defun |make-access-control-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-list-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-list-configuration-"))
   (key-path common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-list-configuration
                    'make-access-control-list-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-list-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-list-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-path))
      (common-lisp:list
       (common-lisp:cons "KeyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-list-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (acl-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-acl-configuration-"))
   (allowed-groups-column-name
    (common-lisp:error ":allowed-groups-column-name is required") :type
    (common-lisp:or column-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acl-configuration 'make-acl-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-groups-column-name))
      (common-lisp:list
       (common-lisp:cons "AllowedGroupsColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-result-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-result-attribute-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or string common-lisp:null))
   (value-type (common-lisp:error ":value-type is required") :type
    (common-lisp:or additional-result-attribute-value-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or additional-result-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-result-attribute
                    'make-additional-result-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-result-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-result-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "ValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-result-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-result-attribute-list ()
   '(trivial-types:proper-list additional-result-attribute))
 (common-lisp:defun |make-additional-result-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-result-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-result-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-result-attribute-value-"))
   (text-with-highlights-value common-lisp:nil :type
    (common-lisp:or text-with-highlights common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-result-attribute-value
                    'make-additional-result-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-result-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-result-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-with-highlights-value))
      (common-lisp:list
       (common-lisp:cons "TextWithHighlightsValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-result-attribute-value))
   common-lisp:nil))
(common-lisp:deftype additional-result-attribute-value-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (alfresco-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-alfresco-configuration-"))
   (site-url (common-lisp:error ":site-url is required") :type
    (common-lisp:or site-url common-lisp:null))
   (site-id (common-lisp:error ":site-id is required") :type
    (common-lisp:or site-id common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (ssl-certificate-s3path
    (common-lisp:error ":ssl-certificate-s3path is required") :type
    (common-lisp:or s3path common-lisp:null))
   (crawl-system-folders common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-comments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (entity-filter common-lisp:nil :type
    (common-lisp:or entity-filter common-lisp:null))
   (document-library-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (blog-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (wiki-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alfresco-configuration 'make-alfresco-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alfresco-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alfresco-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-url))
      (common-lisp:list
       (common-lisp:cons "SiteUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-certificate-s3path))
      (common-lisp:list
       (common-lisp:cons "SslCertificateS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-system-folders))
      (common-lisp:list
       (common-lisp:cons "CrawlSystemFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-comments))
      (common-lisp:list
       (common-lisp:cons "CrawlComments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-filter))
      (common-lisp:list
       (common-lisp:cons "EntityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-library-field-mappings))
      (common-lisp:list
       (common-lisp:cons "DocumentLibraryFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blog-field-mappings))
      (common-lisp:list
       (common-lisp:cons "BlogFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wiki-field-mappings))
      (common-lisp:list
       (common-lisp:cons "WikiFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alfresco-configuration))
   common-lisp:nil))
(common-lisp:deftype alfresco-entity () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype associate-entities-to-experience-failed-entity-list ()
   '(trivial-types:proper-list failed-entity))
 (common-lisp:defun |make-associate-entities-to-experience-failed-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-entities-to-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-entities-to-experience-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (entity-list (common-lisp:error ":entity-list is required") :type
    (common-lisp:or associate-entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-entities-to-experience-request
                    'make-associate-entities-to-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-entities-to-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-entities-to-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-list))
      (common-lisp:list
       (common-lisp:cons "EntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-entities-to-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-entities-to-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-entities-to-experience-response-"))
   (failed-entity-list common-lisp:nil :type
    (common-lisp:or associate-entities-to-experience-failed-entity-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-entities-to-experience-response
                    'make-associate-entities-to-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-entities-to-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-entities-to-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entity-list))
      (common-lisp:list
       (common-lisp:cons "FailedEntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-entities-to-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associate-entity-list ()
   '(trivial-types:proper-list entity-configuration))
 (common-lisp:defun |make-associate-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-personas-to-entities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-personas-to-entities-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (personas (common-lisp:error ":personas is required") :type
    (common-lisp:or entity-persona-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-personas-to-entities-request
                    'make-associate-personas-to-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-personas-to-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-personas-to-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'personas))
      (common-lisp:list
       (common-lisp:cons "Personas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-personas-to-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-personas-to-entities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-personas-to-entities-response-"))
   (failed-entity-list common-lisp:nil :type
    (common-lisp:or failed-entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-personas-to-entities-response
                    'make-associate-personas-to-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-personas-to-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-personas-to-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entity-list))
      (common-lisp:list
       (common-lisp:cons "FailedEntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-personas-to-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-filter-"))
   (and-all-filters common-lisp:nil :type
    (common-lisp:or attribute-filter-list common-lisp:null))
   (or-all-filters common-lisp:nil :type
    (common-lisp:or attribute-filter-list common-lisp:null))
   (not-filter common-lisp:nil :type
    (common-lisp:or attribute-filter common-lisp:null))
   (equals-to common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (contains-all common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (contains-any common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (greater-than common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (greater-than-or-equals common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (less-than common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null))
   (less-than-or-equals common-lisp:nil :type
    (common-lisp:or document-attribute common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-filter 'make-attribute-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-all-filters))
      (common-lisp:list
       (common-lisp:cons "AndAllFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-all-filters))
      (common-lisp:list
       (common-lisp:cons "OrAllFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-filter))
      (common-lisp:list
       (common-lisp:cons "NotFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals-to))
      (common-lisp:list
       (common-lisp:cons "EqualsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-all))
      (common-lisp:list
       (common-lisp:cons "ContainsAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-any))
      (common-lisp:list
       (common-lisp:cons "ContainsAny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greater-than))
      (common-lisp:list
       (common-lisp:cons "GreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'greater-than-or-equals))
      (common-lisp:list
       (common-lisp:cons "GreaterThanOrEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than))
      (common-lisp:list
       (common-lisp:cons "LessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than-or-equals))
      (common-lisp:list
       (common-lisp:cons "LessThanOrEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-filter-list ()
   '(trivial-types:proper-list attribute-filter))
 (common-lisp:defun |make-attribute-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (authentication-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-authentication-configuration-"))
   (basic-authentication common-lisp:nil :type
    (common-lisp:or basic-authentication-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authentication-configuration
                    'make-authentication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-authentication))
      (common-lisp:list
       (common-lisp:cons "BasicAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (basic-authentication-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-basic-authentication-configuration-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (credentials (common-lisp:error ":credentials is required") :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'basic-authentication-configuration
                    'make-basic-authentication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          basic-authentication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          basic-authentication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          basic-authentication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype basic-authentication-configuration-list ()
   '(trivial-types:proper-list basic-authentication-configuration))
 (common-lisp:defun |make-basic-authentication-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            basic-authentication-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-document-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (document-id-list (common-lisp:error ":document-id-list is required") :type
    (common-lisp:or document-id-list common-lisp:null))
   (data-source-sync-job-metric-target common-lisp:nil :type
    (common-lisp:or data-source-sync-job-metric-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-request
                    'make-batch-delete-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id-list))
      (common-lisp:list
       (common-lisp:cons "DocumentIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-sync-job-metric-target))
      (common-lisp:list
       (common-lisp:cons "DataSourceSyncJobMetricTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-document-response-"))
   (failed-documents common-lisp:nil :type
    (common-lisp:or batch-delete-document-response-failed-documents
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-response
                    'make-batch-delete-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-documents))
      (common-lisp:list
       (common-lisp:cons "FailedDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-document-response-failed-document (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-delete-document-response-failed-document-"))
   (id common-lisp:nil :type (common-lisp:or document-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-document-response-failed-document
                    'make-batch-delete-document-response-failed-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response-failed-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response-failed-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-document-response-failed-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-document-response-failed-documents ()
   '(trivial-types:proper-list batch-delete-document-response-failed-document))
 (common-lisp:defun |make-batch-delete-document-response-failed-documents|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-document-response-failed-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-document-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-document-status-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (document-info-list (common-lisp:error ":document-info-list is required")
    :type (common-lisp:or document-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-document-status-request
                    'make-batch-get-document-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-info-list))
      (common-lisp:list
       (common-lisp:cons "DocumentInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-document-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-document-status-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-get-document-status-response-errors
                    common-lisp:null))
   (document-status-list common-lisp:nil :type
    (common-lisp:or document-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-document-status-response
                    'make-batch-get-document-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-status-list))
      (common-lisp:list
       (common-lisp:cons "DocumentStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-document-status-response-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-document-status-response-error-"))
   (document-id common-lisp:nil :type
    (common-lisp:or document-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-document-status-response-error
                    'make-batch-get-document-status-response-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-response-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-response-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "DocumentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-document-status-response-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-document-status-response-errors ()
   '(trivial-types:proper-list batch-get-document-status-response-error))
 (common-lisp:defun |make-batch-get-document-status-response-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-document-status-response-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-document-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (documents (common-lisp:error ":documents is required") :type
    (common-lisp:or document-list common-lisp:null))
   (custom-document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or custom-document-enrichment-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-request
                    'make-batch-put-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "Documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDocumentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-document-response-"))
   (failed-documents common-lisp:nil :type
    (common-lisp:or batch-put-document-response-failed-documents
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-response
                    'make-batch-put-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-documents))
      (common-lisp:list
       (common-lisp:cons "FailedDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-document-response-failed-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-document-response-failed-document-"))
   (id common-lisp:nil :type (common-lisp:or document-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-document-response-failed-document
                    'make-batch-put-document-response-failed-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response-failed-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response-failed-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-document-response-failed-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-document-response-failed-documents ()
   '(trivial-types:proper-list batch-put-document-response-failed-document))
 (common-lisp:defun |make-batch-put-document-response-failed-documents|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-document-response-failed-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (box-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-box-configuration-"))
   (enterprise-id (common-lisp:error ":enterprise-id is required") :type
    (common-lisp:or enterprise-id common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (use-change-log common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-comments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-tasks common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-web-links common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (file-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (task-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (comment-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (web-link-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'box-configuration 'make-box-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input box-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input box-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enterprise-id))
      (common-lisp:list
       (common-lisp:cons "EnterpriseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-change-log))
      (common-lisp:list
       (common-lisp:cons "UseChangeLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-comments))
      (common-lisp:list
       (common-lisp:cons "CrawlComments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-tasks))
      (common-lisp:list
       (common-lisp:cons "CrawlTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-web-links))
      (common-lisp:list
       (common-lisp:cons "CrawlWebLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-field-mappings))
      (common-lisp:list
       (common-lisp:cons "FileFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-field-mappings))
      (common-lisp:list
       (common-lisp:cons "TaskFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comment-field-mappings))
      (common-lisp:list
       (common-lisp:cons "CommentFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-link-field-mappings))
      (common-lisp:list
       (common-lisp:cons "WebLinkFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input box-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity-units-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-capacity-units-configuration-"))
   (storage-capacity-units
    (common-lisp:error ":storage-capacity-units is required") :type
    (common-lisp:or storage-capacity-unit common-lisp:null))
   (query-capacity-units
    (common-lisp:error ":query-capacity-units is required") :type
    (common-lisp:or query-capacity-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'capacity-units-configuration
                    'make-capacity-units-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-units-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-units-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-units))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-capacity-units))
      (common-lisp:list
       (common-lisp:cons "QueryCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-units-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-detecting-columns ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-change-detecting-columns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype claim-regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (clear-query-suggestions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-clear-query-suggestions-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clear-query-suggestions-request
                    'make-clear-query-suggestions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clear-query-suggestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clear-query-suggestions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clear-query-suggestions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (click-feedback (:copier common-lisp:nil)
      (:conc-name "struct-shape-click-feedback-"))
   (result-id (common-lisp:error ":result-id is required") :type
    (common-lisp:or result-id common-lisp:null))
   (click-time (common-lisp:error ":click-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'click-feedback 'make-click-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input click-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input click-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'click-time))
      (common-lisp:list
       (common-lisp:cons "ClickTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input click-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype click-feedback-list ()
   '(trivial-types:proper-list click-feedback))
 (common-lisp:defun |make-click-feedback-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list click-feedback))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-configuration-"))
   (document-id-column-name
    (common-lisp:error ":document-id-column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (document-data-column-name
    (common-lisp:error ":document-data-column-name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (document-title-column-name common-lisp:nil :type
    (common-lisp:or column-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (change-detecting-columns
    (common-lisp:error ":change-detecting-columns is required") :type
    (common-lisp:or change-detecting-columns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-configuration 'make-column-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-id-column-name))
      (common-lisp:list
       (common-lisp:cons "DocumentIdColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-column-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-column-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-detecting-columns))
      (common-lisp:list
       (common-lisp:cons "ChangeDetectingColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-configuration))
   common-lisp:nil))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype condition-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-attachment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-attachment-configuration-"))
   (crawl-attachments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (attachment-field-mappings common-lisp:nil :type
    (common-lisp:or confluence-attachment-field-mappings-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-attachment-configuration
                    'make-confluence-attachment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-attachment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-attachment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-attachments))
      (common-lisp:list
       (common-lisp:cons "CrawlAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-field-mappings))
      (common-lisp:list
       (common-lisp:cons "AttachmentFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-attachment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype confluence-attachment-field-mappings-list ()
   '(trivial-types:proper-list confluence-attachment-to-index-field-mapping))
 (common-lisp:defun |make-confluence-attachment-field-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            confluence-attachment-to-index-field-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype confluence-attachment-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-attachment-to-index-field-mapping (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-confluence-attachment-to-index-field-mapping-"))
   (data-source-field-name common-lisp:nil :type
    (common-lisp:or confluence-attachment-field-name common-lisp:null))
   (date-field-format common-lisp:nil :type
    (common-lisp:or data-source-date-field-format common-lisp:null))
   (index-field-name common-lisp:nil :type
    (common-lisp:or index-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-attachment-to-index-field-mapping
                    'make-confluence-attachment-to-index-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-attachment-to-index-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-attachment-to-index-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-field-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-field-format))
      (common-lisp:list
       (common-lisp:cons "DateFieldFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-attachment-to-index-field-mapping))
   common-lisp:nil))
(common-lisp:deftype confluence-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-blog-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-blog-configuration-"))
   (blog-field-mappings common-lisp:nil :type
    (common-lisp:or confluence-blog-field-mappings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-blog-configuration
                    'make-confluence-blog-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-blog-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-blog-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blog-field-mappings))
      (common-lisp:list
       (common-lisp:cons "BlogFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-blog-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype confluence-blog-field-mappings-list ()
   '(trivial-types:proper-list confluence-blog-to-index-field-mapping))
 (common-lisp:defun |make-confluence-blog-field-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            confluence-blog-to-index-field-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype confluence-blog-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-blog-to-index-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-blog-to-index-field-mapping-"))
   (data-source-field-name common-lisp:nil :type
    (common-lisp:or confluence-blog-field-name common-lisp:null))
   (date-field-format common-lisp:nil :type
    (common-lisp:or data-source-date-field-format common-lisp:null))
   (index-field-name common-lisp:nil :type
    (common-lisp:or index-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-blog-to-index-field-mapping
                    'make-confluence-blog-to-index-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-blog-to-index-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-blog-to-index-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-field-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-field-format))
      (common-lisp:list
       (common-lisp:cons "DateFieldFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-blog-to-index-field-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-configuration-"))
   (server-url (common-lisp:error ":server-url is required") :type
    (common-lisp:or url common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or confluence-version common-lisp:null))
   (space-configuration common-lisp:nil :type
    (common-lisp:or confluence-space-configuration common-lisp:null))
   (page-configuration common-lisp:nil :type
    (common-lisp:or confluence-page-configuration common-lisp:null))
   (blog-configuration common-lisp:nil :type
    (common-lisp:or confluence-blog-configuration common-lisp:null))
   (attachment-configuration common-lisp:nil :type
    (common-lisp:or confluence-attachment-configuration common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (proxy-configuration common-lisp:nil :type
    (common-lisp:or proxy-configuration common-lisp:null))
   (authentication-type common-lisp:nil :type
    (common-lisp:or confluence-authentication-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-configuration 'make-confluence-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "ServerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-configuration))
      (common-lisp:list
       (common-lisp:cons "SpaceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-configuration))
      (common-lisp:list
       (common-lisp:cons "PageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blog-configuration))
      (common-lisp:list
       (common-lisp:cons "BlogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-configuration))
      (common-lisp:list
       (common-lisp:cons "AttachmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "ProxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-page-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-page-configuration-"))
   (page-field-mappings common-lisp:nil :type
    (common-lisp:or confluence-page-field-mappings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-page-configuration
                    'make-confluence-page-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-page-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-page-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-field-mappings))
      (common-lisp:list
       (common-lisp:cons "PageFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-page-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype confluence-page-field-mappings-list ()
   '(trivial-types:proper-list confluence-page-to-index-field-mapping))
 (common-lisp:defun |make-confluence-page-field-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            confluence-page-to-index-field-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype confluence-page-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-page-to-index-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-page-to-index-field-mapping-"))
   (data-source-field-name common-lisp:nil :type
    (common-lisp:or confluence-page-field-name common-lisp:null))
   (date-field-format common-lisp:nil :type
    (common-lisp:or data-source-date-field-format common-lisp:null))
   (index-field-name common-lisp:nil :type
    (common-lisp:or index-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-page-to-index-field-mapping
                    'make-confluence-page-to-index-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-page-to-index-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-page-to-index-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-field-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-field-format))
      (common-lisp:list
       (common-lisp:cons "DateFieldFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-page-to-index-field-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-space-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-space-configuration-"))
   (crawl-personal-spaces common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-archived-spaces common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-spaces common-lisp:nil :type
    (common-lisp:or confluence-space-list common-lisp:null))
   (exclude-spaces common-lisp:nil :type
    (common-lisp:or confluence-space-list common-lisp:null))
   (space-field-mappings common-lisp:nil :type
    (common-lisp:or confluence-space-field-mappings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-space-configuration
                    'make-confluence-space-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-space-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-space-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-personal-spaces))
      (common-lisp:list
       (common-lisp:cons "CrawlPersonalSpaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-archived-spaces))
      (common-lisp:list
       (common-lisp:cons "CrawlArchivedSpaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-spaces))
      (common-lisp:list
       (common-lisp:cons "IncludeSpaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-spaces))
      (common-lisp:list
       (common-lisp:cons "ExcludeSpaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'space-field-mappings))
      (common-lisp:list
       (common-lisp:cons "SpaceFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-space-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype confluence-space-field-mappings-list ()
   '(trivial-types:proper-list confluence-space-to-index-field-mapping))
 (common-lisp:defun |make-confluence-space-field-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            confluence-space-to-index-field-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype confluence-space-field-name () 'common-lisp:string)
(common-lisp:deftype confluence-space-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype confluence-space-list ()
   '(trivial-types:proper-list confluence-space-identifier))
 (common-lisp:defun |make-confluence-space-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            confluence-space-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (confluence-space-to-index-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-confluence-space-to-index-field-mapping-"))
   (data-source-field-name common-lisp:nil :type
    (common-lisp:or confluence-space-field-name common-lisp:null))
   (date-field-format common-lisp:nil :type
    (common-lisp:or data-source-date-field-format common-lisp:null))
   (index-field-name common-lisp:nil :type
    (common-lisp:or index-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confluence-space-to-index-field-mapping
                    'make-confluence-space-to-index-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confluence-space-to-index-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confluence-space-to-index-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-field-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-field-format))
      (common-lisp:list
       (common-lisp:cons "DateFieldFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confluence-space-to-index-field-mapping))
   common-lisp:nil))
(common-lisp:deftype confluence-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connection-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-configuration-"))
   (database-host (common-lisp:error ":database-host is required") :type
    (common-lisp:or database-host common-lisp:null))
   (database-port (common-lisp:error ":database-port is required") :type
    (common-lisp:or database-port common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or database-name common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-configuration 'make-connection-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-host))
      (common-lisp:list
       (common-lisp:cons "DatabaseHost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-port))
      (common-lisp:list
       (common-lisp:cons "DatabasePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (content-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-source-configuration-"))
   (data-source-ids common-lisp:nil :type
    (common-lisp:or data-source-id-list common-lisp:null))
   (faq-ids common-lisp:nil :type
    (common-lisp:or faq-ids-list common-lisp:null))
   (direct-put-content common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-source-configuration
                    'make-content-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-ids))
      (common-lisp:list
       (common-lisp:cons "DataSourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'faq-ids))
      (common-lisp:list
       (common-lisp:cons "FaqIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direct-put-content))
      (common-lisp:list
       (common-lisp:cons "DirectPutContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-source-configuration))
   common-lisp:nil))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (correction (:copier common-lisp:nil)
      (:conc-name "struct-shape-correction-"))
   (begin-offset common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (end-offset common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (corrected-term common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'correction 'make-correction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input correction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input correction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "Term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corrected-term))
      (common-lisp:list
       (common-lisp:cons "CorrectedTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input correction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype correction-list ()
   '(trivial-types:proper-list correction))
 (common-lisp:defun |make-correction-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list correction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crawl-depth () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-control-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-control-configuration-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-control-configuration-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (access-control-list common-lisp:nil :type
    (common-lisp:or principal-list common-lisp:null))
   (hierarchical-access-control-list common-lisp:nil :type
    (common-lisp:or hierarchical-principal-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-control-configuration-request
                    'make-create-access-control-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-control-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-control-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hierarchical-access-control-list))
      (common-lisp:list
       (common-lisp:cons "HierarchicalAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-control-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-control-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-access-control-configuration-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-control-configuration-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-control-configuration-response
                    'make-create-access-control-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-control-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-control-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-control-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or data-source-name common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or data-source-type common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or scan-schedule common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (custom-document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or custom-document-enrichment-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-request
                    'make-create-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDocumentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-source-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experience-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or experience-name common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or experience-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experience-request
                    'make-create-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experience-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experience-response
                    'make-create-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-faq-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-faq-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or faq-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (s3path (common-lisp:error ":s3path is required") :type
    (common-lisp:or s3path common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (file-format common-lisp:nil :type
    (common-lisp:or faq-file-format common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-faq-request 'make-create-faq-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-faq-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-faq-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "FileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-faq-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-faq-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-faq-response-"))
   (id common-lisp:nil :type (common-lisp:or faq-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-faq-response 'make-create-faq-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-faq-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-faq-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-faq-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-index-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or index-name common-lisp:null))
   (edition common-lisp:nil :type
    (common-lisp:or index-edition common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (user-token-configurations common-lisp:nil :type
    (common-lisp:or user-token-configuration-list common-lisp:null))
   (user-context-policy common-lisp:nil :type
    (common-lisp:or user-context-policy common-lisp:null))
   (user-group-resolution-configuration common-lisp:nil :type
    (common-lisp:or user-group-resolution-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-index-request 'make-create-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-token-configurations))
      (common-lisp:list
       (common-lisp:cons "UserTokenConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-policy))
      (common-lisp:list
       (common-lisp:cons "UserContextPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-resolution-configuration))
      (common-lisp:list
       (common-lisp:cons "UserGroupResolutionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-index-response-"))
   (id common-lisp:nil :type (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-index-response 'make-create-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-query-suggestions-block-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-query-suggestions-block-list-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or query-suggestions-block-list-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (source-s3path (common-lisp:error ":source-s3path is required") :type
    (common-lisp:or s3path common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-query-suggestions-block-list-request
                    'make-create-query-suggestions-block-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-query-suggestions-block-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-query-suggestions-block-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3path))
      (common-lisp:list
       (common-lisp:cons "SourceS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-query-suggestions-block-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-query-suggestions-block-list-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-query-suggestions-block-list-response-"))
   (id common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-query-suggestions-block-list-response
                    'make-create-query-suggestions-block-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-query-suggestions-block-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-query-suggestions-block-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-query-suggestions-block-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thesaurus-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thesaurus-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or thesaurus-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (source-s3path (common-lisp:error ":source-s3path is required") :type
    (common-lisp:or s3path common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thesaurus-request 'make-create-thesaurus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thesaurus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thesaurus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3path))
      (common-lisp:list
       (common-lisp:cons "SourceS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thesaurus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thesaurus-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thesaurus-response-"))
   (id common-lisp:nil :type (common-lisp:or thesaurus-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thesaurus-response
                    'make-create-thesaurus-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thesaurus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thesaurus-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thesaurus-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-document-enrichment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-document-enrichment-configuration-"))
   (inline-configurations common-lisp:nil :type
    (common-lisp:or inline-custom-document-enrichment-configuration-list
                    common-lisp:null))
   (pre-extraction-hook-configuration common-lisp:nil :type
    (common-lisp:or hook-configuration common-lisp:null))
   (post-extraction-hook-configuration common-lisp:nil :type
    (common-lisp:or hook-configuration common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-document-enrichment-configuration
                    'make-custom-document-enrichment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-document-enrichment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-document-enrichment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inline-configurations))
      (common-lisp:list
       (common-lisp:cons "InlineConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-extraction-hook-configuration))
      (common-lisp:list
       (common-lisp:cons "PreExtractionHookConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-extraction-hook-configuration))
      (common-lisp:list
       (common-lisp:cons "PostExtractionHookConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-document-enrichment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-configuration-"))
   (s3configuration common-lisp:nil :type
    (common-lisp:or s3data-source-configuration common-lisp:null))
   (share-point-configuration common-lisp:nil :type
    (common-lisp:or share-point-configuration common-lisp:null))
   (database-configuration common-lisp:nil :type
    (common-lisp:or database-configuration common-lisp:null))
   (salesforce-configuration common-lisp:nil :type
    (common-lisp:or salesforce-configuration common-lisp:null))
   (one-drive-configuration common-lisp:nil :type
    (common-lisp:or one-drive-configuration common-lisp:null))
   (service-now-configuration common-lisp:nil :type
    (common-lisp:or service-now-configuration common-lisp:null))
   (confluence-configuration common-lisp:nil :type
    (common-lisp:or confluence-configuration common-lisp:null))
   (google-drive-configuration common-lisp:nil :type
    (common-lisp:or google-drive-configuration common-lisp:null))
   (web-crawler-configuration common-lisp:nil :type
    (common-lisp:or web-crawler-configuration common-lisp:null))
   (work-docs-configuration common-lisp:nil :type
    (common-lisp:or work-docs-configuration common-lisp:null))
   (fsx-configuration common-lisp:nil :type
    (common-lisp:or fsx-configuration common-lisp:null))
   (slack-configuration common-lisp:nil :type
    (common-lisp:or slack-configuration common-lisp:null))
   (box-configuration common-lisp:nil :type
    (common-lisp:or box-configuration common-lisp:null))
   (quip-configuration common-lisp:nil :type
    (common-lisp:or quip-configuration common-lisp:null))
   (jira-configuration common-lisp:nil :type
    (common-lisp:or jira-configuration common-lisp:null))
   (git-hub-configuration common-lisp:nil :type
    (common-lisp:or git-hub-configuration common-lisp:null))
   (alfresco-configuration common-lisp:nil :type
    (common-lisp:or alfresco-configuration common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration
                    'make-data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "S3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'share-point-configuration))
      (common-lisp:list
       (common-lisp:cons "SharePointConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-configuration))
      (common-lisp:list
       (common-lisp:cons "DatabaseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'salesforce-configuration))
      (common-lisp:list
       (common-lisp:cons "SalesforceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'one-drive-configuration))
      (common-lisp:list
       (common-lisp:cons "OneDriveConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-now-configuration))
      (common-lisp:list
       (common-lisp:cons "ServiceNowConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confluence-configuration))
      (common-lisp:list
       (common-lisp:cons "ConfluenceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'google-drive-configuration))
      (common-lisp:list
       (common-lisp:cons "GoogleDriveConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-crawler-configuration))
      (common-lisp:list
       (common-lisp:cons "WebCrawlerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-docs-configuration))
      (common-lisp:list
       (common-lisp:cons "WorkDocsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fsx-configuration))
      (common-lisp:list
       (common-lisp:cons "FsxConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack-configuration))
      (common-lisp:list
       (common-lisp:cons "SlackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'box-configuration))
      (common-lisp:list
       (common-lisp:cons "BoxConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quip-configuration))
      (common-lisp:list
       (common-lisp:cons "QuipConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jira-configuration))
      (common-lisp:list
       (common-lisp:cons "JiraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-configuration))
      (common-lisp:list
       (common-lisp:cons "GitHubConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alfresco-configuration))
      (common-lisp:list
       (common-lisp:cons "AlfrescoConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   common-lisp:nil))
(common-lisp:deftype data-source-date-field-format () 'common-lisp:string)
(common-lisp:deftype data-source-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-group-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or principal-name common-lisp:null))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-group 'make-data-source-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-groups ()
   '(trivial-types:proper-list data-source-group))
 (common-lisp:defun |make-data-source-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-id-list ()
   '(trivial-types:proper-list data-source-id))
 (common-lisp:defun |make-data-source-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-source-inclusions-exclusions-strings ()
   '(trivial-types:proper-list
     data-source-inclusions-exclusions-strings-member))
 (common-lisp:defun |make-data-source-inclusions-exclusions-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-inclusions-exclusions-strings-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-inclusions-exclusions-strings-member ()
  'common-lisp:string)
(common-lisp:deftype data-source-name () 'common-lisp:string)
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-summary-"))
   (name common-lisp:nil :type
    (common-lisp:or data-source-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or data-source-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-summary 'make-data-source-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-summary-list ()
   '(trivial-types:proper-list data-source-summary))
 (common-lisp:defun |make-data-source-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-sync-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-sync-job-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-sync-job-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (data-source-error-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or data-source-sync-job-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job 'make-data-source-sync-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-error-code))
      (common-lisp:list
       (common-lisp:cons "DataSourceErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-sync-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-sync-job-history-list ()
   '(trivial-types:proper-list data-source-sync-job))
 (common-lisp:defun |make-data-source-sync-job-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-sync-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-sync-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-sync-job-metric-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-sync-job-metric-target-"))
   (data-source-id (common-lisp:error ":data-source-id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (data-source-sync-job-id common-lisp:nil :type
    (common-lisp:or data-source-sync-job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job-metric-target
                    'make-data-source-sync-job-metric-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metric-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metric-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-sync-job-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceSyncJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metric-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-sync-job-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-sync-job-metrics-"))
   (documents-added common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-modified common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-deleted common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-failed common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null))
   (documents-scanned common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-sync-job-metrics
                    'make-data-source-sync-job-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-added))
      (common-lisp:list
       (common-lisp:cons "DocumentsAdded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-modified))
      (common-lisp:list
       (common-lisp:cons "DocumentsModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-deleted))
      (common-lisp:list
       (common-lisp:cons "DocumentsDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-failed))
      (common-lisp:list
       (common-lisp:cons "DocumentsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents-scanned))
      (common-lisp:list
       (common-lisp:cons "DocumentsScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-sync-job-metrics))
   common-lisp:nil))
(common-lisp:deftype data-source-sync-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-to-index-field-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-to-index-field-mapping-"))
   (data-source-field-name
    (common-lisp:error ":data-source-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (date-field-format common-lisp:nil :type
    (common-lisp:or data-source-date-field-format common-lisp:null))
   (index-field-name (common-lisp:error ":index-field-name is required") :type
    (common-lisp:or index-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-to-index-field-mapping
                    'make-data-source-to-index-field-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-to-index-field-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-to-index-field-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-field-name))
      (common-lisp:list
       (common-lisp:cons "DataSourceFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-field-format))
      (common-lisp:list
       (common-lisp:cons "DateFieldFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-to-index-field-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-to-index-field-mapping-list ()
   '(trivial-types:proper-list data-source-to-index-field-mapping))
 (common-lisp:defun |make-data-source-to-index-field-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-to-index-field-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-source-vpc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-vpc-configuration-"))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or security-group-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-source-vpc-configuration
                    'make-data-source-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (database-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-configuration-"))
   (database-engine-type
    (common-lisp:error ":database-engine-type is required") :type
    (common-lisp:or database-engine-type common-lisp:null))
   (connection-configuration
    (common-lisp:error ":connection-configuration is required") :type
    (common-lisp:or connection-configuration common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (column-configuration
    (common-lisp:error ":column-configuration is required") :type
    (common-lisp:or column-configuration common-lisp:null))
   (acl-configuration common-lisp:nil :type
    (common-lisp:or acl-configuration common-lisp:null))
   (sql-configuration common-lisp:nil :type
    (common-lisp:or sql-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'database-configuration 'make-database-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-engine-type))
      (common-lisp:list
       (common-lisp:cons "DatabaseEngineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-configuration))
      (common-lisp:list
       (common-lisp:cons "ConnectionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-configuration))
      (common-lisp:list
       (common-lisp:cons "ColumnConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl-configuration))
      (common-lisp:list
       (common-lisp:cons "AclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-configuration))
      (common-lisp:list
       (common-lisp:cons "SqlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-configuration))
   common-lisp:nil))
(common-lisp:deftype database-engine-type () 'common-lisp:string)
(common-lisp:deftype database-host () 'common-lisp:string)
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:deftype database-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-control-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-control-configuration-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-control-configuration-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-control-configuration-request
                    'make-delete-access-control-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-control-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-access-control-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-access-control-configuration-response
                    'make-delete-access-control-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-source-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experience-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-experience-request
                    'make-delete-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experience-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-experience-response
                    'make-delete-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-faq-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-faq-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or faq-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-faq-request 'make-delete-faq-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-faq-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-faq-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-faq-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-index-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-index-request 'make-delete-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-principal-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-principal-mapping-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or group-id common-lisp:null))
   (ordering-id common-lisp:nil :type
    (common-lisp:or principal-ordering-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-principal-mapping-request
                    'make-delete-principal-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-principal-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-principal-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-id))
      (common-lisp:list
       (common-lisp:cons "OrderingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-principal-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-query-suggestions-block-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-query-suggestions-block-list-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or query-suggestions-block-list-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-query-suggestions-block-list-request
                    'make-delete-query-suggestions-block-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-suggestions-block-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-suggestions-block-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-query-suggestions-block-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thesaurus-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thesaurus-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or thesaurus-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thesaurus-request 'make-delete-thesaurus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thesaurus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thesaurus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thesaurus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-control-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-access-control-configuration-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-control-configuration-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-control-configuration-request
                    'make-describe-access-control-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-control-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-control-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-control-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-control-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-access-control-configuration-response-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-control-configuration-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (access-control-list common-lisp:nil :type
    (common-lisp:or principal-list common-lisp:null))
   (hierarchical-access-control-list common-lisp:nil :type
    (common-lisp:or hierarchical-principal-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-control-configuration-response
                    'make-describe-access-control-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-control-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-control-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hierarchical-access-control-list))
      (common-lisp:list
       (common-lisp:cons "HierarchicalAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-control-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-source-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-request
                    'make-describe-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-source-response-"))
   (id common-lisp:nil :type (common-lisp:or data-source-id common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or data-source-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-source-type common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-source-status common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or scan-schedule common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (custom-document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or custom-document-enrichment-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-source-response
                    'make-describe-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDocumentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-experience-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-experience-request
                    'make-describe-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-experience-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-experience-response-"))
   (id common-lisp:nil :type (common-lisp:or experience-id common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or experience-name common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or experience-endpoints common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or experience-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or experience-status common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-experience-response
                    'make-describe-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-faq-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-faq-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or faq-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-faq-request 'make-describe-faq-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-faq-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-faq-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-faq-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-faq-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-faq-response-"))
   (id common-lisp:nil :type (common-lisp:or faq-id common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or faq-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (s3path common-lisp:nil :type (common-lisp:or s3path common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or faq-status common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (file-format common-lisp:nil :type
    (common-lisp:or faq-file-format common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-faq-response 'make-describe-faq-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-faq-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-faq-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "FileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-faq-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-index-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-index-request 'make-describe-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-index-response-"))
   (name common-lisp:nil :type (common-lisp:or index-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (edition common-lisp:nil :type
    (common-lisp:or index-edition common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or index-status common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (document-metadata-configurations common-lisp:nil :type
    (common-lisp:or document-metadata-configuration-list common-lisp:null))
   (index-statistics common-lisp:nil :type
    (common-lisp:or index-statistics common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (capacity-units common-lisp:nil :type
    (common-lisp:or capacity-units-configuration common-lisp:null))
   (user-token-configurations common-lisp:nil :type
    (common-lisp:or user-token-configuration-list common-lisp:null))
   (user-context-policy common-lisp:nil :type
    (common-lisp:or user-context-policy common-lisp:null))
   (user-group-resolution-configuration common-lisp:nil :type
    (common-lisp:or user-group-resolution-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-index-response 'make-describe-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-metadata-configurations))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadataConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-statistics))
      (common-lisp:list
       (common-lisp:cons "IndexStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-units))
      (common-lisp:list
       (common-lisp:cons "CapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-token-configurations))
      (common-lisp:list
       (common-lisp:cons "UserTokenConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-policy))
      (common-lisp:list
       (common-lisp:cons "UserContextPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-resolution-configuration))
      (common-lisp:list
       (common-lisp:cons "UserGroupResolutionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-principal-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-principal-mapping-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-principal-mapping-request
                    'make-describe-principal-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-principal-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-principal-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-principal-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-principal-mapping-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-principal-mapping-response-"))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or group-id common-lisp:null))
   (group-ordering-id-summaries common-lisp:nil :type
    (common-lisp:or group-ordering-id-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-principal-mapping-response
                    'make-describe-principal-mapping-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-principal-mapping-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-principal-mapping-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-ordering-id-summaries))
      (common-lisp:list
       (common-lisp:cons "GroupOrderingIdSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-principal-mapping-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-query-suggestions-block-list-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-query-suggestions-block-list-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or query-suggestions-block-list-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-query-suggestions-block-list-request
                    'make-describe-query-suggestions-block-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-block-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-block-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-block-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-query-suggestions-block-list-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-query-suggestions-block-list-response-"))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (source-s3path common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (file-size-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-query-suggestions-block-list-response
                    'make-describe-query-suggestions-block-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-block-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-block-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3path))
      (common-lisp:list
       (common-lisp:cons "SourceS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size-bytes))
      (common-lisp:list
       (common-lisp:cons "FileSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-block-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-query-suggestions-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-query-suggestions-config-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-query-suggestions-config-request
                    'make-describe-query-suggestions-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-query-suggestions-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-query-suggestions-config-response-"))
   (mode common-lisp:nil :type (common-lisp:or mode common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or query-suggestions-status common-lisp:null))
   (query-log-look-back-window-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (include-queries-without-user-information common-lisp:nil :type
    (common-lisp:or object-boolean common-lisp:null))
   (minimum-number-of-querying-users common-lisp:nil :type
    (common-lisp:or minimum-number-of-querying-users common-lisp:null))
   (minimum-query-count common-lisp:nil :type
    (common-lisp:or minimum-query-count common-lisp:null))
   (last-suggestions-build-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-clear-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (total-suggestions-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-query-suggestions-config-response
                    'make-describe-query-suggestions-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-log-look-back-window-in-days))
      (common-lisp:list
       (common-lisp:cons "QueryLogLookBackWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-queries-without-user-information))
      (common-lisp:list
       (common-lisp:cons "IncludeQueriesWithoutUserInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-number-of-querying-users))
      (common-lisp:list
       (common-lisp:cons "MinimumNumberOfQueryingUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-query-count))
      (common-lisp:list
       (common-lisp:cons "MinimumQueryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-suggestions-build-time))
      (common-lisp:list
       (common-lisp:cons "LastSuggestionsBuildTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-clear-time))
      (common-lisp:list
       (common-lisp:cons "LastClearTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-suggestions-count))
      (common-lisp:list
       (common-lisp:cons "TotalSuggestionsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-suggestions-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thesaurus-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thesaurus-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or thesaurus-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thesaurus-request
                    'make-describe-thesaurus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thesaurus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thesaurus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thesaurus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thesaurus-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thesaurus-response-"))
   (id common-lisp:nil :type (common-lisp:or thesaurus-id common-lisp:null))
   (index-id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or thesaurus-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or thesaurus-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (source-s3path common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null))
   (file-size-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (term-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (synonym-rule-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thesaurus-response
                    'make-describe-thesaurus-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thesaurus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thesaurus-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3path))
      (common-lisp:list
       (common-lisp:cons "SourceS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size-bytes))
      (common-lisp:list
       (common-lisp:cons "FileSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-count))
      (common-lisp:list
       (common-lisp:cons "TermCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synonym-rule-count))
      (common-lisp:list
       (common-lisp:cons "SynonymRuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thesaurus-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-entities-from-experience-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-entities-from-experience-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (entity-list (common-lisp:error ":entity-list is required") :type
    (common-lisp:or disassociate-entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-entities-from-experience-request
                    'make-disassociate-entities-from-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-entities-from-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-entities-from-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-list))
      (common-lisp:list
       (common-lisp:cons "EntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-entities-from-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-entities-from-experience-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-entities-from-experience-response-"))
   (failed-entity-list common-lisp:nil :type
    (common-lisp:or failed-entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-entities-from-experience-response
                    'make-disassociate-entities-from-experience-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-entities-from-experience-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-entities-from-experience-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entity-list))
      (common-lisp:list
       (common-lisp:cons "FailedEntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-entities-from-experience-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disassociate-entity-list ()
   '(trivial-types:proper-list entity-configuration))
 (common-lisp:defun |make-disassociate-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-personas-from-entities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-personas-from-entities-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (entity-ids (common-lisp:error ":entity-ids is required") :type
    (common-lisp:or entity-ids-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-personas-from-entities-request
                    'make-disassociate-personas-from-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-personas-from-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-personas-from-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-ids))
      (common-lisp:list
       (common-lisp:cons "EntityIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-personas-from-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-personas-from-entities-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-personas-from-entities-response-"))
   (failed-entity-list common-lisp:nil :type
    (common-lisp:or failed-entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-personas-from-entities-response
                    'make-disassociate-personas-from-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-personas-from-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-personas-from-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entity-list))
      (common-lisp:list
       (common-lisp:cons "FailedEntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-personas-from-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document (:copier common-lisp:nil) (:conc-name "struct-shape-document-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or document-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or title common-lisp:null))
   (blob common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (s3path common-lisp:nil :type (common-lisp:or s3path common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or document-attribute-list common-lisp:null))
   (access-control-list common-lisp:nil :type
    (common-lisp:or principal-list common-lisp:null))
   (hierarchical-access-control-list common-lisp:nil :type
    (common-lisp:or hierarchical-principal-list common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (access-control-configuration-id common-lisp:nil :type
    (common-lisp:or access-control-configuration-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob))
      (common-lisp:list
       (common-lisp:cons "Blob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hierarchical-access-control-list))
      (common-lisp:list
       (common-lisp:cons "HierarchicalAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-configuration-id))
      (common-lisp:list
       (common-lisp:cons "AccessControlConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or document-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute 'make-document-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-condition-"))
   (condition-document-attribute-key
    (common-lisp:error ":condition-document-attribute-key is required") :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or condition-operator common-lisp:null))
   (condition-on-value common-lisp:nil :type
    (common-lisp:or document-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-condition
                    'make-document-attribute-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-document-attribute-key))
      (common-lisp:list
       (common-lisp:cons "ConditionDocumentAttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition-on-value))
      (common-lisp:list
       (common-lisp:cons "ConditionOnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-condition))
   common-lisp:nil))
(common-lisp:deftype document-attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-attribute-key-list ()
   '(trivial-types:proper-list document-attribute-key))
 (common-lisp:defun |make-document-attribute-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-attribute-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype document-attribute-list ()
   '(trivial-types:proper-list document-attribute))
 (common-lisp:defun |make-document-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype document-attribute-string-list-value ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-document-attribute-string-list-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-attribute-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-target-"))
   (target-document-attribute-key common-lisp:nil :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (target-document-attribute-value-deletion common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (target-document-attribute-value common-lisp:nil :type
    (common-lisp:or document-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-target
                    'make-document-attribute-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-document-attribute-key))
      (common-lisp:list
       (common-lisp:cons "TargetDocumentAttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-document-attribute-value-deletion))
      (common-lisp:list
       (common-lisp:cons "TargetDocumentAttributeValueDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-document-attribute-value))
      (common-lisp:list
       (common-lisp:cons "TargetDocumentAttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-value-"))
   (string-value common-lisp:nil :type
    (common-lisp:or document-attribute-string-value common-lisp:null))
   (string-list-value common-lisp:nil :type
    (common-lisp:or document-attribute-string-list-value common-lisp:null))
   (long-value common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (date-value common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-value 'make-document-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "StringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-list-value))
      (common-lisp:list
       (common-lisp:cons "StringListValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "LongValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-value))
      (common-lisp:list
       (common-lisp:cons "DateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-attribute-value-count-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-attribute-value-count-pair-"))
   (document-attribute-value common-lisp:nil :type
    (common-lisp:or document-attribute-value common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (facet-results common-lisp:nil :type
    (common-lisp:or facet-result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-attribute-value-count-pair
                    'make-document-attribute-value-count-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value-count-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value-count-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-value))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-results))
      (common-lisp:list
       (common-lisp:cons "FacetResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-attribute-value-count-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-attribute-value-count-pair-list ()
   '(trivial-types:proper-list document-attribute-value-count-pair))
 (common-lisp:defun |make-document-attribute-value-count-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-attribute-value-count-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-attribute-value-type () 'common-lisp:string)
(common-lisp:deftype document-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-id-list ()
   '(trivial-types:proper-list document-id))
 (common-lisp:defun |make-document-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (document-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-info-"))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or document-id common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or document-attribute-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document-info 'make-document-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "DocumentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-info-list ()
   '(trivial-types:proper-list document-info))
 (common-lisp:defun |make-document-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype document-list () '(trivial-types:proper-list document))
 (common-lisp:defun |make-document-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-metadata-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (document-metadata-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-metadata-configuration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or document-metadata-configuration-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or document-attribute-value-type common-lisp:null))
   (relevance common-lisp:nil :type
    (common-lisp:or relevance common-lisp:null))
   (search common-lisp:nil :type (common-lisp:or search common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-metadata-configuration
                    'make-document-metadata-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-metadata-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-metadata-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance))
      (common-lisp:list
       (common-lisp:cons "Relevance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search))
      (common-lisp:list
       (common-lisp:cons "Search"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-metadata-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-metadata-configuration-list ()
   '(trivial-types:proper-list document-metadata-configuration))
 (common-lisp:defun |make-document-metadata-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-metadata-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-metadata-configuration-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document-relevance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-relevance-configuration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or document-metadata-configuration-name common-lisp:null))
   (relevance (common-lisp:error ":relevance is required") :type
    (common-lisp:or relevance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-relevance-configuration
                    'make-document-relevance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-relevance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-relevance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance))
      (common-lisp:list
       (common-lisp:cons "Relevance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-relevance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-relevance-override-configuration-list ()
   '(trivial-types:proper-list document-relevance-configuration))
 (common-lisp:defun |make-document-relevance-override-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-relevance-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-status-list ()
   '(trivial-types:proper-list status))
 (common-lisp:defun |make-document-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (documents-metadata-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-documents-metadata-configuration-"))
   (s3prefix common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'documents-metadata-configuration
                    'make-documents-metadata-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          documents-metadata-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          documents-metadata-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          documents-metadata-configuration))
   common-lisp:nil))
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:deftype duration () 'common-lisp:string)
(common-lisp:deftype endpoint () 'common-lisp:string)
(common-lisp:deftype endpoint-type () 'common-lisp:string)
(common-lisp:deftype enterprise-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entity-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-configuration-"))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (entity-type (common-lisp:error ":entity-type is required") :type
    (common-lisp:or entity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-configuration 'make-entity-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-display-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-display-data-"))
   (user-name common-lisp:nil :type
    (common-lisp:or name-type common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or name-type common-lisp:null))
   (identified-user-name common-lisp:nil :type
    (common-lisp:or name-type common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or name-type common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-display-data 'make-entity-display-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-display-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-display-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-user-name))
      (common-lisp:list
       (common-lisp:cons "IdentifiedUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-display-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-filter ()
   '(trivial-types:proper-list alfresco-entity))
 (common-lisp:defun |make-entity-filter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alfresco-entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entity-ids-list ()
   '(trivial-types:proper-list entity-id))
 (common-lisp:defun |make-entity-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-persona-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-persona-configuration-"))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (persona (common-lisp:error ":persona is required") :type
    (common-lisp:or persona common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-persona-configuration
                    'make-entity-persona-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          entity-persona-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          entity-persona-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "Persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          entity-persona-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-persona-configuration-list ()
   '(trivial-types:proper-list entity-persona-configuration))
 (common-lisp:defun |make-entity-persona-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            entity-persona-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exclude-mime-types-list ()
   '(trivial-types:proper-list mime-type))
 (common-lisp:defun |make-exclude-mime-types-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mime-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype exclude-shared-drives-list ()
   '(trivial-types:proper-list shared-drive-id))
 (common-lisp:defun |make-exclude-shared-drives-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shared-drive-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype exclude-user-accounts-list ()
   '(trivial-types:proper-list user-account))
 (common-lisp:defun |make-exclude-user-accounts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experience-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-experience-configuration-"))
   (content-source-configuration common-lisp:nil :type
    (common-lisp:or content-source-configuration common-lisp:null))
   (user-identity-configuration common-lisp:nil :type
    (common-lisp:or user-identity-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experience-configuration 'make-experience-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experience-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experience-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-source-configuration))
      (common-lisp:list
       (common-lisp:cons "ContentSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-identity-configuration))
      (common-lisp:list
       (common-lisp:cons "UserIdentityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experience-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (experience-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-experience-endpoint-"))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or endpoint-type common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experience-endpoint 'make-experience-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experience-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experience-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experience-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experience-endpoints ()
   '(trivial-types:proper-list experience-endpoint))
 (common-lisp:defun |make-experience-endpoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experience-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experience-entities-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-experience-entities-summary-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or entity-type common-lisp:null))
   (display-data common-lisp:nil :type
    (common-lisp:or entity-display-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experience-entities-summary
                    'make-experience-entities-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          experience-entities-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          experience-entities-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-data))
      (common-lisp:list
       (common-lisp:cons "DisplayData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          experience-entities-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experience-entities-summary-list ()
   '(trivial-types:proper-list experience-entities-summary))
 (common-lisp:defun |make-experience-entities-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            experience-entities-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype experience-id () 'common-lisp:string)
(common-lisp:deftype experience-name () 'common-lisp:string)
(common-lisp:deftype experience-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiences-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiences-summary-"))
   (name common-lisp:nil :type
    (common-lisp:or experience-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or experience-id common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or experience-status common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or experience-endpoints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiences-summary 'make-experiences-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiences-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiences-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiences-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype experiences-summary-list ()
   '(trivial-types:proper-list experiences-summary))
 (common-lisp:defun |make-experiences-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiences-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (facet (:copier common-lisp:nil) (:conc-name "struct-shape-facet-"))
   (document-attribute-key common-lisp:nil :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (facets common-lisp:nil :type (common-lisp:or facet-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or top-document-attribute-value-count-pairs-size
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'facet 'make-facet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input facet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input facet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-key))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facets))
      (common-lisp:list
       (common-lisp:cons "Facets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input facet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype facet-list () '(trivial-types:proper-list facet))
 (common-lisp:defun |make-facet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list facet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (facet-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-facet-result-"))
   (document-attribute-key common-lisp:nil :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (document-attribute-value-type common-lisp:nil :type
    (common-lisp:or document-attribute-value-type common-lisp:null))
   (document-attribute-value-count-pairs common-lisp:nil :type
    (common-lisp:or document-attribute-value-count-pair-list
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'facet-result 'make-facet-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input facet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input facet-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-key))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-value-type))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributeValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-value-count-pairs))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributeValueCountPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input facet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype facet-result-list ()
   '(trivial-types:proper-list facet-result))
 (common-lisp:defun |make-facet-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list facet-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-entity-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failed-entity 'make-failed-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-entity-list ()
   '(trivial-types:proper-list failed-entity))
 (common-lisp:defun |make-failed-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:deftype faq-file-format () 'common-lisp:string)
(common-lisp:deftype faq-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype faq-ids-list () '(trivial-types:proper-list faq-id))
 (common-lisp:defun |make-faq-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list faq-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype faq-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (faq-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-faq-statistics-"))
   (indexed-question-answers-count
    (common-lisp:error ":indexed-question-answers-count is required") :type
    (common-lisp:or indexed-question-answers-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'faq-statistics 'make-faq-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input faq-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input faq-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'indexed-question-answers-count))
      (common-lisp:list
       (common-lisp:cons "IndexedQuestionAnswersCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input faq-statistics))
   common-lisp:nil))
(common-lisp:deftype faq-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (faq-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-faq-summary-"))
   (id common-lisp:nil :type (common-lisp:or faq-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or faq-name common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or faq-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (file-format common-lisp:nil :type
    (common-lisp:or faq-file-format common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'faq-summary 'make-faq-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input faq-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input faq-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "FileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input faq-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype faq-summary-items ()
   '(trivial-types:proper-list faq-summary))
 (common-lisp:defun |make-faq-summary-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list faq-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feedback-token () 'common-lisp:string)
(common-lisp:deftype file-system-id () 'common-lisp:string)
(common-lisp:deftype folder-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype folder-id-list () '(trivial-types:proper-list folder-id))
 (common-lisp:defun |make-folder-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (fsx-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-fsx-configuration-"))
   (file-system-id (common-lisp:error ":file-system-id is required") :type
    (common-lisp:or file-system-id common-lisp:null))
   (file-system-type (common-lisp:error ":file-system-type is required") :type
    (common-lisp:or fsx-file-system-type common-lisp:null))
   (vpc-configuration (common-lisp:error ":vpc-configuration is required")
    :type (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fsx-configuration 'make-fsx-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fsx-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fsx-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "FileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fsx-configuration))
   common-lisp:nil))
(common-lisp:deftype fsx-file-system-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-suggestions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-suggestions-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (query-text (common-lisp:error ":query-text is required") :type
    (common-lisp:or suggestion-query-text common-lisp:null))
   (max-suggestions-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-suggestions-request
                    'make-get-query-suggestions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-suggestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-suggestions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-text))
      (common-lisp:list
       (common-lisp:cons "QueryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-suggestions-count))
      (common-lisp:list
       (common-lisp:cons "MaxSuggestionsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-suggestions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-suggestions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-suggestions-response-"))
   (query-suggestions-id common-lisp:nil :type
    (common-lisp:or query-suggestions-id common-lisp:null))
   (suggestions common-lisp:nil :type
    (common-lisp:or suggestion-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-suggestions-response
                    'make-get-query-suggestions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-suggestions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-suggestions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-suggestions-id))
      (common-lisp:list
       (common-lisp:cons "QuerySuggestionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestions))
      (common-lisp:list
       (common-lisp:cons "Suggestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-suggestions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snapshots-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (interval (common-lisp:error ":interval is required") :type
    (common-lisp:or interval common-lisp:null))
   (metric-type (common-lisp:error ":metric-type is required") :type
    (common-lisp:or metric-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snapshots-request 'make-get-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "MetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snapshots-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snapshots-response-"))
   (snap-shot-time-filter common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null))
   (snapshots-data-header common-lisp:nil :type
    (common-lisp:or snapshots-data-header-fields common-lisp:null))
   (snapshots-data common-lisp:nil :type
    (common-lisp:or snapshots-data-records common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snapshots-response 'make-get-snapshots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snap-shot-time-filter))
      (common-lisp:list
       (common-lisp:cons "SnapShotTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshots-data-header))
      (common-lisp:list
       (common-lisp:cons "SnapshotsDataHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots-data))
      (common-lisp:list
       (common-lisp:cons "SnapshotsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (git-hub-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-git-hub-configuration-"))
   (saa-sconfiguration common-lisp:nil :type
    (common-lisp:or saa-sconfiguration common-lisp:null))
   (on-premise-configuration common-lisp:nil :type
    (common-lisp:or on-premise-configuration common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (use-change-log common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (git-hub-document-crawl-properties common-lisp:nil :type
    (common-lisp:or git-hub-document-crawl-properties common-lisp:null))
   (repository-filter common-lisp:nil :type
    (common-lisp:or repository-names common-lisp:null))
   (inclusion-folder-name-patterns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (inclusion-file-type-patterns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (inclusion-file-name-patterns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (exclusion-folder-name-patterns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (exclusion-file-type-patterns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (exclusion-file-name-patterns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (git-hub-repository-configuration-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-commit-configuration-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-issue-document-configuration-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-issue-comment-configuration-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-issue-attachment-configuration-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-pull-request-comment-configuration-field-mappings common-lisp:nil
    :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-pull-request-document-configuration-field-mappings common-lisp:nil
    :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (git-hub-pull-request-document-attachment-configuration-field-mappings
    common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'git-hub-configuration 'make-git-hub-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saa-sconfiguration))
      (common-lisp:list
       (common-lisp:cons "SaaSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premise-configuration))
      (common-lisp:list
       (common-lisp:cons "OnPremiseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-change-log))
      (common-lisp:list
       (common-lisp:cons "UseChangeLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-document-crawl-properties))
      (common-lisp:list
       (common-lisp:cons "GitHubDocumentCrawlProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-filter))
      (common-lisp:list
       (common-lisp:cons "RepositoryFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusion-folder-name-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionFolderNamePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusion-file-type-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionFileTypePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusion-file-name-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionFileNamePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusion-folder-name-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionFolderNamePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusion-file-type-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionFileTypePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusion-file-name-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionFileNamePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-repository-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubRepositoryConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-commit-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubCommitConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-issue-document-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubIssueDocumentConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-issue-comment-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubIssueCommentConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-issue-attachment-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubIssueAttachmentConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-pull-request-comment-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubPullRequestCommentConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-pull-request-document-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons "GitHubPullRequestDocumentConfigurationFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-pull-request-document-attachment-configuration-field-mappings))
      (common-lisp:list
       (common-lisp:cons
        "GitHubPullRequestDocumentAttachmentConfigurationFieldMappings"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (git-hub-document-crawl-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-git-hub-document-crawl-properties-"))
   (crawl-repository-documents common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-issue common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-issue-comment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-issue-comment-attachment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-pull-request common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-pull-request-comment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-pull-request-comment-attachment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'git-hub-document-crawl-properties
                    'make-git-hub-document-crawl-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-document-crawl-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-document-crawl-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-repository-documents))
      (common-lisp:list
       (common-lisp:cons "CrawlRepositoryDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-issue))
      (common-lisp:list
       (common-lisp:cons "CrawlIssue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-issue-comment))
      (common-lisp:list
       (common-lisp:cons "CrawlIssueComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-issue-comment-attachment))
      (common-lisp:list
       (common-lisp:cons "CrawlIssueCommentAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-pull-request))
      (common-lisp:list
       (common-lisp:cons "CrawlPullRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-pull-request-comment))
      (common-lisp:list
       (common-lisp:cons "CrawlPullRequestComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawl-pull-request-comment-attachment))
      (common-lisp:list
       (common-lisp:cons "CrawlPullRequestCommentAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-document-crawl-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (google-drive-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-google-drive-configuration-"))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (exclude-mime-types common-lisp:nil :type
    (common-lisp:or exclude-mime-types-list common-lisp:null))
   (exclude-user-accounts common-lisp:nil :type
    (common-lisp:or exclude-user-accounts-list common-lisp:null))
   (exclude-shared-drives common-lisp:nil :type
    (common-lisp:or exclude-shared-drives-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'google-drive-configuration
                    'make-google-drive-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          google-drive-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          google-drive-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-mime-types))
      (common-lisp:list
       (common-lisp:cons "ExcludeMimeTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-user-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludeUserAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-shared-drives))
      (common-lisp:list
       (common-lisp:cons "ExcludeSharedDrives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          google-drive-configuration))
   common-lisp:nil))
(common-lisp:deftype group-attribute-field () 'common-lisp:string)
(common-lisp:deftype group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (group-members (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-members-"))
   (member-groups common-lisp:nil :type
    (common-lisp:or member-groups common-lisp:null))
   (member-users common-lisp:nil :type
    (common-lisp:or member-users common-lisp:null))
   (s3pathfor-group-members common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-members 'make-group-members))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-members))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-members))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-groups))
      (common-lisp:list
       (common-lisp:cons "MemberGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-users))
      (common-lisp:list
       (common-lisp:cons "MemberUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3pathfor-group-members))
      (common-lisp:list
       (common-lisp:cons "S3PathforGroupMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-members))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-ordering-id-summaries ()
   '(trivial-types:proper-list group-ordering-id-summary))
 (common-lisp:defun |make-group-ordering-id-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            group-ordering-id-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (group-ordering-id-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-ordering-id-summary-"))
   (status common-lisp:nil :type
    (common-lisp:or principal-mapping-status common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (received-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (ordering-id common-lisp:nil :type
    (common-lisp:or principal-ordering-id common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-ordering-id-summary
                    'make-group-ordering-id-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          group-ordering-id-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          group-ordering-id-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-at))
      (common-lisp:list
       (common-lisp:cons "ReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-id))
      (common-lisp:list
       (common-lisp:cons "OrderingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          group-ordering-id-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-summary-"))
   (group-id common-lisp:nil :type (common-lisp:or group-id common-lisp:null))
   (ordering-id common-lisp:nil :type
    (common-lisp:or principal-ordering-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-summary 'make-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-id))
      (common-lisp:list
       (common-lisp:cons "OrderingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list principal-name))
 (common-lisp:defun |make-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchical-principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchical-principal-"))
   (principal-list (common-lisp:error ":principal-list is required") :type
    (common-lisp:or principal-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchical-principal 'make-hierarchical-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchical-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchical-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-list))
      (common-lisp:list
       (common-lisp:cons "PrincipalList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchical-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hierarchical-principal-list ()
   '(trivial-types:proper-list hierarchical-principal))
 (common-lisp:defun |make-hierarchical-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hierarchical-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (highlight (:copier common-lisp:nil)
      (:conc-name "struct-shape-highlight-"))
   (begin-offset (common-lisp:error ":begin-offset is required") :type
    (common-lisp:or integer common-lisp:null))
   (end-offset (common-lisp:error ":end-offset is required") :type
    (common-lisp:or integer common-lisp:null))
   (top-answer common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or highlight-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'highlight 'make-highlight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input highlight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input highlight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-answer))
      (common-lisp:list
       (common-lisp:cons "TopAnswer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input highlight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype highlight-list () '(trivial-types:proper-list highlight))
 (common-lisp:defun |make-highlight-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list highlight))
   aws-sdk/generator/shape::members))
(common-lisp:deftype highlight-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hook-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-hook-configuration-"))
   (invocation-condition common-lisp:nil :type
    (common-lisp:or document-attribute-condition common-lisp:null))
   (lambda-arn (common-lisp:error ":lambda-arn is required") :type
    (common-lisp:or lambda-arn common-lisp:null))
   (s3bucket (common-lisp:error ":s3bucket is required") :type
    (common-lisp:or s3bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hook-configuration 'make-hook-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hook-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hook-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-condition))
      (common-lisp:list
       (common-lisp:cons "InvocationCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hook-configuration))
   common-lisp:nil))
(common-lisp:deftype host () 'common-lisp:string)
(common-lisp:deftype identity-attribute-name () 'common-lisp:string)
(common-lisp:deftype importance () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (index-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-index-configuration-summary-"))
   (name common-lisp:nil :type (common-lisp:or index-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or index-id common-lisp:null))
   (edition common-lisp:nil :type
    (common-lisp:or index-edition common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updated-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or index-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-configuration-summary
                    'make-index-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          index-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          index-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          index-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype index-configuration-summary-list ()
   '(trivial-types:proper-list index-configuration-summary))
 (common-lisp:defun |make-index-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            index-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype index-edition () 'common-lisp:string)
(common-lisp:deftype index-field-name () 'common-lisp:string)
(common-lisp:deftype index-id () 'common-lisp:string)
(common-lisp:deftype index-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (index-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-index-statistics-"))
   (faq-statistics (common-lisp:error ":faq-statistics is required") :type
    (common-lisp:or faq-statistics common-lisp:null))
   (text-document-statistics
    (common-lisp:error ":text-document-statistics is required") :type
    (common-lisp:or text-document-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-statistics 'make-index-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'faq-statistics))
      (common-lisp:list
       (common-lisp:cons "FaqStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-document-statistics))
      (common-lisp:list
       (common-lisp:cons "TextDocumentStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-statistics))
   common-lisp:nil))
(common-lisp:deftype index-status () 'common-lisp:string)
(common-lisp:deftype indexed-question-answers-count () 'common-lisp:integer)
(common-lisp:deftype indexed-text-bytes () 'common-lisp:integer)
(common-lisp:deftype indexed-text-documents-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (inline-custom-document-enrichment-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-inline-custom-document-enrichment-configuration-"))
   (condition common-lisp:nil :type
    (common-lisp:or document-attribute-condition common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or document-attribute-target common-lisp:null))
   (document-content-deletion common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inline-custom-document-enrichment-configuration
                    'make-inline-custom-document-enrichment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inline-custom-document-enrichment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inline-custom-document-enrichment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-content-deletion))
      (common-lisp:list
       (common-lisp:cons "DocumentContentDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inline-custom-document-enrichment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inline-custom-document-enrichment-configuration-list ()
   '(trivial-types:proper-list
     inline-custom-document-enrichment-configuration))
 (common-lisp:defun |make-inline-custom-document-enrichment-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inline-custom-document-enrichment-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype interval () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype issue-sub-entity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype issue-sub-entity-filter ()
   '(trivial-types:proper-list issue-sub-entity))
 (common-lisp:defun |make-issue-sub-entity-filter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue-sub-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype issue-type () '(trivial-types:proper-list string))
 (common-lisp:defun |make-issue-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype issuer () 'common-lisp:string)
(common-lisp:deftype jira-account-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (jira-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-jira-configuration-"))
   (jira-account-url (common-lisp:error ":jira-account-url is required") :type
    (common-lisp:or jira-account-url common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (use-change-log common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (project common-lisp:nil :type (common-lisp:or project common-lisp:null))
   (issue-type common-lisp:nil :type
    (common-lisp:or issue-type common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or jira-status common-lisp:null))
   (issue-sub-entity-filter common-lisp:nil :type
    (common-lisp:or issue-sub-entity-filter common-lisp:null))
   (attachment-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (comment-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (issue-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (project-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (work-log-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jira-configuration 'make-jira-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jira-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jira-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jira-account-url))
      (common-lisp:list
       (common-lisp:cons "JiraAccountUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-change-log))
      (common-lisp:list
       (common-lisp:cons "UseChangeLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "Project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-type))
      (common-lisp:list
       (common-lisp:cons "IssueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issue-sub-entity-filter))
      (common-lisp:list
       (common-lisp:cons "IssueSubEntityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-field-mappings))
      (common-lisp:list
       (common-lisp:cons "AttachmentFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comment-field-mappings))
      (common-lisp:list
       (common-lisp:cons "CommentFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issue-field-mappings))
      (common-lisp:list
       (common-lisp:cons "IssueFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-field-mappings))
      (common-lisp:list
       (common-lisp:cons "ProjectFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-log-field-mappings))
      (common-lisp:list
       (common-lisp:cons "WorkLogFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jira-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype jira-status () '(trivial-types:proper-list string))
 (common-lisp:defun |make-jira-status|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (json-token-type-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-json-token-type-configuration-"))
   (user-name-attribute-field
    (common-lisp:error ":user-name-attribute-field is required") :type
    (common-lisp:or string common-lisp:null))
   (group-attribute-field
    (common-lisp:error ":group-attribute-field is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'json-token-type-configuration
                    'make-json-token-type-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          json-token-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          json-token-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-name-attribute-field))
      (common-lisp:list
       (common-lisp:cons "UserNameAttributeField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-attribute-field))
      (common-lisp:list
       (common-lisp:cons "GroupAttributeField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          json-token-type-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (jwt-token-type-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-jwt-token-type-configuration-"))
   (key-location (common-lisp:error ":key-location is required") :type
    (common-lisp:or key-location common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (secret-manager-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (user-name-attribute-field common-lisp:nil :type
    (common-lisp:or user-name-attribute-field common-lisp:null))
   (group-attribute-field common-lisp:nil :type
    (common-lisp:or group-attribute-field common-lisp:null))
   (issuer common-lisp:nil :type (common-lisp:or issuer common-lisp:null))
   (claim-regex common-lisp:nil :type
    (common-lisp:or claim-regex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jwt-token-type-configuration
                    'make-jwt-token-type-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jwt-token-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jwt-token-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-location))
      (common-lisp:list
       (common-lisp:cons "KeyLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "SecretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-name-attribute-field))
      (common-lisp:list
       (common-lisp:cons "UserNameAttributeField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-attribute-field))
      (common-lisp:list
       (common-lisp:cons "GroupAttributeField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'claim-regex))
      (common-lisp:list
       (common-lisp:cons "ClaimRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jwt-token-type-configuration))
   common-lisp:nil))
(common-lisp:deftype key-location () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-control-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-control-configurations-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or
     max-results-integer-for-list-access-control-configurations-request
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-control-configurations-request
                    'make-list-access-control-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-control-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-control-configurations-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (access-control-configurations
    (common-lisp:error ":access-control-configurations is required") :type
    (common-lisp:or access-control-configuration-summary-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-control-configurations-response
                    'make-list-access-control-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-configurations))
      (common-lisp:list
       (common-lisp:cons "AccessControlConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-sync-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-sync-jobs-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-data-source-sync-jobs-request
                    common-lisp:null))
   (start-time-filter common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null))
   (status-filter common-lisp:nil :type
    (common-lisp:or data-source-sync-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-sync-jobs-request
                    'make-list-data-source-sync-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-filter))
      (common-lisp:list
       (common-lisp:cons "StartTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-source-sync-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-source-sync-jobs-response-"))
   (history common-lisp:nil :type
    (common-lisp:or data-source-sync-job-history-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-source-sync-jobs-response
                    'make-list-data-source-sync-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'history))
      (common-lisp:list
       (common-lisp:cons "History"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-sync-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-data-sources-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-sources-response-"))
   (summary-items common-lisp:nil :type
    (common-lisp:or data-source-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-items))
      (common-lisp:list
       (common-lisp:cons "SummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entity-personas-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-entity-personas-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-entity-personas-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entity-personas-request
                    'make-list-entity-personas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entity-personas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entity-personas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entity-personas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entity-personas-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-entity-personas-response-"))
   (summary-items common-lisp:nil :type
    (common-lisp:or personas-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entity-personas-response
                    'make-list-entity-personas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entity-personas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entity-personas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-items))
      (common-lisp:list
       (common-lisp:cons "SummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entity-personas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experience-entities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experience-entities-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experience-entities-request
                    'make-list-experience-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experience-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experience-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experience-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experience-entities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experience-entities-response-"))
   (summary-items common-lisp:nil :type
    (common-lisp:or experience-entities-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experience-entities-response
                    'make-list-experience-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experience-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experience-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-items))
      (common-lisp:list
       (common-lisp:cons "SummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experience-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiences-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-experiences-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiences-request 'make-list-experiences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiences-response-"))
   (summary-items common-lisp:nil :type
    (common-lisp:or experiences-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiences-response
                    'make-list-experiences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-items))
      (common-lisp:list
       (common-lisp:cons "SummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-faqs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-faqs-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-faqs-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-faqs-request 'make-list-faqs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-faqs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-faqs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-faqs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-faqs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-faqs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (faq-summary-items common-lisp:nil :type
    (common-lisp:or faq-summary-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-faqs-response 'make-list-faqs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-faqs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-faqs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'faq-summary-items))
      (common-lisp:list
       (common-lisp:cons "FaqSummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-faqs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-older-than-ordering-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-older-than-ordering-id-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (ordering-id (common-lisp:error ":ordering-id is required") :type
    (common-lisp:or principal-ordering-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-principals-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-older-than-ordering-id-request
                    'make-list-groups-older-than-ordering-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-older-than-ordering-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-older-than-ordering-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-id))
      (common-lisp:list
       (common-lisp:cons "OrderingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-older-than-ordering-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-older-than-ordering-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-older-than-ordering-id-response-"))
   (groups-summaries common-lisp:nil :type
    (common-lisp:or list-of-group-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-older-than-ordering-id-response
                    'make-list-groups-older-than-ordering-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-older-than-ordering-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-older-than-ordering-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-summaries))
      (common-lisp:list
       (common-lisp:cons "GroupsSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-older-than-ordering-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-indices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-indices-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-indices-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-indices-request 'make-list-indices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-indices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-indices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-indices-response-"))
   (index-configuration-summary-items common-lisp:nil :type
    (common-lisp:or index-configuration-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-indices-response 'make-list-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'index-configuration-summary-items))
      (common-lisp:list
       (common-lisp:cons "IndexConfigurationSummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-group-summaries ()
   '(trivial-types:proper-list group-summary))
 (common-lisp:defun |make-list-of-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-query-suggestions-block-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-query-suggestions-block-lists-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-query-suggestions-block-lists
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-query-suggestions-block-lists-request
                    'make-list-query-suggestions-block-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-query-suggestions-block-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-query-suggestions-block-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-query-suggestions-block-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-query-suggestions-block-lists-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-query-suggestions-block-lists-response-"))
   (block-list-summary-items common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-summary-items
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-query-suggestions-block-lists-response
                    'make-list-query-suggestions-block-lists-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-query-suggestions-block-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-query-suggestions-block-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-list-summary-items))
      (common-lisp:list
       (common-lisp:cons "BlockListSummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-query-suggestions-block-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thesauri-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thesauri-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer-for-list-thesauri-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thesauri-request 'make-list-thesauri-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thesauri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thesauri-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thesauri-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thesauri-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thesauri-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (thesaurus-summary-items common-lisp:nil :type
    (common-lisp:or thesaurus-summary-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thesauri-response 'make-list-thesauri-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thesauri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thesauri-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thesaurus-summary-items))
      (common-lisp:list
       (common-lisp:cons "ThesaurusSummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thesauri-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype look-back-period () 'common-lisp:integer)
(common-lisp:deftype max-content-size-per-page-in-mega-bytes ()
  'common-lisp:single-float)
(common-lisp:deftype max-links-per-page () 'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-access-control-configurations-request
                     ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-data-source-sync-jobs-request
                     ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-data-sources-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-entity-personas-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-experiences-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-faqs-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-indices-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-principals-request ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-query-suggestions-block-lists
                     ()
  'common-lisp:integer)
(common-lisp:deftype max-results-integer-for-list-thesauri-request ()
  'common-lisp:integer)
(common-lisp:deftype max-urls-per-minute-crawl-rate () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-group-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or group-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-group 'make-member-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-groups ()
   '(trivial-types:proper-list member-group))
 (common-lisp:defun |make-member-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (member-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-user-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-user 'make-member-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-users () '(trivial-types:proper-list member-user))
 (common-lisp:defun |make-member-users|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:deftype mime-type () 'common-lisp:string)
(common-lisp:deftype minimum-number-of-querying-users () 'common-lisp:integer)
(common-lisp:deftype minimum-query-count () 'common-lisp:integer)
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:deftype name-type () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype object-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (on-premise-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-on-premise-configuration-"))
   (host-url (common-lisp:error ":host-url is required") :type
    (common-lisp:or url common-lisp:null))
   (organization-name (common-lisp:error ":organization-name is required")
    :type (common-lisp:or organization-name common-lisp:null))
   (ssl-certificate-s3path
    (common-lisp:error ":ssl-certificate-s3path is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'on-premise-configuration 'make-on-premise-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          on-premise-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          on-premise-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-url))
      (common-lisp:list
       (common-lisp:cons "HostUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-certificate-s3path))
      (common-lisp:list
       (common-lisp:cons "SslCertificateS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          on-premise-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (one-drive-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-one-drive-configuration-"))
   (tenant-domain (common-lisp:error ":tenant-domain is required") :type
    (common-lisp:or tenant-domain common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (one-drive-users (common-lisp:error ":one-drive-users is required") :type
    (common-lisp:or one-drive-users common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (disable-local-groups common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'one-drive-configuration 'make-one-drive-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          one-drive-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          one-drive-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-domain))
      (common-lisp:list
       (common-lisp:cons "TenantDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'one-drive-users))
      (common-lisp:list
       (common-lisp:cons "OneDriveUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-local-groups))
      (common-lisp:list
       (common-lisp:cons "DisableLocalGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          one-drive-configuration))
   common-lisp:nil))
(common-lisp:deftype one-drive-user () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype one-drive-user-list ()
   '(trivial-types:proper-list one-drive-user))
 (common-lisp:defun |make-one-drive-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list one-drive-user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (one-drive-users (:copier common-lisp:nil)
      (:conc-name "struct-shape-one-drive-users-"))
   (one-drive-user-list common-lisp:nil :type
    (common-lisp:or one-drive-user-list common-lisp:null))
   (one-drive-user-s3path common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export (common-lisp:list 'one-drive-users 'make-one-drive-users))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input one-drive-users))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input one-drive-users))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'one-drive-user-list))
      (common-lisp:list
       (common-lisp:cons "OneDriveUserList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'one-drive-user-s3path))
      (common-lisp:list
       (common-lisp:cons "OneDriveUserS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input one-drive-users))
   common-lisp:nil))
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:deftype organization-id () 'common-lisp:string)
(common-lisp:deftype organization-name () 'common-lisp:string)
(common-lisp:deftype persona () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (personas-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-personas-summary-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or entity-id common-lisp:null))
   (persona common-lisp:nil :type (common-lisp:or persona common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'personas-summary 'make-personas-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input personas-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input personas-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "Persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input personas-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype personas-summary-list ()
   '(trivial-types:proper-list personas-summary))
 (common-lisp:defun |make-personas-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list personas-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or principal-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or principal-type common-lisp:null))
   (access (common-lisp:error ":access is required") :type
    (common-lisp:or read-access-type common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "Access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list principal))
 (common-lisp:defun |make-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal-mapping-status () 'common-lisp:string)
(common-lisp:deftype principal-name () 'common-lisp:string)
(common-lisp:deftype principal-ordering-id () 'common-lisp:integer)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype private-channel-filter ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-private-channel-filter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype project () '(trivial-types:proper-list string))
 (common-lisp:defun |make-project|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (proxy-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-proxy-configuration-"))
   (host (common-lisp:error ":host is required") :type
    (common-lisp:or host common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port common-lisp:null))
   (credentials common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proxy-configuration 'make-proxy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proxy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proxy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proxy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-channel-filter ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-public-channel-filter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-principal-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-principal-mapping-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (data-source-id common-lisp:nil :type
    (common-lisp:or data-source-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or group-id common-lisp:null))
   (group-members (common-lisp:error ":group-members is required") :type
    (common-lisp:or group-members common-lisp:null))
   (ordering-id common-lisp:nil :type
    (common-lisp:or principal-ordering-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-principal-mapping-request
                    'make-put-principal-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-principal-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-principal-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "DataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-members))
      (common-lisp:list
       (common-lisp:cons "GroupMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-id))
      (common-lisp:list
       (common-lisp:cons "OrderingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-principal-mapping-request))
   common-lisp:nil))
(common-lisp:deftype query-capacity-unit () 'common-lisp:integer)
(common-lisp:deftype query-id () 'common-lisp:string)
(common-lisp:deftype query-identifiers-enclosing-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (query-text common-lisp:nil :type
    (common-lisp:or query-text common-lisp:null))
   (attribute-filter common-lisp:nil :type
    (common-lisp:or attribute-filter common-lisp:null))
   (facets common-lisp:nil :type (common-lisp:or facet-list common-lisp:null))
   (requested-document-attributes common-lisp:nil :type
    (common-lisp:or document-attribute-key-list common-lisp:null))
   (query-result-type-filter common-lisp:nil :type
    (common-lisp:or query-result-type common-lisp:null))
   (document-relevance-override-configurations common-lisp:nil :type
    (common-lisp:or document-relevance-override-configuration-list
                    common-lisp:null))
   (page-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (page-size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (sorting-configuration common-lisp:nil :type
    (common-lisp:or sorting-configuration common-lisp:null))
   (user-context common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (visitor-id common-lisp:nil :type
    (common-lisp:or visitor-id common-lisp:null))
   (spell-correction-configuration common-lisp:nil :type
    (common-lisp:or spell-correction-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-request 'make-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-text))
      (common-lisp:list
       (common-lisp:cons "QueryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-filter))
      (common-lisp:list
       (common-lisp:cons "AttributeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facets))
      (common-lisp:list
       (common-lisp:cons "Facets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-document-attributes))
      (common-lisp:list
       (common-lisp:cons "RequestedDocumentAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-result-type-filter))
      (common-lisp:list
       (common-lisp:cons "QueryResultTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-relevance-override-configurations))
      (common-lisp:list
       (common-lisp:cons "DocumentRelevanceOverrideConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sorting-configuration))
      (common-lisp:list
       (common-lisp:cons "SortingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context))
      (common-lisp:list
       (common-lisp:cons "UserContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visitor-id))
      (common-lisp:list
       (common-lisp:cons "VisitorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spell-correction-configuration))
      (common-lisp:list
       (common-lisp:cons "SpellCorrectionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-result-"))
   (query-id common-lisp:nil :type (common-lisp:or query-id common-lisp:null))
   (result-items common-lisp:nil :type
    (common-lisp:or query-result-item-list common-lisp:null))
   (facet-results common-lisp:nil :type
    (common-lisp:or facet-result-list common-lisp:null))
   (total-number-of-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (warnings common-lisp:nil :type
    (common-lisp:or warning-list common-lisp:null))
   (spell-corrected-queries common-lisp:nil :type
    (common-lisp:or spell-corrected-query-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-result 'make-query-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-items))
      (common-lisp:list
       (common-lisp:cons "ResultItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-results))
      (common-lisp:list
       (common-lisp:cons "FacetResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-results))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spell-corrected-queries))
      (common-lisp:list
       (common-lisp:cons "SpellCorrectedQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-result))
   common-lisp:nil))
(common-lisp:deftype query-result-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-result-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-result-item-"))
   (id common-lisp:nil :type (common-lisp:or result-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or query-result-type common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or query-result-format common-lisp:null))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or additional-result-attribute-list common-lisp:null))
   (document-id common-lisp:nil :type
    (common-lisp:or document-id common-lisp:null))
   (document-title common-lisp:nil :type
    (common-lisp:or text-with-highlights common-lisp:null))
   (document-excerpt common-lisp:nil :type
    (common-lisp:or text-with-highlights common-lisp:null))
   (document-uri common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (document-attributes common-lisp:nil :type
    (common-lisp:or document-attribute-list common-lisp:null))
   (score-attributes common-lisp:nil :type
    (common-lisp:or score-attributes common-lisp:null))
   (feedback-token common-lisp:nil :type
    (common-lisp:or feedback-token common-lisp:null))
   (table-excerpt common-lisp:nil :type
    (common-lisp:or table-excerpt common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-result-item 'make-query-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "DocumentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-title))
      (common-lisp:list
       (common-lisp:cons "DocumentTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-excerpt))
      (common-lisp:list
       (common-lisp:cons "DocumentExcerpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-uri))
      (common-lisp:list
       (common-lisp:cons "DocumentURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-attributes))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-attributes))
      (common-lisp:list
       (common-lisp:cons "ScoreAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-token))
      (common-lisp:list
       (common-lisp:cons "FeedbackToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-excerpt))
      (common-lisp:list
       (common-lisp:cons "TableExcerpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-result-item-list ()
   '(trivial-types:proper-list query-result-item))
 (common-lisp:defun |make-query-result-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-result-type () 'common-lisp:string)
(common-lisp:deftype query-suggestions-block-list-id () 'common-lisp:string)
(common-lisp:deftype query-suggestions-block-list-name () 'common-lisp:string)
(common-lisp:deftype query-suggestions-block-list-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-suggestions-block-list-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-suggestions-block-list-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (item-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-suggestions-block-list-summary
                    'make-query-suggestions-block-list-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-suggestions-block-list-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-suggestions-block-list-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-suggestions-block-list-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-suggestions-block-list-summary-items ()
   '(trivial-types:proper-list query-suggestions-block-list-summary))
 (common-lisp:defun |make-query-suggestions-block-list-summary-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            query-suggestions-block-list-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-suggestions-id () 'common-lisp:string)
(common-lisp:deftype query-suggestions-status () 'common-lisp:string)
(common-lisp:deftype query-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quip-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-quip-configuration-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (crawl-file-comments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-chat-rooms common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-attachments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (folder-ids common-lisp:nil :type
    (common-lisp:or folder-id-list common-lisp:null))
   (thread-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (message-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (attachment-field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quip-configuration 'make-quip-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quip-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quip-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-file-comments))
      (common-lisp:list
       (common-lisp:cons "CrawlFileComments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-chat-rooms))
      (common-lisp:list
       (common-lisp:cons "CrawlChatRooms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-attachments))
      (common-lisp:list
       (common-lisp:cons "CrawlAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-ids))
      (common-lisp:list
       (common-lisp:cons "FolderIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thread-field-mappings))
      (common-lisp:list
       (common-lisp:cons "ThreadFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-field-mappings))
      (common-lisp:list
       (common-lisp:cons "MessageFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-field-mappings))
      (common-lisp:list
       (common-lisp:cons "AttachmentFieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quip-configuration))
   common-lisp:nil))
(common-lisp:deftype read-access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relevance (:copier common-lisp:nil)
      (:conc-name "struct-shape-relevance-"))
   (freshness common-lisp:nil :type
    (common-lisp:or document-metadata-boolean common-lisp:null))
   (importance common-lisp:nil :type
    (common-lisp:or importance common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or duration common-lisp:null))
   (rank-order common-lisp:nil :type (common-lisp:or order common-lisp:null))
   (value-importance-map common-lisp:nil :type
    (common-lisp:or value-importance-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'relevance 'make-relevance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relevance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relevance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'freshness))
      (common-lisp:list
       (common-lisp:cons "Freshness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'importance))
      (common-lisp:list
       (common-lisp:cons "Importance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank-order))
      (common-lisp:list
       (common-lisp:cons "RankOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-importance-map))
      (common-lisp:list
       (common-lisp:cons "ValueImportanceMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relevance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (relevance-feedback (:copier common-lisp:nil)
      (:conc-name "struct-shape-relevance-feedback-"))
   (result-id (common-lisp:error ":result-id is required") :type
    (common-lisp:or result-id common-lisp:null))
   (relevance-value (common-lisp:error ":relevance-value is required") :type
    (common-lisp:or relevance-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relevance-feedback 'make-relevance-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relevance-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relevance-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-value))
      (common-lisp:list
       (common-lisp:cons "RelevanceValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relevance-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relevance-feedback-list ()
   '(trivial-types:proper-list relevance-feedback))
 (common-lisp:defun |make-relevance-feedback-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list relevance-feedback))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relevance-type () 'common-lisp:string)
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-names ()
   '(trivial-types:proper-list repository-name))
 (common-lisp:defun |make-repository-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exist-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exist-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exist-exception
                    'resource-already-exist-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message)))
(common-lisp:deftype result-id () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3data-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3data-source-configuration-"))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (inclusion-prefixes common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (documents-metadata-configuration common-lisp:nil :type
    (common-lisp:or documents-metadata-configuration common-lisp:null))
   (access-control-list-configuration common-lisp:nil :type
    (common-lisp:or access-control-list-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3data-source-configuration
                    'make-s3data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-prefixes))
      (common-lisp:list
       (common-lisp:cons "InclusionPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'documents-metadata-configuration))
      (common-lisp:list
       (common-lisp:cons "DocumentsMetadataConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-list-configuration))
      (common-lisp:list
       (common-lisp:cons "AccessControlListConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3data-source-configuration))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3path (:copier common-lisp:nil) (:conc-name "struct-shape-s3path-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3path 'make-s3path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sconfiguration (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sconfiguration-"))
   (organization-name (common-lisp:error ":organization-name is required")
    :type (common-lisp:or organization-name common-lisp:null))
   (host-url (common-lisp:error ":host-url is required") :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sconfiguration 'make-saa-sconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-url))
      (common-lisp:list
       (common-lisp:cons "HostUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-chatter-feed-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-chatter-feed-configuration-"))
   (document-data-field-name
    (common-lisp:error ":document-data-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (include-filter-types common-lisp:nil :type
    (common-lisp:or salesforce-chatter-feed-include-filter-types
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-chatter-feed-configuration
                    'make-salesforce-chatter-feed-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-chatter-feed-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-chatter-feed-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-filter-types))
      (common-lisp:list
       (common-lisp:cons "IncludeFilterTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-chatter-feed-configuration))
   common-lisp:nil))
(common-lisp:deftype salesforce-chatter-feed-include-filter-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype salesforce-chatter-feed-include-filter-types ()
   '(trivial-types:proper-list salesforce-chatter-feed-include-filter-type))
 (common-lisp:defun |make-salesforce-chatter-feed-include-filter-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            salesforce-chatter-feed-include-filter-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-configuration-"))
   (server-url (common-lisp:error ":server-url is required") :type
    (common-lisp:or url common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (standard-object-configurations common-lisp:nil :type
    (common-lisp:or salesforce-standard-object-configuration-list
                    common-lisp:null))
   (knowledge-article-configuration common-lisp:nil :type
    (common-lisp:or salesforce-knowledge-article-configuration
                    common-lisp:null))
   (chatter-feed-configuration common-lisp:nil :type
    (common-lisp:or salesforce-chatter-feed-configuration common-lisp:null))
   (crawl-attachments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (standard-object-attachment-configuration common-lisp:nil :type
    (common-lisp:or salesforce-standard-object-attachment-configuration
                    common-lisp:null))
   (include-attachment-file-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclude-attachment-file-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-configuration 'make-salesforce-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-url))
      (common-lisp:list
       (common-lisp:cons "ServerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-object-configurations))
      (common-lisp:list
       (common-lisp:cons "StandardObjectConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-article-configuration))
      (common-lisp:list
       (common-lisp:cons "KnowledgeArticleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chatter-feed-configuration))
      (common-lisp:list
       (common-lisp:cons "ChatterFeedConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-attachments))
      (common-lisp:list
       (common-lisp:cons "CrawlAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-object-attachment-configuration))
      (common-lisp:list
       (common-lisp:cons "StandardObjectAttachmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-attachment-file-patterns))
      (common-lisp:list
       (common-lisp:cons "IncludeAttachmentFilePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-attachment-file-patterns))
      (common-lisp:list
       (common-lisp:cons "ExcludeAttachmentFilePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-custom-knowledge-article-type-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-salesforce-custom-knowledge-article-type-configuration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or salesforce-custom-knowledge-article-type-name
                    common-lisp:null))
   (document-data-field-name
    (common-lisp:error ":document-data-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-custom-knowledge-article-type-configuration
                    'make-salesforce-custom-knowledge-article-type-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-custom-knowledge-article-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-custom-knowledge-article-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-custom-knowledge-article-type-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype salesforce-custom-knowledge-article-type-configuration-list
                      ()
   '(trivial-types:proper-list
     salesforce-custom-knowledge-article-type-configuration))
 (common-lisp:defun |make-salesforce-custom-knowledge-article-type-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            salesforce-custom-knowledge-article-type-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype salesforce-custom-knowledge-article-type-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-knowledge-article-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-knowledge-article-configuration-"))
   (included-states (common-lisp:error ":included-states is required") :type
    (common-lisp:or salesforce-knowledge-article-state-list common-lisp:null))
   (standard-knowledge-article-type-configuration common-lisp:nil :type
    (common-lisp:or salesforce-standard-knowledge-article-type-configuration
                    common-lisp:null))
   (custom-knowledge-article-type-configurations common-lisp:nil :type
    (common-lisp:or salesforce-custom-knowledge-article-type-configuration-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-knowledge-article-configuration
                    'make-salesforce-knowledge-article-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-knowledge-article-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-knowledge-article-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included-states))
      (common-lisp:list
       (common-lisp:cons "IncludedStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-knowledge-article-type-configuration))
      (common-lisp:list
       (common-lisp:cons "StandardKnowledgeArticleTypeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-knowledge-article-type-configurations))
      (common-lisp:list
       (common-lisp:cons "CustomKnowledgeArticleTypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-knowledge-article-configuration))
   common-lisp:nil))
(common-lisp:deftype salesforce-knowledge-article-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype salesforce-knowledge-article-state-list ()
   '(trivial-types:proper-list salesforce-knowledge-article-state))
 (common-lisp:defun |make-salesforce-knowledge-article-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            salesforce-knowledge-article-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-standard-knowledge-article-type-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-salesforce-standard-knowledge-article-type-configuration-"))
   (document-data-field-name
    (common-lisp:error ":document-data-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-standard-knowledge-article-type-configuration
                    'make-salesforce-standard-knowledge-article-type-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-knowledge-article-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-knowledge-article-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-knowledge-article-type-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-standard-object-attachment-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-salesforce-standard-object-attachment-configuration-"))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-standard-object-attachment-configuration
                    'make-salesforce-standard-object-attachment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-object-attachment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-object-attachment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-object-attachment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-standard-object-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-standard-object-configuration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or salesforce-standard-object-name common-lisp:null))
   (document-data-field-name
    (common-lisp:error ":document-data-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-standard-object-configuration
                    'make-salesforce-standard-object-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-object-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-object-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-standard-object-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype salesforce-standard-object-configuration-list ()
   '(trivial-types:proper-list salesforce-standard-object-configuration))
 (common-lisp:defun |make-salesforce-standard-object-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            salesforce-standard-object-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype salesforce-standard-object-name () 'common-lisp:string)
(common-lisp:deftype scan-schedule () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (score-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-score-attributes-"))
   (score-confidence common-lisp:nil :type
    (common-lisp:or score-confidence common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'score-attributes 'make-score-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input score-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input score-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-confidence))
      (common-lisp:list
       (common-lisp:cons "ScoreConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input score-attributes))
   common-lisp:nil))
(common-lisp:deftype score-confidence () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search (:copier common-lisp:nil) (:conc-name "struct-shape-search-"))
   (facetable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (searchable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (displayable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (sortable common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search 'make-search))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facetable))
      (common-lisp:list
       (common-lisp:cons "Facetable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searchable))
      (common-lisp:list
       (common-lisp:cons "Searchable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'displayable))
      (common-lisp:list
       (common-lisp:cons "Displayable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sortable))
      (common-lisp:list
       (common-lisp:cons "Sortable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search))
   common-lisp:nil))
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list vpc-security-group-id))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype seed-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (seed-url-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-seed-url-configuration-"))
   (seed-urls (common-lisp:error ":seed-urls is required") :type
    (common-lisp:or seed-url-list common-lisp:null))
   (web-crawler-mode common-lisp:nil :type
    (common-lisp:or web-crawler-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'seed-url-configuration 'make-seed-url-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          seed-url-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          seed-url-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seed-urls))
      (common-lisp:list
       (common-lisp:cons "SeedUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-crawler-mode))
      (common-lisp:list
       (common-lisp:cons "WebCrawlerMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          seed-url-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype seed-url-list () '(trivial-types:proper-list seed-url))
 (common-lisp:defun |make-seed-url-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list seed-url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-configuration-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype service-now-authentication-type () 'common-lisp:string)
(common-lisp:deftype service-now-build-version-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-configuration-"))
   (host-url (common-lisp:error ":host-url is required") :type
    (common-lisp:or service-now-host-url common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (service-now-build-version
    (common-lisp:error ":service-now-build-version is required") :type
    (common-lisp:or service-now-build-version-type common-lisp:null))
   (knowledge-article-configuration common-lisp:nil :type
    (common-lisp:or service-now-knowledge-article-configuration
                    common-lisp:null))
   (service-catalog-configuration common-lisp:nil :type
    (common-lisp:or service-now-service-catalog-configuration
                    common-lisp:null))
   (authentication-type common-lisp:nil :type
    (common-lisp:or service-now-authentication-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-configuration
                    'make-service-now-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-url))
      (common-lisp:list
       (common-lisp:cons "HostUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-now-build-version))
      (common-lisp:list
       (common-lisp:cons "ServiceNowBuildVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-article-configuration))
      (common-lisp:list
       (common-lisp:cons "KnowledgeArticleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-configuration))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-configuration))
   common-lisp:nil))
(common-lisp:deftype service-now-host-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-knowledge-article-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-knowledge-article-configuration-"))
   (crawl-attachments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-attachment-file-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclude-attachment-file-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (document-data-field-name
    (common-lisp:error ":document-data-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (filter-query common-lisp:nil :type
    (common-lisp:or service-now-knowledge-article-filter-query
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-knowledge-article-configuration
                    'make-service-now-knowledge-article-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-knowledge-article-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-knowledge-article-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-attachments))
      (common-lisp:list
       (common-lisp:cons "CrawlAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-attachment-file-patterns))
      (common-lisp:list
       (common-lisp:cons "IncludeAttachmentFilePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-attachment-file-patterns))
      (common-lisp:list
       (common-lisp:cons "ExcludeAttachmentFilePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-query))
      (common-lisp:list
       (common-lisp:cons "FilterQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-knowledge-article-configuration))
   common-lisp:nil))
(common-lisp:deftype service-now-knowledge-article-filter-query ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-service-catalog-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-service-catalog-configuration-"))
   (crawl-attachments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-attachment-file-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclude-attachment-file-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (document-data-field-name
    (common-lisp:error ":document-data-field-name is required") :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-service-catalog-configuration
                    'make-service-now-service-catalog-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-service-catalog-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-service-catalog-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-attachments))
      (common-lisp:list
       (common-lisp:cons "CrawlAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-attachment-file-patterns))
      (common-lisp:list
       (common-lisp:cons "IncludeAttachmentFilePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-attachment-file-patterns))
      (common-lisp:list
       (common-lisp:cons "ExcludeAttachmentFilePatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-data-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentDataFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-service-catalog-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (share-point-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-share-point-configuration-"))
   (share-point-version (common-lisp:error ":share-point-version is required")
    :type (common-lisp:or share-point-version common-lisp:null))
   (urls (common-lisp:error ":urls is required") :type
    (common-lisp:or share-point-url-list common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (crawl-attachments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (use-change-log common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null))
   (document-title-field-name common-lisp:nil :type
    (common-lisp:or data-source-field-name common-lisp:null))
   (disable-local-groups common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ssl-certificate-s3path common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null))
   (authentication-type common-lisp:nil :type
    (common-lisp:or share-point-online-authentication-type common-lisp:null))
   (proxy-configuration common-lisp:nil :type
    (common-lisp:or proxy-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'share-point-configuration
                    'make-share-point-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          share-point-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          share-point-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-point-version))
      (common-lisp:list
       (common-lisp:cons "SharePointVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "Urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-attachments))
      (common-lisp:list
       (common-lisp:cons "CrawlAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-change-log))
      (common-lisp:list
       (common-lisp:cons "UseChangeLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-title-field-name))
      (common-lisp:list
       (common-lisp:cons "DocumentTitleFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-local-groups))
      (common-lisp:list
       (common-lisp:cons "DisableLocalGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-certificate-s3path))
      (common-lisp:list
       (common-lisp:cons "SslCertificateS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "ProxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          share-point-configuration))
   common-lisp:nil))
(common-lisp:deftype share-point-online-authentication-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype share-point-url-list () '(trivial-types:proper-list url))
 (common-lisp:defun |make-share-point-url-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list url))
   aws-sdk/generator/shape::members))
(common-lisp:deftype share-point-version () 'common-lisp:string)
(common-lisp:deftype shared-drive-id () 'common-lisp:string)
(common-lisp:deftype since-crawl-date () 'common-lisp:string)
(common-lisp:deftype site-id () 'common-lisp:string)
(common-lisp:deftype site-map () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (site-maps-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-site-maps-configuration-"))
   (site-maps (common-lisp:error ":site-maps is required") :type
    (common-lisp:or site-maps-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'site-maps-configuration 'make-site-maps-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          site-maps-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          site-maps-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-maps))
      (common-lisp:list
       (common-lisp:cons "SiteMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          site-maps-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype site-maps-list () '(trivial-types:proper-list site-map))
 (common-lisp:defun |make-site-maps-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list site-map))
   aws-sdk/generator/shape::members))
(common-lisp:deftype site-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (slack-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-configuration-"))
   (team-id (common-lisp:error ":team-id is required") :type
    (common-lisp:or team-id common-lisp:null))
   (secret-arn (common-lisp:error ":secret-arn is required") :type
    (common-lisp:or secret-arn common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (slack-entity-list (common-lisp:error ":slack-entity-list is required")
    :type (common-lisp:or slack-entity-list common-lisp:null))
   (use-change-log common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (crawl-bot-message common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (exclude-archived common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (since-crawl-date (common-lisp:error ":since-crawl-date is required") :type
    (common-lisp:or since-crawl-date common-lisp:null))
   (look-back-period common-lisp:nil :type
    (common-lisp:or look-back-period common-lisp:null))
   (private-channel-filter common-lisp:nil :type
    (common-lisp:or private-channel-filter common-lisp:null))
   (public-channel-filter common-lisp:nil :type
    (common-lisp:or public-channel-filter common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slack-configuration 'make-slack-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slack-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slack-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack-entity-list))
      (common-lisp:list
       (common-lisp:cons "SlackEntityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-change-log))
      (common-lisp:list
       (common-lisp:cons "UseChangeLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-bot-message))
      (common-lisp:list
       (common-lisp:cons "CrawlBotMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-archived))
      (common-lisp:list
       (common-lisp:cons "ExcludeArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'since-crawl-date))
      (common-lisp:list
       (common-lisp:cons "SinceCrawlDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'look-back-period))
      (common-lisp:list
       (common-lisp:cons "LookBackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-channel-filter))
      (common-lisp:list
       (common-lisp:cons "PrivateChannelFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-channel-filter))
      (common-lisp:list
       (common-lisp:cons "PublicChannelFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slack-configuration))
   common-lisp:nil))
(common-lisp:deftype slack-entity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slack-entity-list ()
   '(trivial-types:proper-list slack-entity))
 (common-lisp:defun |make-slack-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slack-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshots-data-header-fields ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-snapshots-data-header-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshots-data-record ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-snapshots-data-record|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshots-data-records ()
   '(trivial-types:proper-list snapshots-data-record))
 (common-lisp:defun |make-snapshots-data-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshots-data-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sorting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sorting-configuration-"))
   (document-attribute-key
    (common-lisp:error ":document-attribute-key is required") :type
    (common-lisp:or document-attribute-key common-lisp:null))
   (sort-order (common-lisp:error ":sort-order is required") :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sorting-configuration 'make-sorting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sorting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sorting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-attribute-key))
      (common-lisp:list
       (common-lisp:cons "DocumentAttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sorting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spell-corrected-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-spell-corrected-query-"))
   (suggested-query-text common-lisp:nil :type
    (common-lisp:or suggested-query-text common-lisp:null))
   (corrections common-lisp:nil :type
    (common-lisp:or correction-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spell-corrected-query 'make-spell-corrected-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spell-corrected-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spell-corrected-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suggested-query-text))
      (common-lisp:list
       (common-lisp:cons "SuggestedQueryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corrections))
      (common-lisp:list
       (common-lisp:cons "Corrections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spell-corrected-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spell-corrected-query-list ()
   '(trivial-types:proper-list spell-corrected-query))
 (common-lisp:defun |make-spell-corrected-query-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list spell-corrected-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (spell-correction-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-spell-correction-configuration-"))
   (include-query-spell-check-suggestions
    (common-lisp:error ":include-query-spell-check-suggestions is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spell-correction-configuration
                    'make-spell-correction-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spell-correction-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spell-correction-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-query-spell-check-suggestions))
      (common-lisp:list
       (common-lisp:cons "IncludeQuerySpellCheckSuggestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spell-correction-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-configuration-"))
   (query-identifiers-enclosing-option common-lisp:nil :type
    (common-lisp:or query-identifiers-enclosing-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-configuration 'make-sql-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-identifiers-enclosing-option))
      (common-lisp:list
       (common-lisp:cons "QueryIdentifiersEnclosingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-source-sync-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-source-sync-job-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-source-sync-job-request
                    'make-start-data-source-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-source-sync-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-source-sync-job-response-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-source-sync-job-response
                    'make-start-data-source-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (status (:copier common-lisp:nil) (:conc-name "struct-shape-status-"))
   (document-id common-lisp:nil :type
    (common-lisp:or document-id common-lisp:null))
   (document-status common-lisp:nil :type
    (common-lisp:or document-status common-lisp:null))
   (failure-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status 'make-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "DocumentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-status))
      (common-lisp:list
       (common-lisp:cons "DocumentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-data-source-sync-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-data-source-sync-job-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-data-source-sync-job-request
                    'make-stop-data-source-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-source-sync-job-request))
   common-lisp:nil))
(common-lisp:deftype storage-capacity-unit () 'common-lisp:integer)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (submit-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-submit-feedback-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or query-id common-lisp:null))
   (click-feedback-items common-lisp:nil :type
    (common-lisp:or click-feedback-list common-lisp:null))
   (relevance-feedback-items common-lisp:nil :type
    (common-lisp:or relevance-feedback-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'submit-feedback-request 'make-submit-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'click-feedback-items))
      (common-lisp:list
       (common-lisp:cons "ClickFeedbackItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relevance-feedback-items))
      (common-lisp:list
       (common-lisp:cons "RelevanceFeedbackItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype suggested-query-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (suggestion (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggestion-"))
   (id common-lisp:nil :type (common-lisp:or result-id common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or suggestion-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'suggestion 'make-suggestion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggestion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggestion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggestion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (suggestion-highlight (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggestion-highlight-"))
   (begin-offset common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (end-offset common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suggestion-highlight 'make-suggestion-highlight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggestion-highlight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggestion-highlight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggestion-highlight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suggestion-highlight-list ()
   '(trivial-types:proper-list suggestion-highlight))
 (common-lisp:defun |make-suggestion-highlight-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suggestion-highlight))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype suggestion-list ()
   '(trivial-types:proper-list suggestion))
 (common-lisp:defun |make-suggestion-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suggestion))
   aws-sdk/generator/shape::members))
(common-lisp:deftype suggestion-query-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (suggestion-text-with-highlights (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggestion-text-with-highlights-"))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (highlights common-lisp:nil :type
    (common-lisp:or suggestion-highlight-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suggestion-text-with-highlights
                    'make-suggestion-text-with-highlights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suggestion-text-with-highlights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suggestion-text-with-highlights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlights))
      (common-lisp:list
       (common-lisp:cons "Highlights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suggestion-text-with-highlights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (suggestion-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggestion-value-"))
   (text common-lisp:nil :type
    (common-lisp:or suggestion-text-with-highlights common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suggestion-value 'make-suggestion-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggestion-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggestion-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggestion-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-cell (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-cell-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (top-answer common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (highlighted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (header common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-cell 'make-table-cell))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-cell))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-cell))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-answer))
      (common-lisp:list
       (common-lisp:cons "TopAnswer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlighted))
      (common-lisp:list
       (common-lisp:cons "Highlighted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-cell))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-cell-list ()
   '(trivial-types:proper-list table-cell))
 (common-lisp:defun |make-table-cell-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-cell))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-excerpt (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-excerpt-"))
   (rows common-lisp:nil :type
    (common-lisp:or table-row-list common-lisp:null))
   (total-number-of-rows common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-excerpt 'make-table-excerpt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-excerpt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-excerpt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-rows))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-excerpt))
   common-lisp:nil))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-row (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-row-"))
   (cells common-lisp:nil :type
    (common-lisp:or table-cell-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-row 'make-table-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells))
      (common-lisp:list
       (common-lisp:cons "Cells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-row-list () '(trivial-types:proper-list table-row))
 (common-lisp:defun |make-table-row-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype team-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-")))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-configuration-"))
   (template common-lisp:nil :type (common-lisp:or template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-configuration 'make-template-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-configuration))
   common-lisp:nil))
(common-lisp:deftype tenant-domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-document-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-document-statistics-"))
   (indexed-text-documents-count
    (common-lisp:error ":indexed-text-documents-count is required") :type
    (common-lisp:or indexed-text-documents-count common-lisp:null))
   (indexed-text-bytes (common-lisp:error ":indexed-text-bytes is required")
    :type (common-lisp:or indexed-text-bytes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-document-statistics 'make-text-document-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'indexed-text-documents-count))
      (common-lisp:list
       (common-lisp:cons "IndexedTextDocumentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indexed-text-bytes))
      (common-lisp:list
       (common-lisp:cons "IndexedTextBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-document-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-with-highlights (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-with-highlights-"))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (highlights common-lisp:nil :type
    (common-lisp:or highlight-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-with-highlights 'make-text-with-highlights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-with-highlights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-with-highlights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlights))
      (common-lisp:list
       (common-lisp:cons "Highlights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-with-highlights))
   common-lisp:nil))
(common-lisp:deftype thesaurus-id () 'common-lisp:string)
(common-lisp:deftype thesaurus-name () 'common-lisp:string)
(common-lisp:deftype thesaurus-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thesaurus-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-thesaurus-summary-"))
   (id common-lisp:nil :type (common-lisp:or thesaurus-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or thesaurus-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or thesaurus-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thesaurus-summary 'make-thesaurus-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thesaurus-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thesaurus-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thesaurus-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thesaurus-summary-items ()
   '(trivial-types:proper-list thesaurus-summary))
 (common-lisp:defun |make-thesaurus-summary-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thesaurus-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-"))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype top-document-attribute-value-count-pairs-size ()
  'common-lisp:integer)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-control-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-control-configuration-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-control-configuration-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or access-control-configuration-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (access-control-list common-lisp:nil :type
    (common-lisp:or principal-list common-lisp:null))
   (hierarchical-access-control-list common-lisp:nil :type
    (common-lisp:or hierarchical-principal-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-control-configuration-request
                    'make-update-access-control-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-control-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-control-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hierarchical-access-control-list))
      (common-lisp:list
       (common-lisp:cons "HierarchicalAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-control-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-control-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-access-control-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-access-control-configuration-response
                    'make-update-access-control-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-control-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-control-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-control-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-source-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or data-source-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or data-source-name common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or data-source-configuration common-lisp:null))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or data-source-vpc-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or scan-schedule common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (custom-document-enrichment-configuration common-lisp:nil :type
    (common-lisp:or custom-document-enrichment-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-document-enrichment-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDocumentEnrichmentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experience-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experience-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or experience-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or experience-name common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or experience-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experience-request
                    'make-update-experience-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experience-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experience-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experience-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-index-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or index-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (document-metadata-configuration-updates common-lisp:nil :type
    (common-lisp:or document-metadata-configuration-list common-lisp:null))
   (capacity-units common-lisp:nil :type
    (common-lisp:or capacity-units-configuration common-lisp:null))
   (user-token-configurations common-lisp:nil :type
    (common-lisp:or user-token-configuration-list common-lisp:null))
   (user-context-policy common-lisp:nil :type
    (common-lisp:or user-context-policy common-lisp:null))
   (user-group-resolution-configuration common-lisp:nil :type
    (common-lisp:or user-group-resolution-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-index-request 'make-update-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-metadata-configuration-updates))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadataConfigurationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-units))
      (common-lisp:list
       (common-lisp:cons "CapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-token-configurations))
      (common-lisp:list
       (common-lisp:cons "UserTokenConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-policy))
      (common-lisp:list
       (common-lisp:cons "UserContextPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-resolution-configuration))
      (common-lisp:list
       (common-lisp:cons "UserGroupResolutionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-query-suggestions-block-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-query-suggestions-block-list-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or query-suggestions-block-list-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or query-suggestions-block-list-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (source-s3path common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-query-suggestions-block-list-request
                    'make-update-query-suggestions-block-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-query-suggestions-block-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-query-suggestions-block-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3path))
      (common-lisp:list
       (common-lisp:cons "SourceS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-query-suggestions-block-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-query-suggestions-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-query-suggestions-config-request-"))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or mode common-lisp:null))
   (query-log-look-back-window-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (include-queries-without-user-information common-lisp:nil :type
    (common-lisp:or object-boolean common-lisp:null))
   (minimum-number-of-querying-users common-lisp:nil :type
    (common-lisp:or minimum-number-of-querying-users common-lisp:null))
   (minimum-query-count common-lisp:nil :type
    (common-lisp:or minimum-query-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-query-suggestions-config-request
                    'make-update-query-suggestions-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-query-suggestions-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-query-suggestions-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-log-look-back-window-in-days))
      (common-lisp:list
       (common-lisp:cons "QueryLogLookBackWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-queries-without-user-information))
      (common-lisp:list
       (common-lisp:cons "IncludeQueriesWithoutUserInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-number-of-querying-users))
      (common-lisp:list
       (common-lisp:cons "MinimumNumberOfQueryingUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-query-count))
      (common-lisp:list
       (common-lisp:cons "MinimumQueryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-query-suggestions-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thesaurus-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thesaurus-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or thesaurus-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or thesaurus-name common-lisp:null))
   (index-id (common-lisp:error ":index-id is required") :type
    (common-lisp:or index-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (source-s3path common-lisp:nil :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thesaurus-request 'make-update-thesaurus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thesaurus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thesaurus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-id))
      (common-lisp:list
       (common-lisp:cons "IndexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3path))
      (common-lisp:list
       (common-lisp:cons "SourceS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thesaurus-request))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (urls (:copier common-lisp:nil) (:conc-name "struct-shape-urls-"))
   (seed-url-configuration common-lisp:nil :type
    (common-lisp:or seed-url-configuration common-lisp:null))
   (site-maps-configuration common-lisp:nil :type
    (common-lisp:or site-maps-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'urls 'make-urls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input urls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input urls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seed-url-configuration))
      (common-lisp:list
       (common-lisp:cons "SeedUrlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'site-maps-configuration))
      (common-lisp:list
       (common-lisp:cons "SiteMapsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input urls))
   common-lisp:nil))
(common-lisp:deftype user-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-context-"))
   (token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or principal-name common-lisp:null))
   (groups common-lisp:nil :type (common-lisp:or groups common-lisp:null))
   (data-source-groups common-lisp:nil :type
    (common-lisp:or data-source-groups common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-context 'make-user-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-groups))
      (common-lisp:list
       (common-lisp:cons "DataSourceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-context))
   common-lisp:nil))
(common-lisp:deftype user-context-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-group-resolution-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-group-resolution-configuration-"))
   (user-group-resolution-mode
    (common-lisp:error ":user-group-resolution-mode is required") :type
    (common-lisp:or user-group-resolution-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-group-resolution-configuration
                    'make-user-group-resolution-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-group-resolution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-group-resolution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-group-resolution-mode))
      (common-lisp:list
       (common-lisp:cons "UserGroupResolutionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-group-resolution-configuration))
   common-lisp:nil))
(common-lisp:deftype user-group-resolution-mode () 'common-lisp:string)
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-configuration-"))
   (identity-attribute-name common-lisp:nil :type
    (common-lisp:or identity-attribute-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-identity-configuration
                    'make-user-identity-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-identity-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-identity-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-attribute-name))
      (common-lisp:list
       (common-lisp:cons "IdentityAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-identity-configuration))
   common-lisp:nil))
(common-lisp:deftype user-name-attribute-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-token-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-token-configuration-"))
   (jwt-token-type-configuration common-lisp:nil :type
    (common-lisp:or jwt-token-type-configuration common-lisp:null))
   (json-token-type-configuration common-lisp:nil :type
    (common-lisp:or json-token-type-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-token-configuration 'make-user-token-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-token-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-token-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jwt-token-type-configuration))
      (common-lisp:list
       (common-lisp:cons "JwtTokenTypeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'json-token-type-configuration))
      (common-lisp:list
       (common-lisp:cons "JsonTokenTypeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-token-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-token-configuration-list ()
   '(trivial-types:proper-list user-token-configuration))
 (common-lisp:defun |make-user-token-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-token-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (kendra-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:deftype value-importance-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-value-importance-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype value-importance-map-key () 'common-lisp:string)
(common-lisp:deftype visitor-id () 'common-lisp:string)
(common-lisp:deftype vpc-security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (warning (:copier common-lisp:nil) (:conc-name "struct-shape-warning-"))
   (message common-lisp:nil :type
    (common-lisp:or warning-message common-lisp:null))
   (code common-lisp:nil :type (common-lisp:or warning-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'warning 'make-warning))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input warning))
   common-lisp:nil))
(common-lisp:deftype warning-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype warning-list () '(trivial-types:proper-list warning))
 (common-lisp:defun |make-warning-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list warning))
   aws-sdk/generator/shape::members))
(common-lisp:deftype warning-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (web-crawler-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-web-crawler-configuration-"))
   (urls (common-lisp:error ":urls is required") :type
    (common-lisp:or urls common-lisp:null))
   (crawl-depth common-lisp:nil :type
    (common-lisp:or crawl-depth common-lisp:null))
   (max-links-per-page common-lisp:nil :type
    (common-lisp:or max-links-per-page common-lisp:null))
   (max-content-size-per-page-in-mega-bytes common-lisp:nil :type
    (common-lisp:or max-content-size-per-page-in-mega-bytes common-lisp:null))
   (max-urls-per-minute-crawl-rate common-lisp:nil :type
    (common-lisp:or max-urls-per-minute-crawl-rate common-lisp:null))
   (url-inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (url-exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (proxy-configuration common-lisp:nil :type
    (common-lisp:or proxy-configuration common-lisp:null))
   (authentication-configuration common-lisp:nil :type
    (common-lisp:or authentication-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'web-crawler-configuration
                    'make-web-crawler-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          web-crawler-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          web-crawler-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "Urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-depth))
      (common-lisp:list
       (common-lisp:cons "CrawlDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-links-per-page))
      (common-lisp:list
       (common-lisp:cons "MaxLinksPerPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-content-size-per-page-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "MaxContentSizePerPageInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-urls-per-minute-crawl-rate))
      (common-lisp:list
       (common-lisp:cons "MaxUrlsPerMinuteCrawlRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'url-inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "UrlInclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'url-exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "UrlExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "ProxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "AuthenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          web-crawler-configuration))
   common-lisp:nil))
(common-lisp:deftype web-crawler-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (work-docs-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-work-docs-configuration-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (crawl-comments common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (use-change-log common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (inclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (exclusion-patterns common-lisp:nil :type
    (common-lisp:or data-source-inclusions-exclusions-strings
                    common-lisp:null))
   (field-mappings common-lisp:nil :type
    (common-lisp:or data-source-to-index-field-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'work-docs-configuration 'make-work-docs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          work-docs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          work-docs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-comments))
      (common-lisp:list
       (common-lisp:cons "CrawlComments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-change-log))
      (common-lisp:list
       (common-lisp:cons "UseChangeLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "InclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-patterns))
      (common-lisp:list
       (common-lisp:cons "ExclusionPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-mappings))
      (common-lisp:list
       (common-lisp:cons "FieldMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          work-docs-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-entities-to-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id entity-list)
   (common-lisp:declare (common-lisp:ignorable id index-id entity-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-entities-to-experience-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateEntitiesToExperience"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-entities-to-experience))
(common-lisp:progn
 (common-lisp:defun associate-personas-to-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id personas)
   (common-lisp:declare (common-lisp:ignorable id index-id personas))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-personas-to-entities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociatePersonasToEntities"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-personas-to-entities))
(common-lisp:progn
 (common-lisp:defun batch-delete-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id document-id-list
                     data-source-sync-job-metric-target)
   (common-lisp:declare
    (common-lisp:ignorable index-id document-id-list
     data-source-sync-job-metric-target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteDocument"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-document))
(common-lisp:progn
 (common-lisp:defun batch-get-document-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id document-info-list)
   (common-lisp:declare (common-lisp:ignorable index-id document-info-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-document-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetDocumentStatus"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-document-status))
(common-lisp:progn
 (common-lisp:defun batch-put-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id role-arn documents
                     custom-document-enrichment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable index-id role-arn documents
     custom-document-enrichment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-put-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchPutDocument"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-put-document))
(common-lisp:progn
 (common-lisp:defun clear-query-suggestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id)
   (common-lisp:declare (common-lisp:ignorable index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-clear-query-suggestions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ClearQuerySuggestions"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'clear-query-suggestions))
(common-lisp:progn
 (common-lisp:defun create-access-control-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id name description
                     access-control-list hierarchical-access-control-list
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable index-id name description access-control-list
     hierarchical-access-control-list client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-access-control-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAccessControlConfiguration"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-control-configuration))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name index-id type configuration
                     vpc-configuration description schedule role-arn tags
                     client-token language-code
                     custom-document-enrichment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name index-id type configuration vpc-configuration
     description schedule role-arn tags client-token language-code
     custom-document-enrichment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataSource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name index-id role-arn configuration
                     description client-token)
   (common-lisp:declare
    (common-lisp:ignorable name index-id role-arn configuration description
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExperience"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-experience))
(common-lisp:progn
 (common-lisp:defun create-faq
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id name description s3path role-arn
                     tags file-format client-token language-code)
   (common-lisp:declare
    (common-lisp:ignorable index-id name description s3path role-arn tags
     file-format client-token language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-faq-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateFaq"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-faq))
(common-lisp:progn
 (common-lisp:defun create-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name edition role-arn
                     server-side-encryption-configuration description
                     client-token tags user-token-configurations
                     user-context-policy user-group-resolution-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name edition role-arn
     server-side-encryption-configuration description client-token tags
     user-token-configurations user-context-policy
     user-group-resolution-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateIndex"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-index))
(common-lisp:progn
 (common-lisp:defun create-query-suggestions-block-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id name description source-s3path
                     client-token role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable index-id name description source-s3path client-token
     role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-query-suggestions-block-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateQuerySuggestionsBlockList"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-query-suggestions-block-list))
(common-lisp:progn
 (common-lisp:defun create-thesaurus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id name description role-arn tags
                     source-s3path client-token)
   (common-lisp:declare
    (common-lisp:ignorable index-id name description role-arn tags
     source-s3path client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thesaurus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateThesaurus"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-thesaurus))
(common-lisp:progn
 (common-lisp:defun delete-access-control-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id id)
   (common-lisp:declare (common-lisp:ignorable index-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-control-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccessControlConfiguration"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-control-configuration))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataSource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteExperience"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-experience))
(common-lisp:progn
 (common-lisp:defun delete-faq
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-faq-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteFaq"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-faq))
(common-lisp:progn
 (common-lisp:defun delete-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIndex"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-index))
(common-lisp:progn
 (common-lisp:defun delete-principal-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id data-source-id group-id
                     ordering-id)
   (common-lisp:declare
    (common-lisp:ignorable index-id data-source-id group-id ordering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-principal-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePrincipalMapping"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-principal-mapping))
(common-lisp:progn
 (common-lisp:defun delete-query-suggestions-block-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id id)
   (common-lisp:declare (common-lisp:ignorable index-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-query-suggestions-block-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteQuerySuggestionsBlockList"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-query-suggestions-block-list))
(common-lisp:progn
 (common-lisp:defun delete-thesaurus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thesaurus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteThesaurus"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-thesaurus))
(common-lisp:progn
 (common-lisp:defun describe-access-control-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id id)
   (common-lisp:declare (common-lisp:ignorable index-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-access-control-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAccessControlConfiguration"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-access-control-configuration))
(common-lisp:progn
 (common-lisp:defun describe-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataSource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-source))
(common-lisp:progn
 (common-lisp:defun describe-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExperience"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-experience))
(common-lisp:progn
 (common-lisp:defun describe-faq
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-faq-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFaq"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-faq))
(common-lisp:progn
 (common-lisp:defun describe-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIndex"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-index))
(common-lisp:progn
 (common-lisp:defun describe-principal-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id data-source-id group-id)
   (common-lisp:declare
    (common-lisp:ignorable index-id data-source-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-principal-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePrincipalMapping"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-principal-mapping))
(common-lisp:progn
 (common-lisp:defun describe-query-suggestions-block-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id id)
   (common-lisp:declare (common-lisp:ignorable index-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-query-suggestions-block-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeQuerySuggestionsBlockList"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-query-suggestions-block-list))
(common-lisp:progn
 (common-lisp:defun describe-query-suggestions-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id)
   (common-lisp:declare (common-lisp:ignorable index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-query-suggestions-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeQuerySuggestionsConfig"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-query-suggestions-config))
(common-lisp:progn
 (common-lisp:defun describe-thesaurus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thesaurus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeThesaurus"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-thesaurus))
(common-lisp:progn
 (common-lisp:defun disassociate-entities-from-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id entity-list)
   (common-lisp:declare (common-lisp:ignorable id index-id entity-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-entities-from-experience-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateEntitiesFromExperience"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-entities-from-experience))
(common-lisp:progn
 (common-lisp:defun disassociate-personas-from-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id entity-ids)
   (common-lisp:declare (common-lisp:ignorable id index-id entity-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-personas-from-entities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociatePersonasFromEntities"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-personas-from-entities))
(common-lisp:progn
 (common-lisp:defun get-query-suggestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id query-text
                     max-suggestions-count)
   (common-lisp:declare
    (common-lisp:ignorable index-id query-text max-suggestions-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-suggestions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetQuerySuggestions"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-suggestions))
(common-lisp:progn
 (common-lisp:defun get-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id interval metric-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id interval metric-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSnapshots"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-snapshots))
(common-lisp:progn
 (common-lisp:defun list-access-control-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-control-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccessControlConfigurations"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-control-configurations))
(common-lisp:progn
 (common-lisp:defun list-data-source-sync-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id next-token max-results
                     start-time-filter status-filter)
   (common-lisp:declare
    (common-lisp:ignorable id index-id next-token max-results start-time-filter
     status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-source-sync-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataSourceSyncJobs"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-source-sync-jobs))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataSources"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-entity-personas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable id index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entity-personas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEntityPersonas"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-entity-personas))
(common-lisp:progn
 (common-lisp:defun list-experience-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id next-token)
   (common-lisp:declare (common-lisp:ignorable id index-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-experience-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExperienceEntities"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experience-entities))
(common-lisp:progn
 (common-lisp:defun list-experiences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-experiences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExperiences"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiences))
(common-lisp:progn
 (common-lisp:defun list-faqs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-faqs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListFaqs"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-faqs))
(common-lisp:progn
 (common-lisp:defun list-groups-older-than-ordering-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id data-source-id ordering-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id data-source-id ordering-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-groups-older-than-ordering-id-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupsOlderThanOrderingId"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-groups-older-than-ordering-id))
(common-lisp:progn
 (common-lisp:defun list-indices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-indices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListIndices"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-indices))
(common-lisp:progn
 (common-lisp:defun list-query-suggestions-block-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-query-suggestions-block-lists-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListQuerySuggestionsBlockLists"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-query-suggestions-block-lists))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-thesauri
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable index-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thesauri-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListThesauri"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-thesauri))
(common-lisp:progn
 (common-lisp:defun put-principal-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id data-source-id group-id
                     group-members ordering-id role-arn)
   (common-lisp:declare
    (common-lisp:ignorable index-id data-source-id group-id group-members
     ordering-id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-principal-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutPrincipalMapping"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-principal-mapping))
(common-lisp:progn
 (common-lisp:defun query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id query-text attribute-filter
                     facets requested-document-attributes
                     query-result-type-filter
                     document-relevance-override-configurations page-number
                     page-size sorting-configuration user-context visitor-id
                     spell-correction-configuration)
   (common-lisp:declare
    (common-lisp:ignorable index-id query-text attribute-filter facets
     requested-document-attributes query-result-type-filter
     document-relevance-override-configurations page-number page-size
     sorting-configuration user-context visitor-id
     spell-correction-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Query"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query))
(common-lisp:progn
 (common-lisp:defun start-data-source-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-source-sync-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDataSourceSyncJob"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-source-sync-job))
(common-lisp:progn
 (common-lisp:defun stop-data-source-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id index-id)
   (common-lisp:declare (common-lisp:ignorable id index-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-data-source-sync-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDataSourceSyncJob"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-data-source-sync-job))
(common-lisp:progn
 (common-lisp:defun submit-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id query-id click-feedback-items
                     relevance-feedback-items)
   (common-lisp:declare
    (common-lisp:ignorable index-id query-id click-feedback-items
     relevance-feedback-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-submit-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SubmitFeedback"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-feedback))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access-control-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id id name description
                     access-control-list hierarchical-access-control-list)
   (common-lisp:declare
    (common-lisp:ignorable index-id id name description access-control-list
     hierarchical-access-control-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-access-control-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccessControlConfiguration"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-access-control-configuration))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name index-id configuration
                     vpc-configuration description schedule role-arn
                     language-code custom-document-enrichment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable id name index-id configuration vpc-configuration
     description schedule role-arn language-code
     custom-document-enrichment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDataSource"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-experience
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name index-id role-arn configuration
                     description)
   (common-lisp:declare
    (common-lisp:ignorable id name index-id role-arn configuration
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-experience-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateExperience"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-experience))
(common-lisp:progn
 (common-lisp:defun update-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name role-arn description
                     document-metadata-configuration-updates capacity-units
                     user-token-configurations user-context-policy
                     user-group-resolution-configuration)
   (common-lisp:declare
    (common-lisp:ignorable id name role-arn description
     document-metadata-configuration-updates capacity-units
     user-token-configurations user-context-policy
     user-group-resolution-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateIndex"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-index))
(common-lisp:progn
 (common-lisp:defun update-query-suggestions-block-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id id name description
                     source-s3path role-arn)
   (common-lisp:declare
    (common-lisp:ignorable index-id id name description source-s3path
     role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-query-suggestions-block-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateQuerySuggestionsBlockList"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-query-suggestions-block-list))
(common-lisp:progn
 (common-lisp:defun update-query-suggestions-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-id mode
                     query-log-look-back-window-in-days
                     include-queries-without-user-information
                     minimum-number-of-querying-users minimum-query-count)
   (common-lisp:declare
    (common-lisp:ignorable index-id mode query-log-look-back-window-in-days
     include-queries-without-user-information minimum-number-of-querying-users
     minimum-query-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-query-suggestions-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateQuerySuggestionsConfig"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-query-suggestions-config))
(common-lisp:progn
 (common-lisp:defun update-thesaurus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name index-id description role-arn
                     source-s3path)
   (common-lisp:declare
    (common-lisp:ignorable id name index-id description role-arn
     source-s3path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thesaurus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kendra-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateThesaurus"
                                                        "2019-02-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-thesaurus))
