;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/omics/api
  (:use)
  (:nicknames #:aws/omics)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/omics/api)
(common-lisp:progn
 (common-lisp:defclass omics-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "omics" :protocol
                        :rest-json))
 (common-lisp:export 'omics-request))
(common-lisp:progn
 (common-lisp:define-condition omics-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'omics-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("RangeNotSatisfiableException" . range-not-satisfiable-exception)
    ("RequestTimeoutException" . request-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass activate-read-set-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-activation-job-status
                                         common-lisp:null)
                         :accessor %activate-read-set-filter-status :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %activate-read-set-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %activate-read-set-filter-created-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-read-set-filter 'make-activate-read-set-filter))
 (common-lisp:defun make-activate-read-set-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'activate-read-set-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-read-set-job-item common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-activation-job-status
                                         common-lisp:null)
                         :accessor %activate-read-set-job-item-status :initform
                         (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %activate-read-set-job-item-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or activation-job-id common-lisp:null)
                         :accessor %activate-read-set-job-item-id :initform
                         (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %activate-read-set-job-item-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %activate-read-set-job-item-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-read-set-job-item
                    'make-activate-read-set-job-item))
 (common-lisp:defun make-activate-read-set-job-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sequence-store-id id creation-time
                     completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'activate-read-set-job-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-job-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-job-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-job-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype activate-read-set-job-list ()
   '(trivial-types:proper-list activate-read-set-job-item))
 (common-lisp:defun |make-activate-read-set-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            activate-read-set-job-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass activate-read-set-source-item common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor
                         %activate-read-set-source-item-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-activation-job-item-status
                                         common-lisp:null)
                         :accessor %activate-read-set-source-item-status
                         :initform (common-lisp:error ":status is required"))
                        (read-set-id :initarg :|readSetId| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %activate-read-set-source-item-read-set-id
                         :initform
                         (common-lisp:error ":readsetid is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-read-set-source-item
                    'make-activate-read-set-source-item))
 (common-lisp:defun make-activate-read-set-source-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status read-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-read-set-source-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-set-id))
      (common-lisp:list
       (common-lisp:cons "readSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-read-set-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype activate-read-set-source-list ()
   '(trivial-types:proper-list activate-read-set-source-item))
 (common-lisp:defun |make-activate-read-set-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            activate-read-set-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype activation-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass annotation-import-item-detail common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %annotation-import-item-detail-source :initform
                         (common-lisp:error ":source is required"))
                        (job-status :initarg :|jobStatus| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %annotation-import-item-detail-job-status :initform
                         (common-lisp:error ":jobstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'annotation-import-item-detail
                    'make-annotation-import-item-detail))
 (common-lisp:defun make-annotation-import-item-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source job-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'annotation-import-item-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-item-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-item-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-item-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype annotation-import-item-details ()
   '(trivial-types:proper-list annotation-import-item-detail))
 (common-lisp:defun |make-annotation-import-item-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            annotation-import-item-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass annotation-import-item-source common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %annotation-import-item-source-source :initform
                         (common-lisp:error ":source is required"))))
 (common-lisp:export
  (common-lisp:list 'annotation-import-item-source
                    'make-annotation-import-item-source))
 (common-lisp:defun make-annotation-import-item-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source)
   (common-lisp:apply #'common-lisp:make-instance
                      'annotation-import-item-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-item-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-item-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-item-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype annotation-import-item-sources ()
   '(trivial-types:proper-list annotation-import-item-source))
 (common-lisp:defun |make-annotation-import-item-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            annotation-import-item-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass annotation-import-job-item common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %annotation-import-job-item-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %annotation-import-job-item-status :initform
                         (common-lisp:error ":status is required"))
                        (run-left-normalization :initarg
                         :|runLeftNormalization| :type
                         (common-lisp:or run-left-normalization
                                         common-lisp:null)
                         :accessor
                         %annotation-import-job-item-run-left-normalization
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %annotation-import-job-item-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %annotation-import-job-item-id :initform
                         (common-lisp:error ":id is required"))
                        (destination-name :initarg :|destinationName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %annotation-import-job-item-destination-name :initform
                         (common-lisp:error ":destinationname is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %annotation-import-job-item-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or completion-time common-lisp:null)
                         :accessor %annotation-import-job-item-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'annotation-import-job-item
                    'make-annotation-import-job-item))
 (common-lisp:defun make-annotation-import-job-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status run-left-normalization
                     role-arn id destination-name creation-time
                     completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'annotation-import-job-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-job-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-job-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-left-normalization))
      (common-lisp:list
       (common-lisp:cons "runLeftNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          annotation-import-job-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype annotation-import-job-items ()
   '(trivial-types:proper-list annotation-import-job-item))
 (common-lisp:defun |make-annotation-import-job-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            annotation-import-job-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass annotation-store-item common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %annotation-store-item-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (store-size-bytes :initarg :|storeSizeBytes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %annotation-store-item-store-size-bytes :initform
                         (common-lisp:error ":storesizebytes is required"))
                        (store-format :initarg :|storeFormat| :type
                         (common-lisp:or store-format common-lisp:null)
                         :accessor %annotation-store-item-store-format
                         :initform
                         (common-lisp:error ":storeformat is required"))
                        (store-arn :initarg :|storeArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %annotation-store-item-store-arn :initform
                         (common-lisp:error ":storearn is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %annotation-store-item-status-message
                         :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %annotation-store-item-status :initform
                         (common-lisp:error ":status is required"))
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %annotation-store-item-sse-config :initform
                         (common-lisp:error ":sseconfig is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %annotation-store-item-reference :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %annotation-store-item-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %annotation-store-item-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %annotation-store-item-description :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %annotation-store-item-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'annotation-store-item 'make-annotation-store-item))
 (common-lisp:defun make-annotation-store-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time store-size-bytes store-format
                     store-arn status-message status sse-config reference name
                     id description creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'annotation-store-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          annotation-store-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          annotation-store-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-arn))
      (common-lisp:list
       (common-lisp:cons "storeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-format))
      (common-lisp:list
       (common-lisp:cons "storeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-size-bytes))
      (common-lisp:list
       (common-lisp:cons "storeSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          annotation-store-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype annotation-store-items ()
   '(trivial-types:proper-list annotation-store-item))
 (common-lisp:defun |make-annotation-store-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list annotation-store-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype annotation-type () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-delete-read-set-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %batch-delete-read-set-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (ids :initarg :|ids| :type
                         (common-lisp:or read-set-id-list common-lisp:null)
                         :accessor %batch-delete-read-set-request-ids :initform
                         (common-lisp:error ":ids is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-read-set-request
                    'make-batch-delete-read-set-request))
 (common-lisp:defun make-batch-delete-read-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-read-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-read-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-read-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-read-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-read-set-response common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or read-set-batch-error-list
                                         common-lisp:null)
                         :accessor %batch-delete-read-set-response-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-read-set-response
                    'make-batch-delete-read-set-response))
 (common-lisp:defun make-batch-delete-read-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-read-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-read-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-read-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-read-set-response))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-annotation-import-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %cancel-annotation-import-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-annotation-import-request
                    'make-cancel-annotation-import-request))
 (common-lisp:defun make-cancel-annotation-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-annotation-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-annotation-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-annotation-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-annotation-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-annotation-import-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-annotation-import-response
                    'make-cancel-annotation-import-response))
 (common-lisp:defun make-cancel-annotation-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-annotation-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-annotation-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-annotation-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-annotation-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-run-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %cancel-run-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-run-request 'make-cancel-run-request))
 (common-lisp:defun make-cancel-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-variant-import-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %cancel-variant-import-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-variant-import-request
                    'make-cancel-variant-import-request))
 (common-lisp:defun make-cancel-variant-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-variant-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-variant-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-variant-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-variant-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-variant-import-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-variant-import-response
                    'make-cancel-variant-import-response))
 (common-lisp:defun make-cancel-variant-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-variant-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-variant-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-variant-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-variant-import-response))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype comment-char () 'common-lisp:string)
(common-lisp:deftype completion-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-annotation-store-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-annotation-store-request-tags :initform
                         common-lisp:nil)
                        (store-options :initarg :|storeOptions| :type
                         (common-lisp:or store-options common-lisp:null)
                         :accessor
                         %create-annotation-store-request-store-options
                         :initform common-lisp:nil)
                        (store-format :initarg :|storeFormat| :type
                         (common-lisp:or store-format common-lisp:null)
                         :accessor
                         %create-annotation-store-request-store-format
                         :initform
                         (common-lisp:error ":storeformat is required"))
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %create-annotation-store-request-sse-config :initform
                         common-lisp:nil)
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %create-annotation-store-request-reference
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or
                          create-annotation-store-request-name-string
                          common-lisp:null)
                         :accessor %create-annotation-store-request-name
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %create-annotation-store-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-annotation-store-request
                    'make-create-annotation-store-request))
 (common-lisp:defun make-create-annotation-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags store-options store-format
                     sse-config reference name description)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-annotation-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-annotation-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-annotation-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-format))
      (common-lisp:list
       (common-lisp:cons "storeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-options))
      (common-lisp:list
       (common-lisp:cons "storeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-annotation-store-request))
   common-lisp:nil))
(common-lisp:deftype create-annotation-store-request-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-annotation-store-response common-lisp:nil
                       ((store-options :initarg :|storeOptions| :type
                         (common-lisp:or store-options common-lisp:null)
                         :accessor
                         %create-annotation-store-response-store-options
                         :initform common-lisp:nil)
                        (store-format :initarg :|storeFormat| :type
                         (common-lisp:or store-format common-lisp:null)
                         :accessor
                         %create-annotation-store-response-store-format
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %create-annotation-store-response-status
                         :initform (common-lisp:error ":status is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %create-annotation-store-response-reference
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-annotation-store-response-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-annotation-store-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor
                         %create-annotation-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'create-annotation-store-response
                    'make-create-annotation-store-response))
 (common-lisp:defun make-create-annotation-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key store-options store-format status
                     reference name id creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-annotation-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-annotation-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-annotation-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-format))
      (common-lisp:list
       (common-lisp:cons "storeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-options))
      (common-lisp:list
       (common-lisp:cons "storeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-annotation-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-reference-store-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-reference-store-request-tags :initform
                         common-lisp:nil)
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %create-reference-store-request-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or reference-store-name common-lisp:null)
                         :accessor %create-reference-store-request-name
                         :initform (common-lisp:error ":name is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or reference-store-description
                                         common-lisp:null)
                         :accessor %create-reference-store-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-reference-store-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-reference-store-request
                    'make-create-reference-store-request))
 (common-lisp:defun make-create-reference-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags sse-config name description
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-reference-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-reference-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-reference-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-reference-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-reference-store-response common-lisp:nil
                       ((sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %create-reference-store-response-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or reference-store-name common-lisp:null)
                         :accessor %create-reference-store-response-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %create-reference-store-response-id
                         :initform (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or reference-store-description
                                         common-lisp:null)
                         :accessor %create-reference-store-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %create-reference-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or reference-store-arn common-lisp:null)
                         :accessor %create-reference-store-response-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-reference-store-response
                    'make-create-reference-store-response))
 (common-lisp:defun make-create-reference-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sse-config name id description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-reference-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-reference-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-reference-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-reference-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-run-group-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-run-group-request-tags :initform
                         common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or run-group-request-id common-lisp:null)
                         :accessor %create-run-group-request-request-id
                         :initform
                         (common-lisp:error ":requestid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or run-group-name common-lisp:null)
                         :accessor %create-run-group-request-name :initform
                         common-lisp:nil)
                        (max-runs :initarg :|maxRuns| :type
                         (common-lisp:or
                          create-run-group-request-max-runs-integer
                          common-lisp:null)
                         :accessor %create-run-group-request-max-runs :initform
                         common-lisp:nil)
                        (max-duration :initarg :|maxDuration| :type
                         (common-lisp:or
                          create-run-group-request-max-duration-integer
                          common-lisp:null)
                         :accessor %create-run-group-request-max-duration
                         :initform common-lisp:nil)
                        (max-cpus :initarg :|maxCpus| :type
                         (common-lisp:or
                          create-run-group-request-max-cpus-integer
                          common-lisp:null)
                         :accessor %create-run-group-request-max-cpus :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-run-group-request 'make-create-run-group-request))
 (common-lisp:defun make-create-run-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags request-id name max-runs
                     max-duration max-cpus)
   (common-lisp:apply #'common-lisp:make-instance 'create-run-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-run-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-run-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cpus))
      (common-lisp:list
       (common-lisp:cons "maxCpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duration))
      (common-lisp:list
       (common-lisp:cons "maxDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-runs))
      (common-lisp:list
       (common-lisp:cons "maxRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-run-group-request))
   common-lisp:nil))
(common-lisp:deftype create-run-group-request-max-cpus-integer ()
  'common-lisp:integer)
(common-lisp:deftype create-run-group-request-max-duration-integer ()
  'common-lisp:integer)
(common-lisp:deftype create-run-group-request-max-runs-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-run-group-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-run-group-response-tags :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %create-run-group-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or run-group-arn common-lisp:null)
                         :accessor %create-run-group-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-run-group-response
                    'make-create-run-group-response))
 (common-lisp:defun make-create-run-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-run-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-run-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-run-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-run-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sequence-store-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-sequence-store-request-tags :initform
                         common-lisp:nil)
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %create-sequence-store-request-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or sequence-store-name common-lisp:null)
                         :accessor %create-sequence-store-request-name
                         :initform (common-lisp:error ":name is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or sequence-store-description
                                         common-lisp:null)
                         :accessor %create-sequence-store-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-sequence-store-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-sequence-store-request
                    'make-create-sequence-store-request))
 (common-lisp:defun make-create-sequence-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags sse-config name description
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sequence-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sequence-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sequence-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sequence-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sequence-store-response common-lisp:nil
                       ((sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %create-sequence-store-response-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or sequence-store-name common-lisp:null)
                         :accessor %create-sequence-store-response-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %create-sequence-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or sequence-store-description
                                         common-lisp:null)
                         :accessor %create-sequence-store-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %create-sequence-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or sequence-store-arn common-lisp:null)
                         :accessor %create-sequence-store-response-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-sequence-store-response
                    'make-create-sequence-store-response))
 (common-lisp:defun make-create-sequence-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sse-config name id description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sequence-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sequence-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sequence-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sequence-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-variant-store-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-variant-store-request-tags :initform
                         common-lisp:nil)
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %create-variant-store-request-sse-config :initform
                         common-lisp:nil)
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %create-variant-store-request-reference
                         :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or
                          create-variant-store-request-name-string
                          common-lisp:null)
                         :accessor %create-variant-store-request-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %create-variant-store-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-variant-store-request
                    'make-create-variant-store-request))
 (common-lisp:defun make-create-variant-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags sse-config reference name
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'create-variant-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-variant-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-variant-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-variant-store-request))
   common-lisp:nil))
(common-lisp:deftype create-variant-store-request-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-variant-store-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %create-variant-store-response-status
                         :initform (common-lisp:error ":status is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %create-variant-store-response-reference
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-variant-store-response-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %create-variant-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %create-variant-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'create-variant-store-response
                    'make-create-variant-store-response))
 (common-lisp:defun make-create-variant-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status reference name id creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-variant-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-variant-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-variant-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-variant-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-workflow-request-tags :initform
                         common-lisp:nil)
                        (storage-capacity :initarg :|storageCapacity| :type
                         (common-lisp:or
                          create-workflow-request-storage-capacity-integer
                          common-lisp:null)
                         :accessor %create-workflow-request-storage-capacity
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or workflow-request-id common-lisp:null)
                         :accessor %create-workflow-request-request-id
                         :initform
                         (common-lisp:error ":requestid is required"))
                        (parameter-template :initarg :|parameterTemplate| :type
                         (common-lisp:or workflow-parameter-template
                                         common-lisp:null)
                         :accessor %create-workflow-request-parameter-template
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-name common-lisp:null)
                         :accessor %create-workflow-request-name :initform
                         common-lisp:nil)
                        (main :initarg :|main| :type
                         (common-lisp:or workflow-main common-lisp:null)
                         :accessor %create-workflow-request-main :initform
                         common-lisp:nil)
                        (engine :initarg :|engine| :type
                         (common-lisp:or workflow-engine common-lisp:null)
                         :accessor %create-workflow-request-engine :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or workflow-description common-lisp:null)
                         :accessor %create-workflow-request-description
                         :initform common-lisp:nil)
                        (definition-zip :initarg :|definitionZip| :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         %create-workflow-request-definition-zip :initform
                         common-lisp:nil)
                        (definition-uri :initarg :|definitionUri| :type
                         (common-lisp:or workflow-definition common-lisp:null)
                         :accessor %create-workflow-request-definition-uri
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-request 'make-create-workflow-request))
 (common-lisp:defun make-create-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags storage-capacity request-id
                     parameter-template name main engine description
                     definition-zip definition-uri)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-uri))
      (common-lisp:list
       (common-lisp:cons "definitionUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-zip))
      (common-lisp:list
       (common-lisp:cons "definitionZip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main))
      (common-lisp:list
       (common-lisp:cons "main"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-template))
      (common-lisp:list
       (common-lisp:cons "parameterTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "storageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   common-lisp:nil))
(common-lisp:deftype create-workflow-request-storage-capacity-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-workflow-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-workflow-response-tags :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-status common-lisp:null)
                         :accessor %create-workflow-response-status :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %create-workflow-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or workflow-arn common-lisp:null)
                         :accessor %create-workflow-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-response 'make-create-workflow-response))
 (common-lisp:defun make-create-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   common-lisp:nil))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-annotation-store-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-annotation-store-request-name :initform
                         (common-lisp:error ":name is required"))
                        (force :initarg :|force| :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %delete-annotation-store-request-force
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-annotation-store-request
                    'make-delete-annotation-store-request))
 (common-lisp:defun make-delete-annotation-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name force)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-annotation-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-annotation-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-annotation-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-annotation-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-annotation-store-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %delete-annotation-store-response-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-annotation-store-response
                    'make-delete-annotation-store-response))
 (common-lisp:defun make-delete-annotation-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-annotation-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-annotation-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-annotation-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-annotation-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reference-request common-lisp:nil
                       ((reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %delete-reference-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor %delete-reference-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-reference-request 'make-delete-reference-request))
 (common-lisp:defun make-delete-reference-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-store-id id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-reference-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reference-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-reference-response
                    'make-delete-reference-response))
 (common-lisp:defun make-delete-reference-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-reference-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reference-store-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %delete-reference-store-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-reference-store-request
                    'make-delete-reference-store-request))
 (common-lisp:defun make-delete-reference-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-reference-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reference-store-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-reference-store-response
                    'make-delete-reference-store-response))
 (common-lisp:defun make-delete-reference-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-reference-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reference-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-run-group-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %delete-run-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-run-group-request 'make-delete-run-group-request))
 (common-lisp:defun make-delete-run-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-run-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-run-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-run-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-run-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-run-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %delete-run-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-run-request 'make-delete-run-request))
 (common-lisp:defun make-delete-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sequence-store-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %delete-sequence-store-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-sequence-store-request
                    'make-delete-sequence-store-request))
 (common-lisp:defun make-delete-sequence-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sequence-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sequence-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sequence-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sequence-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sequence-store-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-sequence-store-response
                    'make-delete-sequence-store-response))
 (common-lisp:defun make-delete-sequence-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sequence-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sequence-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sequence-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sequence-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-variant-store-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-variant-store-request-name :initform
                         (common-lisp:error ":name is required"))
                        (force :initarg :|force| :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %delete-variant-store-request-force
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-variant-store-request
                    'make-delete-variant-store-request))
 (common-lisp:defun make-delete-variant-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name force)
   (common-lisp:apply #'common-lisp:make-instance 'delete-variant-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-variant-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-variant-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-variant-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-variant-store-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %delete-variant-store-response-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-variant-store-response
                    'make-delete-variant-store-response))
 (common-lisp:defun make-delete-variant-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-variant-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-variant-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-variant-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-variant-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %delete-workflow-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defun make-delete-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:deftype encoding () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype escape-char () 'common-lisp:string)
(common-lisp:deftype escape-quotes () 'common-lisp:boolean)
(common-lisp:deftype export-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-read-set common-lisp:nil
                       ((read-set-id :initarg :|readSetId| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %export-read-set-read-set-id :initform
                         (common-lisp:error ":readsetid is required"))))
 (common-lisp:export (common-lisp:list 'export-read-set 'make-export-read-set))
 (common-lisp:defun make-export-read-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-read-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-read-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-read-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-set-id))
      (common-lisp:list
       (common-lisp:cons "readSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-read-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-read-set-detail common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor %export-read-set-detail-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-export-job-item-status
                                         common-lisp:null)
                         :accessor %export-read-set-detail-status :initform
                         (common-lisp:error ":status is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %export-read-set-detail-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'export-read-set-detail 'make-export-read-set-detail))
 (common-lisp:defun make-export-read-set-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status id)
   (common-lisp:apply #'common-lisp:make-instance 'export-read-set-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-read-set-detail-list ()
   '(trivial-types:proper-list export-read-set-detail))
 (common-lisp:defun |make-export-read-set-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-read-set-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-read-set-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-export-job-status
                                         common-lisp:null)
                         :accessor %export-read-set-filter-status :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %export-read-set-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %export-read-set-filter-created-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-read-set-filter 'make-export-read-set-filter))
 (common-lisp:defun make-export-read-set-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'export-read-set-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-read-set-job-detail common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-export-job-status
                                         common-lisp:null)
                         :accessor %export-read-set-job-detail-status :initform
                         (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %export-read-set-job-detail-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or export-job-id common-lisp:null)
                         :accessor %export-read-set-job-detail-id :initform
                         (common-lisp:error ":id is required"))
                        (destination :initarg :|destination| :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor %export-read-set-job-detail-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %export-read-set-job-detail-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %export-read-set-job-detail-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-read-set-job-detail
                    'make-export-read-set-job-detail))
 (common-lisp:defun make-export-read-set-job-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sequence-store-id id destination
                     creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'export-read-set-job-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-job-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-job-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-read-set-job-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-read-set-job-detail-list ()
   '(trivial-types:proper-list export-read-set-job-detail))
 (common-lisp:defun |make-export-read-set-job-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            export-read-set-job-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass file-information common-lisp:nil
                       ((total-parts :initarg :|totalParts| :type
                         (common-lisp:or file-information-total-parts-integer
                                         common-lisp:null)
                         :accessor %file-information-total-parts :initform
                         common-lisp:nil)
                        (part-size :initarg :|partSize| :type
                         (common-lisp:or file-information-part-size-long
                                         common-lisp:null)
                         :accessor %file-information-part-size :initform
                         common-lisp:nil)
                        (content-length :initarg :|contentLength| :type
                         (common-lisp:or file-information-content-length-long
                                         common-lisp:null)
                         :accessor %file-information-content-length :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-information 'make-file-information))
 (common-lisp:defun make-file-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-parts part-size content-length)
   (common-lisp:apply #'common-lisp:make-instance 'file-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:list
       (common-lisp:cons "contentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-size))
      (common-lisp:list
       (common-lisp:cons "partSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-parts))
      (common-lisp:list
       (common-lisp:cons "totalParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-information))
   common-lisp:nil))
(common-lisp:deftype file-information-content-length-long ()
  'common-lisp:integer)
(common-lisp:deftype file-information-part-size-long () 'common-lisp:integer)
(common-lisp:deftype file-information-total-parts-integer ()
  'common-lisp:integer)
(common-lisp:deftype file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass format-options common-lisp:nil
                       ((vcf-options :initarg :|vcfOptions| :type
                         (common-lisp:or vcf-options common-lisp:null)
                         :accessor %format-options-vcf-options :initform
                         common-lisp:nil)
                        (tsv-options :initarg :|tsvOptions| :type
                         (common-lisp:or tsv-options common-lisp:null)
                         :accessor %format-options-tsv-options :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'format-options 'make-format-options))
 (common-lisp:defun make-format-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vcf-options tsv-options)
   (common-lisp:apply #'common-lisp:make-instance 'format-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input format-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input format-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tsv-options))
      (common-lisp:list
       (common-lisp:cons "tsvOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcf-options))
      (common-lisp:list
       (common-lisp:cons "vcfOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input format-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype format-to-header () 'common-lisp:hash-table)
 (common-lisp:defun |make-format-to-header|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype format-to-header-key () 'common-lisp:string)
(common-lisp:deftype format-to-header-value-string () 'common-lisp:string)
(common-lisp:deftype generated-from () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-annotation-import-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-annotation-import-request-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-annotation-import-request
                    'make-get-annotation-import-request))
 (common-lisp:defun make-get-annotation-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-annotation-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-annotation-import-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %get-annotation-import-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-msg common-lisp:null)
                         :accessor
                         %get-annotation-import-response-status-message
                         :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %get-annotation-import-response-status :initform
                         (common-lisp:error ":status is required"))
                        (run-left-normalization :initarg
                         :|runLeftNormalization| :type
                         (common-lisp:or run-left-normalization
                                         common-lisp:null)
                         :accessor
                         %get-annotation-import-response-run-left-normalization
                         :initform
                         (common-lisp:error
                          ":runleftnormalization is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-annotation-import-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (items :initarg :|items| :type
                         (common-lisp:or annotation-import-item-details
                                         common-lisp:null)
                         :accessor %get-annotation-import-response-items
                         :initform (common-lisp:error ":items is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-annotation-import-response-id :initform
                         (common-lisp:error ":id is required"))
                        (format-options :initarg :|formatOptions| :type
                         (common-lisp:or format-options common-lisp:null)
                         :accessor
                         %get-annotation-import-response-format-options
                         :initform
                         (common-lisp:error ":formatoptions is required"))
                        (destination-name :initarg :|destinationName| :type
                         (common-lisp:or store-name common-lisp:null) :accessor
                         %get-annotation-import-response-destination-name
                         :initform
                         (common-lisp:error ":destinationname is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor
                         %get-annotation-import-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or completion-time common-lisp:null)
                         :accessor
                         %get-annotation-import-response-completion-time
                         :initform
                         (common-lisp:error ":completiontime is required"))))
 (common-lisp:export
  (common-lisp:list 'get-annotation-import-response
                    'make-get-annotation-import-response))
 (common-lisp:defun make-get-annotation-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status-message status
                     run-left-normalization role-arn items id format-options
                     destination-name creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-annotation-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-options))
      (common-lisp:list
       (common-lisp:cons "formatOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-left-normalization))
      (common-lisp:list
       (common-lisp:cons "runLeftNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-annotation-store-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-annotation-store-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-annotation-store-request
                    'make-get-annotation-store-request))
 (common-lisp:defun make-get-annotation-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-annotation-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-annotation-store-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %get-annotation-store-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-annotation-store-response-tags :initform
                         (common-lisp:error ":tags is required"))
                        (store-size-bytes :initarg :|storeSizeBytes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %get-annotation-store-response-store-size-bytes
                         :initform
                         (common-lisp:error ":storesizebytes is required"))
                        (store-options :initarg :|storeOptions| :type
                         (common-lisp:or store-options common-lisp:null)
                         :accessor %get-annotation-store-response-store-options
                         :initform common-lisp:nil)
                        (store-format :initarg :|storeFormat| :type
                         (common-lisp:or store-format common-lisp:null)
                         :accessor %get-annotation-store-response-store-format
                         :initform common-lisp:nil)
                        (store-arn :initarg :|storeArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-annotation-store-response-store-arn :initform
                         (common-lisp:error ":storearn is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %get-annotation-store-response-status-message
                         :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %get-annotation-store-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %get-annotation-store-response-sse-config :initform
                         (common-lisp:error ":sseconfig is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %get-annotation-store-response-reference
                         :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-annotation-store-response-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-annotation-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %get-annotation-store-response-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %get-annotation-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'get-annotation-store-response
                    'make-get-annotation-store-response))
 (common-lisp:defun make-get-annotation-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time tags store-size-bytes
                     store-options store-format store-arn status-message status
                     sse-config reference name id description creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-annotation-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-arn))
      (common-lisp:list
       (common-lisp:cons "storeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-format))
      (common-lisp:list
       (common-lisp:cons "storeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-options))
      (common-lisp:list
       (common-lisp:cons "storeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-size-bytes))
      (common-lisp:list
       (common-lisp:cons "storeSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-annotation-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-activation-job-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-activation-job-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or activation-job-id common-lisp:null)
                         :accessor %get-read-set-activation-job-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-read-set-activation-job-request
                    'make-get-read-set-activation-job-request))
 (common-lisp:defun make-get-read-set-activation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-activation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-activation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-activation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-activation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-activation-job-response common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor
                         %get-read-set-activation-job-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-activation-job-status
                                         common-lisp:null)
                         :accessor %get-read-set-activation-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or activate-read-set-source-list
                                         common-lisp:null)
                         :accessor
                         %get-read-set-activation-job-response-sources
                         :initform common-lisp:nil)
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-activation-job-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or activation-job-id common-lisp:null)
                         :accessor %get-read-set-activation-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-activation-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-activation-job-response-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-read-set-activation-job-response
                    'make-get-read-set-activation-job-response))
 (common-lisp:defun make-get-read-set-activation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status sources
                     sequence-store-id id creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-activation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-activation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-activation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-activation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-export-job-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-export-job-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or export-job-id common-lisp:null)
                         :accessor %get-read-set-export-job-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-read-set-export-job-request
                    'make-get-read-set-export-job-request))
 (common-lisp:defun make-get-read-set-export-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-export-job-response common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor
                         %get-read-set-export-job-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-export-job-status
                                         common-lisp:null)
                         :accessor %get-read-set-export-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-export-job-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (read-sets :initarg :|readSets| :type
                         (common-lisp:or export-read-set-detail-list
                                         common-lisp:null)
                         :accessor %get-read-set-export-job-response-read-sets
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or export-job-id common-lisp:null)
                         :accessor %get-read-set-export-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (destination :initarg :|destination| :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor
                         %get-read-set-export-job-response-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-export-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-export-job-response-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-read-set-export-job-response
                    'make-get-read-set-export-job-response))
 (common-lisp:defun make-get-read-set-export-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status sequence-store-id
                     read-sets id destination creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-sets))
      (common-lisp:list
       (common-lisp:cons "readSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-import-job-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-import-job-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %get-read-set-import-job-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-read-set-import-job-request
                    'make-get-read-set-import-job-request))
 (common-lisp:defun make-get-read-set-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-import-job-response common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor
                         %get-read-set-import-job-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-import-job-status
                                         common-lisp:null)
                         :accessor %get-read-set-import-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or import-read-set-source-list
                                         common-lisp:null)
                         :accessor %get-read-set-import-job-response-sources
                         :initform (common-lisp:error ":sources is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-import-job-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-read-set-import-job-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %get-read-set-import-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-import-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-import-job-response-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-read-set-import-job-response
                    'make-get-read-set-import-job-response))
 (common-lisp:defun make-get-read-set-import-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status sources
                     sequence-store-id role-arn id creation-time
                     completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-metadata-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-metadata-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %get-read-set-metadata-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-read-set-metadata-request
                    'make-get-read-set-metadata-request))
 (common-lisp:defun make-get-read-set-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-metadata-response common-lisp:nil
                       ((subject-id :initarg :|subjectId| :type
                         (common-lisp:or subject-id common-lisp:null) :accessor
                         %get-read-set-metadata-response-subject-id :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-status common-lisp:null)
                         :accessor %get-read-set-metadata-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %get-read-set-metadata-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (sequence-information :initarg :|sequenceInformation|
                         :type
                         (common-lisp:or sequence-information common-lisp:null)
                         :accessor
                         %get-read-set-metadata-response-sequence-information
                         :initform common-lisp:nil)
                        (sample-id :initarg :|sampleId| :type
                         (common-lisp:or sample-id common-lisp:null) :accessor
                         %get-read-set-metadata-response-sample-id :initform
                         common-lisp:nil)
                        (reference-arn :initarg :|referenceArn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor
                         %get-read-set-metadata-response-reference-arn
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or read-set-name common-lisp:null)
                         :accessor %get-read-set-metadata-response-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %get-read-set-metadata-response-id :initform
                         (common-lisp:error ":id is required"))
                        (files :initarg :|files| :type
                         (common-lisp:or read-set-files common-lisp:null)
                         :accessor %get-read-set-metadata-response-files
                         :initform common-lisp:nil)
                        (file-type :initarg :|fileType| :type
                         (common-lisp:or file-type common-lisp:null) :accessor
                         %get-read-set-metadata-response-file-type :initform
                         (common-lisp:error ":filetype is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or read-set-description common-lisp:null)
                         :accessor %get-read-set-metadata-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-read-set-metadata-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or read-set-arn common-lisp:null)
                         :accessor %get-read-set-metadata-response-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-read-set-metadata-response
                    'make-get-read-set-metadata-response))
 (common-lisp:defun make-get-read-set-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subject-id status sequence-store-id
                     sequence-information sample-id reference-arn name id files
                     file-type description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-read-set-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-arn))
      (common-lisp:list
       (common-lisp:cons "referenceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-id))
      (common-lisp:list
       (common-lisp:cons "sampleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sequence-information))
      (common-lisp:list
       (common-lisp:cons "sequenceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-id))
      (common-lisp:list
       (common-lisp:cons "subjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-read-set-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %get-read-set-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (part-number :initarg :|partNumber| :type
                         (common-lisp:or
                          get-read-set-request-part-number-integer
                          common-lisp:null)
                         :accessor %get-read-set-request-part-number :initform
                         (common-lisp:error ":partnumber is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %get-read-set-request-id :initform
                         (common-lisp:error ":id is required"))
                        (file :initarg :|file| :type
                         (common-lisp:or read-set-file common-lisp:null)
                         :accessor %get-read-set-request-file :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-read-set-request 'make-get-read-set-request))
 (common-lisp:defun make-get-read-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id part-number id file)
   (common-lisp:apply #'common-lisp:make-instance 'get-read-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-read-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-read-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-read-set-request))
   common-lisp:nil))
(common-lisp:deftype get-read-set-request-part-number-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-read-set-response common-lisp:nil
                       ((payload :initarg :|payload| :type
                         (common-lisp:or read-set-streaming-blob
                                         common-lisp:null)
                         :accessor %get-read-set-response-payload :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-read-set-response 'make-get-read-set-response))
 (common-lisp:defun make-get-read-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload)
   (common-lisp:apply #'common-lisp:make-instance 'get-read-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-read-set-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))))
(common-lisp:progn
 (common-lisp:defclass get-reference-import-job-request common-lisp:nil
                       ((reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %get-reference-import-job-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %get-reference-import-job-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-reference-import-job-request
                    'make-get-reference-import-job-request))
 (common-lisp:defun make-get-reference-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-store-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reference-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reference-import-job-response common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor
                         %get-reference-import-job-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or reference-import-job-status
                                         common-lisp:null)
                         :accessor %get-reference-import-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or import-reference-source-list
                                         common-lisp:null)
                         :accessor %get-reference-import-job-response-sources
                         :initform (common-lisp:error ":sources is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-reference-import-job-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %get-reference-import-job-response-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %get-reference-import-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-reference-import-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-reference-import-job-response-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-reference-import-job-response
                    'make-get-reference-import-job-response))
 (common-lisp:defun make-get-reference-import-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status sources role-arn
                     reference-store-id id creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reference-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-store-id))
      (common-lisp:list
       (common-lisp:cons "referenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reference-metadata-request common-lisp:nil
                       ((reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %get-reference-metadata-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor %get-reference-metadata-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-reference-metadata-request
                    'make-get-reference-metadata-request))
 (common-lisp:defun make-get-reference-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-store-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reference-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reference-metadata-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-reference-metadata-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or reference-status common-lisp:null)
                         :accessor %get-reference-metadata-response-status
                         :initform common-lisp:nil)
                        (reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %get-reference-metadata-response-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or reference-name common-lisp:null)
                         :accessor %get-reference-metadata-response-name
                         :initform common-lisp:nil)
                        (md5 :initarg :|md5| :type
                         (common-lisp:or md5 common-lisp:null) :accessor
                         %get-reference-metadata-response-md5 :initform
                         (common-lisp:error ":md5 is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor %get-reference-metadata-response-id
                         :initform (common-lisp:error ":id is required"))
                        (files :initarg :|files| :type
                         (common-lisp:or reference-files common-lisp:null)
                         :accessor %get-reference-metadata-response-files
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or reference-description
                                         common-lisp:null)
                         :accessor %get-reference-metadata-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %get-reference-metadata-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor %get-reference-metadata-response-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-reference-metadata-response
                    'make-get-reference-metadata-response))
 (common-lisp:defun make-get-reference-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status reference-store-id
                     name md5 id files description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reference-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'md5))
      (common-lisp:list
       (common-lisp:cons "md5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-store-id))
      (common-lisp:list
       (common-lisp:cons "referenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reference-request common-lisp:nil
                       ((reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %get-reference-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (range :initarg :|range| :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %get-reference-request-range :initform
                         common-lisp:nil)
                        (part-number :initarg :|partNumber| :type
                         (common-lisp:or
                          get-reference-request-part-number-integer
                          common-lisp:null)
                         :accessor %get-reference-request-part-number :initform
                         (common-lisp:error ":partnumber is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor %get-reference-request-id :initform
                         (common-lisp:error ":id is required"))
                        (file :initarg :|file| :type
                         (common-lisp:or reference-file common-lisp:null)
                         :accessor %get-reference-request-file :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-reference-request 'make-get-reference-request))
 (common-lisp:defun make-get-reference-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-store-id range part-number id
                     file)
   (common-lisp:apply #'common-lisp:make-instance 'get-reference-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-request))
   common-lisp:nil))
(common-lisp:deftype get-reference-request-part-number-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-reference-response common-lisp:nil
                       ((payload :initarg :|payload| :type
                         (common-lisp:or reference-streaming-blob
                                         common-lisp:null)
                         :accessor %get-reference-response-payload :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-reference-response 'make-get-reference-response))
 (common-lisp:defun make-get-reference-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload)
   (common-lisp:apply #'common-lisp:make-instance 'get-reference-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))))
(common-lisp:progn
 (common-lisp:defclass get-reference-store-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %get-reference-store-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-reference-store-request
                    'make-get-reference-store-request))
 (common-lisp:defun make-get-reference-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-reference-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reference-store-response common-lisp:nil
                       ((sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %get-reference-store-response-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or reference-store-name common-lisp:null)
                         :accessor %get-reference-store-response-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %get-reference-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or reference-store-description
                                         common-lisp:null)
                         :accessor %get-reference-store-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-reference-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or reference-store-arn common-lisp:null)
                         :accessor %get-reference-store-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-reference-store-response
                    'make-get-reference-store-response))
 (common-lisp:defun make-get-reference-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sse-config name id description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-reference-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reference-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-run-group-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %get-run-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-run-group-request 'make-get-run-group-request))
 (common-lisp:defun make-get-run-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-run-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-run-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-run-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-run-group-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-run-group-response-tags :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or run-group-name common-lisp:null)
                         :accessor %get-run-group-response-name :initform
                         common-lisp:nil)
                        (max-runs :initarg :|maxRuns| :type
                         (common-lisp:or
                          get-run-group-response-max-runs-integer
                          common-lisp:null)
                         :accessor %get-run-group-response-max-runs :initform
                         common-lisp:nil)
                        (max-duration :initarg :|maxDuration| :type
                         (common-lisp:or
                          get-run-group-response-max-duration-integer
                          common-lisp:null)
                         :accessor %get-run-group-response-max-duration
                         :initform common-lisp:nil)
                        (max-cpus :initarg :|maxCpus| :type
                         (common-lisp:or
                          get-run-group-response-max-cpus-integer
                          common-lisp:null)
                         :accessor %get-run-group-response-max-cpus :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %get-run-group-response-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or run-group-timestamp common-lisp:null)
                         :accessor %get-run-group-response-creation-time
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or run-group-arn common-lisp:null)
                         :accessor %get-run-group-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-run-group-response 'make-get-run-group-response))
 (common-lisp:defun make-get-run-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name max-runs max-duration max-cpus
                     id creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-run-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-run-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cpus))
      (common-lisp:list
       (common-lisp:cons "maxCpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duration))
      (common-lisp:list
       (common-lisp:cons "maxDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-runs))
      (common-lisp:list
       (common-lisp:cons "maxRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-run-group-response))
   common-lisp:nil))
(common-lisp:deftype get-run-group-response-max-cpus-integer ()
  'common-lisp:integer)
(common-lisp:deftype get-run-group-response-max-duration-integer ()
  'common-lisp:integer)
(common-lisp:deftype get-run-group-response-max-runs-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-run-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %get-run-request-id :initform
                         (common-lisp:error ":id is required"))
                        (export :initarg :|export| :type
                         (common-lisp:or run-export-list common-lisp:null)
                         :accessor %get-run-request-export :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'get-run-request 'make-get-run-request))
 (common-lisp:defun make-get-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id export)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-run-response common-lisp:nil
                       ((workflow-type :initarg :|workflowType| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %get-run-response-workflow-type :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %get-run-response-workflow-id :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-run-response-tags :initform common-lisp:nil)
                        (storage-capacity :initarg :|storageCapacity| :type
                         (common-lisp:or
                          get-run-response-storage-capacity-integer
                          common-lisp:null)
                         :accessor %get-run-response-storage-capacity :initform
                         common-lisp:nil)
                        (stop-time :initarg :|stopTime| :type
                         (common-lisp:or run-timestamp common-lisp:null)
                         :accessor %get-run-response-stop-time :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or run-status-message common-lisp:null)
                         :accessor %get-run-response-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or run-status common-lisp:null) :accessor
                         %get-run-response-status :initform common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or run-started-by common-lisp:null)
                         :accessor %get-run-response-started-by :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or run-timestamp common-lisp:null)
                         :accessor %get-run-response-start-time :initform
                         common-lisp:nil)
                        (run-id :initarg :|runId| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %get-run-response-run-id :initform common-lisp:nil)
                        (run-group-id :initarg :|runGroupId| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %get-run-response-run-group-id :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or run-role-arn common-lisp:null)
                         :accessor %get-run-response-role-arn :initform
                         common-lisp:nil)
                        (resource-digests :initarg :|resourceDigests| :type
                         (common-lisp:or run-resource-digests common-lisp:null)
                         :accessor %get-run-response-resource-digests :initform
                         common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or get-run-response-priority-integer
                                         common-lisp:null)
                         :accessor %get-run-response-priority :initform
                         common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or run-parameters common-lisp:null)
                         :accessor %get-run-response-parameters :initform
                         common-lisp:nil)
                        (output-uri :initarg :|outputUri| :type
                         (common-lisp:or run-output-uri common-lisp:null)
                         :accessor %get-run-response-output-uri :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or run-name common-lisp:null) :accessor
                         %get-run-response-name :initform common-lisp:nil)
                        (log-level :initarg :|logLevel| :type
                         (common-lisp:or run-log-level common-lisp:null)
                         :accessor %get-run-response-log-level :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %get-run-response-id :initform common-lisp:nil)
                        (digest :initarg :|digest| :type
                         (common-lisp:or workflow-digest common-lisp:null)
                         :accessor %get-run-response-digest :initform
                         common-lisp:nil)
                        (definition :initarg :|definition| :type
                         (common-lisp:or workflow-definition common-lisp:null)
                         :accessor %get-run-response-definition :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or run-timestamp common-lisp:null)
                         :accessor %get-run-response-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or run-arn common-lisp:null) :accessor
                         %get-run-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-run-response 'make-get-run-response))
 (common-lisp:defun make-get-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-type workflow-id tags
                     storage-capacity stop-time status-message status
                     started-by start-time run-id run-group-id role-arn
                     resource-digests priority parameters output-uri name
                     log-level id digest definition creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "outputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-digests))
      (common-lisp:list
       (common-lisp:cons "resourceDigests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-group-id))
      (common-lisp:list
       (common-lisp:cons "runGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "storageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-run-response))
   common-lisp:nil))
(common-lisp:deftype get-run-response-priority-integer () 'common-lisp:integer)
(common-lisp:deftype get-run-response-storage-capacity-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-run-task-request common-lisp:nil
                       ((task-id :initarg :|taskId| :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         %get-run-task-request-task-id :initform
                         (common-lisp:error ":taskid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %get-run-task-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-run-task-request 'make-get-run-task-request))
 (common-lisp:defun make-get-run-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id id)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-run-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-run-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-run-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-run-task-response common-lisp:nil
                       ((task-id :initarg :|taskId| :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         %get-run-task-response-task-id :initform
                         common-lisp:nil)
                        (stop-time :initarg :|stopTime| :type
                         (common-lisp:or task-timestamp common-lisp:null)
                         :accessor %get-run-task-response-stop-time :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or task-status-message common-lisp:null)
                         :accessor %get-run-task-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor %get-run-task-response-status :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or task-timestamp common-lisp:null)
                         :accessor %get-run-task-response-start-time :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or task-name common-lisp:null) :accessor
                         %get-run-task-response-name :initform common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or get-run-task-response-memory-integer
                                         common-lisp:null)
                         :accessor %get-run-task-response-memory :initform
                         common-lisp:nil)
                        (log-stream :initarg :|logStream| :type
                         (common-lisp:or task-log-stream common-lisp:null)
                         :accessor %get-run-task-response-log-stream :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or task-timestamp common-lisp:null)
                         :accessor %get-run-task-response-creation-time
                         :initform common-lisp:nil)
                        (cpus :initarg :|cpus| :type
                         (common-lisp:or get-run-task-response-cpus-integer
                                         common-lisp:null)
                         :accessor %get-run-task-response-cpus :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-run-task-response 'make-get-run-task-response))
 (common-lisp:defun make-get-run-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id stop-time status-message status
                     start-time name memory log-stream creation-time cpus)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-run-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-run-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpus))
      (common-lisp:list
       (common-lisp:cons "cpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "logStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-run-task-response))
   common-lisp:nil))
(common-lisp:deftype get-run-task-response-cpus-integer () 'common-lisp:integer)
(common-lisp:deftype get-run-task-response-memory-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-sequence-store-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %get-sequence-store-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sequence-store-request
                    'make-get-sequence-store-request))
 (common-lisp:defun make-get-sequence-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-sequence-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sequence-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sequence-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sequence-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sequence-store-response common-lisp:nil
                       ((sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %get-sequence-store-response-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or sequence-store-name common-lisp:null)
                         :accessor %get-sequence-store-response-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %get-sequence-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or sequence-store-description
                                         common-lisp:null)
                         :accessor %get-sequence-store-response-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-sequence-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or sequence-store-arn common-lisp:null)
                         :accessor %get-sequence-store-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sequence-store-response
                    'make-get-sequence-store-response))
 (common-lisp:defun make-get-sequence-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sse-config name id description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-sequence-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sequence-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sequence-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sequence-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-variant-import-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-variant-import-request-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-variant-import-request
                    'make-get-variant-import-request))
 (common-lisp:defun make-get-variant-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-variant-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-variant-import-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %get-variant-import-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-msg common-lisp:null)
                         :accessor %get-variant-import-response-status-message
                         :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %get-variant-import-response-status :initform
                         (common-lisp:error ":status is required"))
                        (run-left-normalization :initarg
                         :|runLeftNormalization| :type
                         (common-lisp:or run-left-normalization
                                         common-lisp:null)
                         :accessor
                         %get-variant-import-response-run-left-normalization
                         :initform
                         (common-lisp:error
                          ":runleftnormalization is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-variant-import-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (items :initarg :|items| :type
                         (common-lisp:or variant-import-item-details
                                         common-lisp:null)
                         :accessor %get-variant-import-response-items :initform
                         (common-lisp:error ":items is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-variant-import-response-id :initform
                         (common-lisp:error ":id is required"))
                        (destination-name :initarg :|destinationName| :type
                         (common-lisp:or store-name common-lisp:null) :accessor
                         %get-variant-import-response-destination-name
                         :initform
                         (common-lisp:error ":destinationname is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %get-variant-import-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or completion-time common-lisp:null)
                         :accessor %get-variant-import-response-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-variant-import-response
                    'make-get-variant-import-response))
 (common-lisp:defun make-get-variant-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status-message status
                     run-left-normalization role-arn items id destination-name
                     creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'get-variant-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-left-normalization))
      (common-lisp:list
       (common-lisp:cons "runLeftNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-variant-store-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-variant-store-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-variant-store-request
                    'make-get-variant-store-request))
 (common-lisp:defun make-get-variant-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-variant-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-variant-store-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %get-variant-store-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-variant-store-response-tags :initform
                         (common-lisp:error ":tags is required"))
                        (store-size-bytes :initarg :|storeSizeBytes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %get-variant-store-response-store-size-bytes :initform
                         (common-lisp:error ":storesizebytes is required"))
                        (store-arn :initarg :|storeArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-variant-store-response-store-arn :initform
                         (common-lisp:error ":storearn is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %get-variant-store-response-status-message
                         :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %get-variant-store-response-status :initform
                         (common-lisp:error ":status is required"))
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %get-variant-store-response-sse-config :initform
                         (common-lisp:error ":sseconfig is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %get-variant-store-response-reference
                         :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-variant-store-response-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %get-variant-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %get-variant-store-response-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %get-variant-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'get-variant-store-response
                    'make-get-variant-store-response))
 (common-lisp:defun make-get-variant-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time tags store-size-bytes
                     store-arn status-message status sse-config reference name
                     id description creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'get-variant-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-arn))
      (common-lisp:list
       (common-lisp:cons "storeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-size-bytes))
      (common-lisp:list
       (common-lisp:cons "storeSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-variant-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %get-workflow-request-type :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %get-workflow-request-id :initform
                         (common-lisp:error ":id is required"))
                        (export :initarg :|export| :type
                         (common-lisp:or workflow-export-list common-lisp:null)
                         :accessor %get-workflow-request-export :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-request 'make-get-workflow-request))
 (common-lisp:defun make-get-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id export)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-response common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %get-workflow-response-type :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %get-workflow-response-tags :initform common-lisp:nil)
                        (storage-capacity :initarg :|storageCapacity| :type
                         (common-lisp:or
                          get-workflow-response-storage-capacity-integer
                          common-lisp:null)
                         :accessor %get-workflow-response-storage-capacity
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or workflow-status-message
                                         common-lisp:null)
                         :accessor %get-workflow-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-status common-lisp:null)
                         :accessor %get-workflow-response-status :initform
                         common-lisp:nil)
                        (parameter-template :initarg :|parameterTemplate| :type
                         (common-lisp:or workflow-parameter-template
                                         common-lisp:null)
                         :accessor %get-workflow-response-parameter-template
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-name common-lisp:null)
                         :accessor %get-workflow-response-name :initform
                         common-lisp:nil)
                        (main :initarg :|main| :type
                         (common-lisp:or workflow-main common-lisp:null)
                         :accessor %get-workflow-response-main :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %get-workflow-response-id :initform
                         common-lisp:nil)
                        (engine :initarg :|engine| :type
                         (common-lisp:or workflow-engine common-lisp:null)
                         :accessor %get-workflow-response-engine :initform
                         common-lisp:nil)
                        (digest :initarg :|digest| :type
                         (common-lisp:or workflow-digest common-lisp:null)
                         :accessor %get-workflow-response-digest :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or workflow-description common-lisp:null)
                         :accessor %get-workflow-response-description :initform
                         common-lisp:nil)
                        (definition :initarg :|definition| :type
                         (common-lisp:or workflow-definition common-lisp:null)
                         :accessor %get-workflow-response-definition :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or workflow-timestamp common-lisp:null)
                         :accessor %get-workflow-response-creation-time
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or workflow-arn common-lisp:null)
                         :accessor %get-workflow-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-response 'make-get-workflow-response))
 (common-lisp:defun make-get-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tags storage-capacity status-message
                     status parameter-template name main id engine digest
                     description definition creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main))
      (common-lisp:list
       (common-lisp:cons "main"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-template))
      (common-lisp:list
       (common-lisp:cons "parameterTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "storageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   common-lisp:nil))
(common-lisp:deftype get-workflow-response-storage-capacity-integer ()
  'common-lisp:integer)
(common-lisp:deftype header () 'common-lisp:boolean)
(common-lisp:deftype import-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-read-set-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-import-job-status
                                         common-lisp:null)
                         :accessor %import-read-set-filter-status :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-read-set-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-read-set-filter-created-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-read-set-filter 'make-import-read-set-filter))
 (common-lisp:defun make-import-read-set-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'import-read-set-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-read-set-job-item common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-import-job-status
                                         common-lisp:null)
                         :accessor %import-read-set-job-item-status :initform
                         (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %import-read-set-job-item-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %import-read-set-job-item-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %import-read-set-job-item-id :initform
                         (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-read-set-job-item-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-read-set-job-item-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-read-set-job-item 'make-import-read-set-job-item))
 (common-lisp:defun make-import-read-set-job-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sequence-store-id role-arn id
                     creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'import-read-set-job-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-job-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-job-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-job-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-read-set-job-list ()
   '(trivial-types:proper-list import-read-set-job-item))
 (common-lisp:defun |make-import-read-set-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-read-set-job-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-read-set-source-item common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %import-read-set-source-item-tags :initform
                         common-lisp:nil)
                        (subject-id :initarg :|subjectId| :type
                         (common-lisp:or subject-id common-lisp:null) :accessor
                         %import-read-set-source-item-subject-id :initform
                         (common-lisp:error ":subjectid is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor %import-read-set-source-item-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-import-job-item-status
                                         common-lisp:null)
                         :accessor %import-read-set-source-item-status
                         :initform (common-lisp:error ":status is required"))
                        (source-files :initarg :|sourceFiles| :type
                         (common-lisp:or source-files common-lisp:null)
                         :accessor %import-read-set-source-item-source-files
                         :initform
                         (common-lisp:error ":sourcefiles is required"))
                        (source-file-type :initarg :|sourceFileType| :type
                         (common-lisp:or file-type common-lisp:null) :accessor
                         %import-read-set-source-item-source-file-type
                         :initform
                         (common-lisp:error ":sourcefiletype is required"))
                        (sample-id :initarg :|sampleId| :type
                         (common-lisp:or sample-id common-lisp:null) :accessor
                         %import-read-set-source-item-sample-id :initform
                         (common-lisp:error ":sampleid is required"))
                        (reference-arn :initarg :|referenceArn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor %import-read-set-source-item-reference-arn
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or read-set-name common-lisp:null)
                         :accessor %import-read-set-source-item-name :initform
                         common-lisp:nil)
                        (generated-from :initarg :|generatedFrom| :type
                         (common-lisp:or generated-from common-lisp:null)
                         :accessor %import-read-set-source-item-generated-from
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or read-set-description common-lisp:null)
                         :accessor %import-read-set-source-item-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-read-set-source-item
                    'make-import-read-set-source-item))
 (common-lisp:defun make-import-read-set-source-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags subject-id status-message status
                     source-files source-file-type sample-id reference-arn name
                     generated-from description)
   (common-lisp:apply #'common-lisp:make-instance 'import-read-set-source-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-from))
      (common-lisp:list
       (common-lisp:cons "generatedFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-arn))
      (common-lisp:list
       (common-lisp:cons "referenceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-id))
      (common-lisp:list
       (common-lisp:cons "sampleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-file-type))
      (common-lisp:list
       (common-lisp:cons "sourceFileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-files))
      (common-lisp:list
       (common-lisp:cons "sourceFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-id))
      (common-lisp:list
       (common-lisp:cons "subjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-read-set-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-read-set-source-list ()
   '(trivial-types:proper-list import-read-set-source-item))
 (common-lisp:defun |make-import-read-set-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-read-set-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-reference-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or reference-import-job-status
                                         common-lisp:null)
                         :accessor %import-reference-filter-status :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-reference-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-reference-filter-created-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-reference-filter 'make-import-reference-filter))
 (common-lisp:defun make-import-reference-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'import-reference-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-reference-job-item common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or reference-import-job-status
                                         common-lisp:null)
                         :accessor %import-reference-job-item-status :initform
                         (common-lisp:error ":status is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %import-reference-job-item-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %import-reference-job-item-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %import-reference-job-item-id :initform
                         (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-reference-job-item-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %import-reference-job-item-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-reference-job-item
                    'make-import-reference-job-item))
 (common-lisp:defun make-import-reference-job-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status role-arn reference-store-id id
                     creation-time completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'import-reference-job-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-job-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-job-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-store-id))
      (common-lisp:list
       (common-lisp:cons "referenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-job-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-reference-job-list ()
   '(trivial-types:proper-list import-reference-job-item))
 (common-lisp:defun |make-import-reference-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-reference-job-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-reference-source-item common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %import-reference-source-item-tags :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-message common-lisp:null)
                         :accessor %import-reference-source-item-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or reference-import-job-item-status
                                         common-lisp:null)
                         :accessor %import-reference-source-item-status
                         :initform (common-lisp:error ":status is required"))
                        (source-file :initarg :|sourceFile| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %import-reference-source-item-source-file :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or reference-name common-lisp:null)
                         :accessor %import-reference-source-item-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or reference-description
                                         common-lisp:null)
                         :accessor %import-reference-source-item-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-reference-source-item
                    'make-import-reference-source-item))
 (common-lisp:defun make-import-reference-source-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status-message status source-file
                     name description)
   (common-lisp:apply #'common-lisp:make-instance 'import-reference-source-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-file))
      (common-lisp:list
       (common-lisp:cons "sourceFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-reference-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-reference-source-list ()
   '(trivial-types:proper-list import-reference-source-item))
 (common-lisp:defun |make-import-reference-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-reference-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype job-status-message () 'common-lisp:string)
(common-lisp:deftype job-status-msg () 'common-lisp:string)
(common-lisp:deftype line-sep () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-annotation-import-jobs-filter common-lisp:nil
                       ((store-name :initarg :|storeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-annotation-import-jobs-filter-store-name
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %list-annotation-import-jobs-filter-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-annotation-import-jobs-filter
                    'make-list-annotation-import-jobs-filter))
 (common-lisp:defun make-list-annotation-import-jobs-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key store-name status)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-annotation-import-jobs-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-name))
      (common-lisp:list
       (common-lisp:cons "storeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-annotation-import-jobs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-annotation-import-jobs-request-next-token-string
                          common-lisp:null)
                         :accessor
                         %list-annotation-import-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-annotation-import-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-annotation-import-jobs-request-max-results
                         :initform common-lisp:nil)
                        (ids :initarg :|ids| :type
                         (common-lisp:or
                          list-annotation-import-jobs-request-ids-list
                          common-lisp:null)
                         :accessor %list-annotation-import-jobs-request-ids
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or list-annotation-import-jobs-filter
                                         common-lisp:null)
                         :accessor %list-annotation-import-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-annotation-import-jobs-request
                    'make-list-annotation-import-jobs-request))
 (common-lisp:defun make-list-annotation-import-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results ids filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-annotation-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-annotation-import-jobs-request-ids-list ()
   '(trivial-types:proper-list resource-identifier))
 (common-lisp:defun |make-list-annotation-import-jobs-request-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-annotation-import-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-annotation-import-jobs-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-annotation-import-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-annotation-import-jobs-response-next-token
                         :initform common-lisp:nil)
                        (annotation-import-jobs :initarg
                         :|annotationImportJobs| :type
                         (common-lisp:or annotation-import-job-items
                                         common-lisp:null)
                         :accessor
                         %list-annotation-import-jobs-response-annotation-import-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-annotation-import-jobs-response
                    'make-list-annotation-import-jobs-response))
 (common-lisp:defun make-list-annotation-import-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token annotation-import-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-annotation-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'annotation-import-jobs))
      (common-lisp:list
       (common-lisp:cons "annotationImportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-annotation-stores-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %list-annotation-stores-filter-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-annotation-stores-filter
                    'make-list-annotation-stores-filter))
 (common-lisp:defun make-list-annotation-stores-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-annotation-stores-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-annotation-stores-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-annotation-stores-request-next-token-string
                          common-lisp:null)
                         :accessor %list-annotation-stores-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-annotation-stores-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-annotation-stores-request-max-results
                         :initform common-lisp:nil)
                        (ids :initarg :|ids| :type
                         (common-lisp:or
                          list-annotation-stores-request-ids-list
                          common-lisp:null)
                         :accessor %list-annotation-stores-request-ids
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or list-annotation-stores-filter
                                         common-lisp:null)
                         :accessor %list-annotation-stores-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-annotation-stores-request
                    'make-list-annotation-stores-request))
 (common-lisp:defun make-list-annotation-stores-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results ids filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-annotation-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-annotation-stores-request-ids-list ()
   '(trivial-types:proper-list resource-identifier))
 (common-lisp:defun |make-list-annotation-stores-request-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-annotation-stores-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-annotation-stores-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-annotation-stores-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-annotation-stores-response-next-token :initform
                         common-lisp:nil)
                        (annotation-stores :initarg :|annotationStores| :type
                         (common-lisp:or annotation-store-items
                                         common-lisp:null)
                         :accessor
                         %list-annotation-stores-response-annotation-stores
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-annotation-stores-response
                    'make-list-annotation-stores-response))
 (common-lisp:defun make-list-annotation-stores-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token annotation-stores)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-annotation-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation-stores))
      (common-lisp:list
       (common-lisp:cons "annotationStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-annotation-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-read-set-activation-jobs-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %list-read-set-activation-jobs-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-set-activation-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-read-set-activation-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-read-set-activation-jobs-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or activate-read-set-filter
                                         common-lisp:null)
                         :accessor
                         %list-read-set-activation-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-set-activation-jobs-request
                    'make-list-read-set-activation-jobs-request))
 (common-lisp:defun make-list-read-set-activation-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id next-token max-results
                     filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-read-set-activation-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-activation-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-activation-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-activation-jobs-request))
   common-lisp:nil))
(common-lisp:deftype list-read-set-activation-jobs-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-read-set-activation-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-set-activation-jobs-response-next-token
                         :initform common-lisp:nil)
                        (activation-jobs :initarg :|activationJobs| :type
                         (common-lisp:or activate-read-set-job-list
                                         common-lisp:null)
                         :accessor
                         %list-read-set-activation-jobs-response-activation-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-set-activation-jobs-response
                    'make-list-read-set-activation-jobs-response))
 (common-lisp:defun make-list-read-set-activation-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token activation-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-read-set-activation-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-activation-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-activation-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-jobs))
      (common-lisp:list
       (common-lisp:cons "activationJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-activation-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-read-set-export-jobs-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %list-read-set-export-jobs-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-set-export-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-read-set-export-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-read-set-export-jobs-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or export-read-set-filter
                                         common-lisp:null)
                         :accessor %list-read-set-export-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-set-export-jobs-request
                    'make-list-read-set-export-jobs-request))
 (common-lisp:defun make-list-read-set-export-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id next-token max-results
                     filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-read-set-export-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-export-jobs-request))
   common-lisp:nil))
(common-lisp:deftype list-read-set-export-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-read-set-export-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-set-export-jobs-response-next-token
                         :initform common-lisp:nil)
                        (export-jobs :initarg :|exportJobs| :type
                         (common-lisp:or export-read-set-job-detail-list
                                         common-lisp:null)
                         :accessor
                         %list-read-set-export-jobs-response-export-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-set-export-jobs-response
                    'make-list-read-set-export-jobs-response))
 (common-lisp:defun make-list-read-set-export-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token export-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-read-set-export-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-jobs))
      (common-lisp:list
       (common-lisp:cons "exportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-read-set-import-jobs-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %list-read-set-import-jobs-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-set-import-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-read-set-import-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-read-set-import-jobs-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or import-read-set-filter
                                         common-lisp:null)
                         :accessor %list-read-set-import-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-set-import-jobs-request
                    'make-list-read-set-import-jobs-request))
 (common-lisp:defun make-list-read-set-import-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id next-token max-results
                     filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-read-set-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-import-jobs-request))
   common-lisp:nil))
(common-lisp:deftype list-read-set-import-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-read-set-import-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-set-import-jobs-response-next-token
                         :initform common-lisp:nil)
                        (import-jobs :initarg :|importJobs| :type
                         (common-lisp:or import-read-set-job-list
                                         common-lisp:null)
                         :accessor
                         %list-read-set-import-jobs-response-import-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-set-import-jobs-response
                    'make-list-read-set-import-jobs-response))
 (common-lisp:defun make-list-read-set-import-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token import-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-read-set-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-jobs))
      (common-lisp:list
       (common-lisp:cons "importJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-set-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-read-sets-request common-lisp:nil
                       ((sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %list-read-sets-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-sets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-read-sets-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-read-sets-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or read-set-filter common-lisp:null)
                         :accessor %list-read-sets-request-filter :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-sets-request 'make-list-read-sets-request))
 (common-lisp:defun make-list-read-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-store-id next-token max-results
                     filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-read-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-sets-request))
   common-lisp:nil))
(common-lisp:deftype list-read-sets-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-read-sets-response common-lisp:nil
                       ((read-sets :initarg :|readSets| :type
                         (common-lisp:or read-set-list common-lisp:null)
                         :accessor %list-read-sets-response-read-sets :initform
                         (common-lisp:error ":readsets is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-read-sets-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-read-sets-response 'make-list-read-sets-response))
 (common-lisp:defun make-list-read-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-sets next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-read-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-read-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-read-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-sets))
      (common-lisp:list
       (common-lisp:cons "readSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-read-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reference-import-jobs-request common-lisp:nil
                       ((reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %list-reference-import-jobs-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-reference-import-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-reference-import-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-reference-import-jobs-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or import-reference-filter
                                         common-lisp:null)
                         :accessor %list-reference-import-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reference-import-jobs-request
                    'make-list-reference-import-jobs-request))
 (common-lisp:defun make-list-reference-import-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-store-id next-token max-results
                     filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reference-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-import-jobs-request))
   common-lisp:nil))
(common-lisp:deftype list-reference-import-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-reference-import-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-reference-import-jobs-response-next-token
                         :initform common-lisp:nil)
                        (import-jobs :initarg :|importJobs| :type
                         (common-lisp:or import-reference-job-list
                                         common-lisp:null)
                         :accessor
                         %list-reference-import-jobs-response-import-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reference-import-jobs-response
                    'make-list-reference-import-jobs-response))
 (common-lisp:defun make-list-reference-import-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token import-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reference-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-jobs))
      (common-lisp:list
       (common-lisp:cons "importJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reference-stores-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-reference-stores-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-reference-stores-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-reference-stores-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or reference-store-filter
                                         common-lisp:null)
                         :accessor %list-reference-stores-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reference-stores-request
                    'make-list-reference-stores-request))
 (common-lisp:defun make-list-reference-stores-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reference-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-stores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-stores-request))
   common-lisp:nil))
(common-lisp:deftype list-reference-stores-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-reference-stores-response common-lisp:nil
                       ((reference-stores :initarg :|referenceStores| :type
                         (common-lisp:or reference-store-detail-list
                                         common-lisp:null)
                         :accessor
                         %list-reference-stores-response-reference-stores
                         :initform
                         (common-lisp:error ":referencestores is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-reference-stores-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reference-stores-response
                    'make-list-reference-stores-response))
 (common-lisp:defun make-list-reference-stores-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-stores next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reference-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-stores))
      (common-lisp:list
       (common-lisp:cons "referenceStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reference-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-references-request common-lisp:nil
                       ((reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %list-references-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-references-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-references-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-references-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or reference-filter common-lisp:null)
                         :accessor %list-references-request-filter :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-references-request 'make-list-references-request))
 (common-lisp:defun make-list-references-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-store-id next-token max-results
                     filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-references-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-references-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-references-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-references-request))
   common-lisp:nil))
(common-lisp:deftype list-references-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-references-response common-lisp:nil
                       ((references :initarg :|references| :type
                         (common-lisp:or reference-list common-lisp:null)
                         :accessor %list-references-response-references
                         :initform
                         (common-lisp:error ":references is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-references-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-references-response 'make-list-references-response))
 (common-lisp:defun make-list-references-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key references next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-references-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-references-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-references-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'references))
      (common-lisp:list
       (common-lisp:cons "references"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-references-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-run-groups-request common-lisp:nil
                       ((starting-token :initarg :|startingToken| :type
                         (common-lisp:or run-group-list-token common-lisp:null)
                         :accessor %list-run-groups-request-starting-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or run-group-name common-lisp:null)
                         :accessor %list-run-groups-request-name :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-run-groups-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-run-groups-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-run-groups-request 'make-list-run-groups-request))
 (common-lisp:defun make-list-run-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key starting-token name max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-run-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-run-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-run-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-run-groups-request))
   common-lisp:nil))
(common-lisp:deftype list-run-groups-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-run-groups-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or run-group-list-token common-lisp:null)
                         :accessor %list-run-groups-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or run-group-list common-lisp:null)
                         :accessor %list-run-groups-response-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-run-groups-response 'make-list-run-groups-response))
 (common-lisp:defun make-list-run-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance 'list-run-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-run-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-run-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-run-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-run-tasks-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor %list-run-tasks-request-status :initform
                         common-lisp:nil)
                        (starting-token :initarg :|startingToken| :type
                         (common-lisp:or task-list-token common-lisp:null)
                         :accessor %list-run-tasks-request-starting-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-run-tasks-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-run-tasks-request-max-results
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %list-run-tasks-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-run-tasks-request 'make-list-run-tasks-request))
 (common-lisp:defun make-list-run-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status starting-token max-results id)
   (common-lisp:apply #'common-lisp:make-instance 'list-run-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-run-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-run-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-run-tasks-request))
   common-lisp:nil))
(common-lisp:deftype list-run-tasks-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-run-tasks-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or task-list-token common-lisp:null)
                         :accessor %list-run-tasks-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or task-list common-lisp:null) :accessor
                         %list-run-tasks-response-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-run-tasks-response 'make-list-run-tasks-response))
 (common-lisp:defun make-list-run-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance 'list-run-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-run-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-run-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-run-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-runs-request common-lisp:nil
                       ((starting-token :initarg :|startingToken| :type
                         (common-lisp:or run-list-token common-lisp:null)
                         :accessor %list-runs-request-starting-token :initform
                         common-lisp:nil)
                        (run-group-id :initarg :|runGroupId| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %list-runs-request-run-group-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or run-name common-lisp:null) :accessor
                         %list-runs-request-name :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-runs-request-max-results-integer
                                         common-lisp:null)
                         :accessor %list-runs-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-runs-request 'make-list-runs-request))
 (common-lisp:defun make-list-runs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key starting-token run-group-id name
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-runs-request))
   common-lisp:nil))
(common-lisp:deftype list-runs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-runs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or run-list-token common-lisp:null)
                         :accessor %list-runs-response-next-token :initform
                         common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or run-list common-lisp:null) :accessor
                         %list-runs-response-items :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-runs-response 'make-list-runs-response))
 (common-lisp:defun make-list-runs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance 'list-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sequence-stores-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-sequence-stores-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-sequence-stores-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-sequence-stores-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or sequence-store-filter
                                         common-lisp:null)
                         :accessor %list-sequence-stores-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sequence-stores-request
                    'make-list-sequence-stores-request))
 (common-lisp:defun make-list-sequence-stores-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-sequence-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sequence-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sequence-stores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sequence-stores-request))
   common-lisp:nil))
(common-lisp:deftype list-sequence-stores-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-sequence-stores-response common-lisp:nil
                       ((sequence-stores :initarg :|sequenceStores| :type
                         (common-lisp:or sequence-store-detail-list
                                         common-lisp:null)
                         :accessor
                         %list-sequence-stores-response-sequence-stores
                         :initform
                         (common-lisp:error ":sequencestores is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-sequence-stores-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sequence-stores-response
                    'make-list-sequence-stores-response))
 (common-lisp:defun make-list-sequence-stores-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sequence-stores next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sequence-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sequence-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sequence-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-stores))
      (common-lisp:list
       (common-lisp:cons "sequenceStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sequence-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-variant-import-jobs-filter common-lisp:nil
                       ((store-name :initarg :|storeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-variant-import-jobs-filter-store-name :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %list-variant-import-jobs-filter-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-variant-import-jobs-filter
                    'make-list-variant-import-jobs-filter))
 (common-lisp:defun make-list-variant-import-jobs-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key store-name status)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-variant-import-jobs-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-name))
      (common-lisp:list
       (common-lisp:cons "storeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-variant-import-jobs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-variant-import-jobs-request-next-token-string
                          common-lisp:null)
                         :accessor %list-variant-import-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-variant-import-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         %list-variant-import-jobs-request-max-results
                         :initform common-lisp:nil)
                        (ids :initarg :|ids| :type
                         (common-lisp:or
                          list-variant-import-jobs-request-ids-list
                          common-lisp:null)
                         :accessor %list-variant-import-jobs-request-ids
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or list-variant-import-jobs-filter
                                         common-lisp:null)
                         :accessor %list-variant-import-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-variant-import-jobs-request
                    'make-list-variant-import-jobs-request))
 (common-lisp:defun make-list-variant-import-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results ids filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-variant-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-variant-import-jobs-request-ids-list ()
   '(trivial-types:proper-list resource-identifier))
 (common-lisp:defun |make-list-variant-import-jobs-request-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-variant-import-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-variant-import-jobs-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-variant-import-jobs-response common-lisp:nil
                       ((variant-import-jobs :initarg :|variantImportJobs|
                         :type
                         (common-lisp:or variant-import-job-items
                                         common-lisp:null)
                         :accessor
                         %list-variant-import-jobs-response-variant-import-jobs
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-variant-import-jobs-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-variant-import-jobs-response
                    'make-list-variant-import-jobs-response))
 (common-lisp:defun make-list-variant-import-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variant-import-jobs next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-variant-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-import-jobs))
      (common-lisp:list
       (common-lisp:cons "variantImportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-variant-stores-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %list-variant-stores-filter-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-variant-stores-filter
                    'make-list-variant-stores-filter))
 (common-lisp:defun make-list-variant-stores-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'list-variant-stores-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-variant-stores-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or
                          list-variant-stores-request-next-token-string
                          common-lisp:null)
                         :accessor %list-variant-stores-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-variant-stores-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-variant-stores-request-max-results
                         :initform common-lisp:nil)
                        (ids :initarg :|ids| :type
                         (common-lisp:or list-variant-stores-request-ids-list
                                         common-lisp:null)
                         :accessor %list-variant-stores-request-ids :initform
                         common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or list-variant-stores-filter
                                         common-lisp:null)
                         :accessor %list-variant-stores-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-variant-stores-request
                    'make-list-variant-stores-request))
 (common-lisp:defun make-list-variant-stores-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results ids filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-variant-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-variant-stores-request-ids-list ()
   '(trivial-types:proper-list resource-identifier))
 (common-lisp:defun |make-list-variant-stores-request-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-variant-stores-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-variant-stores-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-variant-stores-response common-lisp:nil
                       ((variant-stores :initarg :|variantStores| :type
                         (common-lisp:or variant-store-items common-lisp:null)
                         :accessor %list-variant-stores-response-variant-stores
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-variant-stores-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-variant-stores-response
                    'make-list-variant-stores-response))
 (common-lisp:defun make-list-variant-stores-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key variant-stores next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-variant-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-stores))
      (common-lisp:list
       (common-lisp:cons "variantStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-variant-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %list-workflows-request-type :initform
                         common-lisp:nil)
                        (starting-token :initarg :|startingToken| :type
                         (common-lisp:or workflow-list-token common-lisp:null)
                         :accessor %list-workflows-request-starting-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-name common-lisp:null)
                         :accessor %list-workflows-request-name :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-workflows-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-workflows-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defun make-list-workflows-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type starting-token name max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:deftype list-workflows-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-workflows-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or workflow-list-token common-lisp:null)
                         :accessor %list-workflows-response-next-token
                         :initform common-lisp:nil)
                        (items :initarg :|items| :type
                         (common-lisp:or workflow-list common-lisp:null)
                         :accessor %list-workflows-response-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defun make-list-workflows-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token items)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype md5 () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:deftype quote () 'common-lisp:string)
(common-lisp:deftype quote-all () 'common-lisp:boolean)
(common-lisp:deftype range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition range-not-satisfiable-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       range-not-satisfiable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'range-not-satisfiable-exception
                    'range-not-satisfiable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass read-options common-lisp:nil
                       ((sep :initarg :|sep| :type
                         (common-lisp:or separator common-lisp:null) :accessor
                         %read-options-sep :initform common-lisp:nil)
                        (quote-all :initarg :|quoteAll| :type
                         (common-lisp:or quote-all common-lisp:null) :accessor
                         %read-options-quote-all :initform common-lisp:nil)
                        (quote :initarg :|quote| :type
                         (common-lisp:or quote common-lisp:null) :accessor
                         %read-options-quote :initform common-lisp:nil)
                        (line-sep :initarg :|lineSep| :type
                         (common-lisp:or line-sep common-lisp:null) :accessor
                         %read-options-line-sep :initform common-lisp:nil)
                        (header :initarg :|header| :type
                         (common-lisp:or header common-lisp:null) :accessor
                         %read-options-header :initform common-lisp:nil)
                        (escape-quotes :initarg :|escapeQuotes| :type
                         (common-lisp:or escape-quotes common-lisp:null)
                         :accessor %read-options-escape-quotes :initform
                         common-lisp:nil)
                        (escape :initarg :|escape| :type
                         (common-lisp:or escape-char common-lisp:null)
                         :accessor %read-options-escape :initform
                         common-lisp:nil)
                        (encoding :initarg :|encoding| :type
                         (common-lisp:or encoding common-lisp:null) :accessor
                         %read-options-encoding :initform common-lisp:nil)
                        (comment :initarg :|comment| :type
                         (common-lisp:or comment-char common-lisp:null)
                         :accessor %read-options-comment :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'read-options 'make-read-options))
 (common-lisp:defun make-read-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sep quote-all quote line-sep header
                     escape-quotes escape encoding comment)
   (common-lisp:apply #'common-lisp:make-instance 'read-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'escape))
      (common-lisp:list
       (common-lisp:cons "escape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'escape-quotes))
      (common-lisp:list
       (common-lisp:cons "escapeQuotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-sep))
      (common-lisp:list
       (common-lisp:cons "lineSep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote))
      (common-lisp:list
       (common-lisp:cons "quote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-all))
      (common-lisp:list
       (common-lisp:cons "quoteAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sep))
      (common-lisp:list
       (common-lisp:cons "sep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-options))
   common-lisp:nil))
(common-lisp:deftype read-set-activation-job-item-status () 'common-lisp:string)
(common-lisp:deftype read-set-activation-job-status () 'common-lisp:string)
(common-lisp:deftype read-set-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass read-set-batch-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %read-set-batch-error-message :initform
                         (common-lisp:error ":message is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %read-set-batch-error-id :initform
                         (common-lisp:error ":id is required"))
                        (code :initarg :|code| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %read-set-batch-error-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export
  (common-lisp:list 'read-set-batch-error 'make-read-set-batch-error))
 (common-lisp:defun make-read-set-batch-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message id code)
   (common-lisp:apply #'common-lisp:make-instance 'read-set-batch-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-set-batch-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-set-batch-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-set-batch-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype read-set-batch-error-list ()
   '(trivial-types:proper-list read-set-batch-error))
 (common-lisp:defun |make-read-set-batch-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list read-set-batch-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype read-set-description () 'common-lisp:string)
(common-lisp:deftype read-set-export-job-item-status () 'common-lisp:string)
(common-lisp:deftype read-set-export-job-status () 'common-lisp:string)
(common-lisp:deftype read-set-file () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass read-set-files common-lisp:nil
                       ((source2 :initarg :|source2| :type
                         (common-lisp:or file-information common-lisp:null)
                         :accessor %read-set-files-source2 :initform
                         common-lisp:nil)
                        (source1 :initarg :|source1| :type
                         (common-lisp:or file-information common-lisp:null)
                         :accessor %read-set-files-source1 :initform
                         common-lisp:nil)
                        (index :initarg :|index| :type
                         (common-lisp:or file-information common-lisp:null)
                         :accessor %read-set-files-index :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'read-set-files 'make-read-set-files))
 (common-lisp:defun make-read-set-files
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source2 source1 index)
   (common-lisp:apply #'common-lisp:make-instance 'read-set-files
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-set-files))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-set-files))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source1))
      (common-lisp:list
       (common-lisp:cons "source1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source2))
      (common-lisp:list
       (common-lisp:cons "source2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-set-files))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass read-set-filter common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-status common-lisp:null)
                         :accessor %read-set-filter-status :initform
                         common-lisp:nil)
                        (reference-arn :initarg :|referenceArn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor %read-set-filter-reference-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or read-set-name common-lisp:null)
                         :accessor %read-set-filter-name :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %read-set-filter-created-before :initform
                         common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %read-set-filter-created-after :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'read-set-filter 'make-read-set-filter))
 (common-lisp:defun make-read-set-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status reference-arn name created-before
                     created-after)
   (common-lisp:apply #'common-lisp:make-instance 'read-set-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-set-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-set-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-arn))
      (common-lisp:list
       (common-lisp:cons "referenceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-set-filter))
   common-lisp:nil))
(common-lisp:deftype read-set-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype read-set-id-list ()
   '(trivial-types:proper-list read-set-id))
 (common-lisp:defun |make-read-set-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list read-set-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype read-set-import-job-item-status () 'common-lisp:string)
(common-lisp:deftype read-set-import-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype read-set-list ()
   '(trivial-types:proper-list read-set-list-item))
 (common-lisp:defun |make-read-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list read-set-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass read-set-list-item common-lisp:nil
                       ((subject-id :initarg :|subjectId| :type
                         (common-lisp:or subject-id common-lisp:null) :accessor
                         %read-set-list-item-subject-id :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or read-set-status common-lisp:null)
                         :accessor %read-set-list-item-status :initform
                         (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %read-set-list-item-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (sequence-information :initarg :|sequenceInformation|
                         :type
                         (common-lisp:or sequence-information common-lisp:null)
                         :accessor %read-set-list-item-sequence-information
                         :initform common-lisp:nil)
                        (sample-id :initarg :|sampleId| :type
                         (common-lisp:or sample-id common-lisp:null) :accessor
                         %read-set-list-item-sample-id :initform
                         common-lisp:nil)
                        (reference-arn :initarg :|referenceArn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor %read-set-list-item-reference-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or read-set-name common-lisp:null)
                         :accessor %read-set-list-item-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor %read-set-list-item-id :initform
                         (common-lisp:error ":id is required"))
                        (file-type :initarg :|fileType| :type
                         (common-lisp:or file-type common-lisp:null) :accessor
                         %read-set-list-item-file-type :initform
                         (common-lisp:error ":filetype is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or read-set-description common-lisp:null)
                         :accessor %read-set-list-item-description :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %read-set-list-item-creation-time :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or read-set-arn common-lisp:null)
                         :accessor %read-set-list-item-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'read-set-list-item 'make-read-set-list-item))
 (common-lisp:defun make-read-set-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subject-id status sequence-store-id
                     sequence-information sample-id reference-arn name id
                     file-type description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'read-set-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-set-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-set-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-arn))
      (common-lisp:list
       (common-lisp:cons "referenceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-id))
      (common-lisp:list
       (common-lisp:cons "sampleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sequence-information))
      (common-lisp:list
       (common-lisp:cons "sequenceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-id))
      (common-lisp:list
       (common-lisp:cons "subjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-set-list-item))
   common-lisp:nil))
(common-lisp:deftype read-set-name () 'common-lisp:string)
(common-lisp:deftype read-set-status () 'common-lisp:string)
(common-lisp:deftype read-set-streaming-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype reference-arn () 'common-lisp:string)
(common-lisp:deftype reference-description () 'common-lisp:string)
(common-lisp:deftype reference-file () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reference-files common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or file-information common-lisp:null)
                         :accessor %reference-files-source :initform
                         common-lisp:nil)
                        (index :initarg :|index| :type
                         (common-lisp:or file-information common-lisp:null)
                         :accessor %reference-files-index :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'reference-files 'make-reference-files))
 (common-lisp:defun make-reference-files
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source index)
   (common-lisp:apply #'common-lisp:make-instance 'reference-files
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-files))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-files))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-files))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reference-filter common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or reference-name common-lisp:null)
                         :accessor %reference-filter-name :initform
                         common-lisp:nil)
                        (md5 :initarg :|md5| :type
                         (common-lisp:or md5 common-lisp:null) :accessor
                         %reference-filter-md5 :initform common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-filter-created-before :initform
                         common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-filter-created-after :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reference-filter 'make-reference-filter))
 (common-lisp:defun make-reference-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name md5 created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'reference-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'md5))
      (common-lisp:list
       (common-lisp:cons "md5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-filter))
   common-lisp:nil))
(common-lisp:deftype reference-id () 'common-lisp:string)
(common-lisp:deftype reference-import-job-item-status () 'common-lisp:string)
(common-lisp:deftype reference-import-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reference-item common-lisp:nil
                       ((reference-arn :initarg :|referenceArn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor %reference-item-reference-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'reference-item 'make-reference-item))
 (common-lisp:defun make-reference-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-arn)
   (common-lisp:apply #'common-lisp:make-instance 'reference-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-arn))
      (common-lisp:list
       (common-lisp:cons "referenceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-list ()
   '(trivial-types:proper-list reference-list-item))
 (common-lisp:defun |make-reference-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reference-list-item common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-list-item-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or reference-status common-lisp:null)
                         :accessor %reference-list-item-status :initform
                         common-lisp:nil)
                        (reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %reference-list-item-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or reference-name common-lisp:null)
                         :accessor %reference-list-item-name :initform
                         common-lisp:nil)
                        (md5 :initarg :|md5| :type
                         (common-lisp:or md5 common-lisp:null) :accessor
                         %reference-list-item-md5 :initform
                         (common-lisp:error ":md5 is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor %reference-list-item-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or reference-description
                                         common-lisp:null)
                         :accessor %reference-list-item-description :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-list-item-creation-time :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor %reference-list-item-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-list-item 'make-reference-list-item))
 (common-lisp:defun make-reference-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status reference-store-id
                     name md5 id description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'reference-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'md5))
      (common-lisp:list
       (common-lisp:cons "md5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-store-id))
      (common-lisp:list
       (common-lisp:cons "referenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-list-item))
   common-lisp:nil))
(common-lisp:deftype reference-name () 'common-lisp:string)
(common-lisp:deftype reference-status () 'common-lisp:string)
(common-lisp:deftype reference-store-arn () 'common-lisp:string)
(common-lisp:deftype reference-store-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reference-store-detail common-lisp:nil
                       ((sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %reference-store-detail-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or reference-store-name common-lisp:null)
                         :accessor %reference-store-detail-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor %reference-store-detail-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or reference-store-description
                                         common-lisp:null)
                         :accessor %reference-store-detail-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-store-detail-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or reference-store-arn common-lisp:null)
                         :accessor %reference-store-detail-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'reference-store-detail 'make-reference-store-detail))
 (common-lisp:defun make-reference-store-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sse-config name id description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'reference-store-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-store-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-store-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-store-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-store-detail-list ()
   '(trivial-types:proper-list reference-store-detail))
 (common-lisp:defun |make-reference-store-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-store-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reference-store-filter common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or reference-store-name common-lisp:null)
                         :accessor %reference-store-filter-name :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-store-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %reference-store-filter-created-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reference-store-filter 'make-reference-store-filter))
 (common-lisp:defun make-reference-store-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'reference-store-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-store-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-store-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-store-filter))
   common-lisp:nil))
(common-lisp:deftype reference-store-id () 'common-lisp:string)
(common-lisp:deftype reference-store-name () 'common-lisp:string)
(common-lisp:deftype reference-streaming-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition request-timeout-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       request-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-timeout-exception
                    'request-timeout-exception-message)))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype run-arn () 'common-lisp:string)
(common-lisp:deftype run-export () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype run-export-list ()
   '(trivial-types:proper-list run-export))
 (common-lisp:defun |make-run-export-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list run-export))
   aws-sdk/generator/shape::members))
(common-lisp:deftype run-group-arn () 'common-lisp:string)
(common-lisp:deftype run-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype run-group-list ()
   '(trivial-types:proper-list run-group-list-item))
 (common-lisp:defun |make-run-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list run-group-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass run-group-list-item common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or run-group-name common-lisp:null)
                         :accessor %run-group-list-item-name :initform
                         common-lisp:nil)
                        (max-runs :initarg :|maxRuns| :type
                         (common-lisp:or run-group-list-item-max-runs-integer
                                         common-lisp:null)
                         :accessor %run-group-list-item-max-runs :initform
                         common-lisp:nil)
                        (max-duration :initarg :|maxDuration| :type
                         (common-lisp:or
                          run-group-list-item-max-duration-integer
                          common-lisp:null)
                         :accessor %run-group-list-item-max-duration :initform
                         common-lisp:nil)
                        (max-cpus :initarg :|maxCpus| :type
                         (common-lisp:or run-group-list-item-max-cpus-integer
                                         common-lisp:null)
                         :accessor %run-group-list-item-max-cpus :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %run-group-list-item-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or run-group-timestamp common-lisp:null)
                         :accessor %run-group-list-item-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or run-group-arn common-lisp:null)
                         :accessor %run-group-list-item-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'run-group-list-item 'make-run-group-list-item))
 (common-lisp:defun make-run-group-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name max-runs max-duration max-cpus id
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'run-group-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-group-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-group-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cpus))
      (common-lisp:list
       (common-lisp:cons "maxCpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duration))
      (common-lisp:list
       (common-lisp:cons "maxDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-runs))
      (common-lisp:list
       (common-lisp:cons "maxRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-group-list-item))
   common-lisp:nil))
(common-lisp:deftype run-group-list-item-max-cpus-integer ()
  'common-lisp:integer)
(common-lisp:deftype run-group-list-item-max-duration-integer ()
  'common-lisp:integer)
(common-lisp:deftype run-group-list-item-max-runs-integer ()
  'common-lisp:integer)
(common-lisp:deftype run-group-list-token () 'common-lisp:string)
(common-lisp:deftype run-group-name () 'common-lisp:string)
(common-lisp:deftype run-group-request-id () 'common-lisp:string)
(common-lisp:deftype run-group-timestamp () 'common-lisp:string)
(common-lisp:deftype run-id () 'common-lisp:string)
(common-lisp:deftype run-left-normalization () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype run-list () '(trivial-types:proper-list run-list-item))
 (common-lisp:defun |make-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list run-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass run-list-item common-lisp:nil
                       ((workflow-id :initarg :|workflowId| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %run-list-item-workflow-id :initform
                         common-lisp:nil)
                        (storage-capacity :initarg :|storageCapacity| :type
                         (common-lisp:or run-list-item-storage-capacity-integer
                                         common-lisp:null)
                         :accessor %run-list-item-storage-capacity :initform
                         common-lisp:nil)
                        (stop-time :initarg :|stopTime| :type
                         (common-lisp:or run-timestamp common-lisp:null)
                         :accessor %run-list-item-stop-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or run-status common-lisp:null) :accessor
                         %run-list-item-status :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or run-timestamp common-lisp:null)
                         :accessor %run-list-item-start-time :initform
                         common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or run-list-item-priority-integer
                                         common-lisp:null)
                         :accessor %run-list-item-priority :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or run-name common-lisp:null) :accessor
                         %run-list-item-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %run-list-item-id :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or run-timestamp common-lisp:null)
                         :accessor %run-list-item-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or run-arn common-lisp:null) :accessor
                         %run-list-item-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'run-list-item 'make-run-list-item))
 (common-lisp:defun make-run-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id storage-capacity stop-time
                     status start-time priority name id creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'run-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "storageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-list-item))
   common-lisp:nil))
(common-lisp:deftype run-list-item-priority-integer () 'common-lisp:integer)
(common-lisp:deftype run-list-item-storage-capacity-integer ()
  'common-lisp:integer)
(common-lisp:deftype run-list-token () 'common-lisp:string)
(common-lisp:deftype run-log-level () 'common-lisp:string)
(common-lisp:deftype run-name () 'common-lisp:string)
(common-lisp:deftype run-output-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass run-parameters common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'run-parameters 'make-run-parameters))
 (common-lisp:defun make-run-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'run-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-parameters))
   common-lisp:nil))
(common-lisp:deftype run-request-id () 'common-lisp:string)
(common-lisp:deftype run-resource-digest () 'common-lisp:string)
(common-lisp:deftype run-resource-digest-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype run-resource-digests () 'common-lisp:hash-table)
 (common-lisp:defun |make-run-resource-digests|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype run-role-arn () 'common-lisp:string)
(common-lisp:deftype run-started-by () 'common-lisp:string)
(common-lisp:deftype run-status () 'common-lisp:string)
(common-lisp:deftype run-status-message () 'common-lisp:string)
(common-lisp:deftype run-timestamp () 'common-lisp:string)
(common-lisp:deftype s3destination () 'common-lisp:string)
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:deftype sample-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-item () 'common-lisp:hash-table)
 (common-lisp:defun |make-schema-item| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype schema-item-key-string () 'common-lisp:string)
(common-lisp:deftype schema-value-type () 'common-lisp:string)
(common-lisp:deftype separator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sequence-information common-lisp:nil
                       ((total-read-count :initarg :|totalReadCount| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %sequence-information-total-read-count :initform
                         common-lisp:nil)
                        (total-base-count :initarg :|totalBaseCount| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %sequence-information-total-base-count :initform
                         common-lisp:nil)
                        (generated-from :initarg :|generatedFrom| :type
                         (common-lisp:or generated-from common-lisp:null)
                         :accessor %sequence-information-generated-from
                         :initform common-lisp:nil)
                        (alignment :initarg :|alignment| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sequence-information-alignment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sequence-information 'make-sequence-information))
 (common-lisp:defun make-sequence-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-read-count total-base-count
                     generated-from alignment)
   (common-lisp:apply #'common-lisp:make-instance 'sequence-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sequence-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sequence-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-from))
      (common-lisp:list
       (common-lisp:cons "generatedFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-base-count))
      (common-lisp:list
       (common-lisp:cons "totalBaseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-read-count))
      (common-lisp:list
       (common-lisp:cons "totalReadCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sequence-information))
   common-lisp:nil))
(common-lisp:deftype sequence-store-arn () 'common-lisp:string)
(common-lisp:deftype sequence-store-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sequence-store-detail common-lisp:nil
                       ((sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %sequence-store-detail-sse-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or sequence-store-name common-lisp:null)
                         :accessor %sequence-store-detail-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor %sequence-store-detail-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or sequence-store-description
                                         common-lisp:null)
                         :accessor %sequence-store-detail-description :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %sequence-store-detail-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or sequence-store-arn common-lisp:null)
                         :accessor %sequence-store-detail-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'sequence-store-detail 'make-sequence-store-detail))
 (common-lisp:defun make-sequence-store-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sse-config name id description
                     creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'sequence-store-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sequence-store-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sequence-store-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sequence-store-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sequence-store-detail-list ()
   '(trivial-types:proper-list sequence-store-detail))
 (common-lisp:defun |make-sequence-store-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sequence-store-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sequence-store-filter common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or sequence-store-name common-lisp:null)
                         :accessor %sequence-store-filter-name :initform
                         common-lisp:nil)
                        (created-before :initarg :|createdBefore| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %sequence-store-filter-created-before
                         :initform common-lisp:nil)
                        (created-after :initarg :|createdAfter| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %sequence-store-filter-created-after
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sequence-store-filter 'make-sequence-store-filter))
 (common-lisp:defun make-sequence-store-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name created-before created-after)
   (common-lisp:apply #'common-lisp:make-instance 'sequence-store-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sequence-store-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sequence-store-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "createdAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "createdBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sequence-store-filter))
   common-lisp:nil))
(common-lisp:deftype sequence-store-id () 'common-lisp:string)
(common-lisp:deftype sequence-store-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass source-files common-lisp:nil
                       ((source2 :initarg :|source2| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %source-files-source2 :initform common-lisp:nil)
                        (source1 :initarg :|source1| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %source-files-source1 :initform
                         (common-lisp:error ":source1 is required"))))
 (common-lisp:export (common-lisp:list 'source-files 'make-source-files))
 (common-lisp:defun make-source-files
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source2 source1)
   (common-lisp:apply #'common-lisp:make-instance 'source-files
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-files))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-files))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source1))
      (common-lisp:list
       (common-lisp:cons "source1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source2))
      (common-lisp:list
       (common-lisp:cons "source2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-files))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sse-config common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor %sse-config-type :initform
                         (common-lisp:error ":type is required"))
                        (key-arn :initarg :|keyArn| :type
                         (common-lisp:or sse-config-key-arn-string
                                         common-lisp:null)
                         :accessor %sse-config-key-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sse-config 'make-sse-config))
 (common-lisp:defun make-sse-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type key-arn)
   (common-lisp:apply #'common-lisp:make-instance 'sse-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sse-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sse-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sse-config))
   common-lisp:nil))
(common-lisp:deftype sse-config-key-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-annotation-import-request common-lisp:nil
                       ((run-left-normalization :initarg
                         :|runLeftNormalization| :type
                         (common-lisp:or run-left-normalization
                                         common-lisp:null)
                         :accessor
                         %start-annotation-import-request-run-left-normalization
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-annotation-import-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (items :initarg :|items| :type
                         (common-lisp:or annotation-import-item-sources
                                         common-lisp:null)
                         :accessor %start-annotation-import-request-items
                         :initform (common-lisp:error ":items is required"))
                        (format-options :initarg :|formatOptions| :type
                         (common-lisp:or format-options common-lisp:null)
                         :accessor
                         %start-annotation-import-request-format-options
                         :initform common-lisp:nil)
                        (destination-name :initarg :|destinationName| :type
                         (common-lisp:or store-name common-lisp:null) :accessor
                         %start-annotation-import-request-destination-name
                         :initform
                         (common-lisp:error ":destinationname is required"))))
 (common-lisp:export
  (common-lisp:list 'start-annotation-import-request
                    'make-start-annotation-import-request))
 (common-lisp:defun make-start-annotation-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key run-left-normalization role-arn items
                     format-options destination-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-annotation-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-annotation-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-annotation-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-options))
      (common-lisp:list
       (common-lisp:cons "formatOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-left-normalization))
      (common-lisp:list
       (common-lisp:cons "runLeftNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-annotation-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-annotation-import-response common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %start-annotation-import-response-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-annotation-import-response
                    'make-start-annotation-import-response))
 (common-lisp:defun make-start-annotation-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-annotation-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-annotation-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-annotation-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-annotation-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-read-set-activation-job-request common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or
                          start-read-set-activation-job-request-sources-list
                          common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-request-sources
                         :initform (common-lisp:error ":sources is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-read-set-activation-job-request
                    'make-start-read-set-activation-job-request))
 (common-lisp:defun make-start-read-set-activation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources sequence-store-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-activation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-read-set-activation-job-request-sources-list ()
   '(trivial-types:proper-list start-read-set-activation-job-source-item))
 (common-lisp:defun |make-start-read-set-activation-job-request-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            start-read-set-activation-job-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-read-set-activation-job-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-activation-job-status
                                         common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or activation-job-id common-lisp:null)
                         :accessor %start-read-set-activation-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'start-read-set-activation-job-response
                    'make-start-read-set-activation-job-response))
 (common-lisp:defun make-start-read-set-activation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sequence-store-id id
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-activation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-read-set-activation-job-source-item
                       common-lisp:nil
                       ((read-set-id :initarg :|readSetId| :type
                         (common-lisp:or read-set-id common-lisp:null)
                         :accessor
                         %start-read-set-activation-job-source-item-read-set-id
                         :initform
                         (common-lisp:error ":readsetid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-read-set-activation-job-source-item
                    'make-start-read-set-activation-job-source-item))
 (common-lisp:defun make-start-read-set-activation-job-source-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-activation-job-source-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-set-id))
      (common-lisp:list
       (common-lisp:cons "readSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-activation-job-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-read-set-export-job-request common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or
                          start-read-set-export-job-request-sources-list
                          common-lisp:null)
                         :accessor %start-read-set-export-job-request-sources
                         :initform (common-lisp:error ":sources is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %start-read-set-export-job-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %start-read-set-export-job-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (destination :initarg :|destination| :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor
                         %start-read-set-export-job-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-read-set-export-job-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-read-set-export-job-request
                    'make-start-read-set-export-job-request))
 (common-lisp:defun make-start-read-set-export-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources sequence-store-id role-arn
                     destination client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-read-set-export-job-request-sources-list ()
   '(trivial-types:proper-list export-read-set))
 (common-lisp:defun |make-start-read-set-export-job-request-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-read-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-read-set-export-job-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-export-job-status
                                         common-lisp:null)
                         :accessor %start-read-set-export-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %start-read-set-export-job-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or export-job-id common-lisp:null)
                         :accessor %start-read-set-export-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (destination :initarg :|destination| :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor
                         %start-read-set-export-job-response-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %start-read-set-export-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'start-read-set-export-job-response
                    'make-start-read-set-export-job-response))
 (common-lisp:defun make-start-read-set-export-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sequence-store-id id destination
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-read-set-import-job-request common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or
                          start-read-set-import-job-request-sources-list
                          common-lisp:null)
                         :accessor %start-read-set-import-job-request-sources
                         :initform (common-lisp:error ":sources is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %start-read-set-import-job-request-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %start-read-set-import-job-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-read-set-import-job-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-read-set-import-job-request
                    'make-start-read-set-import-job-request))
 (common-lisp:defun make-start-read-set-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources sequence-store-id role-arn
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-read-set-import-job-request-sources-list ()
   '(trivial-types:proper-list start-read-set-import-job-source-item))
 (common-lisp:defun |make-start-read-set-import-job-request-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            start-read-set-import-job-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-read-set-import-job-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or read-set-import-job-status
                                         common-lisp:null)
                         :accessor %start-read-set-import-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (sequence-store-id :initarg :|sequenceStoreId| :type
                         (common-lisp:or sequence-store-id common-lisp:null)
                         :accessor
                         %start-read-set-import-job-response-sequence-store-id
                         :initform
                         (common-lisp:error ":sequencestoreid is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %start-read-set-import-job-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %start-read-set-import-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %start-read-set-import-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'start-read-set-import-job-response
                    'make-start-read-set-import-job-response))
 (common-lisp:defun make-start-read-set-import-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status sequence-store-id role-arn id
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-store-id))
      (common-lisp:list
       (common-lisp:cons "sequenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-read-set-import-job-source-item common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-read-set-import-job-source-item-tags :initform
                         common-lisp:nil)
                        (subject-id :initarg :|subjectId| :type
                         (common-lisp:or subject-id common-lisp:null) :accessor
                         %start-read-set-import-job-source-item-subject-id
                         :initform
                         (common-lisp:error ":subjectid is required"))
                        (source-files :initarg :|sourceFiles| :type
                         (common-lisp:or source-files common-lisp:null)
                         :accessor
                         %start-read-set-import-job-source-item-source-files
                         :initform
                         (common-lisp:error ":sourcefiles is required"))
                        (source-file-type :initarg :|sourceFileType| :type
                         (common-lisp:or file-type common-lisp:null) :accessor
                         %start-read-set-import-job-source-item-source-file-type
                         :initform
                         (common-lisp:error ":sourcefiletype is required"))
                        (sample-id :initarg :|sampleId| :type
                         (common-lisp:or sample-id common-lisp:null) :accessor
                         %start-read-set-import-job-source-item-sample-id
                         :initform (common-lisp:error ":sampleid is required"))
                        (reference-arn :initarg :|referenceArn| :type
                         (common-lisp:or reference-arn common-lisp:null)
                         :accessor
                         %start-read-set-import-job-source-item-reference-arn
                         :initform
                         (common-lisp:error ":referencearn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or read-set-name common-lisp:null)
                         :accessor %start-read-set-import-job-source-item-name
                         :initform common-lisp:nil)
                        (generated-from :initarg :|generatedFrom| :type
                         (common-lisp:or generated-from common-lisp:null)
                         :accessor
                         %start-read-set-import-job-source-item-generated-from
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or read-set-description common-lisp:null)
                         :accessor
                         %start-read-set-import-job-source-item-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-read-set-import-job-source-item
                    'make-start-read-set-import-job-source-item))
 (common-lisp:defun make-start-read-set-import-job-source-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags subject-id source-files
                     source-file-type sample-id reference-arn name
                     generated-from description)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-read-set-import-job-source-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-from))
      (common-lisp:list
       (common-lisp:cons "generatedFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-arn))
      (common-lisp:list
       (common-lisp:cons "referenceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-id))
      (common-lisp:list
       (common-lisp:cons "sampleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-file-type))
      (common-lisp:list
       (common-lisp:cons "sourceFileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-files))
      (common-lisp:list
       (common-lisp:cons "sourceFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-id))
      (common-lisp:list
       (common-lisp:cons "subjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-read-set-import-job-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-reference-import-job-request common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or
                          start-reference-import-job-request-sources-list
                          common-lisp:null)
                         :accessor %start-reference-import-job-request-sources
                         :initform (common-lisp:error ":sources is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %start-reference-import-job-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %start-reference-import-job-request-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-reference-import-job-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-reference-import-job-request
                    'make-start-reference-import-job-request))
 (common-lisp:defun make-start-reference-import-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources role-arn reference-store-id
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-reference-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-reference-import-job-request-sources-list ()
   '(trivial-types:proper-list start-reference-import-job-source-item))
 (common-lisp:defun |make-start-reference-import-job-request-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            start-reference-import-job-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-reference-import-job-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or reference-import-job-status
                                         common-lisp:null)
                         :accessor %start-reference-import-job-response-status
                         :initform (common-lisp:error ":status is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %start-reference-import-job-response-role-arn
                         :initform (common-lisp:error ":rolearn is required"))
                        (reference-store-id :initarg :|referenceStoreId| :type
                         (common-lisp:or reference-store-id common-lisp:null)
                         :accessor
                         %start-reference-import-job-response-reference-store-id
                         :initform
                         (common-lisp:error ":referencestoreid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or import-job-id common-lisp:null)
                         :accessor %start-reference-import-job-response-id
                         :initform (common-lisp:error ":id is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         %start-reference-import-job-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'start-reference-import-job-response
                    'make-start-reference-import-job-response))
 (common-lisp:defun make-start-reference-import-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status role-arn reference-store-id id
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-reference-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-store-id))
      (common-lisp:list
       (common-lisp:cons "referenceStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-reference-import-job-source-item common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-reference-import-job-source-item-tags :initform
                         common-lisp:nil)
                        (source-file :initarg :|sourceFile| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %start-reference-import-job-source-item-source-file
                         :initform
                         (common-lisp:error ":sourcefile is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or reference-name common-lisp:null)
                         :accessor %start-reference-import-job-source-item-name
                         :initform (common-lisp:error ":name is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or reference-description
                                         common-lisp:null)
                         :accessor
                         %start-reference-import-job-source-item-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-reference-import-job-source-item
                    'make-start-reference-import-job-source-item))
 (common-lisp:defun make-start-reference-import-job-source-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags source-file name description)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-reference-import-job-source-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-file))
      (common-lisp:list
       (common-lisp:cons "sourceFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-reference-import-job-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-run-request common-lisp:nil
                       ((workflow-type :initarg :|workflowType| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %start-run-request-workflow-type :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %start-run-request-workflow-id :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-run-request-tags :initform common-lisp:nil)
                        (storage-capacity :initarg :|storageCapacity| :type
                         (common-lisp:or
                          start-run-request-storage-capacity-integer
                          common-lisp:null)
                         :accessor %start-run-request-storage-capacity
                         :initform common-lisp:nil)
                        (run-id :initarg :|runId| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %start-run-request-run-id :initform common-lisp:nil)
                        (run-group-id :initarg :|runGroupId| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %start-run-request-run-group-id :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or run-role-arn common-lisp:null)
                         :accessor %start-run-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or run-request-id common-lisp:null)
                         :accessor %start-run-request-request-id :initform
                         (common-lisp:error ":requestid is required"))
                        (priority :initarg :|priority| :type
                         (common-lisp:or start-run-request-priority-integer
                                         common-lisp:null)
                         :accessor %start-run-request-priority :initform
                         common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or run-parameters common-lisp:null)
                         :accessor %start-run-request-parameters :initform
                         common-lisp:nil)
                        (output-uri :initarg :|outputUri| :type
                         (common-lisp:or run-output-uri common-lisp:null)
                         :accessor %start-run-request-output-uri :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or run-name common-lisp:null) :accessor
                         %start-run-request-name :initform common-lisp:nil)
                        (log-level :initarg :|logLevel| :type
                         (common-lisp:or run-log-level common-lisp:null)
                         :accessor %start-run-request-log-level :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-run-request 'make-start-run-request))
 (common-lisp:defun make-start-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-type workflow-id tags
                     storage-capacity run-id run-group-id role-arn request-id
                     priority parameters output-uri name log-level)
   (common-lisp:apply #'common-lisp:make-instance 'start-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "outputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-group-id))
      (common-lisp:list
       (common-lisp:cons "runGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "storageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "workflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-run-request))
   common-lisp:nil))
(common-lisp:deftype start-run-request-priority-integer () 'common-lisp:integer)
(common-lisp:deftype start-run-request-storage-capacity-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass start-run-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-run-response-tags :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or run-status common-lisp:null) :accessor
                         %start-run-response-status :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         %start-run-response-id :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or run-arn common-lisp:null) :accessor
                         %start-run-response-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-run-response 'make-start-run-response))
 (common-lisp:defun make-start-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status id arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-variant-import-request common-lisp:nil
                       ((run-left-normalization :initarg
                         :|runLeftNormalization| :type
                         (common-lisp:or run-left-normalization
                                         common-lisp:null)
                         :accessor
                         %start-variant-import-request-run-left-normalization
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-variant-import-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (items :initarg :|items| :type
                         (common-lisp:or variant-import-item-sources
                                         common-lisp:null)
                         :accessor %start-variant-import-request-items
                         :initform (common-lisp:error ":items is required"))
                        (destination-name :initarg :|destinationName| :type
                         (common-lisp:or store-name common-lisp:null) :accessor
                         %start-variant-import-request-destination-name
                         :initform
                         (common-lisp:error ":destinationname is required"))))
 (common-lisp:export
  (common-lisp:list 'start-variant-import-request
                    'make-start-variant-import-request))
 (common-lisp:defun make-start-variant-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key run-left-normalization role-arn items
                     destination-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-variant-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-variant-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-variant-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-left-normalization))
      (common-lisp:list
       (common-lisp:cons "runLeftNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-variant-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-variant-import-response common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %start-variant-import-response-job-id
                         :initform (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-variant-import-response
                    'make-start-variant-import-response))
 (common-lisp:defun make-start-variant-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-variant-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-variant-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-variant-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-variant-import-response))
   common-lisp:nil))
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype store-description () 'common-lisp:string)
(common-lisp:deftype store-format () 'common-lisp:string)
(common-lisp:deftype store-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass store-options common-lisp:nil
                       ((tsv-store-options :initarg :|tsvStoreOptions| :type
                         (common-lisp:or tsv-store-options common-lisp:null)
                         :accessor %store-options-tsv-store-options :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'store-options 'make-store-options))
 (common-lisp:defun make-store-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tsv-store-options)
   (common-lisp:apply #'common-lisp:make-instance 'store-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input store-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input store-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tsv-store-options))
      (common-lisp:list
       (common-lisp:cons "tsvStoreOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input store-options))
   common-lisp:nil))
(common-lisp:deftype store-status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subject-id () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-resource-request-tags-map
                                         common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-resource-request-tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-resource-request-tags-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-list () '(trivial-types:proper-list task-list-item))
 (common-lisp:defun |make-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass task-list-item common-lisp:nil
                       ((task-id :initarg :|taskId| :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         %task-list-item-task-id :initform common-lisp:nil)
                        (stop-time :initarg :|stopTime| :type
                         (common-lisp:or task-timestamp common-lisp:null)
                         :accessor %task-list-item-stop-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor %task-list-item-status :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or task-timestamp common-lisp:null)
                         :accessor %task-list-item-start-time :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or task-name common-lisp:null) :accessor
                         %task-list-item-name :initform common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or task-list-item-memory-integer
                                         common-lisp:null)
                         :accessor %task-list-item-memory :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or task-timestamp common-lisp:null)
                         :accessor %task-list-item-creation-time :initform
                         common-lisp:nil)
                        (cpus :initarg :|cpus| :type
                         (common-lisp:or task-list-item-cpus-integer
                                         common-lisp:null)
                         :accessor %task-list-item-cpus :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'task-list-item 'make-task-list-item))
 (common-lisp:defun make-task-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id stop-time status start-time name
                     memory creation-time cpus)
   (common-lisp:apply #'common-lisp:make-instance 'task-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpus))
      (common-lisp:list
       (common-lisp:cons "cpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-list-item))
   common-lisp:nil))
(common-lisp:deftype task-list-item-cpus-integer () 'common-lisp:integer)
(common-lisp:deftype task-list-item-memory-integer () 'common-lisp:integer)
(common-lisp:deftype task-list-token () 'common-lisp:string)
(common-lisp:deftype task-log-stream () 'common-lisp:string)
(common-lisp:deftype task-name () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:deftype task-status-message () 'common-lisp:string)
(common-lisp:deftype task-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass tsv-options common-lisp:nil
                       ((read-options :initarg :|readOptions| :type
                         (common-lisp:or read-options common-lisp:null)
                         :accessor %tsv-options-read-options :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tsv-options 'make-tsv-options))
 (common-lisp:defun make-tsv-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-options)
   (common-lisp:apply #'common-lisp:make-instance 'tsv-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tsv-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tsv-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-options))
      (common-lisp:list
       (common-lisp:cons "readOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tsv-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tsv-store-options common-lisp:nil
                       ((schema :initarg :|schema| :type
                         (common-lisp:or tsv-store-options-schema-list
                                         common-lisp:null)
                         :accessor %tsv-store-options-schema :initform
                         common-lisp:nil)
                        (format-to-header :initarg :|formatToHeader| :type
                         (common-lisp:or format-to-header common-lisp:null)
                         :accessor %tsv-store-options-format-to-header
                         :initform common-lisp:nil)
                        (annotation-type :initarg :|annotationType| :type
                         (common-lisp:or annotation-type common-lisp:null)
                         :accessor %tsv-store-options-annotation-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tsv-store-options 'make-tsv-store-options))
 (common-lisp:defun make-tsv-store-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema format-to-header annotation-type)
   (common-lisp:apply #'common-lisp:make-instance 'tsv-store-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tsv-store-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tsv-store-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation-type))
      (common-lisp:list
       (common-lisp:cons "annotationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-to-header))
      (common-lisp:list
       (common-lisp:cons "formatToHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tsv-store-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tsv-store-options-schema-list ()
   '(trivial-types:proper-list schema-item))
 (common-lisp:defun |make-tsv-store-options-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-annotation-store-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-annotation-store-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %update-annotation-store-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-annotation-store-request
                    'make-update-annotation-store-request))
 (common-lisp:defun make-update-annotation-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name description)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-annotation-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-annotation-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-annotation-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-annotation-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-annotation-store-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor
                         %update-annotation-store-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (store-options :initarg :|storeOptions| :type
                         (common-lisp:or store-options common-lisp:null)
                         :accessor
                         %update-annotation-store-response-store-options
                         :initform common-lisp:nil)
                        (store-format :initarg :|storeFormat| :type
                         (common-lisp:or store-format common-lisp:null)
                         :accessor
                         %update-annotation-store-response-store-format
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %update-annotation-store-response-status
                         :initform (common-lisp:error ":status is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %update-annotation-store-response-reference
                         :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-annotation-store-response-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-annotation-store-response-id
                         :initform (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor
                         %update-annotation-store-response-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor
                         %update-annotation-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'update-annotation-store-response
                    'make-update-annotation-store-response))
 (common-lisp:defun make-update-annotation-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time store-options store-format
                     status reference name id description creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-annotation-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-annotation-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-annotation-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-format))
      (common-lisp:list
       (common-lisp:cons "storeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-options))
      (common-lisp:list
       (common-lisp:cons "storeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-annotation-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-run-group-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or run-group-name common-lisp:null)
                         :accessor %update-run-group-request-name :initform
                         common-lisp:nil)
                        (max-runs :initarg :|maxRuns| :type
                         (common-lisp:or
                          update-run-group-request-max-runs-integer
                          common-lisp:null)
                         :accessor %update-run-group-request-max-runs :initform
                         common-lisp:nil)
                        (max-duration :initarg :|maxDuration| :type
                         (common-lisp:or
                          update-run-group-request-max-duration-integer
                          common-lisp:null)
                         :accessor %update-run-group-request-max-duration
                         :initform common-lisp:nil)
                        (max-cpus :initarg :|maxCpus| :type
                         (common-lisp:or
                          update-run-group-request-max-cpus-integer
                          common-lisp:null)
                         :accessor %update-run-group-request-max-cpus :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or run-group-id common-lisp:null)
                         :accessor %update-run-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-run-group-request 'make-update-run-group-request))
 (common-lisp:defun make-update-run-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name max-runs max-duration max-cpus id)
   (common-lisp:apply #'common-lisp:make-instance 'update-run-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-run-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-run-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cpus))
      (common-lisp:list
       (common-lisp:cons "maxCpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duration))
      (common-lisp:list
       (common-lisp:cons "maxDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-runs))
      (common-lisp:list
       (common-lisp:cons "maxRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-run-group-request))
   common-lisp:nil))
(common-lisp:deftype update-run-group-request-max-cpus-integer ()
  'common-lisp:integer)
(common-lisp:deftype update-run-group-request-max-duration-integer ()
  'common-lisp:integer)
(common-lisp:deftype update-run-group-request-max-runs-integer ()
  'common-lisp:integer)
(common-lisp:deftype update-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-variant-store-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-variant-store-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %update-variant-store-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-variant-store-request
                    'make-update-variant-store-request))
 (common-lisp:defun make-update-variant-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name description)
   (common-lisp:apply #'common-lisp:make-instance 'update-variant-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-variant-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-variant-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-variant-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-variant-store-response common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %update-variant-store-response-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %update-variant-store-response-status
                         :initform (common-lisp:error ":status is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %update-variant-store-response-reference
                         :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-variant-store-response-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %update-variant-store-response-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %update-variant-store-response-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %update-variant-store-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'update-variant-store-response
                    'make-update-variant-store-response))
 (common-lisp:defun make-update-variant-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status reference name id
                     description creation-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-variant-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-variant-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-variant-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-variant-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or workflow-name common-lisp:null)
                         :accessor %update-workflow-request-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %update-workflow-request-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or workflow-description common-lisp:null)
                         :accessor %update-workflow-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-workflow-request 'make-update-workflow-request))
 (common-lisp:defun make-update-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id description)
   (common-lisp:apply #'common-lisp:make-instance 'update-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (omics-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass variant-import-item-detail common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or job-status-msg common-lisp:null)
                         :accessor %variant-import-item-detail-status-message
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %variant-import-item-detail-source :initform
                         (common-lisp:error ":source is required"))
                        (job-status :initarg :|jobStatus| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %variant-import-item-detail-job-status :initform
                         (common-lisp:error ":jobstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'variant-import-item-detail
                    'make-variant-import-item-detail))
 (common-lisp:defun make-variant-import-item-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message source job-status)
   (common-lisp:apply #'common-lisp:make-instance 'variant-import-item-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-item-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-item-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-item-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variant-import-item-details ()
   '(trivial-types:proper-list variant-import-item-detail))
 (common-lisp:defun |make-variant-import-item-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            variant-import-item-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass variant-import-item-source common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %variant-import-item-source-source :initform
                         (common-lisp:error ":source is required"))))
 (common-lisp:export
  (common-lisp:list 'variant-import-item-source
                    'make-variant-import-item-source))
 (common-lisp:defun make-variant-import-item-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source)
   (common-lisp:apply #'common-lisp:make-instance 'variant-import-item-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-item-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-item-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-item-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variant-import-item-sources ()
   '(trivial-types:proper-list variant-import-item-source))
 (common-lisp:defun |make-variant-import-item-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            variant-import-item-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass variant-import-job-item common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %variant-import-job-item-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %variant-import-job-item-status :initform
                         (common-lisp:error ":status is required"))
                        (run-left-normalization :initarg
                         :|runLeftNormalization| :type
                         (common-lisp:or run-left-normalization
                                         common-lisp:null)
                         :accessor
                         %variant-import-job-item-run-left-normalization
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %variant-import-job-item-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %variant-import-job-item-id :initform
                         (common-lisp:error ":id is required"))
                        (destination-name :initarg :|destinationName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %variant-import-job-item-destination-name :initform
                         (common-lisp:error ":destinationname is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %variant-import-job-item-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (completion-time :initarg :|completionTime| :type
                         (common-lisp:or completion-time common-lisp:null)
                         :accessor %variant-import-job-item-completion-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'variant-import-job-item 'make-variant-import-job-item))
 (common-lisp:defun make-variant-import-job-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status run-left-normalization
                     role-arn id destination-name creation-time
                     completion-time)
   (common-lisp:apply #'common-lisp:make-instance 'variant-import-job-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-job-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-job-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-left-normalization))
      (common-lisp:list
       (common-lisp:cons "runLeftNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          variant-import-job-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variant-import-job-items ()
   '(trivial-types:proper-list variant-import-job-item))
 (common-lisp:defun |make-variant-import-job-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variant-import-job-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass variant-store-item common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or update-time common-lisp:null)
                         :accessor %variant-store-item-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (store-size-bytes :initarg :|storeSizeBytes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %variant-store-item-store-size-bytes :initform
                         (common-lisp:error ":storesizebytes is required"))
                        (store-arn :initarg :|storeArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %variant-store-item-store-arn :initform
                         (common-lisp:error ":storearn is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %variant-store-item-status-message :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or store-status common-lisp:null)
                         :accessor %variant-store-item-status :initform
                         (common-lisp:error ":status is required"))
                        (sse-config :initarg :|sseConfig| :type
                         (common-lisp:or sse-config common-lisp:null) :accessor
                         %variant-store-item-sse-config :initform
                         (common-lisp:error ":sseconfig is required"))
                        (reference :initarg :|reference| :type
                         (common-lisp:or reference-item common-lisp:null)
                         :accessor %variant-store-item-reference :initform
                         (common-lisp:error ":reference is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %variant-store-item-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %variant-store-item-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or store-description common-lisp:null)
                         :accessor %variant-store-item-description :initform
                         (common-lisp:error ":description is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %variant-store-item-creation-time :initform
                         (common-lisp:error ":creationtime is required"))))
 (common-lisp:export
  (common-lisp:list 'variant-store-item 'make-variant-store-item))
 (common-lisp:defun make-variant-store-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time store-size-bytes store-arn
                     status-message status sse-config reference name id
                     description creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'variant-store-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variant-store-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variant-store-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-config))
      (common-lisp:list
       (common-lisp:cons "sseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-arn))
      (common-lisp:list
       (common-lisp:cons "storeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'store-size-bytes))
      (common-lisp:list
       (common-lisp:cons "storeSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variant-store-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variant-store-items ()
   '(trivial-types:proper-list variant-store-item))
 (common-lisp:defun |make-variant-store-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variant-store-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vcf-options common-lisp:nil
                       ((ignore-qual-field :initarg :|ignoreQualField| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %vcf-options-ignore-qual-field :initform
                         common-lisp:nil)
                        (ignore-filter-field :initarg :|ignoreFilterField|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %vcf-options-ignore-filter-field :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vcf-options 'make-vcf-options))
 (common-lisp:defun make-vcf-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ignore-qual-field ignore-filter-field)
   (common-lisp:apply #'common-lisp:make-instance 'vcf-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vcf-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vcf-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-filter-field))
      (common-lisp:list
       (common-lisp:cons "ignoreFilterField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-qual-field))
      (common-lisp:list
       (common-lisp:cons "ignoreQualField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vcf-options))
   common-lisp:nil))
(common-lisp:deftype workflow-arn () 'common-lisp:string)
(common-lisp:deftype workflow-definition () 'common-lisp:string)
(common-lisp:deftype workflow-description () 'common-lisp:string)
(common-lisp:deftype workflow-digest () 'common-lisp:string)
(common-lisp:deftype workflow-engine () 'common-lisp:string)
(common-lisp:deftype workflow-export () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-export-list ()
   '(trivial-types:proper-list workflow-export))
 (common-lisp:defun |make-workflow-export-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-export))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-list ()
   '(trivial-types:proper-list workflow-list-item))
 (common-lisp:defun |make-workflow-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workflow-list-item common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %workflow-list-item-type :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-status common-lisp:null)
                         :accessor %workflow-list-item-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-name common-lisp:null)
                         :accessor %workflow-list-item-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %workflow-list-item-id :initform
                         common-lisp:nil)
                        (digest :initarg :|digest| :type
                         (common-lisp:or workflow-digest common-lisp:null)
                         :accessor %workflow-list-item-digest :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or workflow-timestamp common-lisp:null)
                         :accessor %workflow-list-item-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or workflow-arn common-lisp:null)
                         :accessor %workflow-list-item-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-list-item 'make-workflow-list-item))
 (common-lisp:defun make-workflow-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type status name id digest creation-time
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-list-item))
   common-lisp:nil))
(common-lisp:deftype workflow-list-token () 'common-lisp:string)
(common-lisp:deftype workflow-main () 'common-lisp:string)
(common-lisp:deftype workflow-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-parameter common-lisp:nil
                       ((optional :initarg :|optional| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %workflow-parameter-optional :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or workflow-parameter-description
                                         common-lisp:null)
                         :accessor %workflow-parameter-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-parameter 'make-workflow-parameter))
 (common-lisp:defun make-workflow-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key optional description)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-parameter))
   common-lisp:nil))
(common-lisp:deftype workflow-parameter-description () 'common-lisp:string)
(common-lisp:deftype workflow-parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-parameter-template () 'common-lisp:hash-table)
 (common-lisp:defun |make-workflow-parameter-template|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype workflow-request-id () 'common-lisp:string)
(common-lisp:deftype workflow-status () 'common-lisp:string)
(common-lisp:deftype workflow-status-message () 'common-lisp:string)
(common-lisp:deftype workflow-timestamp () 'common-lisp:string)
(common-lisp:deftype workflow-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-delete-read-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ids sequence-store-id)
   (common-lisp:declare (common-lisp:ignorable ids sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-read-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/readset/batch/delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "BatchDeleteReadSet"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-read-set))
(common-lisp:progn
 (common-lisp:defun cancel-annotation-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-annotation-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/import/annotation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelAnnotationImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-annotation-import-job))
(common-lisp:progn
 (common-lisp:defun cancel-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/run/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CancelRun"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-run))
(common-lisp:progn
 (common-lisp:defun cancel-variant-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-variant-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/import/variant/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelVariantImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-variant-import-job))
(common-lisp:progn
 (common-lisp:defun create-annotation-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name reference sse-config
                     store-format store-options tags)
   (common-lisp:declare
    (common-lisp:ignorable description name reference sse-config store-format
     store-options tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-annotation-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/annotationStore"
                                                        "CreateAnnotationStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-annotation-store))
(common-lisp:progn
 (common-lisp:defun create-reference-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name sse-config
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name sse-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-reference-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/referencestore"
                                                        "CreateReferenceStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-reference-store))
(common-lisp:progn
 (common-lisp:defun create-run-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-cpus max-duration max-runs name
                     request-id tags)
   (common-lisp:declare
    (common-lisp:ignorable max-cpus max-duration max-runs name request-id
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-run-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/runGroup"
                                                        "CreateRunGroup"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-run-group))
(common-lisp:progn
 (common-lisp:defun create-sequence-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name sse-config
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name sse-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sequence-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/sequencestore"
                                                        "CreateSequenceStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sequence-store))
(common-lisp:progn
 (common-lisp:defun create-variant-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name reference sse-config
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable description name reference sse-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-variant-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/variantStore"
                                                        "CreateVariantStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-variant-store))
(common-lisp:progn
 (common-lisp:defun create-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key definition-uri definition-zip description
                     engine main name parameter-template request-id
                     storage-capacity tags)
   (common-lisp:declare
    (common-lisp:ignorable definition-uri definition-zip description engine
     main name parameter-template request-id storage-capacity tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/workflow"
                                                        "CreateWorkflow"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow))
(common-lisp:progn
 (common-lisp:defun delete-annotation-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force name)
   (common-lisp:declare (common-lisp:ignorable force name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-annotation-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/annotationStore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAnnotationStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-annotation-store))
(common-lisp:progn
 (common-lisp:defun delete-reference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id reference-store-id)
   (common-lisp:declare (common-lisp:ignorable id reference-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-reference-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/reference/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteReference"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-reference))
(common-lisp:progn
 (common-lisp:defun delete-reference-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-reference-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteReferenceStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-reference-store))
(common-lisp:progn
 (common-lisp:defun delete-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/run/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteRun"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-run))
(common-lisp:progn
 (common-lisp:defun delete-run-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-run-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/runGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteRunGroup"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-run-group))
(common-lisp:progn
 (common-lisp:defun delete-sequence-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sequence-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteSequenceStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sequence-store))
(common-lisp:progn
 (common-lisp:defun delete-variant-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force name)
   (common-lisp:declare (common-lisp:ignorable force name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-variant-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/variantStore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteVariantStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-variant-store))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workflow/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteWorkflow"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun get-annotation-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-annotation-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/import/annotation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetAnnotationImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-annotation-import-job))
(common-lisp:progn
 (common-lisp:defun get-annotation-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-annotation-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/annotationStore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAnnotationStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-annotation-store))
(common-lisp:progn
 (common-lisp:defun get-read-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file id part-number sequence-store-id)
   (common-lisp:declare
    (common-lisp:ignorable file id part-number sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-read-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/readset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReadSet"
                                                        "2022-11-28")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-read-set))
(common-lisp:progn
 (common-lisp:defun get-read-set-activation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id sequence-store-id)
   (common-lisp:declare (common-lisp:ignorable id sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-read-set-activation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/activationjob/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReadSetActivationJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-read-set-activation-job))
(common-lisp:progn
 (common-lisp:defun get-read-set-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id sequence-store-id)
   (common-lisp:declare (common-lisp:ignorable id sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-read-set-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/exportjob/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReadSetExportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-read-set-export-job))
(common-lisp:progn
 (common-lisp:defun get-read-set-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id sequence-store-id)
   (common-lisp:declare (common-lisp:ignorable id sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-read-set-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/importjob/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReadSetImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-read-set-import-job))
(common-lisp:progn
 (common-lisp:defun get-read-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id sequence-store-id)
   (common-lisp:declare (common-lisp:ignorable id sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-read-set-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/readset/~A/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReadSetMetadata"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-read-set-metadata))
(common-lisp:progn
 (common-lisp:defun get-reference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file id part-number range
                     reference-store-id)
   (common-lisp:declare
    (common-lisp:ignorable file id part-number range reference-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-reference-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/reference/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReference"
                                                        "2022-11-28")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reference))
(common-lisp:progn
 (common-lisp:defun get-reference-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id reference-store-id)
   (common-lisp:declare (common-lisp:ignorable id reference-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-reference-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/importjob/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReferenceImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reference-import-job))
(common-lisp:progn
 (common-lisp:defun get-reference-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id reference-store-id)
   (common-lisp:declare (common-lisp:ignorable id reference-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-reference-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/reference/~A/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReferenceMetadata"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reference-metadata))
(common-lisp:progn
 (common-lisp:defun get-reference-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-reference-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReferenceStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reference-store))
(common-lisp:progn
 (common-lisp:defun get-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export id)
   (common-lisp:declare (common-lisp:ignorable export id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/run/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetRun" "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-run))
(common-lisp:progn
 (common-lisp:defun get-run-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-run-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/runGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetRunGroup"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-run-group))
(common-lisp:progn
 (common-lisp:defun get-run-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id task-id)
   (common-lisp:declare (common-lisp:ignorable id task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-run-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/run/~A/task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "GetRunTask"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-run-task))
(common-lisp:progn
 (common-lisp:defun get-sequence-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sequence-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetSequenceStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sequence-store))
(common-lisp:progn
 (common-lisp:defun get-variant-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-variant-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/import/variant/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetVariantImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-variant-import-job))
(common-lisp:progn
 (common-lisp:defun get-variant-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-variant-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/variantStore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetVariantStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-variant-store))
(common-lisp:progn
 (common-lisp:defun get-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export id type)
   (common-lisp:declare (common-lisp:ignorable export id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workflow/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWorkflow"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow))
(common-lisp:progn
 (common-lisp:defun list-annotation-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-annotation-import-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/import/annotations"
                                                        "ListAnnotationImportJobs"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-annotation-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-annotation-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-annotation-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/annotationStores"
                                                        "ListAnnotationStores"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-annotation-stores))
(common-lisp:progn
 (common-lisp:defun list-read-set-activation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token
                     sequence-store-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results next-token sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-read-set-activation-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/activationjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "ListReadSetActivationJobs"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-read-set-activation-jobs))
(common-lisp:progn
 (common-lisp:defun list-read-set-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token
                     sequence-store-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results next-token sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-read-set-export-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/exportjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "ListReadSetExportJobs"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-read-set-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-read-set-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token
                     sequence-store-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results next-token sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-read-set-import-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/importjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "ListReadSetImportJobs"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-read-set-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-read-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token
                     sequence-store-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results next-token sequence-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-read-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/readsets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "ListReadSets"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-read-sets))
(common-lisp:progn
 (common-lisp:defun list-reference-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token
                     reference-store-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results next-token reference-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-reference-import-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/importjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))))
                                                        "ListReferenceImportJobs"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-reference-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-reference-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reference-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/referencestores"
                                                        "ListReferenceStores"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-reference-stores))
(common-lisp:progn
 (common-lisp:defun list-references
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token
                     reference-store-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results next-token reference-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-references-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/references"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))))
                                                        "ListReferences"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-references))
(common-lisp:progn
 (common-lisp:defun list-run-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name starting-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results name starting-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-run-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/runGroup"
                                                        "ListRunGroups"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-run-groups))
(common-lisp:progn
 (common-lisp:defun list-run-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id max-results starting-token status)
   (common-lisp:declare
    (common-lisp:ignorable id max-results starting-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-run-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/run/~A/task"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ListRunTasks"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-run-tasks))
(common-lisp:progn
 (common-lisp:defun list-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name run-group-id
                     starting-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results name run-group-id starting-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json "/run"
                                                        "ListRuns"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-runs))
(common-lisp:progn
 (common-lisp:defun list-sequence-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sequence-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/sequencestores"
                                                        "ListSequenceStores"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sequence-stores))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-variant-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-variant-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/import/variants"
                                                        "ListVariantImportJobs"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-variant-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-variant-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-variant-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/variantStores"
                                                        "ListVariantStores"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-variant-stores))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name starting-token type)
   (common-lisp:declare
    (common-lisp:ignorable max-results name starting-token type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/workflow"
                                                        "ListWorkflows"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun start-annotation-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name format-options items
                     role-arn run-left-normalization)
   (common-lisp:declare
    (common-lisp:ignorable destination-name format-options items role-arn
     run-left-normalization))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-annotation-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/import/annotation"
                                                        "StartAnnotationImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-annotation-import-job))
(common-lisp:progn
 (common-lisp:defun start-read-set-activation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token sequence-store-id sources)
   (common-lisp:declare
    (common-lisp:ignorable client-token sequence-store-id sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-read-set-activation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/activationjob"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "StartReadSetActivationJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-read-set-activation-job))
(common-lisp:progn
 (common-lisp:defun start-read-set-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token destination role-arn
                     sequence-store-id sources)
   (common-lisp:declare
    (common-lisp:ignorable client-token destination role-arn sequence-store-id
     sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-read-set-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/exportjob"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "StartReadSetExportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-read-set-export-job))
(common-lisp:progn
 (common-lisp:defun start-read-set-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token role-arn sequence-store-id
                     sources)
   (common-lisp:declare
    (common-lisp:ignorable client-token role-arn sequence-store-id sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-read-set-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sequencestore/~A/importjob"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sequence-store-id))))
                                                        "StartReadSetImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-read-set-import-job))
(common-lisp:progn
 (common-lisp:defun start-reference-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token reference-store-id role-arn
                     sources)
   (common-lisp:declare
    (common-lisp:ignorable client-token reference-store-id role-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-reference-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/referencestore/~A/importjob"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reference-store-id))))
                                                        "StartReferenceImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-reference-import-job))
(common-lisp:progn
 (common-lisp:defun start-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-level name output-uri parameters
                     priority request-id role-arn run-group-id run-id
                     storage-capacity tags workflow-id workflow-type)
   (common-lisp:declare
    (common-lisp:ignorable log-level name output-uri parameters priority
     request-id role-arn run-group-id run-id storage-capacity tags workflow-id
     workflow-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/run" "StartRun"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-run))
(common-lisp:progn
 (common-lisp:defun start-variant-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name items role-arn
                     run-left-normalization)
   (common-lisp:declare
    (common-lisp:ignorable destination-name items role-arn
     run-left-normalization))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-variant-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/import/variant"
                                                        "StartVariantImportJob"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-variant-import-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-annotation-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name)
   (common-lisp:declare (common-lisp:ignorable description name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-annotation-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/annotationStore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateAnnotationStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-annotation-store))
(common-lisp:progn
 (common-lisp:defun update-run-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id max-cpus max-duration max-runs name)
   (common-lisp:declare
    (common-lisp:ignorable id max-cpus max-duration max-runs name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-run-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/runGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateRunGroup"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-run-group))
(common-lisp:progn
 (common-lisp:defun update-variant-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name)
   (common-lisp:declare (common-lisp:ignorable description name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-variant-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/variantStore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateVariantStore"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-variant-store))
(common-lisp:progn
 (common-lisp:defun update-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description id name)
   (common-lisp:declare (common-lisp:ignorable description id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'omics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workflow/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateWorkflow"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workflow))
