;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/auditmanager/api
  (:use)
  (:nicknames #:aws/auditmanager)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/auditmanager/api)
(common-lisp:progn
 (common-lisp:defclass auditmanager-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "auditmanager"))
 (common-lisp:export 'auditmanager-request))
(common-lisp:progn
 (common-lisp:define-condition auditmanager-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'auditmanager-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (awsaccount (:copier common-lisp:nil)
      (:conc-name "struct-shape-awsaccount-"))
   (id common-lisp:nil :type (common-lisp:or account-id common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or account-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'awsaccount 'make-awsaccount))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input awsaccount))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input awsaccount))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input awsaccount))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype awsaccounts () '(trivial-types:proper-list awsaccount))
 (common-lisp:defun |make-awsaccounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (awsservice (:copier common-lisp:nil)
      (:conc-name "struct-shape-awsservice-"))
   (service-name common-lisp:nil :type
    (common-lisp:or awsservice-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'awsservice 'make-awsservice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input awsservice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input awsservice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input awsservice))
   common-lisp:nil))
(common-lisp:deftype awsservice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype awsservices () '(trivial-types:proper-list awsservice))
 (common-lisp:defun |make-awsservices|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsservice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype account-name () 'common-lisp:string)
(common-lisp:deftype account-status () 'common-lisp:string)
(common-lisp:deftype action-enum () 'common-lisp:string)
(common-lisp:deftype action-plan-instructions () 'common-lisp:string)
(common-lisp:deftype action-plan-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-"))
   (arn common-lisp:nil :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (aws-account common-lisp:nil :type
    (common-lisp:or awsaccount common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or assessment-metadata common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or assessment-framework common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'assessment 'make-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account))
      (common-lisp:list
       (common-lisp:cons "awsAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-control-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or control-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or control-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or control-status common-lisp:null))
   (response common-lisp:nil :type
    (common-lisp:or control-response common-lisp:null))
   (comments common-lisp:nil :type
    (common-lisp:or control-comments common-lisp:null))
   (evidence-sources common-lisp:nil :type
    (common-lisp:or evidence-sources common-lisp:null))
   (evidence-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (assessment-report-evidence-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-control 'make-assessment-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-sources))
      (common-lisp:list
       (common-lisp:cons "evidenceSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-count))
      (common-lisp:list
       (common-lisp:cons "evidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-evidence-count))
      (common-lisp:list
       (common-lisp:cons "assessmentReportEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-control-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-control-set-"))
   (id common-lisp:nil :type (common-lisp:or control-set-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or control-set-status common-lisp:null))
   (roles common-lisp:nil :type (common-lisp:or roles common-lisp:null))
   (controls common-lisp:nil :type
    (common-lisp:or assessment-controls common-lisp:null))
   (delegations common-lisp:nil :type
    (common-lisp:or delegations common-lisp:null))
   (system-evidence-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (manual-evidence-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-control-set 'make-assessment-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-evidence-count))
      (common-lisp:list
       (common-lisp:cons "systemEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-evidence-count))
      (common-lisp:list
       (common-lisp:cons "manualEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-control-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-control-sets ()
   '(trivial-types:proper-list assessment-control-set))
 (common-lisp:defun |make-assessment-control-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-control-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-controls ()
   '(trivial-types:proper-list assessment-control))
 (common-lisp:defun |make-assessment-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-control))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-evidence-folder (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-evidence-folder-"))
   (name common-lisp:nil :type
    (common-lisp:or assessment-evidence-folder-name common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (assessment-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (control-set-id common-lisp:nil :type
    (common-lisp:or control-set-id common-lisp:null))
   (control-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (data-source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (author common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (total-evidence common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (assessment-report-selection-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (control-name common-lisp:nil :type
    (common-lisp:or control-name common-lisp:null))
   (evidence-resources-included-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (evidence-by-type-configuration-data-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (evidence-by-type-manual-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (evidence-by-type-compliance-check-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (evidence-by-type-compliance-check-issues-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (evidence-by-type-user-activity-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (evidence-aws-service-source-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-evidence-folder
                    'make-assessment-evidence-folder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-evidence-folder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-evidence-folder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-id))
      (common-lisp:list
       (common-lisp:cons "controlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-evidence))
      (common-lisp:list
       (common-lisp:cons "totalEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-selection-count))
      (common-lisp:list
       (common-lisp:cons "assessmentReportSelectionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-name))
      (common-lisp:list
       (common-lisp:cons "controlName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-resources-included-count))
      (common-lisp:list
       (common-lisp:cons "evidenceResourcesIncludedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-configuration-data-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeConfigurationDataCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-manual-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeManualCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-compliance-check-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeComplianceCheckCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-compliance-check-issues-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeComplianceCheckIssuesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-user-activity-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeUserActivityCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-aws-service-source-count))
      (common-lisp:list
       (common-lisp:cons "evidenceAwsServiceSourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-evidence-folder))
   common-lisp:nil))
(common-lisp:deftype assessment-evidence-folder-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assessment-evidence-folders ()
   '(trivial-types:proper-list assessment-evidence-folder))
 (common-lisp:defun |make-assessment-evidence-folders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-evidence-folder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-framework (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-framework-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or framework-metadata common-lisp:null))
   (control-sets common-lisp:nil :type
    (common-lisp:or assessment-control-sets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-framework 'make-assessment-framework))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-framework))
   common-lisp:nil))
(common-lisp:deftype assessment-framework-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-framework-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-framework-metadata-"))
   (arn common-lisp:nil :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or framework-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or framework-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or framework-description common-lisp:null))
   (logo common-lisp:nil :type (common-lisp:or filename common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null))
   (controls-count common-lisp:nil :type
    (common-lisp:or controls-count common-lisp:null))
   (control-sets-count common-lisp:nil :type
    (common-lisp:or control-sets-count common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-framework-metadata
                    'make-assessment-framework-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls-count))
      (common-lisp:list
       (common-lisp:cons "controlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets-count))
      (common-lisp:list
       (common-lisp:cons "controlSetsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-framework-share-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-framework-share-request-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (framework-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (framework-name common-lisp:nil :type
    (common-lisp:or framework-name common-lisp:null))
   (framework-description common-lisp:nil :type
    (common-lisp:or framework-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-request-status common-lisp:null))
   (source-account common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (destination-account common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (destination-region common-lisp:nil :type
    (common-lisp:or region common-lisp:null))
   (expiration-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or share-request-comment common-lisp:null))
   (standard-controls-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (custom-controls-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-framework-share-request
                    'make-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-share-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-id))
      (common-lisp:list
       (common-lisp:cons "frameworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "frameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-description))
      (common-lisp:list
       (common-lisp:cons "frameworkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "sourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-account))
      (common-lisp:list
       (common-lisp:cons "destinationAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "destinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "expirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-controls-count))
      (common-lisp:list
       (common-lisp:cons "standardControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-controls-count))
      (common-lisp:list
       (common-lisp:cons "customControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-framework-share-request-list ()
   '(trivial-types:proper-list assessment-framework-share-request))
 (common-lisp:defun |make-assessment-framework-share-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-framework-share-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-metadata-"))
   (name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or assessment-description common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or assessment-status common-lisp:null))
   (assessment-reports-destination common-lisp:nil :type
    (common-lisp:or assessment-reports-destination common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or scope common-lisp:null))
   (roles common-lisp:nil :type (common-lisp:or roles common-lisp:null))
   (delegations common-lisp:nil :type
    (common-lisp:or delegations common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-metadata 'make-assessment-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "assessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-metadata-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-metadata-item-"))
   (name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or assessment-status common-lisp:null))
   (roles common-lisp:nil :type (common-lisp:or roles common-lisp:null))
   (delegations common-lisp:nil :type
    (common-lisp:or delegations common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-metadata-item 'make-assessment-metadata-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-metadata-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-metadata-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-metadata-item))
   common-lisp:nil))
(common-lisp:deftype assessment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-report-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or assessment-report-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or assessment-report-description common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (assessment-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (author common-lisp:nil :type (common-lisp:or username common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or assessment-report-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-report 'make-assessment-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-report))
   common-lisp:nil))
(common-lisp:deftype assessment-report-description () 'common-lisp:string)
(common-lisp:deftype assessment-report-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-report-evidence-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-report-evidence-error-"))
   (evidence-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-report-evidence-error
                    'make-assessment-report-evidence-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-evidence-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-evidence-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-id))
      (common-lisp:list
       (common-lisp:cons "evidenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-evidence-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-report-evidence-errors ()
   '(trivial-types:proper-list assessment-report-evidence-error))
 (common-lisp:defun |make-assessment-report-evidence-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-report-evidence-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-report-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-report-metadata-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or assessment-report-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or assessment-report-description common-lisp:null))
   (assessment-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (author common-lisp:nil :type (common-lisp:or username common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or assessment-report-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-report-metadata
                    'make-assessment-report-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-metadata))
   common-lisp:nil))
(common-lisp:deftype assessment-report-name () 'common-lisp:string)
(common-lisp:deftype assessment-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-reports-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-reports-destination-"))
   (destination-type common-lisp:nil :type
    (common-lisp:or assessment-report-destination-type common-lisp:null))
   (destination common-lisp:nil :type (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-reports-destination
                    'make-assessment-reports-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-reports-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-reports-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "destinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-reports-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-reports-metadata ()
   '(trivial-types:proper-list assessment-report-metadata))
 (common-lisp:defun |make-assessment-reports-metadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-report-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-assessment-report-evidence-folder-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-assessment-report-evidence-folder-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-assessment-report-evidence-folder-request
                    'make-associate-assessment-report-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-assessment-report-evidence-folder-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-assessment-report-evidence-folder-response-")))
 (common-lisp:export
  (common-lisp:list 'associate-assessment-report-evidence-folder-response
                    'make-associate-assessment-report-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-response))
   common-lisp:nil))
(common-lisp:deftype audit-manager-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-associate-assessment-report-evidence-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-associate-assessment-report-evidence-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (evidence-ids (common-lisp:error ":evidenceids is required") :type
    (common-lisp:or evidence-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-assessment-report-evidence-request
                    'make-batch-associate-assessment-report-evidence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-associate-assessment-report-evidence-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-associate-assessment-report-evidence-response-"))
   (evidence-ids common-lisp:nil :type
    (common-lisp:or evidence-ids common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or assessment-report-evidence-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-assessment-report-evidence-response
                    'make-batch-associate-assessment-report-evidence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-delegation-by-assessment-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-delegation-by-assessment-error-"))
   (create-delegation-request common-lisp:nil :type
    (common-lisp:or create-delegation-request common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-delegation-by-assessment-error
                    'make-batch-create-delegation-by-assessment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-delegation-request))
      (common-lisp:list
       (common-lisp:cons "createDelegationRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-create-delegation-by-assessment-errors ()
   '(trivial-types:proper-list batch-create-delegation-by-assessment-error))
 (common-lisp:defun |make-batch-create-delegation-by-assessment-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-create-delegation-by-assessment-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-delegation-by-assessment-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-create-delegation-by-assessment-request-"))
   (create-delegation-requests
    (common-lisp:error ":createdelegationrequests is required") :type
    (common-lisp:or create-delegation-requests common-lisp:null))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-delegation-by-assessment-request
                    'make-batch-create-delegation-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-delegation-requests))
      (common-lisp:list
       (common-lisp:cons "createDelegationRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-delegation-by-assessment-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-create-delegation-by-assessment-response-"))
   (delegations common-lisp:nil :type
    (common-lisp:or delegations common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or batch-create-delegation-by-assessment-errors
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-delegation-by-assessment-response
                    'make-batch-create-delegation-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-delegation-by-assessment-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-delegation-by-assessment-error-"))
   (delegation-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-delegation-by-assessment-error
                    'make-batch-delete-delegation-by-assessment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-id))
      (common-lisp:list
       (common-lisp:cons "delegationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-delegation-by-assessment-errors ()
   '(trivial-types:proper-list batch-delete-delegation-by-assessment-error))
 (common-lisp:defun |make-batch-delete-delegation-by-assessment-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-delegation-by-assessment-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-delegation-by-assessment-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-delete-delegation-by-assessment-request-"))
   (delegation-ids (common-lisp:error ":delegationids is required") :type
    (common-lisp:or delegation-ids common-lisp:null))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-delegation-by-assessment-request
                    'make-batch-delete-delegation-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-ids))
      (common-lisp:list
       (common-lisp:cons "delegationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-delegation-by-assessment-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-delete-delegation-by-assessment-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-delete-delegation-by-assessment-errors
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-delegation-by-assessment-response
                    'make-batch-delete-delegation-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disassociate-assessment-report-evidence-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-disassociate-assessment-report-evidence-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (evidence-ids (common-lisp:error ":evidenceids is required") :type
    (common-lisp:or evidence-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-assessment-report-evidence-request
                    'make-batch-disassociate-assessment-report-evidence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disassociate-assessment-report-evidence-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-disassociate-assessment-report-evidence-response-"))
   (evidence-ids common-lisp:nil :type
    (common-lisp:or evidence-ids common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or assessment-report-evidence-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-assessment-report-evidence-response
                    'make-batch-disassociate-assessment-report-evidence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-import-evidence-to-assessment-control-error
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-import-evidence-to-assessment-control-error-"))
   (manual-evidence common-lisp:nil :type
    (common-lisp:or manual-evidence common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-import-evidence-to-assessment-control-error
                    'make-batch-import-evidence-to-assessment-control-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manual-evidence))
      (common-lisp:list
       (common-lisp:cons "manualEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-import-evidence-to-assessment-control-errors ()
   '(trivial-types:proper-list
     batch-import-evidence-to-assessment-control-error))
 (common-lisp:defun |make-batch-import-evidence-to-assessment-control-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-import-evidence-to-assessment-control-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-import-evidence-to-assessment-control-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-import-evidence-to-assessment-control-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or control-set-id common-lisp:null))
   (control-id (common-lisp:error ":controlid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (manual-evidence (common-lisp:error ":manualevidence is required") :type
    (common-lisp:or manual-evidence-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-import-evidence-to-assessment-control-request
                    'make-batch-import-evidence-to-assessment-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manual-evidence))
      (common-lisp:list
       (common-lisp:cons "manualEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-import-evidence-to-assessment-control-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-import-evidence-to-assessment-control-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-import-evidence-to-assessment-control-errors
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-import-evidence-to-assessment-control-response
                    'make-batch-import-evidence-to-assessment-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (change-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-log-"))
   (object-type common-lisp:nil :type
    (common-lisp:or object-type-enum common-lisp:null))
   (object-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action-enum common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or iam-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change-log 'make-change-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type))
      (common-lisp:list
       (common-lisp:cons "objectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-name))
      (common-lisp:list
       (common-lisp:cons "objectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-logs () '(trivial-types:proper-list change-log))
 (common-lisp:defun |make-change-logs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-log))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-trail-arn () 'common-lisp:string)
(common-lisp:deftype compliance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (control (:copier common-lisp:nil) (:conc-name "struct-shape-control-"))
   (arn common-lisp:nil :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or control-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or control-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or control-description common-lisp:null))
   (testing-information common-lisp:nil :type
    (common-lisp:or testing-information common-lisp:null))
   (action-plan-title common-lisp:nil :type
    (common-lisp:or action-plan-title common-lisp:null))
   (action-plan-instructions common-lisp:nil :type
    (common-lisp:or action-plan-instructions common-lisp:null))
   (control-sources common-lisp:nil :type
    (common-lisp:or control-sources common-lisp:null))
   (control-mapping-sources common-lisp:nil :type
    (common-lisp:or control-mapping-sources common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or last-updated-by common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'control 'make-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-information))
      (common-lisp:list
       (common-lisp:cons "testingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-plan-title))
      (common-lisp:list
       (common-lisp:cons "actionPlanTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-plan-instructions))
      (common-lisp:list
       (common-lisp:cons "actionPlanInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sources))
      (common-lisp:list
       (common-lisp:cons "controlSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-mapping-sources))
      (common-lisp:list
       (common-lisp:cons "controlMappingSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (control-comment (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-comment-"))
   (author-name common-lisp:nil :type
    (common-lisp:or username common-lisp:null))
   (comment-body common-lisp:nil :type
    (common-lisp:or control-comment-body common-lisp:null))
   (posted-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'control-comment 'make-control-comment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-comment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-comment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author-name))
      (common-lisp:list
       (common-lisp:cons "authorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-body))
      (common-lisp:list
       (common-lisp:cons "commentBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posted-date))
      (common-lisp:list
       (common-lisp:cons "postedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-comment))
   common-lisp:nil))
(common-lisp:deftype control-comment-body () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype control-comments ()
   '(trivial-types:proper-list control-comment))
 (common-lisp:defun |make-control-comments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-comment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (control-domain-insights (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-domain-insights-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (controls-count-by-noncompliant-evidence common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (total-controls-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (evidence-insights common-lisp:nil :type
    (common-lisp:or evidence-insights common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-domain-insights 'make-control-domain-insights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-domain-insights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-domain-insights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'controls-count-by-noncompliant-evidence))
      (common-lisp:list
       (common-lisp:cons "controlsCountByNoncompliantEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-controls-count))
      (common-lisp:list
       (common-lisp:cons "totalControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-insights))
      (common-lisp:list
       (common-lisp:cons "evidenceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-domain-insights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-domain-insights-list ()
   '(trivial-types:proper-list control-domain-insights))
 (common-lisp:defun |make-control-domain-insights-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-domain-insights))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype control-insights-metadata ()
   '(trivial-types:proper-list control-insights-metadata-item))
 (common-lisp:defun |make-control-insights-metadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            control-insights-metadata-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype control-insights-metadata-by-assessment ()
   '(trivial-types:proper-list control-insights-metadata-by-assessment-item))
 (common-lisp:defun |make-control-insights-metadata-by-assessment|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            control-insights-metadata-by-assessment-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (control-insights-metadata-by-assessment-item (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-control-insights-metadata-by-assessment-item-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (evidence-insights common-lisp:nil :type
    (common-lisp:or evidence-insights common-lisp:null))
   (control-set-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-insights-metadata-by-assessment-item
                    'make-control-insights-metadata-by-assessment-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-by-assessment-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-by-assessment-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-insights))
      (common-lisp:list
       (common-lisp:cons "evidenceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-name))
      (common-lisp:list
       (common-lisp:cons "controlSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-by-assessment-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (control-insights-metadata-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-insights-metadata-item-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (evidence-insights common-lisp:nil :type
    (common-lisp:or evidence-insights common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-insights-metadata-item
                    'make-control-insights-metadata-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-insights))
      (common-lisp:list
       (common-lisp:cons "evidenceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (control-mapping-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-mapping-source-"))
   (source-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (source-name common-lisp:nil :type
    (common-lisp:or source-name common-lisp:null))
   (source-description common-lisp:nil :type
    (common-lisp:or source-description common-lisp:null))
   (source-set-up-option common-lisp:nil :type
    (common-lisp:or source-set-up-option common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (source-keyword common-lisp:nil :type
    (common-lisp:or source-keyword common-lisp:null))
   (source-frequency common-lisp:nil :type
    (common-lisp:or source-frequency common-lisp:null))
   (troubleshooting-text common-lisp:nil :type
    (common-lisp:or troubleshooting-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-mapping-source 'make-control-mapping-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-mapping-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-mapping-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-description))
      (common-lisp:list
       (common-lisp:cons "sourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-set-up-option))
      (common-lisp:list
       (common-lisp:cons "sourceSetUpOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-keyword))
      (common-lisp:list
       (common-lisp:cons "sourceKeyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-frequency))
      (common-lisp:list
       (common-lisp:cons "sourceFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'troubleshooting-text))
      (common-lisp:list
       (common-lisp:cons "troubleshootingText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-mapping-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-mapping-sources ()
   '(trivial-types:proper-list control-mapping-source))
 (common-lisp:defun |make-control-mapping-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-mapping-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (control-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-metadata-"))
   (arn common-lisp:nil :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or control-name common-lisp:null))
   (control-sources common-lisp:nil :type
    (common-lisp:or control-sources common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-metadata 'make-control-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sources))
      (common-lisp:list
       (common-lisp:cons "controlSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-metadata-list ()
   '(trivial-types:proper-list control-metadata))
 (common-lisp:defun |make-control-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-name () 'common-lisp:string)
(common-lisp:deftype control-response () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (control-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-set-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or control-set-name common-lisp:null))
   (controls common-lisp:nil :type (common-lisp:or controls common-lisp:null)))
 (common-lisp:export (common-lisp:list 'control-set 'make-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-set))
   common-lisp:nil))
(common-lisp:deftype control-set-id () 'common-lisp:string)
(common-lisp:deftype control-set-name () 'common-lisp:string)
(common-lisp:deftype control-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype control-sets () '(trivial-types:proper-list control-set))
 (common-lisp:defun |make-control-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-sets-count () 'common-lisp:integer)
(common-lisp:deftype control-sources () 'common-lisp:string)
(common-lisp:deftype control-status () 'common-lisp:string)
(common-lisp:deftype control-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype controls () '(trivial-types:proper-list control))
 (common-lisp:defun |make-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control))
   aws-sdk/generator/shape::members))
(common-lisp:deftype controls-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-framework-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-framework-control-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-control
                    'make-create-assessment-framework-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-framework-control-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-framework-control-set-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or control-set-name common-lisp:null))
   (controls common-lisp:nil :type
    (common-lisp:or create-assessment-framework-controls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-control-set
                    'make-create-assessment-framework-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-assessment-framework-control-sets ()
   '(trivial-types:proper-list create-assessment-framework-control-set))
 (common-lisp:defun |make-create-assessment-framework-control-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-assessment-framework-control-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype create-assessment-framework-controls ()
   '(trivial-types:proper-list create-assessment-framework-control))
 (common-lisp:defun |make-create-assessment-framework-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-assessment-framework-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-framework-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-framework-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or framework-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or framework-description common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null))
   (control-sets (common-lisp:error ":controlsets is required") :type
    (common-lisp:or create-assessment-framework-control-sets common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-request
                    'make-create-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-framework-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-framework-response-"))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-response
                    'make-create-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-report-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or assessment-report-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or assessment-report-description common-lisp:null))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (query-statement common-lisp:nil :type
    (common-lisp:or query-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-report-request
                    'make-create-assessment-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "queryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-report-response-"))
   (assessment-report common-lisp:nil :type
    (common-lisp:or assessment-report common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-report-response
                    'make-create-assessment-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-report))
      (common-lisp:list
       (common-lisp:cons "assessmentReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or assessment-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or assessment-description common-lisp:null))
   (assessment-reports-destination
    (common-lisp:error ":assessmentreportsdestination is required") :type
    (common-lisp:or assessment-reports-destination common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (roles (common-lisp:error ":roles is required") :type
    (common-lisp:or roles common-lisp:null))
   (framework-id (common-lisp:error ":frameworkid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-request
                    'make-create-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "assessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-id))
      (common-lisp:list
       (common-lisp:cons "frameworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-response-"))
   (assessment common-lisp:nil :type
    (common-lisp:or assessment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-response
                    'make-create-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-control-mapping-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-control-mapping-source-"))
   (source-name common-lisp:nil :type
    (common-lisp:or source-name common-lisp:null))
   (source-description common-lisp:nil :type
    (common-lisp:or source-description common-lisp:null))
   (source-set-up-option common-lisp:nil :type
    (common-lisp:or source-set-up-option common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (source-keyword common-lisp:nil :type
    (common-lisp:or source-keyword common-lisp:null))
   (source-frequency common-lisp:nil :type
    (common-lisp:or source-frequency common-lisp:null))
   (troubleshooting-text common-lisp:nil :type
    (common-lisp:or troubleshooting-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-control-mapping-source
                    'make-create-control-mapping-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-control-mapping-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-control-mapping-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-description))
      (common-lisp:list
       (common-lisp:cons "sourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-set-up-option))
      (common-lisp:list
       (common-lisp:cons "sourceSetUpOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-keyword))
      (common-lisp:list
       (common-lisp:cons "sourceKeyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-frequency))
      (common-lisp:list
       (common-lisp:cons "sourceFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'troubleshooting-text))
      (common-lisp:list
       (common-lisp:cons "troubleshootingText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-control-mapping-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-control-mapping-sources ()
   '(trivial-types:proper-list create-control-mapping-source))
 (common-lisp:defun |make-create-control-mapping-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-control-mapping-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-control-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or control-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or control-description common-lisp:null))
   (testing-information common-lisp:nil :type
    (common-lisp:or testing-information common-lisp:null))
   (action-plan-title common-lisp:nil :type
    (common-lisp:or action-plan-title common-lisp:null))
   (action-plan-instructions common-lisp:nil :type
    (common-lisp:or action-plan-instructions common-lisp:null))
   (control-mapping-sources
    (common-lisp:error ":controlmappingsources is required") :type
    (common-lisp:or create-control-mapping-sources common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-control-request 'make-create-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-information))
      (common-lisp:list
       (common-lisp:cons "testingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-plan-title))
      (common-lisp:list
       (common-lisp:cons "actionPlanTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-plan-instructions))
      (common-lisp:list
       (common-lisp:cons "actionPlanInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-mapping-sources))
      (common-lisp:list
       (common-lisp:cons "controlMappingSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-control-response-"))
   (control common-lisp:nil :type (common-lisp:or control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-control-response 'make-create-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-delegation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-delegation-request-"))
   (comment common-lisp:nil :type
    (common-lisp:or delegation-comment common-lisp:null))
   (control-set-id common-lisp:nil :type
    (common-lisp:or control-set-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or iam-arn common-lisp:null))
   (role-type common-lisp:nil :type
    (common-lisp:or role-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-delegation-request
                    'make-create-delegation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-delegation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-delegation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-type))
      (common-lisp:list
       (common-lisp:cons "roleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-delegation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-delegation-requests ()
   '(trivial-types:proper-list create-delegation-request))
 (common-lisp:defun |make-create-delegation-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-delegation-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype created-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delegation (:copier common-lisp:nil)
      (:conc-name "struct-shape-delegation-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (assessment-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or delegation-status common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or iam-arn common-lisp:null))
   (role-type common-lisp:nil :type
    (common-lisp:or role-type common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (control-set-id common-lisp:nil :type
    (common-lisp:or control-set-id common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or delegation-comment common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delegation 'make-delegation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-type))
      (common-lisp:list
       (common-lisp:cons "roleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegation))
   common-lisp:nil))
(common-lisp:deftype delegation-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delegation-ids () '(trivial-types:proper-list uuid))
 (common-lisp:defun |make-delegation-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uuid))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delegation-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-delegation-metadata-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (assessment-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or delegation-status common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or iam-arn common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (control-set-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegation-metadata 'make-delegation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-name))
      (common-lisp:list
       (common-lisp:cons "controlSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delegation-metadata-list ()
   '(trivial-types:proper-list delegation-metadata))
 (common-lisp:defun |make-delegation-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegation-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delegation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delegations () '(trivial-types:proper-list delegation))
 (common-lisp:defun |make-delegations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-framework-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-framework-request-"))
   (framework-id (common-lisp:error ":frameworkid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-request
                    'make-delete-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-framework-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-framework-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-response
                    'make-delete-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-framework-share-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-framework-share-request-"))
   (request-id (common-lisp:error ":requestid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (request-type (common-lisp:error ":requesttype is required") :type
    (common-lisp:or share-request-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-share-request
                    'make-delete-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-framework-share-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-framework-share-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-share-response
                    'make-delete-assessment-framework-share-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-report-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (assessment-report-id (common-lisp:error ":assessmentreportid is required")
    :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-report-request
                    'make-delete-assessment-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-report-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-report-response
                    'make-delete-assessment-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-request
                    'make-delete-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-response
                    'make-delete-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-control-request-"))
   (control-id (common-lisp:error ":controlid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-control-request 'make-delete-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-control-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-control-response 'make-delete-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-response))
   common-lisp:nil))
(common-lisp:deftype delete-resources () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-account-request-")))
 (common-lisp:export
  (common-lisp:list 'deregister-account-request
                    'make-deregister-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-account-response-"))
   (status common-lisp:nil :type
    (common-lisp:or account-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-account-response
                    'make-deregister-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-deregister-organization-admin-account-request-"))
   (admin-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-organization-admin-account-request
                    'make-deregister-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-deregister-organization-admin-account-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-organization-admin-account-response
                    'make-deregister-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregistration-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregistration-policy-"))
   (delete-resources common-lisp:nil :type
    (common-lisp:or delete-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregistration-policy 'make-deregistration-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregistration-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregistration-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-resources))
      (common-lisp:list
       (common-lisp:cons "deleteResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregistration-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-assessment-report-evidence-folder-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-assessment-report-evidence-folder-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-assessment-report-evidence-folder-request
                    'make-disassociate-assessment-report-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-assessment-report-evidence-folder-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-assessment-report-evidence-folder-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-assessment-report-evidence-folder-response
                    'make-disassociate-assessment-report-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-response))
   common-lisp:nil))
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evidence (:copier common-lisp:nil) (:conc-name "struct-shape-evidence-"))
   (data-source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (evidence-aws-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (event-source common-lisp:nil :type
    (common-lisp:or awsservice-name common-lisp:null))
   (event-name common-lisp:nil :type
    (common-lisp:or event-name common-lisp:null))
   (evidence-by-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resources-included common-lisp:nil :type
    (common-lisp:or resources common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or evidence-attributes common-lisp:null))
   (iam-id common-lisp:nil :type (common-lisp:or iam-arn common-lisp:null))
   (compliance-check common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-organization common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (evidence-folder-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (assessment-report-selection common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evidence 'make-evidence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "evidenceAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "eventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-by-type))
      (common-lisp:list
       (common-lisp:cons "evidenceByType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-included))
      (common-lisp:list
       (common-lisp:cons "resourcesIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-id))
      (common-lisp:list
       (common-lisp:cons "iamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-check))
      (common-lisp:list
       (common-lisp:cons "complianceCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-organization))
      (common-lisp:list
       (common-lisp:cons "awsOrganization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-selection))
      (common-lisp:list
       (common-lisp:cons "assessmentReportSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evidence))
   common-lisp:nil))
(common-lisp:deftype evidence-attribute-key () 'common-lisp:string)
(common-lisp:deftype evidence-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evidence-attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-evidence-attributes|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype evidence-finder-backfill-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evidence-finder-enablement (:copier common-lisp:nil)
      (:conc-name "struct-shape-evidence-finder-enablement-"))
   (event-data-store-arn common-lisp:nil :type
    (common-lisp:or cloud-trail-arn common-lisp:null))
   (enablement-status common-lisp:nil :type
    (common-lisp:or evidence-finder-enablement-status common-lisp:null))
   (backfill-status common-lisp:nil :type
    (common-lisp:or evidence-finder-backfill-status common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evidence-finder-enablement
                    'make-evidence-finder-enablement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evidence-finder-enablement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evidence-finder-enablement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "eventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enablement-status))
      (common-lisp:list
       (common-lisp:cons "enablementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-status))
      (common-lisp:list
       (common-lisp:cons "backfillStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evidence-finder-enablement))
   common-lisp:nil))
(common-lisp:deftype evidence-finder-enablement-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evidence-ids () '(trivial-types:proper-list uuid))
 (common-lisp:defun |make-evidence-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uuid))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (evidence-insights (:copier common-lisp:nil)
      (:conc-name "struct-shape-evidence-insights-"))
   (noncompliant-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (compliant-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (inconclusive-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evidence-insights 'make-evidence-insights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evidence-insights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evidence-insights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncompliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "noncompliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "compliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inconclusive-evidence-count))
      (common-lisp:list
       (common-lisp:cons "inconclusiveEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evidence-insights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evidence-list () '(trivial-types:proper-list evidence))
 (common-lisp:defun |make-evidence-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evidence))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype evidence-sources ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-evidence-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filename () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (framework (:copier common-lisp:nil)
      (:conc-name "struct-shape-framework-"))
   (arn common-lisp:nil :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or framework-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or framework-type common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or framework-description common-lisp:null))
   (logo common-lisp:nil :type (common-lisp:or filename common-lisp:null))
   (control-sources common-lisp:nil :type
    (common-lisp:or control-sources common-lisp:null))
   (control-sets common-lisp:nil :type
    (common-lisp:or control-sets common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or last-updated-by common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'framework 'make-framework))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sources))
      (common-lisp:list
       (common-lisp:cons "controlSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input framework))
   common-lisp:nil))
(common-lisp:deftype framework-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (framework-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-framework-metadata-"))
   (name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or assessment-framework-description common-lisp:null))
   (logo common-lisp:nil :type (common-lisp:or filename common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'framework-metadata 'make-framework-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input framework-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input framework-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input framework-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype framework-metadata-list ()
   '(trivial-types:proper-list assessment-framework-metadata))
 (common-lisp:defun |make-framework-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-framework-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype framework-name () 'common-lisp:string)
(common-lisp:deftype framework-type () 'common-lisp:string)
(common-lisp:deftype generic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-status-request-")))
 (common-lisp:export
  (common-lisp:list 'get-account-status-request
                    'make-get-account-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-status-response-"))
   (status common-lisp:nil :type
    (common-lisp:or account-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-status-response
                    'make-get-account-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-framework-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-framework-request-"))
   (framework-id (common-lisp:error ":frameworkid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-framework-request
                    'make-get-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-framework-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-framework-response-"))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-framework-response
                    'make-get-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-report-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-report-url-request-"))
   (assessment-report-id (common-lisp:error ":assessmentreportid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-url-request
                    'make-get-assessment-report-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-report-url-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-report-url-response-"))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-url-response
                    'make-get-assessment-report-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "preSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-request 'make-get-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-response-"))
   (assessment common-lisp:nil :type
    (common-lisp:or assessment common-lisp:null))
   (user-role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-response 'make-get-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "userRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-logs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-logs-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id common-lisp:nil :type
    (common-lisp:or control-set-id common-lisp:null))
   (control-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-logs-request 'make-get-change-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-logs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-logs-response-"))
   (change-logs common-lisp:nil :type
    (common-lisp:or change-logs common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-logs-response 'make-get-change-logs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-logs))
      (common-lisp:list
       (common-lisp:cons "changeLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-control-request-"))
   (control-id (common-lisp:error ":controlid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-control-request 'make-get-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-control-response-"))
   (control common-lisp:nil :type (common-lisp:or control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-control-response 'make-get-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-delegations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-delegations-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-delegations-request 'make-get-delegations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-delegations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-delegations-response-"))
   (delegations common-lisp:nil :type
    (common-lisp:or delegation-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-delegations-response 'make-get-delegations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-by-evidence-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-by-evidence-folder-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or control-set-id common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-by-evidence-folder-request
                    'make-get-evidence-by-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-by-evidence-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-by-evidence-folder-response-"))
   (evidence common-lisp:nil :type
    (common-lisp:or evidence-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-by-evidence-folder-response
                    'make-get-evidence-by-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence))
      (common-lisp:list
       (common-lisp:cons "evidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-folder-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or control-set-id common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folder-request
                    'make-get-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-folder-response-"))
   (evidence-folder common-lisp:nil :type
    (common-lisp:or assessment-evidence-folder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folder-response
                    'make-get-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder))
      (common-lisp:list
       (common-lisp:cons "evidenceFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-folders-by-assessment-control-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-evidence-folders-by-assessment-control-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or control-set-id common-lisp:null))
   (control-id (common-lisp:error ":controlid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-control-request
                    'make-get-evidence-folders-by-assessment-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-folders-by-assessment-control-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-evidence-folders-by-assessment-control-response-"))
   (evidence-folders common-lisp:nil :type
    (common-lisp:or assessment-evidence-folders common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-control-response
                    'make-get-evidence-folders-by-assessment-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folders))
      (common-lisp:list
       (common-lisp:cons "evidenceFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-folders-by-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-folders-by-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-request
                    'make-get-evidence-folders-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-folders-by-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-folders-by-assessment-response-"))
   (evidence-folders common-lisp:nil :type
    (common-lisp:or assessment-evidence-folders common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-response
                    'make-get-evidence-folders-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folders))
      (common-lisp:list
       (common-lisp:cons "evidenceFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or control-set-id common-lisp:null))
   (evidence-folder-id (common-lisp:error ":evidencefolderid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (evidence-id (common-lisp:error ":evidenceid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-request 'make-get-evidence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-evidence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-evidence-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-evidence-response-"))
   (evidence common-lisp:nil :type (common-lisp:or evidence common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-evidence-response 'make-get-evidence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence))
      (common-lisp:list
       (common-lisp:cons "evidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insights-by-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insights-by-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insights-by-assessment-request
                    'make-get-insights-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insights-by-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insights-by-assessment-response-"))
   (insights common-lisp:nil :type
    (common-lisp:or insights-by-assessment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insights-by-assessment-response
                    'make-get-insights-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insights-request-")))
 (common-lisp:export
  (common-lisp:list 'get-insights-request 'make-get-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insights-response-"))
   (insights common-lisp:nil :type (common-lisp:or insights common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insights-response 'make-get-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-organization-admin-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-organization-admin-account-request
                    'make-get-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-organization-admin-account-response-"))
   (admin-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or |organizationId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-organization-admin-account-response
                    'make-get-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "organizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-services-in-scope-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-services-in-scope-request-")))
 (common-lisp:export
  (common-lisp:list 'get-services-in-scope-request
                    'make-get-services-in-scope-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-services-in-scope-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-services-in-scope-response-"))
   (service-metadata common-lisp:nil :type
    (common-lisp:or service-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-services-in-scope-response
                    'make-get-services-in-scope-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-metadata))
      (common-lisp:list
       (common-lisp:cons "serviceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-settings-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or setting-attribute common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-settings-request 'make-get-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-settings-response-"))
   (settings common-lisp:nil :type (common-lisp:or settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-settings-response 'make-get-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-settings-response))
   common-lisp:nil))
(common-lisp:deftype hyperlink-name () 'common-lisp:string)
(common-lisp:deftype iam-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (insights (:copier common-lisp:nil) (:conc-name "struct-shape-insights-"))
   (active-assessments-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (noncompliant-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (compliant-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (inconclusive-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (assessment-controls-count-by-noncompliant-evidence common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (total-assessment-controls-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insights 'make-insights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-assessments-count))
      (common-lisp:list
       (common-lisp:cons "activeAssessmentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncompliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "noncompliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "compliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inconclusive-evidence-count))
      (common-lisp:list
       (common-lisp:cons "inconclusiveEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-controls-count-by-noncompliant-evidence))
      (common-lisp:list
       (common-lisp:cons "assessmentControlsCountByNoncompliantEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-assessment-controls-count))
      (common-lisp:list
       (common-lisp:cons "totalAssessmentControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (insights-by-assessment (:copier common-lisp:nil)
      (:conc-name "struct-shape-insights-by-assessment-"))
   (noncompliant-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (compliant-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (inconclusive-evidence-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (assessment-controls-count-by-noncompliant-evidence common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (total-assessment-controls-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insights-by-assessment 'make-insights-by-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insights-by-assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insights-by-assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncompliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "noncompliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "compliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inconclusive-evidence-count))
      (common-lisp:list
       (common-lisp:cons "inconclusiveEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-controls-count-by-noncompliant-evidence))
      (common-lisp:list
       (common-lisp:cons "assessmentControlsCountByNoncompliantEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-assessment-controls-count))
      (common-lisp:list
       (common-lisp:cons "totalAssessmentControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insights-by-assessment))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype keyword-input-type () 'common-lisp:string)
(common-lisp:deftype keyword-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype keywords () '(trivial-types:proper-list keyword-value))
 (common-lisp:defun |make-keywords|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:deftype last-updated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-control-insights-by-control-domain-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-assessment-control-insights-by-control-domain-request-"))
   (control-domain-id (common-lisp:error ":controldomainid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-control-insights-by-control-domain-request
                    'make-list-assessment-control-insights-by-control-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-control-insights-by-control-domain-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-assessment-control-insights-by-control-domain-response-"))
   (control-insights-by-assessment common-lisp:nil :type
    (common-lisp:or control-insights-metadata-by-assessment common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'list-assessment-control-insights-by-control-domain-response
   'make-list-assessment-control-insights-by-control-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-insights-by-assessment))
      (common-lisp:list
       (common-lisp:cons "controlInsightsByAssessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-framework-share-requests-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-assessment-framework-share-requests-request-"))
   (request-type (common-lisp:error ":requesttype is required") :type
    (common-lisp:or share-request-type common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-framework-share-requests-request
                    'make-list-assessment-framework-share-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-framework-share-requests-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-assessment-framework-share-requests-response-"))
   (assessment-framework-share-requests common-lisp:nil :type
    (common-lisp:or assessment-framework-share-request-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-framework-share-requests-response
                    'make-list-assessment-framework-share-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-framework-share-requests))
      (common-lisp:list
       (common-lisp:cons "assessmentFrameworkShareRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-frameworks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-frameworks-request-"))
   (framework-type (common-lisp:error ":frameworktype is required") :type
    (common-lisp:or framework-type common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-frameworks-request
                    'make-list-assessment-frameworks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-frameworks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-frameworks-response-"))
   (framework-metadata-list common-lisp:nil :type
    (common-lisp:or framework-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-frameworks-response
                    'make-list-assessment-frameworks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-metadata-list))
      (common-lisp:list
       (common-lisp:cons "frameworkMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-assessment-metadata ()
   '(trivial-types:proper-list assessment-metadata-item))
 (common-lisp:defun |make-list-assessment-metadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-metadata-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-reports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-reports-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-reports-request
                    'make-list-assessment-reports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-reports-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-reports-response-"))
   (assessment-reports common-lisp:nil :type
    (common-lisp:or assessment-reports-metadata common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-reports-response
                    'make-list-assessment-reports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-reports))
      (common-lisp:list
       (common-lisp:cons "assessmentReports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessments-request-"))
   (status common-lisp:nil :type
    (common-lisp:or assessment-status common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessments-request 'make-list-assessments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessments-response-"))
   (assessment-metadata common-lisp:nil :type
    (common-lisp:or list-assessment-metadata common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessments-response
                    'make-list-assessments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-metadata))
      (common-lisp:list
       (common-lisp:cons "assessmentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-domain-insights-by-assessment-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-control-domain-insights-by-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-by-assessment-request
                    'make-list-control-domain-insights-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-domain-insights-by-assessment-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-control-domain-insights-by-assessment-response-"))
   (control-domain-insights common-lisp:nil :type
    (common-lisp:or control-domain-insights-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-by-assessment-response
                    'make-list-control-domain-insights-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-domain-insights))
      (common-lisp:list
       (common-lisp:cons "controlDomainInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-domain-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-control-domain-insights-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-request
                    'make-list-control-domain-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-domain-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-control-domain-insights-response-"))
   (control-domain-insights common-lisp:nil :type
    (common-lisp:or control-domain-insights-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-response
                    'make-list-control-domain-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-domain-insights))
      (common-lisp:list
       (common-lisp:cons "controlDomainInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-insights-by-control-domain-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-control-insights-by-control-domain-request-"))
   (control-domain-id (common-lisp:error ":controldomainid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-insights-by-control-domain-request
                    'make-list-control-insights-by-control-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-control-insights-by-control-domain-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-control-insights-by-control-domain-response-"))
   (control-insights-metadata common-lisp:nil :type
    (common-lisp:or control-insights-metadata common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-control-insights-by-control-domain-response
                    'make-list-control-insights-by-control-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-insights-metadata))
      (common-lisp:list
       (common-lisp:cons "controlInsightsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-controls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-controls-request-"))
   (control-type (common-lisp:error ":controltype is required") :type
    (common-lisp:or control-type common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-controls-request 'make-list-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-controls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-controls-response-"))
   (control-metadata-list common-lisp:nil :type
    (common-lisp:or control-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-controls-response 'make-list-controls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-metadata-list))
      (common-lisp:list
       (common-lisp:cons "controlMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-keywords-for-data-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keywords-for-data-source-request-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or source-type common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keywords-for-data-source-request
                    'make-list-keywords-for-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-keywords-for-data-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keywords-for-data-source-response-"))
   (keywords common-lisp:nil :type (common-lisp:or keywords common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keywords-for-data-source-response
                    'make-list-keywords-for-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notifications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notifications-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notifications-request
                    'make-list-notifications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notifications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notifications-response-"))
   (notifications common-lisp:nil :type
    (common-lisp:or notifications common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notifications-response
                    'make-list-notifications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or audit-manager-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (manual-evidence (:copier common-lisp:nil)
      (:conc-name "struct-shape-manual-evidence-"))
   (s3resource-path common-lisp:nil :type
    (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'manual-evidence 'make-manual-evidence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input manual-evidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input manual-evidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resource-path))
      (common-lisp:list
       (common-lisp:cons "s3ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input manual-evidence))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype manual-evidence-list ()
   '(trivial-types:proper-list manual-evidence))
 (common-lisp:defun |make-manual-evidence-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list manual-evidence))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-"))
   (id common-lisp:nil :type (common-lisp:or timestamp-uuid common-lisp:null))
   (assessment-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (control-set-id common-lisp:nil :type
    (common-lisp:or control-set-id common-lisp:null))
   (control-set-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (event-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'notification 'make-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-name))
      (common-lisp:list
       (common-lisp:cons "controlSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notifications ()
   '(trivial-types:proper-list notification))
 (common-lisp:defun |make-notifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype object-type-enum () 'common-lisp:string)
(common-lisp:deftype query-statement () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-account-request-"))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (delegated-admin-account common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-account-request 'make-register-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-account-response-"))
   (status common-lisp:nil :type
    (common-lisp:or account-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-account-response
                    'make-register-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-organization-admin-account-request-"))
   (admin-account-id (common-lisp:error ":adminaccountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-organization-admin-account-request
                    'make-register-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-register-organization-admin-account-response-"))
   (admin-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or |organizationId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-organization-admin-account-response
                    'make-register-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "organizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (arn common-lisp:nil :type (common-lisp:or generic-arn common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (compliance-check common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-check))
      (common-lisp:list
       (common-lisp:cons "complianceCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (role (:copier common-lisp:nil) (:conc-name "struct-shape-role-"))
   (role-type (common-lisp:error ":roletype is required") :type
    (common-lisp:or role-type common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or iam-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role 'make-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-type))
      (common-lisp:list
       (common-lisp:cons "roleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role))
   common-lisp:nil))
(common-lisp:deftype role-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype roles () '(trivial-types:proper-list role))
 (common-lisp:defun |make-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:deftype snstopic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scope (:copier common-lisp:nil) (:conc-name "struct-shape-scope-"))
   (aws-accounts common-lisp:nil :type
    (common-lisp:or awsaccounts common-lisp:null))
   (aws-services common-lisp:nil :type
    (common-lisp:or awsservices common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scope 'make-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-accounts))
      (common-lisp:list
       (common-lisp:cons "awsAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-services))
      (common-lisp:list
       (common-lisp:cons "awsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-metadata-"))
   (name common-lisp:nil :type
    (common-lisp:or awsservice-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-metadata 'make-service-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-metadata-list ()
   '(trivial-types:proper-list service-metadata))
 (common-lisp:defun |make-service-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype setting-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (settings (:copier common-lisp:nil) (:conc-name "struct-shape-settings-"))
   (is-aws-org-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (sns-topic common-lisp:nil :type (common-lisp:or snstopic common-lisp:null))
   (default-assessment-reports-destination common-lisp:nil :type
    (common-lisp:or assessment-reports-destination common-lisp:null))
   (default-process-owners common-lisp:nil :type
    (common-lisp:or roles common-lisp:null))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (evidence-finder-enablement common-lisp:nil :type
    (common-lisp:or evidence-finder-enablement common-lisp:null))
   (deregistration-policy common-lisp:nil :type
    (common-lisp:or deregistration-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-aws-org-enabled))
      (common-lisp:list
       (common-lisp:cons "isAwsOrgEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "defaultAssessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-process-owners))
      (common-lisp:list
       (common-lisp:cons "defaultProcessOwners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-finder-enablement))
      (common-lisp:list
       (common-lisp:cons "evidenceFinderEnablement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deregistration-policy))
      (common-lisp:list
       (common-lisp:cons "deregistrationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:deftype share-request-action () 'common-lisp:string)
(common-lisp:deftype share-request-comment () 'common-lisp:string)
(common-lisp:deftype share-request-status () 'common-lisp:string)
(common-lisp:deftype share-request-type () 'common-lisp:string)
(common-lisp:deftype sns-arn () 'common-lisp:string)
(common-lisp:deftype source-description () 'common-lisp:string)
(common-lisp:deftype source-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-keyword (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-keyword-"))
   (keyword-input-type common-lisp:nil :type
    (common-lisp:or keyword-input-type common-lisp:null))
   (keyword-value common-lisp:nil :type
    (common-lisp:or keyword-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-keyword 'make-source-keyword))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-keyword))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-keyword))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-input-type))
      (common-lisp:list
       (common-lisp:cons "keywordInputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-value))
      (common-lisp:list
       (common-lisp:cons "keywordValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-keyword))
   common-lisp:nil))
(common-lisp:deftype source-name () 'common-lisp:string)
(common-lisp:deftype source-set-up-option () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-assessment-framework-share-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-assessment-framework-share-request-"))
   (framework-id (common-lisp:error ":frameworkid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (destination-account (common-lisp:error ":destinationaccount is required")
    :type (common-lisp:or account-id common-lisp:null))
   (destination-region (common-lisp:error ":destinationregion is required")
    :type (common-lisp:or region common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or share-request-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-framework-share-request
                    'make-start-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-account))
      (common-lisp:list
       (common-lisp:cons "destinationAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "destinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-assessment-framework-share-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-assessment-framework-share-response-"))
   (assessment-framework-share-request common-lisp:nil :type
    (common-lisp:or assessment-framework-share-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-framework-share-response
                    'make-start-assessment-framework-share-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-framework-share-request))
      (common-lisp:list
       (common-lisp:cons "assessmentFrameworkShareRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype testing-information () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-uuid () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype troubleshooting-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (url (:copier common-lisp:nil) (:conc-name "struct-shape-url-"))
   (hyperlink-name common-lisp:nil :type
    (common-lisp:or hyperlink-name common-lisp:null))
   (link common-lisp:nil :type (common-lisp:or url-link common-lisp:null)))
 (common-lisp:export (common-lisp:list 'url 'make-url))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input url))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input url))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyperlink-name))
      (common-lisp:list
       (common-lisp:cons "hyperlinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input url))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or audit-manager-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-control-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or control-set-id common-lisp:null))
   (control-id (common-lisp:error ":controlid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-status common-lisp:nil :type
    (common-lisp:or control-status common-lisp:null))
   (comment-body common-lisp:nil :type
    (common-lisp:or control-comment-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-request
                    'make-update-assessment-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-status))
      (common-lisp:list
       (common-lisp:cons "controlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-body))
      (common-lisp:list
       (common-lisp:cons "commentBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-control-response-"))
   (control common-lisp:nil :type
    (common-lisp:or assessment-control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-response
                    'make-update-assessment-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-control-set-status-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-assessment-control-set-status-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (control-set-id (common-lisp:error ":controlsetid is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or control-set-status common-lisp:null))
   (comment (common-lisp:error ":comment is required") :type
    (common-lisp:or delegation-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-set-status-request
                    'make-update-assessment-control-set-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-control-set-status-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-assessment-control-set-status-response-"))
   (control-set common-lisp:nil :type
    (common-lisp:or assessment-control-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-set-status-response
                    'make-update-assessment-control-set-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set))
      (common-lisp:list
       (common-lisp:cons "controlSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-framework-control-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-framework-control-set-"))
   (id common-lisp:nil :type
    (common-lisp:or control-set-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or control-set-name common-lisp:null))
   (controls (common-lisp:error ":controls is required") :type
    (common-lisp:or create-assessment-framework-controls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-control-set
                    'make-update-assessment-framework-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-control-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-assessment-framework-control-sets ()
   '(trivial-types:proper-list update-assessment-framework-control-set))
 (common-lisp:defun |make-update-assessment-framework-control-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-assessment-framework-control-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-framework-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-framework-request-"))
   (framework-id (common-lisp:error ":frameworkid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or framework-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or framework-description common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or compliance-type common-lisp:null))
   (control-sets (common-lisp:error ":controlsets is required") :type
    (common-lisp:or update-assessment-framework-control-sets
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-request
                    'make-update-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-framework-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-framework-response-"))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-response
                    'make-update-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-framework-share-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-framework-share-request-"))
   (request-id (common-lisp:error ":requestid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (request-type (common-lisp:error ":requesttype is required") :type
    (common-lisp:or share-request-type common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or share-request-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-share-request
                    'make-update-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-type))
      (common-lisp:list
       (common-lisp:cons "requestType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-framework-share-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-framework-share-response-"))
   (assessment-framework-share-request common-lisp:nil :type
    (common-lisp:or assessment-framework-share-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-share-response
                    'make-update-assessment-framework-share-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-framework-share-request))
      (common-lisp:list
       (common-lisp:cons "assessmentFrameworkShareRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (assessment-name common-lisp:nil :type
    (common-lisp:or assessment-name common-lisp:null))
   (assessment-description common-lisp:nil :type
    (common-lisp:or assessment-description common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (assessment-reports-destination common-lisp:nil :type
    (common-lisp:or assessment-reports-destination common-lisp:null))
   (roles common-lisp:nil :type (common-lisp:or roles common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-request
                    'make-update-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-description))
      (common-lisp:list
       (common-lisp:cons "assessmentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "assessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-response-"))
   (assessment common-lisp:nil :type
    (common-lisp:or assessment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-response
                    'make-update-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-status-request-"))
   (assessment-id (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or assessment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-status-request
                    'make-update-assessment-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-status-response-"))
   (assessment common-lisp:nil :type
    (common-lisp:or assessment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-status-response
                    'make-update-assessment-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-control-request-"))
   (control-id (common-lisp:error ":controlid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or control-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or control-description common-lisp:null))
   (testing-information common-lisp:nil :type
    (common-lisp:or testing-information common-lisp:null))
   (action-plan-title common-lisp:nil :type
    (common-lisp:or action-plan-title common-lisp:null))
   (action-plan-instructions common-lisp:nil :type
    (common-lisp:or action-plan-instructions common-lisp:null))
   (control-mapping-sources
    (common-lisp:error ":controlmappingsources is required") :type
    (common-lisp:or control-mapping-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-control-request 'make-update-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-information))
      (common-lisp:list
       (common-lisp:cons "testingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-plan-title))
      (common-lisp:list
       (common-lisp:cons "actionPlanTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-plan-instructions))
      (common-lisp:list
       (common-lisp:cons "actionPlanInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-mapping-sources))
      (common-lisp:list
       (common-lisp:cons "controlMappingSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-control-response-"))
   (control common-lisp:nil :type (common-lisp:or control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-control-response 'make-update-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-settings-request-"))
   (sns-topic common-lisp:nil :type (common-lisp:or sns-arn common-lisp:null))
   (default-assessment-reports-destination common-lisp:nil :type
    (common-lisp:or assessment-reports-destination common-lisp:null))
   (default-process-owners common-lisp:nil :type
    (common-lisp:or roles common-lisp:null))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key common-lisp:null))
   (evidence-finder-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (deregistration-policy common-lisp:nil :type
    (common-lisp:or deregistration-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-settings-request 'make-update-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "defaultAssessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-process-owners))
      (common-lisp:list
       (common-lisp:cons "defaultProcessOwners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-finder-enabled))
      (common-lisp:list
       (common-lisp:cons "evidenceFinderEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deregistration-policy))
      (common-lisp:list
       (common-lisp:cons "deregistrationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-settings-response-"))
   (settings common-lisp:nil :type (common-lisp:or settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-settings-response 'make-update-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-response))
   common-lisp:nil))
(common-lisp:deftype url-link () 'common-lisp:string)
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-assessment-report-integrity-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-validate-assessment-report-integrity-request-"))
   (s3relative-path (common-lisp:error ":s3relativepath is required") :type
    (common-lisp:or s3url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-assessment-report-integrity-request
                    'make-validate-assessment-report-integrity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3relative-path))
      (common-lisp:list
       (common-lisp:cons "s3RelativePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-assessment-report-integrity-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-validate-assessment-report-integrity-response-"))
   (signature-valid common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (signature-algorithm common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (signature-date-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (signature-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (validation-errors common-lisp:nil :type
    (common-lisp:or validation-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-assessment-report-integrity-response
                    'make-validate-assessment-report-integrity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-valid))
      (common-lisp:list
       (common-lisp:cons "signatureValid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "signatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-date-time))
      (common-lisp:list
       (common-lisp:cons "signatureDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-key-id))
      (common-lisp:list
       (common-lisp:cons "signatureKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "validationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-errors ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-validation-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype |organizationId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-assessment-report-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-assessment-report-evidence-folder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/associateToAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "AssociateAssessmentReportEvidenceFolder"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-assessment-report-evidence-folder))
(common-lisp:progn
 (common-lisp:defun batch-associate-assessment-report-evidence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id
                     evidence-ids)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id evidence-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-assessment-report-evidence-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/batchAssociateToAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchAssociateAssessmentReportEvidence"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-associate-assessment-report-evidence))
(common-lisp:progn
 (common-lisp:defun batch-create-delegation-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-delegation-requests assessment-id)
   (common-lisp:declare
    (common-lisp:ignorable create-delegation-requests assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-create-delegation-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/delegations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchCreateDelegationByAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-delegation-by-assessment))
(common-lisp:progn
 (common-lisp:defun batch-delete-delegation-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delegation-ids assessment-id)
   (common-lisp:declare (common-lisp:ignorable delegation-ids assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-delegation-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/delegations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchDeleteDelegationByAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-delegation-by-assessment))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-assessment-report-evidence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id
                     evidence-ids)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id evidence-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-assessment-report-evidence-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/batchDisassociateFromAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchDisassociateAssessmentReportEvidence"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disassociate-assessment-report-evidence))
(common-lisp:progn
 (common-lisp:defun batch-import-evidence-to-assessment-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     manual-evidence)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id
     manual-evidence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-import-evidence-to-assessment-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/controls/~A/evidence"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "BatchImportEvidenceToAssessmentControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-import-evidence-to-assessment-control))
(common-lisp:progn
 (common-lisp:defun create-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description
                     assessment-reports-destination scope roles framework-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description assessment-reports-destination
     scope roles framework-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/assessments"
                                                        "CreateAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment))
(common-lisp:progn
 (common-lisp:defun create-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description compliance-type
                     control-sets tags)
   (common-lisp:declare
    (common-lisp:ignorable name description compliance-type control-sets tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-assessment-framework-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/assessmentFrameworks"
                                                        "CreateAssessmentFramework"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment-framework))
(common-lisp:progn
 (common-lisp:defun create-assessment-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description assessment-id
                     query-statement)
   (common-lisp:declare
    (common-lisp:ignorable name description assessment-id query-statement))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assessment-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/reports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "CreateAssessmentReport"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment-report))
(common-lisp:progn
 (common-lisp:defun create-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description testing-information
                     action-plan-title action-plan-instructions
                     control-mapping-sources tags)
   (common-lisp:declare
    (common-lisp:ignorable name description testing-information
     action-plan-title action-plan-instructions control-mapping-sources tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/controls"
                                                        "CreateControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-control))
(common-lisp:progn
 (common-lisp:defun delete-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "DeleteAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment))
(common-lisp:progn
 (common-lisp:defun delete-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id)
   (common-lisp:declare (common-lisp:ignorable framework-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assessment-framework-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "DeleteAssessmentFramework"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-framework))
(common-lisp:progn
 (common-lisp:defun delete-assessment-framework-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-id request-type)
   (common-lisp:declare (common-lisp:ignorable request-id request-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assessment-framework-share-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworkShareRequests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'request-id))))
                                                        "DeleteAssessmentFrameworkShare"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-framework-share))
(common-lisp:progn
 (common-lisp:defun delete-assessment-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id assessment-report-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id assessment-report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/reports/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-report-id))))
                                                        "DeleteAssessmentReport"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-report))
(common-lisp:progn
 (common-lisp:defun delete-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-id)
   (common-lisp:declare (common-lisp:ignorable control-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "DeleteControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-control))
(common-lisp:progn
 (common-lisp:defun deregister-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "POST" :path
                                "/account/deregisterAccount" :params
                                `(("Action" ,@"DeregisterAccount")
                                  ("Version" ,@"2017-07-25"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'deregister-account))
(common-lisp:progn
 (common-lisp:defun deregister-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/account/deregisterOrganizationAdminAccount"
                                                        "DeregisterOrganizationAdminAccount"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-assessment-report-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-assessment-report-evidence-folder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/disassociateFromAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "DisassociateAssessmentReportEvidenceFolder"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-assessment-report-evidence-folder))
(common-lisp:progn
 (common-lisp:defun get-account-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/account/status" :params
                                `(("Action" ,@"GetAccountStatus")
                                  ("Version" ,@"2017-07-25"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-status))
(common-lisp:progn
 (common-lisp:defun get-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment))
(common-lisp:progn
 (common-lisp:defun get-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id)
   (common-lisp:declare (common-lisp:ignorable framework-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-framework-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "GetAssessmentFramework"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment-framework))
(common-lisp:progn
 (common-lisp:defun get-assessment-report-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-report-id assessment-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-report-id assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-assessment-report-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/reports/~A/url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-report-id))))
                                                        "GetAssessmentReportUrl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment-report-url))
(common-lisp:progn
 (common-lisp:defun get-change-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-change-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/changelogs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetChangeLogs"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-change-logs))
(common-lisp:progn
 (common-lisp:defun get-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-id)
   (common-lisp:declare (common-lisp:ignorable control-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "GetControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-control))
(common-lisp:progn
 (common-lisp:defun get-delegations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-delegations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/delegations"
                                                        "GetDelegations"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-delegations))
(common-lisp:progn
 (common-lisp:defun get-evidence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id
                     evidence-folder-id evidence-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id evidence-folder-id
     evidence-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-evidence-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/evidenceFolders/~A/evidence/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-folder-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-id))))
                                                        "GetEvidence"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evidence))
(common-lisp:progn
 (common-lisp:defun get-evidence-by-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id
                     evidence-folder-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id evidence-folder-id
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-by-evidence-folder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/evidenceFolders/~A/evidence"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-folder-id))))
                                                        "GetEvidenceByEvidenceFolder"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evidence-by-evidence-folder))
(common-lisp:progn
 (common-lisp:defun get-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id
                     evidence-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id evidence-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-evidence-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/evidenceFolders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-folder-id))))
                                                        "GetEvidenceFolder"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evidence-folder))
(common-lisp:progn
 (common-lisp:defun get-evidence-folders-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-folders-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/evidenceFolders"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetEvidenceFoldersByAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evidence-folders-by-assessment))
(common-lisp:progn
 (common-lisp:defun get-evidence-folders-by-assessment-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-folders-by-assessment-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/evidenceFolders-by-assessment-control/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "GetEvidenceFoldersByAssessmentControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-evidence-folders-by-assessment-control))
(common-lisp:progn
 (common-lisp:defun get-insights ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/insights" :params
                                `(("Action" ,@"GetInsights")
                                  ("Version" ,@"2017-07-25"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-insights))
(common-lisp:progn
 (common-lisp:defun get-insights-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-insights-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetInsightsByAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-insights-by-assessment))
(common-lisp:progn
 (common-lisp:defun get-organization-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/account/organizationAdminAccount" :params
                                `(("Action" ,@"GetOrganizationAdminAccount")
                                  ("Version" ,@"2017-07-25"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun get-services-in-scope ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/services" :params
                                `(("Action" ,@"GetServicesInScope")
                                  ("Version" ,@"2017-07-25"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-services-in-scope))
(common-lisp:progn
 (common-lisp:defun get-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute)
   (common-lisp:declare (common-lisp:ignorable attribute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/settings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attribute))))
                                                        "GetSettings"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-settings))
(common-lisp:progn
 (common-lisp:defun list-assessment-control-insights-by-control-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-domain-id assessment-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable control-domain-id assessment-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-control-insights-by-control-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/controls-by-assessment"
                                                        "ListAssessmentControlInsightsByControlDomain"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-control-insights-by-control-domain))
(common-lisp:progn
 (common-lisp:defun list-assessment-framework-share-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable request-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-framework-share-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/assessmentFrameworkShareRequests"
                                                        "ListAssessmentFrameworkShareRequests"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-framework-share-requests))
(common-lisp:progn
 (common-lisp:defun list-assessment-frameworks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable framework-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-frameworks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/assessmentFrameworks"
                                                        "ListAssessmentFrameworks"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-frameworks))
(common-lisp:progn
 (common-lisp:defun list-assessment-reports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessment-reports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/assessmentReports"
                                                        "ListAssessmentReports"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-reports))
(common-lisp:progn
 (common-lisp:defun list-assessments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status next-token max-results)
   (common-lisp:declare (common-lisp:ignorable status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/assessments"
                                                        "ListAssessments"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessments))
(common-lisp:progn
 (common-lisp:defun list-control-domain-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-control-domain-insights-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/control-domains"
                                                        "ListControlDomainInsights"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-control-domain-insights))
(common-lisp:progn
 (common-lisp:defun list-control-domain-insights-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-control-domain-insights-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/control-domains-by-assessment"
                                                        "ListControlDomainInsightsByAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-control-domain-insights-by-assessment))
(common-lisp:progn
 (common-lisp:defun list-control-insights-by-control-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-domain-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable control-domain-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-control-insights-by-control-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/controls"
                                                        "ListControlInsightsByControlDomain"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-control-insights-by-control-domain))
(common-lisp:progn
 (common-lisp:defun list-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable control-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-controls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/controls"
                                                        "ListControls"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-controls))
(common-lisp:progn
 (common-lisp:defun list-keywords-for-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source next-token max-results)
   (common-lisp:declare (common-lisp:ignorable source next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-keywords-for-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/dataSourceKeywords"
                                                        "ListKeywordsForDataSource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-keywords-for-data-source))
(common-lisp:progn
 (common-lisp:defun list-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notifications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/notifications"
                                                        "ListNotifications"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notifications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-key delegated-admin-account)
   (common-lisp:declare
    (common-lisp:ignorable kms-key delegated-admin-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/account/registerAccount"
                                                        "RegisterAccount"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-account))
(common-lisp:progn
 (common-lisp:defun register-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/account/registerOrganizationAdminAccount"
                                                        "RegisterOrganizationAdminAccount"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun start-assessment-framework-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id destination-account
                     destination-region comment)
   (common-lisp:declare
    (common-lisp:ignorable framework-id destination-account destination-region
     comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-assessment-framework-share-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A/shareRequests"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "StartAssessmentFrameworkShare"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-assessment-framework-share))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id assessment-name
                     assessment-description scope
                     assessment-reports-destination roles)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id assessment-name assessment-description
     scope assessment-reports-destination roles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "UpdateAssessment"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment))
(common-lisp:progn
 (common-lisp:defun update-assessment-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     control-status comment-body)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id
     control-status comment-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "UpdateAssessmentControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-control))
(common-lisp:progn
 (common-lisp:defun update-assessment-control-set-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id status
                     comment)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id status comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-control-set-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))))
                                                        "UpdateAssessmentControlSetStatus"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-control-set-status))
(common-lisp:progn
 (common-lisp:defun update-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id name description
                     compliance-type control-sets)
   (common-lisp:declare
    (common-lisp:ignorable framework-id name description compliance-type
     control-sets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-framework-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "UpdateAssessmentFramework"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-framework))
(common-lisp:progn
 (common-lisp:defun update-assessment-framework-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-id request-type action)
   (common-lisp:declare (common-lisp:ignorable request-id request-type action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-framework-share-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworkShareRequests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'request-id))))
                                                        "UpdateAssessmentFrameworkShare"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-framework-share))
(common-lisp:progn
 (common-lisp:defun update-assessment-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id status)
   (common-lisp:declare (common-lisp:ignorable assessment-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-assessment-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "UpdateAssessmentStatus"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-status))
(common-lisp:progn
 (common-lisp:defun update-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-id name description
                     testing-information action-plan-title
                     action-plan-instructions control-mapping-sources)
   (common-lisp:declare
    (common-lisp:ignorable control-id name description testing-information
     action-plan-title action-plan-instructions control-mapping-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "UpdateControl"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-control))
(common-lisp:progn
 (common-lisp:defun update-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sns-topic
                     default-assessment-reports-destination
                     default-process-owners kms-key evidence-finder-enabled
                     deregistration-policy)
   (common-lisp:declare
    (common-lisp:ignorable sns-topic default-assessment-reports-destination
     default-process-owners kms-key evidence-finder-enabled
     deregistration-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/settings"
                                                        "UpdateSettings"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-settings))
(common-lisp:progn
 (common-lisp:defun validate-assessment-report-integrity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3relative-path)
   (common-lisp:declare (common-lisp:ignorable s3relative-path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-assessment-report-integrity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/assessmentReports/integrity"
                                                        "ValidateAssessmentReportIntegrity"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-assessment-report-integrity))
