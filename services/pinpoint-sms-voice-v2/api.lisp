;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pinpoint-sms-voice-v2/api
  (:use)
  (:nicknames #:aws/pinpoint-sms-voice-v2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pinpoint-sms-voice-v2/api)
(common-lisp:progn
 (common-lisp:defclass pinpoint-sms-voice-v2-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "pinpoint-sms-voice-v2"
                        :protocol :json))
 (common-lisp:export 'pinpoint-sms-voice-v2-request))
(common-lisp:progn
 (common-lisp:define-condition pinpoint-sms-voice-v2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pinpoint-sms-voice-v2-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       access-denied-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-reason)))
(common-lisp:deftype access-denied-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-attribute-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or account-attribute-name
                                         common-lisp:null)
                         :accessor %account-attribute-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'account-attribute 'make-account-attribute))
 (common-lisp:defun make-account-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'account-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-attribute-list ()
   '(trivial-types:proper-list account-attribute))
 (common-lisp:defun |make-account-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-limit common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or primitive-long common-lisp:null)
                         :accessor %account-limit-max :initform
                         (common-lisp:error ":max is required"))
                        (used :initarg :used :type
                         (common-lisp:or primitive-long common-lisp:null)
                         :accessor %account-limit-used :initform
                         (common-lisp:error ":used is required"))
                        (name :initarg :name :type
                         (common-lisp:or account-limit-name common-lisp:null)
                         :accessor %account-limit-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'account-limit 'make-account-limit))
 (common-lisp:defun make-account-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max used name)
   (common-lisp:apply #'common-lisp:make-instance 'account-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used))
      (common-lisp:list
       (common-lisp:cons "Used"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-limit-list ()
   '(trivial-types:proper-list account-limit))
 (common-lisp:defun |make-account-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-limit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-limit-name () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-origination-identity-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %associate-origination-identity-request-client-token
                         :initform common-lisp:nil)
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %associate-origination-identity-request-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or phone-or-sender-id-or-arn
                                         common-lisp:null)
                         :accessor
                         %associate-origination-identity-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or pool-id-or-arn common-lisp:null)
                         :accessor
                         %associate-origination-identity-request-pool-id
                         :initform
                         (common-lisp:error ":pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-origination-identity-request
                    'make-associate-origination-identity-request))
 (common-lisp:defun make-associate-origination-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token iso-country-code
                     origination-identity pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-origination-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-origination-identity-result common-lisp:nil
                       ((iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %associate-origination-identity-result-iso-country-code
                         :initform common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %associate-origination-identity-result-origination-identity
                         :initform common-lisp:nil)
                        (origination-identity-arn :initarg
                         :origination-identity-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-origination-identity-result-origination-identity-arn
                         :initform common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-origination-identity-result-pool-id
                         :initform common-lisp:nil)
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-origination-identity-result-pool-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-origination-identity-result
                    'make-associate-origination-identity-result))
 (common-lisp:defun make-associate-origination-identity-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iso-country-code origination-identity
                     origination-identity-arn pool-id pool-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-origination-identity-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-result))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-destination common-lisp:nil
                       ((log-group-arn :initarg :log-group-arn :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor %cloud-watch-logs-destination-log-group-arn
                         :initform
                         (common-lisp:error ":log-group-arn is required"))
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %cloud-watch-logs-destination-iam-role-arn
                         :initform
                         (common-lisp:error ":iam-role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-destination
                    'make-cloud-watch-logs-destination))
 (common-lisp:defun make-cloud-watch-logs-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-arn iam-role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logs-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-set-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %configuration-set-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or configuration-set-filter-name
                                         common-lisp:null)
                         :accessor %configuration-set-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'configuration-set-filter 'make-configuration-set-filter))
 (common-lisp:defun make-configuration-set-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-set-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-set-filter-list ()
   '(trivial-types:proper-list configuration-set-filter))
 (common-lisp:defun |make-configuration-set-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-set-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-set-information common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configuration-set-information-created-timestamp
                         :initform
                         (common-lisp:error ":created-timestamp is required"))
                        (default-sender-id :initarg :default-sender-id :type
                         (common-lisp:or sender-id common-lisp:null) :accessor
                         %configuration-set-information-default-sender-id
                         :initform common-lisp:nil)
                        (default-message-type :initarg :default-message-type
                         :type (common-lisp:or message-type common-lisp:null)
                         :accessor
                         %configuration-set-information-default-message-type
                         :initform common-lisp:nil)
                        (event-destinations :initarg :event-destinations :type
                         (common-lisp:or event-destination-list
                                         common-lisp:null)
                         :accessor
                         %configuration-set-information-event-destinations
                         :initform
                         (common-lisp:error ":event-destinations is required"))
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %configuration-set-information-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %configuration-set-information-configuration-set-arn
                         :initform
                         (common-lisp:error
                          ":configuration-set-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'configuration-set-information
                    'make-configuration-set-information))
 (common-lisp:defun make-configuration-set-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp default-sender-id
                     default-message-type event-destinations
                     configuration-set-name configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-set-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destinations))
      (common-lisp:list
       (common-lisp:cons "EventDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-message-type))
      (common-lisp:list
       (common-lisp:cons "DefaultMessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-sender-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-set-information-list ()
   '(trivial-types:proper-list configuration-set-information))
 (common-lisp:defun |make-configuration-set-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-set-name-list ()
   '(trivial-types:proper-list configuration-set-name-or-arn))
 (common-lisp:defun |make-configuration-set-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-name-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-set-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-reason
                    'conflict-exception-resource-type
                    'conflict-exception-resource-id)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:deftype context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-context-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-configuration-set-request-client-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-configuration-set-request-tags :initform
                         common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %create-configuration-set-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-request
                    'make-create-configuration-set-request))
 (common-lisp:defun make-create-configuration-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-configuration-set-result-created-timestamp
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-configuration-set-result-tags :initform
                         common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %create-configuration-set-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-configuration-set-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-result
                    'make-create-configuration-set-result))
 (common-lisp:defun make-create-configuration-set-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp tags
                     configuration-set-name configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-destination-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-event-destination-request-client-token
                         :initform common-lisp:nil)
                        (sns-destination :initarg :sns-destination :type
                         (common-lisp:or sns-destination common-lisp:null)
                         :accessor
                         %create-event-destination-request-sns-destination
                         :initform common-lisp:nil)
                        (kinesis-firehose-destination :initarg
                         :kinesis-firehose-destination :type
                         (common-lisp:or kinesis-firehose-destination
                                         common-lisp:null)
                         :accessor
                         %create-event-destination-request-kinesis-firehose-destination
                         :initform common-lisp:nil)
                        (cloud-watch-logs-destination :initarg
                         :cloud-watch-logs-destination :type
                         (common-lisp:or cloud-watch-logs-destination
                                         common-lisp:null)
                         :accessor
                         %create-event-destination-request-cloud-watch-logs-destination
                         :initform common-lisp:nil)
                        (matching-event-types :initarg :matching-event-types
                         :type
                         (common-lisp:or event-type-list common-lisp:null)
                         :accessor
                         %create-event-destination-request-matching-event-types
                         :initform
                         (common-lisp:error
                          ":matching-event-types is required"))
                        (event-destination-name :initarg
                         :event-destination-name :type
                         (common-lisp:or event-destination-name
                                         common-lisp:null)
                         :accessor
                         %create-event-destination-request-event-destination-name
                         :initform
                         (common-lisp:error
                          ":event-destination-name is required"))
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %create-event-destination-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-event-destination-request
                    'make-create-event-destination-request))
 (common-lisp:defun make-create-event-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token sns-destination
                     kinesis-firehose-destination cloud-watch-logs-destination
                     matching-event-types event-destination-name
                     configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-destination))
      (common-lisp:list
       (common-lisp:cons "SnsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-destination-result common-lisp:nil
                       ((event-destination :initarg :event-destination :type
                         (common-lisp:or event-destination common-lisp:null)
                         :accessor
                         %create-event-destination-result-event-destination
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %create-event-destination-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-event-destination-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-event-destination-result
                    'make-create-event-destination-result))
 (common-lisp:defun make-create-event-destination-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-destination configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-destination-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-opt-out-list-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-opt-out-list-request-client-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-opt-out-list-request-tags :initform
                         common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %create-opt-out-list-request-opt-out-list-name
                         :initform
                         (common-lisp:error
                          ":opt-out-list-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-opt-out-list-request
                    'make-create-opt-out-list-request))
 (common-lisp:defun make-create-opt-out-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags opt-out-list-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-opt-out-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-opt-out-list-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-opt-out-list-result-created-timestamp
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-opt-out-list-result-tags :initform
                         common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %create-opt-out-list-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (opt-out-list-arn :initarg :opt-out-list-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-opt-out-list-result-opt-out-list-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-opt-out-list-result
                    'make-create-opt-out-list-result))
 (common-lisp:defun make-create-opt-out-list-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp tags opt-out-list-name
                     opt-out-list-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-opt-out-list-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pool-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-pool-request-client-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-pool-request-tags :initform common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-pool-request-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %create-pool-request-message-type :initform
                         (common-lisp:error ":message-type is required"))
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor %create-pool-request-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or phone-or-sender-id-or-arn
                                         common-lisp:null)
                         :accessor %create-pool-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))))
 (common-lisp:export
  (common-lisp:list 'create-pool-request 'make-create-pool-request))
 (common-lisp:defun make-create-pool-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags
                     deletion-protection-enabled message-type iso-country-code
                     origination-identity)
   (common-lisp:apply #'common-lisp:make-instance 'create-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pool-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-pool-result-created-timestamp :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-pool-result-tags :initform common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %create-pool-result-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (shared-routes-enabled :initarg :shared-routes-enabled
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %create-pool-result-shared-routes-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor %create-pool-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %create-pool-result-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor %create-pool-result-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %create-pool-result-two-way-enabled
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %create-pool-result-message-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or pool-status common-lisp:null)
                         :accessor %create-pool-result-status :initform
                         common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-pool-result-pool-id :initform common-lisp:nil)
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-pool-result-pool-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-pool-result 'make-create-pool-result))
 (common-lisp:defun make-create-pool-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp tags
                     deletion-protection-enabled shared-routes-enabled
                     opt-out-list-name self-managed-opt-outs-enabled
                     two-way-channel-arn two-way-enabled message-type status
                     pool-id pool-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-request common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-configuration-set-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-request
                    'make-delete-configuration-set-request))
 (common-lisp:defun make-delete-configuration-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-configuration-set-result-created-timestamp
                         :initform common-lisp:nil)
                        (default-sender-id :initarg :default-sender-id :type
                         (common-lisp:or sender-id common-lisp:null) :accessor
                         %delete-configuration-set-result-default-sender-id
                         :initform common-lisp:nil)
                        (default-message-type :initarg :default-message-type
                         :type (common-lisp:or message-type common-lisp:null)
                         :accessor
                         %delete-configuration-set-result-default-message-type
                         :initform common-lisp:nil)
                        (event-destinations :initarg :event-destinations :type
                         (common-lisp:or event-destination-list
                                         common-lisp:null)
                         :accessor
                         %delete-configuration-set-result-event-destinations
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %delete-configuration-set-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-configuration-set-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-result
                    'make-delete-configuration-set-result))
 (common-lisp:defun make-delete-configuration-set-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp default-sender-id
                     default-message-type event-destinations
                     configuration-set-name configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destinations))
      (common-lisp:list
       (common-lisp:cons "EventDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-message-type))
      (common-lisp:list
       (common-lisp:cons "DefaultMessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-sender-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-default-message-type-request common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-default-message-type-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-default-message-type-request
                    'make-delete-default-message-type-request))
 (common-lisp:defun make-delete-default-message-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-default-message-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-default-message-type-result common-lisp:nil
                       ((message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor
                         %delete-default-message-type-result-message-type
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %delete-default-message-type-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-default-message-type-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-default-message-type-result
                    'make-delete-default-message-type-result))
 (common-lisp:defun make-delete-default-message-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-type configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-default-message-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-default-sender-id-request common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-default-sender-id-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-default-sender-id-request
                    'make-delete-default-sender-id-request))
 (common-lisp:defun make-delete-default-sender-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-default-sender-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-default-sender-id-result common-lisp:nil
                       ((sender-id :initarg :sender-id :type
                         (common-lisp:or sender-id common-lisp:null) :accessor
                         %delete-default-sender-id-result-sender-id :initform
                         common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %delete-default-sender-id-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-default-sender-id-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-default-sender-id-result
                    'make-delete-default-sender-id-result))
 (common-lisp:defun make-delete-default-sender-id-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sender-id configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-default-sender-id-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-destination-request common-lisp:nil
                       ((event-destination-name :initarg
                         :event-destination-name :type
                         (common-lisp:or event-destination-name
                                         common-lisp:null)
                         :accessor
                         %delete-event-destination-request-event-destination-name
                         :initform
                         (common-lisp:error
                          ":event-destination-name is required"))
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-event-destination-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-event-destination-request
                    'make-delete-event-destination-request))
 (common-lisp:defun make-delete-event-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-destination-name
                     configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-destination-result common-lisp:nil
                       ((event-destination :initarg :event-destination :type
                         (common-lisp:or event-destination common-lisp:null)
                         :accessor
                         %delete-event-destination-result-event-destination
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %delete-event-destination-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-event-destination-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-event-destination-result
                    'make-delete-event-destination-result))
 (common-lisp:defun make-delete-event-destination-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-destination configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-destination-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-keyword-request common-lisp:nil
                       ((keyword :initarg :keyword :type
                         (common-lisp:or keyword common-lisp:null) :accessor
                         %delete-keyword-request-keyword :initform
                         (common-lisp:error ":keyword is required"))
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or phone-or-pool-id-or-arn
                                         common-lisp:null)
                         :accessor %delete-keyword-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-keyword-request 'make-delete-keyword-request))
 (common-lisp:defun make-delete-keyword-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key keyword origination-identity)
   (common-lisp:apply #'common-lisp:make-instance 'delete-keyword-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-keyword-result common-lisp:nil
                       ((keyword-action :initarg :keyword-action :type
                         (common-lisp:or keyword-action common-lisp:null)
                         :accessor %delete-keyword-result-keyword-action
                         :initform common-lisp:nil)
                        (keyword-message :initarg :keyword-message :type
                         (common-lisp:or keyword-message common-lisp:null)
                         :accessor %delete-keyword-result-keyword-message
                         :initform common-lisp:nil)
                        (keyword :initarg :keyword :type
                         (common-lisp:or keyword common-lisp:null) :accessor
                         %delete-keyword-result-keyword :initform
                         common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %delete-keyword-result-origination-identity
                         :initform common-lisp:nil)
                        (origination-identity-arn :initarg
                         :origination-identity-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-keyword-result-origination-identity-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-keyword-result 'make-delete-keyword-result))
 (common-lisp:defun make-delete-keyword-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key keyword-action keyword-message keyword
                     origination-identity origination-identity-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-keyword-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-opt-out-list-request common-lisp:nil
                       ((opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-opt-out-list-request-opt-out-list-name
                         :initform
                         (common-lisp:error
                          ":opt-out-list-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-opt-out-list-request
                    'make-delete-opt-out-list-request))
 (common-lisp:defun make-delete-opt-out-list-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key opt-out-list-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-opt-out-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-opt-out-list-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-opt-out-list-result-created-timestamp
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %delete-opt-out-list-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (opt-out-list-arn :initarg :opt-out-list-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-opt-out-list-result-opt-out-list-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-opt-out-list-result
                    'make-delete-opt-out-list-result))
 (common-lisp:defun make-delete-opt-out-list-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp opt-out-list-name
                     opt-out-list-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-opt-out-list-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-opted-out-number-request common-lisp:nil
                       ((opted-out-number :initarg :opted-out-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %delete-opted-out-number-request-opted-out-number
                         :initform
                         (common-lisp:error ":opted-out-number is required"))
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-opted-out-number-request-opt-out-list-name
                         :initform
                         (common-lisp:error
                          ":opt-out-list-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-opted-out-number-request
                    'make-delete-opted-out-number-request))
 (common-lisp:defun make-delete-opted-out-number-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key opted-out-number opt-out-list-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-opted-out-number-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-opted-out-number-result common-lisp:nil
                       ((end-user-opted-out :initarg :end-user-opted-out :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %delete-opted-out-number-result-end-user-opted-out
                         :initform common-lisp:nil)
                        (opted-out-timestamp :initarg :opted-out-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %delete-opted-out-number-result-opted-out-timestamp
                         :initform common-lisp:nil)
                        (opted-out-number :initarg :opted-out-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %delete-opted-out-number-result-opted-out-number
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %delete-opted-out-number-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (opt-out-list-arn :initarg :opt-out-list-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-opted-out-number-result-opt-out-list-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-opted-out-number-result
                    'make-delete-opted-out-number-result))
 (common-lisp:defun make-delete-opted-out-number-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-user-opted-out opted-out-timestamp
                     opted-out-number opt-out-list-name opt-out-list-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-opted-out-number-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-timestamp))
      (common-lisp:list
       (common-lisp:cons "OptedOutTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-user-opted-out))
      (common-lisp:list
       (common-lisp:cons "EndUserOptedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pool-request common-lisp:nil
                       ((pool-id :initarg :pool-id :type
                         (common-lisp:or pool-id-or-arn common-lisp:null)
                         :accessor %delete-pool-request-pool-id :initform
                         (common-lisp:error ":pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-pool-request 'make-delete-pool-request))
 (common-lisp:defun make-delete-pool-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pool-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-pool-result-created-timestamp :initform
                         common-lisp:nil)
                        (shared-routes-enabled :initarg :shared-routes-enabled
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %delete-pool-result-shared-routes-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor %delete-pool-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %delete-pool-result-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor %delete-pool-result-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %delete-pool-result-two-way-enabled
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %delete-pool-result-message-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or pool-status common-lisp:null)
                         :accessor %delete-pool-result-status :initform
                         common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-pool-result-pool-id :initform common-lisp:nil)
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-pool-result-pool-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-pool-result 'make-delete-pool-result))
 (common-lisp:defun make-delete-pool-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp shared-routes-enabled
                     opt-out-list-name self-managed-opt-outs-enabled
                     two-way-channel-arn two-way-enabled message-type status
                     pool-id pool-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-text-message-spend-limit-override-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-text-message-spend-limit-override-request
                    'make-delete-text-message-spend-limit-override-request))
 (common-lisp:defun make-delete-text-message-spend-limit-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-text-message-spend-limit-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-text-message-spend-limit-override-result
                       common-lisp:nil
                       ((monthly-limit :initarg :monthly-limit :type
                         (common-lisp:or monthly-limit common-lisp:null)
                         :accessor
                         %delete-text-message-spend-limit-override-result-monthly-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-text-message-spend-limit-override-result
                    'make-delete-text-message-spend-limit-override-result))
 (common-lisp:defun make-delete-text-message-spend-limit-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-text-message-spend-limit-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-voice-message-spend-limit-override-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-voice-message-spend-limit-override-request
                    'make-delete-voice-message-spend-limit-override-request))
 (common-lisp:defun make-delete-voice-message-spend-limit-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-voice-message-spend-limit-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-voice-message-spend-limit-override-result
                       common-lisp:nil
                       ((monthly-limit :initarg :monthly-limit :type
                         (common-lisp:or monthly-limit common-lisp:null)
                         :accessor
                         %delete-voice-message-spend-limit-override-result-monthly-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-voice-message-spend-limit-override-result
                    'make-delete-voice-message-spend-limit-override-result))
 (common-lisp:defun make-delete-voice-message-spend-limit-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-voice-message-spend-limit-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:deftype delivery-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-account-attributes-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-account-attributes-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-request
                    'make-describe-account-attributes-request))
 (common-lisp:defun make-describe-account-attributes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-account-attributes-result-next-token
                         :initform common-lisp:nil)
                        (account-attributes :initarg :account-attributes :type
                         (common-lisp:or account-attribute-list
                                         common-lisp:null)
                         :accessor
                         %describe-account-attributes-result-account-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-result
                    'make-describe-account-attributes-result))
 (common-lisp:defun make-describe-account-attributes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-attributes))
      (common-lisp:list
       (common-lisp:cons "AccountAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-account-limits-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-account-limits-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-request
                    'make-describe-account-limits-request))
 (common-lisp:defun make-describe-account-limits-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-account-limits-result-next-token :initform
                         common-lisp:nil)
                        (account-limits :initarg :account-limits :type
                         (common-lisp:or account-limit-list common-lisp:null)
                         :accessor
                         %describe-account-limits-result-account-limits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-result
                    'make-describe-account-limits-result))
 (common-lisp:defun make-describe-account-limits-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-limits)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-limits))
      (common-lisp:list
       (common-lisp:cons "AccountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-sets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-configuration-sets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-configuration-sets-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or configuration-set-filter-list
                                         common-lisp:null)
                         :accessor %describe-configuration-sets-request-filters
                         :initform common-lisp:nil)
                        (configuration-set-names :initarg
                         :configuration-set-names :type
                         (common-lisp:or configuration-set-name-list
                                         common-lisp:null)
                         :accessor
                         %describe-configuration-sets-request-configuration-set-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-sets-request
                    'make-describe-configuration-sets-request))
 (common-lisp:defun make-describe-configuration-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     configuration-set-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-names))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-sets-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-configuration-sets-result-next-token
                         :initform common-lisp:nil)
                        (configuration-sets :initarg :configuration-sets :type
                         (common-lisp:or configuration-set-information-list
                                         common-lisp:null)
                         :accessor
                         %describe-configuration-sets-result-configuration-sets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-sets-result
                    'make-describe-configuration-sets-result))
 (common-lisp:defun make-describe-configuration-sets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token configuration-sets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-sets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-sets))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-keywords-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-keywords-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-keywords-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or keyword-filter-list common-lisp:null)
                         :accessor %describe-keywords-request-filters :initform
                         common-lisp:nil)
                        (keywords :initarg :keywords :type
                         (common-lisp:or keyword-list common-lisp:null)
                         :accessor %describe-keywords-request-keywords
                         :initform common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or phone-or-pool-id-or-arn
                                         common-lisp:null)
                         :accessor
                         %describe-keywords-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-keywords-request
                    'make-describe-keywords-request))
 (common-lisp:defun make-describe-keywords-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters keywords
                     origination-identity)
   (common-lisp:apply #'common-lisp:make-instance 'describe-keywords-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-keywords-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-keywords-result-next-token :initform
                         common-lisp:nil)
                        (keywords :initarg :keywords :type
                         (common-lisp:or keyword-information-list
                                         common-lisp:null)
                         :accessor %describe-keywords-result-keywords :initform
                         common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-keywords-result-origination-identity
                         :initform common-lisp:nil)
                        (origination-identity-arn :initarg
                         :origination-identity-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-keywords-result-origination-identity-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-keywords-result 'make-describe-keywords-result))
 (common-lisp:defun make-describe-keywords-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token keywords origination-identity
                     origination-identity-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-keywords-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-opt-out-lists-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-opt-out-lists-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-opt-out-lists-request-next-token :initform
                         common-lisp:nil)
                        (opt-out-list-names :initarg :opt-out-list-names :type
                         (common-lisp:or opt-out-list-name-list
                                         common-lisp:null)
                         :accessor
                         %describe-opt-out-lists-request-opt-out-list-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-opt-out-lists-request
                    'make-describe-opt-out-lists-request))
 (common-lisp:defun make-describe-opt-out-lists-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     opt-out-list-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-opt-out-lists-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-names))
      (common-lisp:list
       (common-lisp:cons "OptOutListNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-opt-out-lists-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-opt-out-lists-result-next-token :initform
                         common-lisp:nil)
                        (opt-out-lists :initarg :opt-out-lists :type
                         (common-lisp:or opt-out-list-information-list
                                         common-lisp:null)
                         :accessor %describe-opt-out-lists-result-opt-out-lists
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-opt-out-lists-result
                    'make-describe-opt-out-lists-result))
 (common-lisp:defun make-describe-opt-out-lists-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token opt-out-lists)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-opt-out-lists-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-lists))
      (common-lisp:list
       (common-lisp:cons "OptOutLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-opted-out-numbers-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-opted-out-numbers-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-opted-out-numbers-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or opted-out-filter-list
                                         common-lisp:null)
                         :accessor %describe-opted-out-numbers-request-filters
                         :initform common-lisp:nil)
                        (opted-out-numbers :initarg :opted-out-numbers :type
                         (common-lisp:or opted-out-number-list
                                         common-lisp:null)
                         :accessor
                         %describe-opted-out-numbers-request-opted-out-numbers
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %describe-opted-out-numbers-request-opt-out-list-name
                         :initform
                         (common-lisp:error
                          ":opt-out-list-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-opted-out-numbers-request
                    'make-describe-opted-out-numbers-request))
 (common-lisp:defun make-describe-opted-out-numbers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     opted-out-numbers opt-out-list-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-opted-out-numbers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-numbers))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-opted-out-numbers-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-opted-out-numbers-result-next-token
                         :initform common-lisp:nil)
                        (opted-out-numbers :initarg :opted-out-numbers :type
                         (common-lisp:or opted-out-number-information-list
                                         common-lisp:null)
                         :accessor
                         %describe-opted-out-numbers-result-opted-out-numbers
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %describe-opted-out-numbers-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (opt-out-list-arn :initarg :opt-out-list-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-opted-out-numbers-result-opt-out-list-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-opted-out-numbers-result
                    'make-describe-opted-out-numbers-result))
 (common-lisp:defun make-describe-opted-out-numbers-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token opted-out-numbers
                     opt-out-list-name opt-out-list-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-opted-out-numbers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-numbers))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-phone-numbers-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-phone-numbers-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-phone-numbers-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or phone-number-filter-list
                                         common-lisp:null)
                         :accessor %describe-phone-numbers-request-filters
                         :initform common-lisp:nil)
                        (phone-number-ids :initarg :phone-number-ids :type
                         (common-lisp:or phone-number-id-list common-lisp:null)
                         :accessor
                         %describe-phone-numbers-request-phone-number-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-phone-numbers-request
                    'make-describe-phone-numbers-request))
 (common-lisp:defun make-describe-phone-numbers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     phone-number-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-phone-numbers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-ids))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-phone-numbers-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-phone-numbers-result-next-token :initform
                         common-lisp:nil)
                        (phone-numbers :initarg :phone-numbers :type
                         (common-lisp:or phone-number-information-list
                                         common-lisp:null)
                         :accessor %describe-phone-numbers-result-phone-numbers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-phone-numbers-result
                    'make-describe-phone-numbers-result))
 (common-lisp:defun make-describe-phone-numbers-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token phone-numbers)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-phone-numbers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pools-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-pools-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-pools-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or pool-filter-list common-lisp:null)
                         :accessor %describe-pools-request-filters :initform
                         common-lisp:nil)
                        (pool-ids :initarg :pool-ids :type
                         (common-lisp:or pool-id-list common-lisp:null)
                         :accessor %describe-pools-request-pool-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-pools-request 'make-describe-pools-request))
 (common-lisp:defun make-describe-pools-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters pool-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pools-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-ids))
      (common-lisp:list
       (common-lisp:cons "PoolIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pools-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-pools-result-next-token :initform
                         common-lisp:nil)
                        (pools :initarg :pools :type
                         (common-lisp:or pool-information-list
                                         common-lisp:null)
                         :accessor %describe-pools-result-pools :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-pools-result 'make-describe-pools-result))
 (common-lisp:defun make-describe-pools-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token pools)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pools-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pools))
      (common-lisp:list
       (common-lisp:cons "Pools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sender-ids-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-sender-ids-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-sender-ids-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or sender-id-filter-list
                                         common-lisp:null)
                         :accessor %describe-sender-ids-request-filters
                         :initform common-lisp:nil)
                        (sender-ids :initarg :sender-ids :type
                         (common-lisp:or sender-id-list common-lisp:null)
                         :accessor %describe-sender-ids-request-sender-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-sender-ids-request
                    'make-describe-sender-ids-request))
 (common-lisp:defun make-describe-sender-ids-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     sender-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sender-ids-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ids))
      (common-lisp:list
       (common-lisp:cons "SenderIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sender-ids-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-sender-ids-result-next-token :initform
                         common-lisp:nil)
                        (sender-ids :initarg :sender-ids :type
                         (common-lisp:or sender-id-information-list
                                         common-lisp:null)
                         :accessor %describe-sender-ids-result-sender-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-sender-ids-result
                    'make-describe-sender-ids-result))
 (common-lisp:defun make-describe-sender-ids-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token sender-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sender-ids-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ids))
      (common-lisp:list
       (common-lisp:cons "SenderIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-spend-limits-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-spend-limits-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-spend-limits-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-spend-limits-request
                    'make-describe-spend-limits-request))
 (common-lisp:defun make-describe-spend-limits-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-spend-limits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-spend-limits-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-spend-limits-result-next-token :initform
                         common-lisp:nil)
                        (spend-limits :initarg :spend-limits :type
                         (common-lisp:or spend-limit-list common-lisp:null)
                         :accessor %describe-spend-limits-result-spend-limits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-spend-limits-result
                    'make-describe-spend-limits-result))
 (common-lisp:defun make-describe-spend-limits-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token spend-limits)
   (common-lisp:apply #'common-lisp:make-instance 'describe-spend-limits-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spend-limits))
      (common-lisp:list
       (common-lisp:cons "SpendLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-result))
   common-lisp:nil))
(common-lisp:deftype destination-country-parameter-key () 'common-lisp:string)
(common-lisp:deftype destination-country-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destination-country-parameters ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-destination-country-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass disassociate-origination-identity-request
                       common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %disassociate-origination-identity-request-client-token
                         :initform common-lisp:nil)
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %disassociate-origination-identity-request-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or phone-or-sender-id-or-arn
                                         common-lisp:null)
                         :accessor
                         %disassociate-origination-identity-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or pool-id-or-arn common-lisp:null)
                         :accessor
                         %disassociate-origination-identity-request-pool-id
                         :initform
                         (common-lisp:error ":pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-origination-identity-request
                    'make-disassociate-origination-identity-request))
 (common-lisp:defun make-disassociate-origination-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token iso-country-code
                     origination-identity pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-origination-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-origination-identity-result common-lisp:nil
                       ((iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %disassociate-origination-identity-result-iso-country-code
                         :initform common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %disassociate-origination-identity-result-origination-identity
                         :initform common-lisp:nil)
                        (origination-identity-arn :initarg
                         :origination-identity-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-origination-identity-result-origination-identity-arn
                         :initform common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-origination-identity-result-pool-id
                         :initform common-lisp:nil)
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-origination-identity-result-pool-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-origination-identity-result
                    'make-disassociate-origination-identity-result))
 (common-lisp:defun make-disassociate-origination-identity-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iso-country-code origination-identity
                     origination-identity-arn pool-id pool-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-origination-identity-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-destination common-lisp:nil
                       ((sns-destination :initarg :sns-destination :type
                         (common-lisp:or sns-destination common-lisp:null)
                         :accessor %event-destination-sns-destination :initform
                         common-lisp:nil)
                        (kinesis-firehose-destination :initarg
                         :kinesis-firehose-destination :type
                         (common-lisp:or kinesis-firehose-destination
                                         common-lisp:null)
                         :accessor
                         %event-destination-kinesis-firehose-destination
                         :initform common-lisp:nil)
                        (cloud-watch-logs-destination :initarg
                         :cloud-watch-logs-destination :type
                         (common-lisp:or cloud-watch-logs-destination
                                         common-lisp:null)
                         :accessor
                         %event-destination-cloud-watch-logs-destination
                         :initform common-lisp:nil)
                        (matching-event-types :initarg :matching-event-types
                         :type
                         (common-lisp:or event-type-list common-lisp:null)
                         :accessor %event-destination-matching-event-types
                         :initform
                         (common-lisp:error
                          ":matching-event-types is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %event-destination-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (event-destination-name :initarg
                         :event-destination-name :type
                         (common-lisp:or event-destination-name
                                         common-lisp:null)
                         :accessor %event-destination-event-destination-name
                         :initform
                         (common-lisp:error
                          ":event-destination-name is required"))))
 (common-lisp:export
  (common-lisp:list 'event-destination 'make-event-destination))
 (common-lisp:defun make-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-destination
                     kinesis-firehose-destination cloud-watch-logs-destination
                     matching-event-types enabled event-destination-name)
   (common-lisp:apply #'common-lisp:make-instance 'event-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-destination))
      (common-lisp:list
       (common-lisp:cons "SnsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-destination-list ()
   '(trivial-types:proper-list event-destination))
 (common-lisp:defun |make-event-destination-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-destination-name () 'common-lisp:string)
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-type-list ()
   '(trivial-types:proper-list event-type))
 (common-lisp:defun |make-event-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-server-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-request-id)))
(common-lisp:deftype iso-country-code () 'common-lisp:string)
(common-lisp:deftype keyword () 'common-lisp:string)
(common-lisp:deftype keyword-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass keyword-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %keyword-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or keyword-filter-name common-lisp:null)
                         :accessor %keyword-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'keyword-filter 'make-keyword-filter))
 (common-lisp:defun make-keyword-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'keyword-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyword-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-filter-list ()
   '(trivial-types:proper-list keyword-filter))
 (common-lisp:defun |make-keyword-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype keyword-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass keyword-information common-lisp:nil
                       ((keyword-action :initarg :keyword-action :type
                         (common-lisp:or keyword-action common-lisp:null)
                         :accessor %keyword-information-keyword-action
                         :initform
                         (common-lisp:error ":keyword-action is required"))
                        (keyword-message :initarg :keyword-message :type
                         (common-lisp:or keyword-message common-lisp:null)
                         :accessor %keyword-information-keyword-message
                         :initform
                         (common-lisp:error ":keyword-message is required"))
                        (keyword :initarg :keyword :type
                         (common-lisp:or keyword common-lisp:null) :accessor
                         %keyword-information-keyword :initform
                         (common-lisp:error ":keyword is required"))))
 (common-lisp:export
  (common-lisp:list 'keyword-information 'make-keyword-information))
 (common-lisp:defun make-keyword-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key keyword-action keyword-message keyword)
   (common-lisp:apply #'common-lisp:make-instance 'keyword-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyword-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyword-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyword-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-information-list ()
   '(trivial-types:proper-list keyword-information))
 (common-lisp:defun |make-keyword-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype keyword-list () '(trivial-types:proper-list keyword))
 (common-lisp:defun |make-keyword-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword))
   aws-sdk/generator/shape::members))
(common-lisp:deftype keyword-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-destination common-lisp:nil
                       ((delivery-stream-arn :initarg :delivery-stream-arn
                         :type
                         (common-lisp:or delivery-stream-arn common-lisp:null)
                         :accessor
                         %kinesis-firehose-destination-delivery-stream-arn
                         :initform
                         (common-lisp:error
                          ":delivery-stream-arn is required"))
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %kinesis-firehose-destination-iam-role-arn
                         :initform
                         (common-lisp:error ":iam-role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-destination
                    'make-kinesis-firehose-destination))
 (common-lisp:defun make-kinesis-firehose-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delivery-stream-arn iam-role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-firehose-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream-arn))
      (common-lisp:list
       (common-lisp:cons "DeliveryStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pool-origination-identities-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-pool-origination-identities-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-pool-origination-identities-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or
                          pool-origination-identities-filter-list
                          common-lisp:null)
                         :accessor
                         %list-pool-origination-identities-request-filters
                         :initform common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or pool-id-or-arn common-lisp:null)
                         :accessor
                         %list-pool-origination-identities-request-pool-id
                         :initform
                         (common-lisp:error ":pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-pool-origination-identities-request
                    'make-list-pool-origination-identities-request))
 (common-lisp:defun make-list-pool-origination-identities-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pool-origination-identities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pool-origination-identities-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-pool-origination-identities-result-next-token
                         :initform common-lisp:nil)
                        (origination-identities :initarg
                         :origination-identities :type
                         (common-lisp:or origination-identity-metadata-list
                                         common-lisp:null)
                         :accessor
                         %list-pool-origination-identities-result-origination-identities
                         :initform common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-pool-origination-identities-result-pool-id
                         :initform common-lisp:nil)
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-pool-origination-identities-result-pool-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pool-origination-identities-result
                    'make-list-pool-origination-identities-result))
 (common-lisp:defun make-list-pool-origination-identities-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token origination-identities pool-id
                     pool-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pool-origination-identities-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identities))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-result-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:deftype max-price () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype message-type-list ()
   '(trivial-types:proper-list message-type))
 (common-lisp:defun |make-message-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monthly-limit () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-non-empty-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype number-capability-list ()
   '(trivial-types:proper-list number-capability))
 (common-lisp:defun |make-number-capability-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-status () 'common-lisp:string)
(common-lisp:deftype number-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass opt-out-list-information common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %opt-out-list-information-created-timestamp :initform
                         (common-lisp:error ":created-timestamp is required"))
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor %opt-out-list-information-opt-out-list-name
                         :initform
                         (common-lisp:error ":opt-out-list-name is required"))
                        (opt-out-list-arn :initarg :opt-out-list-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %opt-out-list-information-opt-out-list-arn :initform
                         (common-lisp:error ":opt-out-list-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'opt-out-list-information 'make-opt-out-list-information))
 (common-lisp:defun make-opt-out-list-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp opt-out-list-name
                     opt-out-list-arn)
   (common-lisp:apply #'common-lisp:make-instance 'opt-out-list-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-list-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-list-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-list-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype opt-out-list-information-list ()
   '(trivial-types:proper-list opt-out-list-information))
 (common-lisp:defun |make-opt-out-list-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            opt-out-list-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype opt-out-list-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype opt-out-list-name-list ()
   '(trivial-types:proper-list opt-out-list-name-or-arn))
 (common-lisp:defun |make-opt-out-list-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            opt-out-list-name-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype opt-out-list-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass opted-out-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %opted-out-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or opted-out-filter-name
                                         common-lisp:null)
                         :accessor %opted-out-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'opted-out-filter 'make-opted-out-filter))
 (common-lisp:defun make-opted-out-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'opted-out-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input opted-out-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input opted-out-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input opted-out-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype opted-out-filter-list ()
   '(trivial-types:proper-list opted-out-filter))
 (common-lisp:defun |make-opted-out-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list opted-out-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype opted-out-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass opted-out-number-information common-lisp:nil
                       ((end-user-opted-out :initarg :end-user-opted-out :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %opted-out-number-information-end-user-opted-out
                         :initform
                         (common-lisp:error ":end-user-opted-out is required"))
                        (opted-out-timestamp :initarg :opted-out-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %opted-out-number-information-opted-out-timestamp
                         :initform
                         (common-lisp:error
                          ":opted-out-timestamp is required"))
                        (opted-out-number :initarg :opted-out-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %opted-out-number-information-opted-out-number
                         :initform
                         (common-lisp:error ":opted-out-number is required"))))
 (common-lisp:export
  (common-lisp:list 'opted-out-number-information
                    'make-opted-out-number-information))
 (common-lisp:defun make-opted-out-number-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-user-opted-out opted-out-timestamp
                     opted-out-number)
   (common-lisp:apply #'common-lisp:make-instance 'opted-out-number-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opted-out-number-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opted-out-number-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-timestamp))
      (common-lisp:list
       (common-lisp:cons "OptedOutTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-user-opted-out))
      (common-lisp:list
       (common-lisp:cons "EndUserOptedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opted-out-number-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype opted-out-number-information-list ()
   '(trivial-types:proper-list opted-out-number-information))
 (common-lisp:defun |make-opted-out-number-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            opted-out-number-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype opted-out-number-list ()
   '(trivial-types:proper-list phone-number))
 (common-lisp:defun |make-opted-out-number-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass origination-identity-metadata common-lisp:nil
                       ((number-capabilities :initarg :number-capabilities
                         :type
                         (common-lisp:or number-capability-list
                                         common-lisp:null)
                         :accessor
                         %origination-identity-metadata-number-capabilities
                         :initform
                         (common-lisp:error
                          ":number-capabilities is required"))
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %origination-identity-metadata-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (origination-identity :initarg :origination-identity
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %origination-identity-metadata-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))
                        (origination-identity-arn :initarg
                         :origination-identity-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %origination-identity-metadata-origination-identity-arn
                         :initform
                         (common-lisp:error
                          ":origination-identity-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'origination-identity-metadata
                    'make-origination-identity-metadata))
 (common-lisp:defun make-origination-identity-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-capabilities iso-country-code
                     origination-identity origination-identity-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'origination-identity-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origination-identity-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origination-identity-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origination-identity-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origination-identity-metadata-list ()
   '(trivial-types:proper-list origination-identity-metadata))
 (common-lisp:defun |make-origination-identity-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            origination-identity-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass phone-number-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %phone-number-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or phone-number-filter-name
                                         common-lisp:null)
                         :accessor %phone-number-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'phone-number-filter 'make-phone-number-filter))
 (common-lisp:defun make-phone-number-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'phone-number-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-filter-list ()
   '(trivial-types:proper-list phone-number-filter))
 (common-lisp:defun |make-phone-number-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phone-number-id-list ()
   '(trivial-types:proper-list phone-number-id-or-arn))
 (common-lisp:defun |make-phone-number-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass phone-number-information common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %phone-number-information-created-timestamp :initform
                         (common-lisp:error ":created-timestamp is required"))
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %phone-number-information-pool-id :initform
                         common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %phone-number-information-deletion-protection-enabled
                         :initform
                         (common-lisp:error
                          ":deletion-protection-enabled is required"))
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor %phone-number-information-opt-out-list-name
                         :initform
                         (common-lisp:error ":opt-out-list-name is required"))
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %phone-number-information-self-managed-opt-outs-enabled
                         :initform
                         (common-lisp:error
                          ":self-managed-opt-outs-enabled is required"))
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor
                         %phone-number-information-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %phone-number-information-two-way-enabled
                         :initform
                         (common-lisp:error ":two-way-enabled is required"))
                        (monthly-leasing-price :initarg :monthly-leasing-price
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %phone-number-information-monthly-leasing-price
                         :initform
                         (common-lisp:error
                          ":monthly-leasing-price is required"))
                        (number-type :initarg :number-type :type
                         (common-lisp:or number-type common-lisp:null)
                         :accessor %phone-number-information-number-type
                         :initform
                         (common-lisp:error ":number-type is required"))
                        (number-capabilities :initarg :number-capabilities
                         :type
                         (common-lisp:or number-capability-list
                                         common-lisp:null)
                         :accessor
                         %phone-number-information-number-capabilities
                         :initform
                         (common-lisp:error
                          ":number-capabilities is required"))
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %phone-number-information-message-type
                         :initform
                         (common-lisp:error ":message-type is required"))
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor %phone-number-information-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (status :initarg :status :type
                         (common-lisp:or number-status common-lisp:null)
                         :accessor %phone-number-information-status :initform
                         (common-lisp:error ":status is required"))
                        (phone-number :initarg :phone-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor %phone-number-information-phone-number
                         :initform
                         (common-lisp:error ":phone-number is required"))
                        (phone-number-id :initarg :phone-number-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %phone-number-information-phone-number-id :initform
                         common-lisp:nil)
                        (phone-number-arn :initarg :phone-number-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %phone-number-information-phone-number-arn :initform
                         (common-lisp:error ":phone-number-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'phone-number-information 'make-phone-number-information))
 (common-lisp:defun make-phone-number-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp pool-id
                     deletion-protection-enabled opt-out-list-name
                     self-managed-opt-outs-enabled two-way-channel-arn
                     two-way-enabled monthly-leasing-price number-type
                     number-capabilities message-type iso-country-code status
                     phone-number phone-number-id phone-number-arn)
   (common-lisp:apply #'common-lisp:make-instance 'phone-number-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-information-list ()
   '(trivial-types:proper-list phone-number-information))
 (common-lisp:defun |make-phone-number-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            phone-number-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-or-pool-id-or-arn () 'common-lisp:string)
(common-lisp:deftype phone-or-sender-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pool-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %pool-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or pool-filter-name common-lisp:null)
                         :accessor %pool-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'pool-filter 'make-pool-filter))
 (common-lisp:defun make-pool-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'pool-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pool-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pool-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pool-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pool-filter-list ()
   '(trivial-types:proper-list pool-filter))
 (common-lisp:defun |make-pool-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pool-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pool-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pool-id-list ()
   '(trivial-types:proper-list pool-id-or-arn))
 (common-lisp:defun |make-pool-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pool-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pool-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pool-information common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %pool-information-created-timestamp :initform
                         (common-lisp:error ":created-timestamp is required"))
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %pool-information-deletion-protection-enabled
                         :initform
                         (common-lisp:error
                          ":deletion-protection-enabled is required"))
                        (shared-routes-enabled :initarg :shared-routes-enabled
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %pool-information-shared-routes-enabled
                         :initform
                         (common-lisp:error
                          ":shared-routes-enabled is required"))
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor %pool-information-opt-out-list-name
                         :initform
                         (common-lisp:error ":opt-out-list-name is required"))
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %pool-information-self-managed-opt-outs-enabled
                         :initform
                         (common-lisp:error
                          ":self-managed-opt-outs-enabled is required"))
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor %pool-information-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %pool-information-two-way-enabled :initform
                         (common-lisp:error ":two-way-enabled is required"))
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %pool-information-message-type :initform
                         (common-lisp:error ":message-type is required"))
                        (status :initarg :status :type
                         (common-lisp:or pool-status common-lisp:null)
                         :accessor %pool-information-status :initform
                         (common-lisp:error ":status is required"))
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pool-information-pool-id :initform
                         (common-lisp:error ":pool-id is required"))
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pool-information-pool-arn :initform
                         (common-lisp:error ":pool-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'pool-information 'make-pool-information))
 (common-lisp:defun make-pool-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp
                     deletion-protection-enabled shared-routes-enabled
                     opt-out-list-name self-managed-opt-outs-enabled
                     two-way-channel-arn two-way-enabled message-type status
                     pool-id pool-arn)
   (common-lisp:apply #'common-lisp:make-instance 'pool-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pool-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pool-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pool-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pool-information-list ()
   '(trivial-types:proper-list pool-information))
 (common-lisp:defun |make-pool-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pool-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pool-origination-identities-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %pool-origination-identities-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or
                          pool-origination-identities-filter-name
                          common-lisp:null)
                         :accessor %pool-origination-identities-filter-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'pool-origination-identities-filter
                    'make-pool-origination-identities-filter))
 (common-lisp:defun make-pool-origination-identities-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance
                      'pool-origination-identities-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pool-origination-identities-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pool-origination-identities-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pool-origination-identities-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pool-origination-identities-filter-list ()
   '(trivial-types:proper-list pool-origination-identities-filter))
 (common-lisp:defun |make-pool-origination-identities-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pool-origination-identities-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pool-origination-identities-filter-name ()
  'common-lisp:string)
(common-lisp:deftype pool-status () 'common-lisp:string)
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:deftype primitive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass put-keyword-request common-lisp:nil
                       ((keyword-action :initarg :keyword-action :type
                         (common-lisp:or keyword-action common-lisp:null)
                         :accessor %put-keyword-request-keyword-action
                         :initform common-lisp:nil)
                        (keyword-message :initarg :keyword-message :type
                         (common-lisp:or keyword-message common-lisp:null)
                         :accessor %put-keyword-request-keyword-message
                         :initform
                         (common-lisp:error ":keyword-message is required"))
                        (keyword :initarg :keyword :type
                         (common-lisp:or keyword common-lisp:null) :accessor
                         %put-keyword-request-keyword :initform
                         (common-lisp:error ":keyword is required"))
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or phone-or-pool-id-or-arn
                                         common-lisp:null)
                         :accessor %put-keyword-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))))
 (common-lisp:export
  (common-lisp:list 'put-keyword-request 'make-put-keyword-request))
 (common-lisp:defun make-put-keyword-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key keyword-action keyword-message keyword
                     origination-identity)
   (common-lisp:apply #'common-lisp:make-instance 'put-keyword-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-keyword-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-keyword-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-keyword-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-keyword-result common-lisp:nil
                       ((keyword-action :initarg :keyword-action :type
                         (common-lisp:or keyword-action common-lisp:null)
                         :accessor %put-keyword-result-keyword-action :initform
                         common-lisp:nil)
                        (keyword-message :initarg :keyword-message :type
                         (common-lisp:or keyword-message common-lisp:null)
                         :accessor %put-keyword-result-keyword-message
                         :initform common-lisp:nil)
                        (keyword :initarg :keyword :type
                         (common-lisp:or keyword common-lisp:null) :accessor
                         %put-keyword-result-keyword :initform common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %put-keyword-result-origination-identity
                         :initform common-lisp:nil)
                        (origination-identity-arn :initarg
                         :origination-identity-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-keyword-result-origination-identity-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-keyword-result 'make-put-keyword-result))
 (common-lisp:defun make-put-keyword-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key keyword-action keyword-message keyword
                     origination-identity origination-identity-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-keyword-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-keyword-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-keyword-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-keyword-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-opted-out-number-request common-lisp:nil
                       ((opted-out-number :initarg :opted-out-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %put-opted-out-number-request-opted-out-number
                         :initform
                         (common-lisp:error ":opted-out-number is required"))
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %put-opted-out-number-request-opt-out-list-name
                         :initform
                         (common-lisp:error
                          ":opt-out-list-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-opted-out-number-request
                    'make-put-opted-out-number-request))
 (common-lisp:defun make-put-opted-out-number-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key opted-out-number opt-out-list-name)
   (common-lisp:apply #'common-lisp:make-instance 'put-opted-out-number-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-opted-out-number-result common-lisp:nil
                       ((end-user-opted-out :initarg :end-user-opted-out :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %put-opted-out-number-result-end-user-opted-out
                         :initform common-lisp:nil)
                        (opted-out-timestamp :initarg :opted-out-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %put-opted-out-number-result-opted-out-timestamp
                         :initform common-lisp:nil)
                        (opted-out-number :initarg :opted-out-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %put-opted-out-number-result-opted-out-number
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %put-opted-out-number-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (opt-out-list-arn :initarg :opt-out-list-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-opted-out-number-result-opt-out-list-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-opted-out-number-result
                    'make-put-opted-out-number-result))
 (common-lisp:defun make-put-opted-out-number-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-user-opted-out opted-out-timestamp
                     opted-out-number opt-out-list-name opt-out-list-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-opted-out-number-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-timestamp))
      (common-lisp:list
       (common-lisp:cons "OptedOutTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-user-opted-out))
      (common-lisp:list
       (common-lisp:cons "EndUserOptedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-result))
   common-lisp:nil))
(common-lisp:deftype registration-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass release-phone-number-request common-lisp:nil
                       ((phone-number-id :initarg :phone-number-id :type
                         (common-lisp:or phone-number-id-or-arn
                                         common-lisp:null)
                         :accessor
                         %release-phone-number-request-phone-number-id
                         :initform
                         (common-lisp:error ":phone-number-id is required"))))
 (common-lisp:export
  (common-lisp:list 'release-phone-number-request
                    'make-release-phone-number-request))
 (common-lisp:defun make-release-phone-number-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key phone-number-id)
   (common-lisp:apply #'common-lisp:make-instance 'release-phone-number-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass release-phone-number-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %release-phone-number-result-created-timestamp
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %release-phone-number-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %release-phone-number-result-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor
                         %release-phone-number-result-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %release-phone-number-result-two-way-enabled
                         :initform common-lisp:nil)
                        (monthly-leasing-price :initarg :monthly-leasing-price
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %release-phone-number-result-monthly-leasing-price
                         :initform common-lisp:nil)
                        (number-type :initarg :number-type :type
                         (common-lisp:or number-type common-lisp:null)
                         :accessor %release-phone-number-result-number-type
                         :initform common-lisp:nil)
                        (number-capabilities :initarg :number-capabilities
                         :type
                         (common-lisp:or number-capability-list
                                         common-lisp:null)
                         :accessor
                         %release-phone-number-result-number-capabilities
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %release-phone-number-result-message-type
                         :initform common-lisp:nil)
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %release-phone-number-result-iso-country-code
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or number-status common-lisp:null)
                         :accessor %release-phone-number-result-status
                         :initform common-lisp:nil)
                        (phone-number :initarg :phone-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor %release-phone-number-result-phone-number
                         :initform common-lisp:nil)
                        (phone-number-id :initarg :phone-number-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %release-phone-number-result-phone-number-id :initform
                         common-lisp:nil)
                        (phone-number-arn :initarg :phone-number-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %release-phone-number-result-phone-number-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'release-phone-number-result
                    'make-release-phone-number-result))
 (common-lisp:defun make-release-phone-number-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp opt-out-list-name
                     self-managed-opt-outs-enabled two-way-channel-arn
                     two-way-enabled monthly-leasing-price number-type
                     number-capabilities message-type iso-country-code status
                     phone-number phone-number-id phone-number-arn)
   (common-lisp:apply #'common-lisp:make-instance 'release-phone-number-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-phone-number-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %request-phone-number-request-client-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %request-phone-number-request-tags :initform
                         common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %request-phone-number-request-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (registration-id :initarg :registration-id :type
                         (common-lisp:or registration-id common-lisp:null)
                         :accessor
                         %request-phone-number-request-registration-id
                         :initform common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or pool-id-or-arn common-lisp:null)
                         :accessor %request-phone-number-request-pool-id
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %request-phone-number-request-opt-out-list-name
                         :initform common-lisp:nil)
                        (number-type :initarg :number-type :type
                         (common-lisp:or requestable-number-type
                                         common-lisp:null)
                         :accessor %request-phone-number-request-number-type
                         :initform
                         (common-lisp:error ":number-type is required"))
                        (number-capabilities :initarg :number-capabilities
                         :type
                         (common-lisp:or number-capability-list
                                         common-lisp:null)
                         :accessor
                         %request-phone-number-request-number-capabilities
                         :initform
                         (common-lisp:error
                          ":number-capabilities is required"))
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %request-phone-number-request-message-type
                         :initform
                         (common-lisp:error ":message-type is required"))
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %request-phone-number-request-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))))
 (common-lisp:export
  (common-lisp:list 'request-phone-number-request
                    'make-request-phone-number-request))
 (common-lisp:defun make-request-phone-number-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags
                     deletion-protection-enabled registration-id pool-id
                     opt-out-list-name number-type number-capabilities
                     message-type iso-country-code)
   (common-lisp:apply #'common-lisp:make-instance 'request-phone-number-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-phone-number-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %request-phone-number-result-created-timestamp
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %request-phone-number-result-tags :initform
                         common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %request-phone-number-result-pool-id :initform
                         common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %request-phone-number-result-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %request-phone-number-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %request-phone-number-result-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor
                         %request-phone-number-result-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %request-phone-number-result-two-way-enabled
                         :initform common-lisp:nil)
                        (monthly-leasing-price :initarg :monthly-leasing-price
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %request-phone-number-result-monthly-leasing-price
                         :initform common-lisp:nil)
                        (number-type :initarg :number-type :type
                         (common-lisp:or requestable-number-type
                                         common-lisp:null)
                         :accessor %request-phone-number-result-number-type
                         :initform common-lisp:nil)
                        (number-capabilities :initarg :number-capabilities
                         :type
                         (common-lisp:or number-capability-list
                                         common-lisp:null)
                         :accessor
                         %request-phone-number-result-number-capabilities
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %request-phone-number-result-message-type
                         :initform common-lisp:nil)
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor
                         %request-phone-number-result-iso-country-code
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or number-status common-lisp:null)
                         :accessor %request-phone-number-result-status
                         :initform common-lisp:nil)
                        (phone-number :initarg :phone-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor %request-phone-number-result-phone-number
                         :initform common-lisp:nil)
                        (phone-number-id :initarg :phone-number-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %request-phone-number-result-phone-number-id :initform
                         common-lisp:nil)
                        (phone-number-arn :initarg :phone-number-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %request-phone-number-result-phone-number-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'request-phone-number-result
                    'make-request-phone-number-result))
 (common-lisp:defun make-request-phone-number-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp tags pool-id
                     deletion-protection-enabled opt-out-list-name
                     self-managed-opt-outs-enabled two-way-channel-arn
                     two-way-enabled monthly-leasing-price number-type
                     number-capabilities message-type iso-country-code status
                     phone-number phone-number-id phone-number-arn)
   (common-lisp:apply #'common-lisp:make-instance 'request-phone-number-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-result))
   common-lisp:nil))
(common-lisp:deftype requestable-number-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-id)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass send-text-message-request common-lisp:nil
                       ((dry-run :initarg :dry-run :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %send-text-message-request-dry-run :initform
                         common-lisp:nil)
                        (destination-country-parameters :initarg
                         :destination-country-parameters :type
                         (common-lisp:or destination-country-parameters
                                         common-lisp:null)
                         :accessor
                         %send-text-message-request-destination-country-parameters
                         :initform common-lisp:nil)
                        (context :initarg :context :type
                         (common-lisp:or context-map common-lisp:null)
                         :accessor %send-text-message-request-context :initform
                         common-lisp:nil)
                        (time-to-live :initarg :time-to-live :type
                         (common-lisp:or time-to-live common-lisp:null)
                         :accessor %send-text-message-request-time-to-live
                         :initform common-lisp:nil)
                        (max-price :initarg :max-price :type
                         (common-lisp:or max-price common-lisp:null) :accessor
                         %send-text-message-request-max-price :initform
                         common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %send-text-message-request-configuration-set-name
                         :initform common-lisp:nil)
                        (keyword :initarg :keyword :type
                         (common-lisp:or keyword common-lisp:null) :accessor
                         %send-text-message-request-keyword :initform
                         common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %send-text-message-request-message-type
                         :initform common-lisp:nil)
                        (message-body :initarg :message-body :type
                         (common-lisp:or text-message-body common-lisp:null)
                         :accessor %send-text-message-request-message-body
                         :initform common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or text-message-origination-identity
                                         common-lisp:null)
                         :accessor
                         %send-text-message-request-origination-identity
                         :initform common-lisp:nil)
                        (destination-phone-number :initarg
                         :destination-phone-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %send-text-message-request-destination-phone-number
                         :initform
                         (common-lisp:error
                          ":destination-phone-number is required"))))
 (common-lisp:export
  (common-lisp:list 'send-text-message-request
                    'make-send-text-message-request))
 (common-lisp:defun make-send-text-message-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dry-run destination-country-parameters
                     context time-to-live max-price configuration-set-name
                     keyword message-type message-body origination-identity
                     destination-phone-number)
   (common-lisp:apply #'common-lisp:make-instance 'send-text-message-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-price))
      (common-lisp:list
       (common-lisp:cons "MaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-country-parameters))
      (common-lisp:list
       (common-lisp:cons "DestinationCountryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-text-message-result common-lisp:nil
                       ((message-id :initarg :message-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %send-text-message-result-message-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-text-message-result 'make-send-text-message-result))
 (common-lisp:defun make-send-text-message-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-id)
   (common-lisp:apply #'common-lisp:make-instance 'send-text-message-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-voice-message-request common-lisp:nil
                       ((dry-run :initarg :dry-run :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %send-voice-message-request-dry-run
                         :initform common-lisp:nil)
                        (context :initarg :context :type
                         (common-lisp:or context-map common-lisp:null)
                         :accessor %send-voice-message-request-context
                         :initform common-lisp:nil)
                        (time-to-live :initarg :time-to-live :type
                         (common-lisp:or time-to-live common-lisp:null)
                         :accessor %send-voice-message-request-time-to-live
                         :initform common-lisp:nil)
                        (max-price-per-minute :initarg :max-price-per-minute
                         :type (common-lisp:or max-price common-lisp:null)
                         :accessor
                         %send-voice-message-request-max-price-per-minute
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %send-voice-message-request-configuration-set-name
                         :initform common-lisp:nil)
                        (voice-id :initarg :voice-id :type
                         (common-lisp:or voice-id common-lisp:null) :accessor
                         %send-voice-message-request-voice-id :initform
                         common-lisp:nil)
                        (message-body-text-type :initarg
                         :message-body-text-type :type
                         (common-lisp:or voice-message-body-text-type
                                         common-lisp:null)
                         :accessor
                         %send-voice-message-request-message-body-text-type
                         :initform common-lisp:nil)
                        (message-body :initarg :message-body :type
                         (common-lisp:or voice-message-body common-lisp:null)
                         :accessor %send-voice-message-request-message-body
                         :initform common-lisp:nil)
                        (origination-identity :initarg :origination-identity
                         :type
                         (common-lisp:or voice-message-origination-identity
                                         common-lisp:null)
                         :accessor
                         %send-voice-message-request-origination-identity
                         :initform
                         (common-lisp:error
                          ":origination-identity is required"))
                        (destination-phone-number :initarg
                         :destination-phone-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         %send-voice-message-request-destination-phone-number
                         :initform
                         (common-lisp:error
                          ":destination-phone-number is required"))))
 (common-lisp:export
  (common-lisp:list 'send-voice-message-request
                    'make-send-voice-message-request))
 (common-lisp:defun make-send-voice-message-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dry-run context time-to-live
                     max-price-per-minute configuration-set-name voice-id
                     message-body-text-type message-body origination-identity
                     destination-phone-number)
   (common-lisp:apply #'common-lisp:make-instance 'send-voice-message-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-body-text-type))
      (common-lisp:list
       (common-lisp:cons "MessageBodyTextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-price-per-minute))
      (common-lisp:list
       (common-lisp:cons "MaxPricePerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-voice-message-result common-lisp:nil
                       ((message-id :initarg :message-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %send-voice-message-result-message-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-voice-message-result
                    'make-send-voice-message-result))
 (common-lisp:defun make-send-voice-message-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-id)
   (common-lisp:apply #'common-lisp:make-instance 'send-voice-message-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-result))
   common-lisp:nil))
(common-lisp:deftype sender-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sender-id-and-country common-lisp:nil
                       ((iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor %sender-id-and-country-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (sender-id :initarg :sender-id :type
                         (common-lisp:or sender-id-or-arn common-lisp:null)
                         :accessor %sender-id-and-country-sender-id :initform
                         (common-lisp:error ":sender-id is required"))))
 (common-lisp:export
  (common-lisp:list 'sender-id-and-country 'make-sender-id-and-country))
 (common-lisp:defun make-sender-id-and-country
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iso-country-code sender-id)
   (common-lisp:apply #'common-lisp:make-instance 'sender-id-and-country
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-and-country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-and-country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-and-country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sender-id-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %sender-id-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or sender-id-filter-name
                                         common-lisp:null)
                         :accessor %sender-id-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'sender-id-filter 'make-sender-id-filter))
 (common-lisp:defun make-sender-id-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'sender-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sender-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sender-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sender-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sender-id-filter-list ()
   '(trivial-types:proper-list sender-id-filter))
 (common-lisp:defun |make-sender-id-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sender-id-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sender-id-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sender-id-information common-lisp:nil
                       ((monthly-leasing-price :initarg :monthly-leasing-price
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %sender-id-information-monthly-leasing-price
                         :initform
                         (common-lisp:error
                          ":monthly-leasing-price is required"))
                        (message-types :initarg :message-types :type
                         (common-lisp:or message-type-list common-lisp:null)
                         :accessor %sender-id-information-message-types
                         :initform
                         (common-lisp:error ":message-types is required"))
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor %sender-id-information-iso-country-code
                         :initform
                         (common-lisp:error ":iso-country-code is required"))
                        (sender-id :initarg :sender-id :type
                         (common-lisp:or sender-id common-lisp:null) :accessor
                         %sender-id-information-sender-id :initform
                         (common-lisp:error ":sender-id is required"))
                        (sender-id-arn :initarg :sender-id-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sender-id-information-sender-id-arn :initform
                         (common-lisp:error ":sender-id-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'sender-id-information 'make-sender-id-information))
 (common-lisp:defun make-sender-id-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-leasing-price message-types
                     iso-country-code sender-id sender-id-arn)
   (common-lisp:apply #'common-lisp:make-instance 'sender-id-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id-arn))
      (common-lisp:list
       (common-lisp:cons "SenderIdArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sender-id-information-list ()
   '(trivial-types:proper-list sender-id-information))
 (common-lisp:defun |make-sender-id-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sender-id-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sender-id-list ()
   '(trivial-types:proper-list sender-id-and-country))
 (common-lisp:defun |make-sender-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sender-id-and-country))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sender-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       service-quota-exceeded-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-reason)))
(common-lisp:deftype service-quota-exceeded-exception-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass set-default-message-type-request common-lisp:nil
                       ((message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor
                         %set-default-message-type-request-message-type
                         :initform
                         (common-lisp:error ":message-type is required"))
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %set-default-message-type-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-default-message-type-request
                    'make-set-default-message-type-request))
 (common-lisp:defun make-set-default-message-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-type configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-message-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-default-message-type-result common-lisp:nil
                       ((message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor
                         %set-default-message-type-result-message-type
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %set-default-message-type-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %set-default-message-type-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-default-message-type-result
                    'make-set-default-message-type-result))
 (common-lisp:defun make-set-default-message-type-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-type configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-message-type-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-default-sender-id-request common-lisp:nil
                       ((sender-id :initarg :sender-id :type
                         (common-lisp:or sender-id common-lisp:null) :accessor
                         %set-default-sender-id-request-sender-id :initform
                         (common-lisp:error ":sender-id is required"))
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %set-default-sender-id-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-default-sender-id-request
                    'make-set-default-sender-id-request))
 (common-lisp:defun make-set-default-sender-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sender-id configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-sender-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-default-sender-id-result common-lisp:nil
                       ((sender-id :initarg :sender-id :type
                         (common-lisp:or sender-id common-lisp:null) :accessor
                         %set-default-sender-id-result-sender-id :initform
                         common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %set-default-sender-id-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %set-default-sender-id-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-default-sender-id-result
                    'make-set-default-sender-id-result))
 (common-lisp:defun make-set-default-sender-id-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sender-id configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance 'set-default-sender-id-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-text-message-spend-limit-override-request
                       common-lisp:nil
                       ((monthly-limit :initarg :monthly-limit :type
                         (common-lisp:or monthly-limit common-lisp:null)
                         :accessor
                         %set-text-message-spend-limit-override-request-monthly-limit
                         :initform
                         (common-lisp:error ":monthly-limit is required"))))
 (common-lisp:export
  (common-lisp:list 'set-text-message-spend-limit-override-request
                    'make-set-text-message-spend-limit-override-request))
 (common-lisp:defun make-set-text-message-spend-limit-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-text-message-spend-limit-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-text-message-spend-limit-override-result
                       common-lisp:nil
                       ((monthly-limit :initarg :monthly-limit :type
                         (common-lisp:or monthly-limit common-lisp:null)
                         :accessor
                         %set-text-message-spend-limit-override-result-monthly-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-text-message-spend-limit-override-result
                    'make-set-text-message-spend-limit-override-result))
 (common-lisp:defun make-set-text-message-spend-limit-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-text-message-spend-limit-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-voice-message-spend-limit-override-request
                       common-lisp:nil
                       ((monthly-limit :initarg :monthly-limit :type
                         (common-lisp:or monthly-limit common-lisp:null)
                         :accessor
                         %set-voice-message-spend-limit-override-request-monthly-limit
                         :initform
                         (common-lisp:error ":monthly-limit is required"))))
 (common-lisp:export
  (common-lisp:list 'set-voice-message-spend-limit-override-request
                    'make-set-voice-message-spend-limit-override-request))
 (common-lisp:defun make-set-voice-message-spend-limit-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-voice-message-spend-limit-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-voice-message-spend-limit-override-result
                       common-lisp:nil
                       ((monthly-limit :initarg :monthly-limit :type
                         (common-lisp:or monthly-limit common-lisp:null)
                         :accessor
                         %set-voice-message-spend-limit-override-result-monthly-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-voice-message-spend-limit-override-result
                    'make-set-voice-message-spend-limit-override-result))
 (common-lisp:defun make-set-voice-message-spend-limit-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monthly-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-voice-message-spend-limit-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sns-destination common-lisp:nil
                       ((topic-arn :initarg :topic-arn :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor %sns-destination-topic-arn :initform
                         (common-lisp:error ":topic-arn is required"))))
 (common-lisp:export (common-lisp:list 'sns-destination 'make-sns-destination))
 (common-lisp:defun make-sns-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-arn)
   (common-lisp:apply #'common-lisp:make-instance 'sns-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-destination))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass spend-limit common-lisp:nil
                       ((overridden :initarg :overridden :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %spend-limit-overridden :initform
                         (common-lisp:error ":overridden is required"))
                        (max-limit :initarg :max-limit :type
                         (common-lisp:or primitive-long common-lisp:null)
                         :accessor %spend-limit-max-limit :initform
                         (common-lisp:error ":max-limit is required"))
                        (enforced-limit :initarg :enforced-limit :type
                         (common-lisp:or primitive-long common-lisp:null)
                         :accessor %spend-limit-enforced-limit :initform
                         (common-lisp:error ":enforced-limit is required"))
                        (name :initarg :name :type
                         (common-lisp:or spend-limit-name common-lisp:null)
                         :accessor %spend-limit-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'spend-limit 'make-spend-limit))
 (common-lisp:defun make-spend-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overridden max-limit enforced-limit name)
   (common-lisp:apply #'common-lisp:make-instance 'spend-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spend-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spend-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforced-limit))
      (common-lisp:list
       (common-lisp:cons "EnforcedLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-limit))
      (common-lisp:list
       (common-lisp:cons "MaxLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overridden))
      (common-lisp:list
       (common-lisp:cons "Overridden"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spend-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spend-limit-list ()
   '(trivial-types:proper-list spend-limit))
 (common-lisp:defun |make-spend-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list spend-limit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype spend-limit-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or non-empty-tag-list common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defun make-tag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype text-message-body () 'common-lisp:string)
(common-lisp:deftype text-message-origination-identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-to-live () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype two-way-channel-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defun make-untag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-destination-request common-lisp:nil
                       ((sns-destination :initarg :sns-destination :type
                         (common-lisp:or sns-destination common-lisp:null)
                         :accessor
                         %update-event-destination-request-sns-destination
                         :initform common-lisp:nil)
                        (kinesis-firehose-destination :initarg
                         :kinesis-firehose-destination :type
                         (common-lisp:or kinesis-firehose-destination
                                         common-lisp:null)
                         :accessor
                         %update-event-destination-request-kinesis-firehose-destination
                         :initform common-lisp:nil)
                        (cloud-watch-logs-destination :initarg
                         :cloud-watch-logs-destination :type
                         (common-lisp:or cloud-watch-logs-destination
                                         common-lisp:null)
                         :accessor
                         %update-event-destination-request-cloud-watch-logs-destination
                         :initform common-lisp:nil)
                        (matching-event-types :initarg :matching-event-types
                         :type
                         (common-lisp:or event-type-list common-lisp:null)
                         :accessor
                         %update-event-destination-request-matching-event-types
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-event-destination-request-enabled :initform
                         common-lisp:nil)
                        (event-destination-name :initarg
                         :event-destination-name :type
                         (common-lisp:or event-destination-name
                                         common-lisp:null)
                         :accessor
                         %update-event-destination-request-event-destination-name
                         :initform
                         (common-lisp:error
                          ":event-destination-name is required"))
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %update-event-destination-request-configuration-set-name
                         :initform
                         (common-lisp:error
                          ":configuration-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-event-destination-request
                    'make-update-event-destination-request))
 (common-lisp:defun make-update-event-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-destination
                     kinesis-firehose-destination cloud-watch-logs-destination
                     matching-event-types enabled event-destination-name
                     configuration-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-destination))
      (common-lisp:list
       (common-lisp:cons "SnsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-destination-result common-lisp:nil
                       ((event-destination :initarg :event-destination :type
                         (common-lisp:or event-destination common-lisp:null)
                         :accessor
                         %update-event-destination-result-event-destination
                         :initform common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         %update-event-destination-result-configuration-set-name
                         :initform common-lisp:nil)
                        (configuration-set-arn :initarg :configuration-set-arn
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-event-destination-result-configuration-set-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-event-destination-result
                    'make-update-event-destination-result))
 (common-lisp:defun make-update-event-destination-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-destination configuration-set-name
                     configuration-set-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-destination-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-phone-number-request common-lisp:nil
                       ((deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-phone-number-request-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %update-phone-number-request-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-phone-number-request-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor
                         %update-phone-number-request-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-phone-number-request-two-way-enabled :initform
                         common-lisp:nil)
                        (phone-number-id :initarg :phone-number-id :type
                         (common-lisp:or phone-number-id-or-arn
                                         common-lisp:null)
                         :accessor %update-phone-number-request-phone-number-id
                         :initform
                         (common-lisp:error ":phone-number-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-phone-number-request
                    'make-update-phone-number-request))
 (common-lisp:defun make-update-phone-number-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-protection-enabled
                     opt-out-list-name self-managed-opt-outs-enabled
                     two-way-channel-arn two-way-enabled phone-number-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-phone-number-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-phone-number-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-phone-number-result-created-timestamp
                         :initform common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %update-phone-number-result-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor
                         %update-phone-number-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %update-phone-number-result-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor
                         %update-phone-number-result-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %update-phone-number-result-two-way-enabled
                         :initform common-lisp:nil)
                        (monthly-leasing-price :initarg :monthly-leasing-price
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-phone-number-result-monthly-leasing-price
                         :initform common-lisp:nil)
                        (number-type :initarg :number-type :type
                         (common-lisp:or number-type common-lisp:null)
                         :accessor %update-phone-number-result-number-type
                         :initform common-lisp:nil)
                        (number-capabilities :initarg :number-capabilities
                         :type
                         (common-lisp:or number-capability-list
                                         common-lisp:null)
                         :accessor
                         %update-phone-number-result-number-capabilities
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %update-phone-number-result-message-type
                         :initform common-lisp:nil)
                        (iso-country-code :initarg :iso-country-code :type
                         (common-lisp:or iso-country-code common-lisp:null)
                         :accessor %update-phone-number-result-iso-country-code
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or number-status common-lisp:null)
                         :accessor %update-phone-number-result-status :initform
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor %update-phone-number-result-phone-number
                         :initform common-lisp:nil)
                        (phone-number-id :initarg :phone-number-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-phone-number-result-phone-number-id :initform
                         common-lisp:nil)
                        (phone-number-arn :initarg :phone-number-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-phone-number-result-phone-number-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-phone-number-result
                    'make-update-phone-number-result))
 (common-lisp:defun make-update-phone-number-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp
                     deletion-protection-enabled opt-out-list-name
                     self-managed-opt-outs-enabled two-way-channel-arn
                     two-way-enabled monthly-leasing-price number-type
                     number-capabilities message-type iso-country-code status
                     phone-number phone-number-id phone-number-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-phone-number-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pool-request common-lisp:nil
                       ((deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-pool-request-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (shared-routes-enabled :initarg :shared-routes-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %update-pool-request-shared-routes-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name-or-arn
                                         common-lisp:null)
                         :accessor %update-pool-request-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-pool-request-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor %update-pool-request-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-pool-request-two-way-enabled :initform
                         common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or pool-id-or-arn common-lisp:null)
                         :accessor %update-pool-request-pool-id :initform
                         (common-lisp:error ":pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-pool-request 'make-update-pool-request))
 (common-lisp:defun make-update-pool-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-protection-enabled
                     shared-routes-enabled opt-out-list-name
                     self-managed-opt-outs-enabled two-way-channel-arn
                     two-way-enabled pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pool-result common-lisp:nil
                       ((created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-pool-result-created-timestamp :initform
                         common-lisp:nil)
                        (deletion-protection-enabled :initarg
                         :deletion-protection-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %update-pool-result-deletion-protection-enabled
                         :initform common-lisp:nil)
                        (shared-routes-enabled :initarg :shared-routes-enabled
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %update-pool-result-shared-routes-enabled
                         :initform common-lisp:nil)
                        (opt-out-list-name :initarg :opt-out-list-name :type
                         (common-lisp:or opt-out-list-name common-lisp:null)
                         :accessor %update-pool-result-opt-out-list-name
                         :initform common-lisp:nil)
                        (self-managed-opt-outs-enabled :initarg
                         :self-managed-opt-outs-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         %update-pool-result-self-managed-opt-outs-enabled
                         :initform common-lisp:nil)
                        (two-way-channel-arn :initarg :two-way-channel-arn
                         :type
                         (common-lisp:or two-way-channel-arn common-lisp:null)
                         :accessor %update-pool-result-two-way-channel-arn
                         :initform common-lisp:nil)
                        (two-way-enabled :initarg :two-way-enabled :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor %update-pool-result-two-way-enabled
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %update-pool-result-message-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or pool-status common-lisp:null)
                         :accessor %update-pool-result-status :initform
                         common-lisp:nil)
                        (pool-id :initarg :pool-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-pool-result-pool-id :initform common-lisp:nil)
                        (pool-arn :initarg :pool-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-pool-result-pool-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pool-result 'make-update-pool-result))
 (common-lisp:defun make-update-pool-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-timestamp
                     deletion-protection-enabled shared-routes-enabled
                     opt-out-list-name self-managed-opt-outs-enabled
                     two-way-channel-arn two-way-enabled message-type status
                     pool-id pool-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:deftype voice-message-body () 'common-lisp:string)
(common-lisp:deftype voice-message-body-text-type () 'common-lisp:string)
(common-lisp:deftype voice-message-origination-identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-origination-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id origination-identity
                     iso-country-code client-token)
   (common-lisp:declare
    (common-lisp:ignorable pool-id origination-identity iso-country-code
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-origination-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "AssociateOriginationIdentity" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-origination-identity))
(common-lisp:progn
 (common-lisp:defun create-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configuration-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "CreateConfigurationSet" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configuration-set))
(common-lisp:progn
 (common-lisp:defun create-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name matching-event-types
                     cloud-watch-logs-destination kinesis-firehose-destination
                     sns-destination client-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name
     matching-event-types cloud-watch-logs-destination
     kinesis-firehose-destination sns-destination client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-event-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "CreateEventDestination" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-event-destination))
(common-lisp:progn
 (common-lisp:defun create-opt-out-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-opt-out-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "CreateOptOutList" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-opt-out-list))
(common-lisp:progn
 (common-lisp:defun create-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity iso-country-code
                     message-type deletion-protection-enabled tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable origination-identity iso-country-code message-type
     deletion-protection-enabled tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "CreatePool" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pool))
(common-lisp:progn
 (common-lisp:defun delete-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configuration-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteConfigurationSet" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configuration-set))
(common-lisp:progn
 (common-lisp:defun delete-default-message-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-default-message-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteDefaultMessageType" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-default-message-type))
(common-lisp:progn
 (common-lisp:defun delete-default-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-default-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteDefaultSenderId" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-default-sender-id))
(common-lisp:progn
 (common-lisp:defun delete-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteEventDestination" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-destination))
(common-lisp:progn
 (common-lisp:defun delete-keyword
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity keyword)
   (common-lisp:declare (common-lisp:ignorable origination-identity keyword))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-keyword-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteKeyword" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-keyword))
(common-lisp:progn
 (common-lisp:defun delete-opt-out-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name)
   (common-lisp:declare (common-lisp:ignorable opt-out-list-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-opt-out-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteOptOutList" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-opt-out-list))
(common-lisp:progn
 (common-lisp:defun delete-opted-out-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name opted-out-number)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name opted-out-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-opted-out-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeleteOptedOutNumber" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-opted-out-number))
(common-lisp:progn
 (common-lisp:defun delete-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id)
   (common-lisp:declare (common-lisp:ignorable pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DeletePool" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pool))
(common-lisp:progn
 (common-lisp:defun delete-text-message-spend-limit-override ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'pinpoint-sms-voice-v2-request :method "POST"
                                :path "/" :protocol :json :operation
                                "DeleteTextMessageSpendLimitOverride" :params
                                `(("Action"
                                   ,@"DeleteTextMessageSpendLimitOverride")
                                  ("Version" ,@"2022-03-31"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-text-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun delete-voice-message-spend-limit-override ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'pinpoint-sms-voice-v2-request :method "POST"
                                :path "/" :protocol :json :operation
                                "DeleteVoiceMessageSpendLimitOverride" :params
                                `(("Action"
                                   ,@"DeleteVoiceMessageSpendLimitOverride")
                                  ("Version" ,@"2022-03-31"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-voice-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeAccountAttributes" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeAccountLimits" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-configuration-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-names filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-names filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeConfigurationSets" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-configuration-sets))
(common-lisp:progn
 (common-lisp:defun describe-keywords
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity keywords filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable origination-identity keywords filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-keywords-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeKeywords" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-keywords))
(common-lisp:progn
 (common-lisp:defun describe-opt-out-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-names next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-names next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-opt-out-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeOptOutLists" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-opt-out-lists))
(common-lisp:progn
 (common-lisp:defun describe-opted-out-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name opted-out-numbers
                     filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name opted-out-numbers filters
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-opted-out-numbers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeOptedOutNumbers" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-opted-out-numbers))
(common-lisp:progn
 (common-lisp:defun describe-phone-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-ids filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable phone-number-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-phone-numbers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribePhoneNumbers" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-phone-numbers))
(common-lisp:progn
 (common-lisp:defun describe-pools
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-ids filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable pool-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pools-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribePools" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pools))
(common-lisp:progn
 (common-lisp:defun describe-sender-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sender-ids filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable sender-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-sender-ids-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeSenderIds" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-sender-ids))
(common-lisp:progn
 (common-lisp:defun describe-spend-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-spend-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DescribeSpendLimits" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-spend-limits))
(common-lisp:progn
 (common-lisp:defun disassociate-origination-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id origination-identity
                     iso-country-code client-token)
   (common-lisp:declare
    (common-lisp:ignorable pool-id origination-identity iso-country-code
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-origination-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "DisassociateOriginationIdentity" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-origination-identity))
(common-lisp:progn
 (common-lisp:defun list-pool-origination-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable pool-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-pool-origination-identities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "ListPoolOriginationIdentities" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pool-origination-identities))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "ListTagsForResource" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-keyword
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity keyword
                     keyword-message keyword-action)
   (common-lisp:declare
    (common-lisp:ignorable origination-identity keyword keyword-message
     keyword-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-keyword-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "PutKeyword" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-keyword))
(common-lisp:progn
 (common-lisp:defun put-opted-out-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name opted-out-number)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name opted-out-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-opted-out-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "PutOptedOutNumber" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-opted-out-number))
(common-lisp:progn
 (common-lisp:defun release-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id)
   (common-lisp:declare (common-lisp:ignorable phone-number-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "ReleasePhoneNumber" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'release-phone-number))
(common-lisp:progn
 (common-lisp:defun request-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iso-country-code message-type
                     number-capabilities number-type opt-out-list-name pool-id
                     registration-id deletion-protection-enabled tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable iso-country-code message-type number-capabilities
     number-type opt-out-list-name pool-id registration-id
     deletion-protection-enabled tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "RequestPhoneNumber" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-phone-number))
(common-lisp:progn
 (common-lisp:defun send-text-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-phone-number
                     origination-identity message-body message-type keyword
                     configuration-set-name max-price time-to-live context
                     destination-country-parameters dry-run)
   (common-lisp:declare
    (common-lisp:ignorable destination-phone-number origination-identity
     message-body message-type keyword configuration-set-name max-price
     time-to-live context destination-country-parameters dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-text-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "SendTextMessage" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-text-message))
(common-lisp:progn
 (common-lisp:defun send-voice-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-phone-number
                     origination-identity message-body message-body-text-type
                     voice-id configuration-set-name max-price-per-minute
                     time-to-live context dry-run)
   (common-lisp:declare
    (common-lisp:ignorable destination-phone-number origination-identity
     message-body message-body-text-type voice-id configuration-set-name
     max-price-per-minute time-to-live context dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-voice-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "SendVoiceMessage" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-voice-message))
(common-lisp:progn
 (common-lisp:defun set-default-message-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name message-type)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name message-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-default-message-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "SetDefaultMessageType" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-message-type))
(common-lisp:progn
 (common-lisp:defun set-default-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name sender-id)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name sender-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-default-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "SetDefaultSenderId" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-sender-id))
(common-lisp:progn
 (common-lisp:defun set-text-message-spend-limit-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monthly-limit)
   (common-lisp:declare (common-lisp:ignorable monthly-limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-text-message-spend-limit-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "SetTextMessageSpendLimitOverride" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-text-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun set-voice-message-spend-limit-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monthly-limit)
   (common-lisp:declare (common-lisp:ignorable monthly-limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-voice-message-spend-limit-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "SetVoiceMessageSpendLimitOverride" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-voice-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "TagResource" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "UntagResource" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name enabled matching-event-types
                     cloud-watch-logs-destination kinesis-firehose-destination
                     sns-destination)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name
     enabled matching-event-types cloud-watch-logs-destination
     kinesis-firehose-destination sns-destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-event-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "UpdateEventDestination" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-destination))
(common-lisp:progn
 (common-lisp:defun update-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id two-way-enabled
                     two-way-channel-arn self-managed-opt-outs-enabled
                     opt-out-list-name deletion-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable phone-number-id two-way-enabled two-way-channel-arn
     self-managed-opt-outs-enabled opt-out-list-name
     deletion-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "UpdatePhoneNumber" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-phone-number))
(common-lisp:progn
 (common-lisp:defun update-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id two-way-enabled
                     two-way-channel-arn self-managed-opt-outs-enabled
                     opt-out-list-name shared-routes-enabled
                     deletion-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable pool-id two-way-enabled two-way-channel-arn
     self-managed-opt-outs-enabled opt-out-list-name shared-routes-enabled
     deletion-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" :json "/" "UpdatePool" "2022-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pool))
