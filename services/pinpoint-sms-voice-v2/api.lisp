;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pinpoint-sms-voice-v2/api
  (:use)
  (:nicknames #:aws/pinpoint-sms-voice-v2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pinpoint-sms-voice-v2/api)
(common-lisp:progn
 (common-lisp:define-condition pinpoint-sms-voice-v2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pinpoint-sms-voice-v2-error))
(common-lisp:progn
 (common-lisp:defclass pinpoint-sms-voice-v2-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "pinpoint-sms-voice-v2"
                        :api-version "2022-03-31" :host-prefix "sms-voice"
                        :signing-name "sms-voice" :global-host common-lisp:nil
                        :target-prefix "PinpointSMSVoiceV2" :json-version
                        "1.0"))
 (common-lisp:export 'pinpoint-sms-voice-v2-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       access-denied-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-reason)))
(common-lisp:deftype access-denied-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-attribute-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or account-attribute-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-attribute 'make-account-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-attribute-list ()
   '(trivial-types:proper-list account-attribute))
 (common-lisp:defun make-account-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-limit-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or account-limit-name common-lisp:null))
   (used (common-lisp:error ":used is required") :type
    (common-lisp:or primitive-long common-lisp:null))
   (max (common-lisp:error ":max is required") :type
    (common-lisp:or primitive-long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-limit 'make-account-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used))
      (common-lisp:list
       (common-lisp:cons "Used"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-limit-list ()
   '(trivial-types:proper-list account-limit))
 (common-lisp:defun make-account-limit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-limit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-limit-name () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-origination-identity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-origination-identity-request-"))
   (pool-id (common-lisp:error ":pool-id is required") :type
    (common-lisp:or pool-id-or-arn common-lisp:null))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or phone-or-sender-id-or-arn common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-origination-identity-request
                    'make-associate-origination-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-origination-identity-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-origination-identity-result-"))
   (pool-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (origination-identity-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-origination-identity-result
                    'make-associate-origination-identity-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-origination-identity-result))
   common-lisp:nil))
(common-lisp:deftype attachment-body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype attachment-status () 'common-lisp:string)
(common-lisp:deftype attachment-upload-error-reason () 'common-lisp:string)
(common-lisp:deftype attachment-url () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logs-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logs-destination-"))
   (iam-role-arn (common-lisp:error ":iam-role-arn is required") :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (log-group-arn (common-lisp:error ":log-group-arn is required") :type
    (common-lisp:or log-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-destination
                    'make-cloud-watch-logs-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-set-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-set-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or configuration-set-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-set-filter 'make-configuration-set-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-set-filter-list ()
   '(trivial-types:proper-list configuration-set-filter))
 (common-lisp:defun make-configuration-set-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-set-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-set-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-set-information-"))
   (configuration-set-arn
    (common-lisp:error ":configuration-set-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (event-destinations (common-lisp:error ":event-destinations is required")
    :type (common-lisp:or event-destination-list common-lisp:null))
   (default-message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (default-sender-id common-lisp:nil :type
    (common-lisp:or sender-id common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-set-information
                    'make-configuration-set-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destinations))
      (common-lisp:list
       (common-lisp:cons "EventDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-message-type))
      (common-lisp:list
       (common-lisp:cons "DefaultMessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-sender-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-set-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-set-information-list ()
   '(trivial-types:proper-list configuration-set-information))
 (common-lisp:defun make-configuration-set-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-set-name-list ()
   '(trivial-types:proper-list configuration-set-name-or-arn))
 (common-lisp:defun make-configuration-set-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-name-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-set-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-reason
                    'conflict-exception-resource-type
                    'conflict-exception-resource-id)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:deftype context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-context-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-configuration-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configuration-set-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-request
                    'make-create-configuration-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configuration-set-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configuration-set-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-result
                    'make-create-configuration-set-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-destination-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (event-destination-name
    (common-lisp:error ":event-destination-name is required") :type
    (common-lisp:or event-destination-name common-lisp:null))
   (matching-event-types
    (common-lisp:error ":matching-event-types is required") :type
    (common-lisp:or event-type-list common-lisp:null))
   (cloud-watch-logs-destination common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination common-lisp:null))
   (kinesis-firehose-destination common-lisp:nil :type
    (common-lisp:or kinesis-firehose-destination common-lisp:null))
   (sns-destination common-lisp:nil :type
    (common-lisp:or sns-destination common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-destination-request
                    'make-create-event-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-destination))
      (common-lisp:list
       (common-lisp:cons "SnsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-destination-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-destination-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (event-destination common-lisp:nil :type
    (common-lisp:or event-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-destination-result
                    'make-create-event-destination-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-destination-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-opt-out-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-opt-out-list-request-"))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-opt-out-list-request
                    'make-create-opt-out-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-opt-out-list-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-opt-out-list-result-"))
   (opt-out-list-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-opt-out-list-result
                    'make-create-opt-out-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-opt-out-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pool-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pool-request-"))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or phone-or-sender-id-or-arn common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-type (common-lisp:error ":message-type is required") :type
    (common-lisp:or message-type common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pool-request 'make-create-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pool-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pool-result-"))
   (pool-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or pool-status common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (shared-routes-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pool-result 'make-create-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-association-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-association-request
                    'make-create-registration-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-association-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or string common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-association-result
                    'make-create-registration-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-attachment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-attachment-request-"))
   (attachment-body common-lisp:nil :type
    (common-lisp:or attachment-body common-lisp:null))
   (attachment-url common-lisp:nil :type
    (common-lisp:or attachment-url common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-attachment-request
                    'make-create-registration-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-body))
      (common-lisp:list
       (common-lisp:cons "AttachmentBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-url))
      (common-lisp:list
       (common-lisp:cons "AttachmentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-attachment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-attachment-result-"))
   (registration-attachment-arn
    (common-lisp:error ":registration-attachment-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-attachment-id
    (common-lisp:error ":registration-attachment-id is required") :type
    (common-lisp:or string common-lisp:null))
   (attachment-status (common-lisp:error ":attachment-status is required")
    :type (common-lisp:or attachment-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-attachment-result
                    'make-create-registration-attachment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-attachment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-attachment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-status))
      (common-lisp:list
       (common-lisp:cons "AttachmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-attachment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-request-"))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-request
                    'make-create-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (registration-status (common-lisp:error ":registration-status is required")
    :type (common-lisp:or registration-status common-lisp:null))
   (current-version-number
    (common-lisp:error ":current-version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-result
                    'make-create-registration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-version-number))
      (common-lisp:list
       (common-lisp:cons "CurrentVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-version-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-version-request
                    'make-create-registration-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registration-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registration-version-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (registration-version-status
    (common-lisp:error ":registration-version-status is required") :type
    (common-lisp:or registration-version-status common-lisp:null))
   (registration-version-status-history
    (common-lisp:error ":registration-version-status-history is required")
    :type
    (common-lisp:or registration-version-status-history common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registration-version-result
                    'make-create-registration-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status-history))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatusHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registration-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-verified-destination-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-verified-destination-number-request-"))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-verified-destination-number-request
                    'make-create-verified-destination-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-verified-destination-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-verified-destination-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-verified-destination-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-verified-destination-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-verified-destination-number-result-"))
   (verified-destination-number-arn
    (common-lisp:error ":verified-destination-number-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or string common-lisp:null))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or verification-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-verified-destination-number-result
                    'make-create-verified-destination-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-verified-destination-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-verified-destination-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-arn))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-verified-destination-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configuration-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configuration-set-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-request
                    'make-delete-configuration-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configuration-set-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configuration-set-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (event-destinations common-lisp:nil :type
    (common-lisp:or event-destination-list common-lisp:null))
   (default-message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (default-sender-id common-lisp:nil :type
    (common-lisp:or sender-id common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-result
                    'make-delete-configuration-set-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destinations))
      (common-lisp:list
       (common-lisp:cons "EventDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-message-type))
      (common-lisp:list
       (common-lisp:cons "DefaultMessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-sender-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-default-message-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-default-message-type-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-default-message-type-request
                    'make-delete-default-message-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-default-message-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-default-message-type-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-default-message-type-result
                    'make-delete-default-message-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-message-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-default-sender-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-default-sender-id-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-default-sender-id-request
                    'make-delete-default-sender-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-default-sender-id-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-default-sender-id-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or sender-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-default-sender-id-result
                    'make-delete-default-sender-id-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-default-sender-id-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-destination-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (event-destination-name
    (common-lisp:error ":event-destination-name is required") :type
    (common-lisp:or event-destination-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-destination-request
                    'make-delete-event-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-destination-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-destination-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (event-destination common-lisp:nil :type
    (common-lisp:or event-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-destination-result
                    'make-delete-event-destination-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-destination-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-keyword-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-keyword-request-"))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or phone-or-pool-id-or-arn common-lisp:null))
   (keyword (common-lisp:error ":keyword is required") :type
    (common-lisp:or keyword common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-keyword-request 'make-delete-keyword-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-keyword-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-keyword-result-"))
   (origination-identity-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (keyword common-lisp:nil :type (common-lisp:or keyword common-lisp:null))
   (keyword-message common-lisp:nil :type
    (common-lisp:or keyword-message common-lisp:null))
   (keyword-action common-lisp:nil :type
    (common-lisp:or keyword-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-keyword-result 'make-delete-keyword-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-keyword-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-opt-out-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-opt-out-list-request-"))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-opt-out-list-request
                    'make-delete-opt-out-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-opt-out-list-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-opt-out-list-result-"))
   (opt-out-list-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-opt-out-list-result
                    'make-delete-opt-out-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opt-out-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-opted-out-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-opted-out-number-request-"))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name-or-arn common-lisp:null))
   (opted-out-number (common-lisp:error ":opted-out-number is required") :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-opted-out-number-request
                    'make-delete-opted-out-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-opted-out-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-opted-out-number-result-"))
   (opt-out-list-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (opted-out-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (opted-out-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-user-opted-out common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-opted-out-number-result
                    'make-delete-opted-out-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-timestamp))
      (common-lisp:list
       (common-lisp:cons "OptedOutTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-user-opted-out))
      (common-lisp:list
       (common-lisp:cons "EndUserOptedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-opted-out-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pool-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pool-request-"))
   (pool-id (common-lisp:error ":pool-id is required") :type
    (common-lisp:or pool-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pool-request 'make-delete-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pool-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pool-result-"))
   (pool-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or pool-status common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (shared-routes-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pool-result 'make-delete-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-attachment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-attachment-request-"))
   (registration-attachment-id
    (common-lisp:error ":registration-attachment-id is required") :type
    (common-lisp:or registration-attachment-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-attachment-request
                    'make-delete-registration-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-attachment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-attachment-result-"))
   (registration-attachment-arn
    (common-lisp:error ":registration-attachment-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-attachment-id
    (common-lisp:error ":registration-attachment-id is required") :type
    (common-lisp:or string common-lisp:null))
   (attachment-status (common-lisp:error ":attachment-status is required")
    :type (common-lisp:or attachment-status common-lisp:null))
   (attachment-upload-error-reason common-lisp:nil :type
    (common-lisp:or attachment-upload-error-reason common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-attachment-result
                    'make-delete-registration-attachment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-attachment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-attachment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-status))
      (common-lisp:list
       (common-lisp:cons "AttachmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-upload-error-reason))
      (common-lisp:list
       (common-lisp:cons "AttachmentUploadErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-attachment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-field-value-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-field-value-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (field-path (common-lisp:error ":field-path is required") :type
    (common-lisp:or field-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-field-value-request
                    'make-delete-registration-field-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-field-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-field-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-path))
      (common-lisp:list
       (common-lisp:cons "FieldPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-field-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-field-value-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-field-value-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (field-path (common-lisp:error ":field-path is required") :type
    (common-lisp:or field-path common-lisp:null))
   (select-choices common-lisp:nil :type
    (common-lisp:or select-choice-list common-lisp:null))
   (text-value common-lisp:nil :type
    (common-lisp:or text-value common-lisp:null))
   (registration-attachment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-field-value-result
                    'make-delete-registration-field-value-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-field-value-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-field-value-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-path))
      (common-lisp:list
       (common-lisp:cons "FieldPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-choices))
      (common-lisp:list
       (common-lisp:cons "SelectChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-value))
      (common-lisp:list
       (common-lisp:cons "TextValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-field-value-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-request
                    'make-delete-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (registration-status (common-lisp:error ":registration-status is required")
    :type (common-lisp:or registration-status common-lisp:null))
   (current-version-number
    (common-lisp:error ":current-version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (approved-version-number common-lisp:nil :type
    (common-lisp:or registration-version-number common-lisp:null))
   (latest-denied-version-number common-lisp:nil :type
    (common-lisp:or registration-version-number common-lisp:null))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-result
                    'make-delete-registration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-version-number))
      (common-lisp:list
       (common-lisp:cons "CurrentVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-version-number))
      (common-lisp:list
       (common-lisp:cons "ApprovedVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-denied-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestDeniedVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-text-message-spend-limit-override-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-text-message-spend-limit-override-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-text-message-spend-limit-override-request
                    'make-delete-text-message-spend-limit-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-text-message-spend-limit-override-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-text-message-spend-limit-override-result-"))
   (monthly-limit common-lisp:nil :type
    (common-lisp:or monthly-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-text-message-spend-limit-override-result
                    'make-delete-text-message-spend-limit-override-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-text-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-verified-destination-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-verified-destination-number-request-"))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or verified-destination-number-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-verified-destination-number-request
                    'make-delete-verified-destination-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-destination-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-destination-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-destination-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-verified-destination-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-verified-destination-number-result-"))
   (verified-destination-number-arn
    (common-lisp:error ":verified-destination-number-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or string common-lisp:null))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-verified-destination-number-result
                    'make-delete-verified-destination-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-destination-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-destination-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-arn))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-destination-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-voice-message-spend-limit-override-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-voice-message-spend-limit-override-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-voice-message-spend-limit-override-request
                    'make-delete-voice-message-spend-limit-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-voice-message-spend-limit-override-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-voice-message-spend-limit-override-result-"))
   (monthly-limit common-lisp:nil :type
    (common-lisp:or monthly-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-voice-message-spend-limit-override-result
                    'make-delete-voice-message-spend-limit-override-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:deftype delivery-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-attributes-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-request
                    'make-describe-account-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-attributes-result-"))
   (account-attributes common-lisp:nil :type
    (common-lisp:or account-attribute-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-result
                    'make-describe-account-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-attributes))
      (common-lisp:list
       (common-lisp:cons "AccountAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-request
                    'make-describe-account-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-result-"))
   (account-limits common-lisp:nil :type
    (common-lisp:or account-limit-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-result
                    'make-describe-account-limits-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-limits))
      (common-lisp:list
       (common-lisp:cons "AccountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-configuration-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-configuration-sets-request-"))
   (configuration-set-names common-lisp:nil :type
    (common-lisp:or configuration-set-name-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or configuration-set-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-sets-request
                    'make-describe-configuration-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-names))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-configuration-sets-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-configuration-sets-result-"))
   (configuration-sets common-lisp:nil :type
    (common-lisp:or configuration-set-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-sets-result
                    'make-describe-configuration-sets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-sets))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-sets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-keywords-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-keywords-request-"))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or phone-or-pool-id-or-arn common-lisp:null))
   (keywords common-lisp:nil :type
    (common-lisp:or keyword-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or keyword-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-keywords-request
                    'make-describe-keywords-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-keywords-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-keywords-result-"))
   (origination-identity-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (keywords common-lisp:nil :type
    (common-lisp:or keyword-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-keywords-result 'make-describe-keywords-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-keywords-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-opt-out-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-opt-out-lists-request-"))
   (opt-out-list-names common-lisp:nil :type
    (common-lisp:or opt-out-list-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-opt-out-lists-request
                    'make-describe-opt-out-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-names))
      (common-lisp:list
       (common-lisp:cons "OptOutListNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-opt-out-lists-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-opt-out-lists-result-"))
   (opt-out-lists common-lisp:nil :type
    (common-lisp:or opt-out-list-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-opt-out-lists-result
                    'make-describe-opt-out-lists-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-lists))
      (common-lisp:list
       (common-lisp:cons "OptOutLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opt-out-lists-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-opted-out-numbers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-opted-out-numbers-request-"))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name-or-arn common-lisp:null))
   (opted-out-numbers common-lisp:nil :type
    (common-lisp:or opted-out-number-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or opted-out-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-opted-out-numbers-request
                    'make-describe-opted-out-numbers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-numbers))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-opted-out-numbers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-opted-out-numbers-result-"))
   (opt-out-list-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (opted-out-numbers common-lisp:nil :type
    (common-lisp:or opted-out-number-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-opted-out-numbers-result
                    'make-describe-opted-out-numbers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-numbers))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-opted-out-numbers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-phone-numbers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-phone-numbers-request-"))
   (phone-number-ids common-lisp:nil :type
    (common-lisp:or phone-number-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or phone-number-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-phone-numbers-request
                    'make-describe-phone-numbers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-ids))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-phone-numbers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-phone-numbers-result-"))
   (phone-numbers common-lisp:nil :type
    (common-lisp:or phone-number-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-phone-numbers-result
                    'make-describe-phone-numbers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-numbers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pools-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pools-request-"))
   (pool-ids common-lisp:nil :type
    (common-lisp:or pool-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or pool-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pools-request 'make-describe-pools-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-ids))
      (common-lisp:list
       (common-lisp:cons "PoolIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pools-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pools-result-"))
   (pools common-lisp:nil :type
    (common-lisp:or pool-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pools-result 'make-describe-pools-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pools))
      (common-lisp:list
       (common-lisp:cons "Pools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pools-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-attachments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registration-attachments-request-"))
   (registration-attachment-ids common-lisp:nil :type
    (common-lisp:or registration-attachment-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or registration-attachment-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-attachments-request
                    'make-describe-registration-attachments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-attachments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-attachments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-ids))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-attachments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-attachments-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registration-attachments-result-"))
   (registration-attachments
    (common-lisp:error ":registration-attachments is required") :type
    (common-lisp:or registration-attachments-information-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-attachments-result
                    'make-describe-registration-attachments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-attachments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-attachments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachments))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-attachments-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-field-definitions-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-registration-field-definitions-request-"))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (section-path common-lisp:nil :type
    (common-lisp:or section-path common-lisp:null))
   (field-paths common-lisp:nil :type
    (common-lisp:or field-path-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-field-definitions-request
                    'make-describe-registration-field-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-path))
      (common-lisp:list
       (common-lisp:cons "SectionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-paths))
      (common-lisp:list
       (common-lisp:cons "FieldPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-field-definitions-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-registration-field-definitions-result-"))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (registration-field-definitions
    (common-lisp:error ":registration-field-definitions is required") :type
    (common-lisp:or registration-field-definition-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-field-definitions-result
                    'make-describe-registration-field-definitions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-definitions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-definitions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-field-definitions))
      (common-lisp:list
       (common-lisp:cons "RegistrationFieldDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-definitions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-field-values-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registration-field-values-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or registration-version-number common-lisp:null))
   (section-path common-lisp:nil :type
    (common-lisp:or section-path common-lisp:null))
   (field-paths common-lisp:nil :type
    (common-lisp:or field-path-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-field-values-request
                    'make-describe-registration-field-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-values-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-path))
      (common-lisp:list
       (common-lisp:cons "SectionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-paths))
      (common-lisp:list
       (common-lisp:cons "FieldPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-field-values-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registration-field-values-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (registration-field-values
    (common-lisp:error ":registration-field-values is required") :type
    (common-lisp:or registration-field-value-information-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-field-values-result
                    'make-describe-registration-field-values-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-values-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-values-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-field-values))
      (common-lisp:list
       (common-lisp:cons "RegistrationFieldValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-field-values-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-section-definitions-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-registration-section-definitions-request-"))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (section-paths common-lisp:nil :type
    (common-lisp:or section-path-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-section-definitions-request
                    'make-describe-registration-section-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-section-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-section-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-paths))
      (common-lisp:list
       (common-lisp:cons "SectionPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-section-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-section-definitions-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-registration-section-definitions-result-"))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (registration-section-definitions
    (common-lisp:error ":registration-section-definitions is required") :type
    (common-lisp:or registration-section-definition-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-section-definitions-result
                    'make-describe-registration-section-definitions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-section-definitions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-section-definitions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-section-definitions))
      (common-lisp:list
       (common-lisp:cons "RegistrationSectionDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-section-definitions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-type-definitions-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-registration-type-definitions-request-"))
   (registration-types common-lisp:nil :type
    (common-lisp:or registration-type-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or registration-type-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-type-definitions-request
                    'make-describe-registration-type-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-type-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-type-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-types))
      (common-lisp:list
       (common-lisp:cons "RegistrationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-type-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-type-definitions-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-registration-type-definitions-result-"))
   (registration-type-definitions
    (common-lisp:error ":registration-type-definitions is required") :type
    (common-lisp:or registration-type-definition-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-type-definitions-result
                    'make-describe-registration-type-definitions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-type-definitions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-type-definitions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-type-definitions))
      (common-lisp:list
       (common-lisp:cons "RegistrationTypeDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-type-definitions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registration-versions-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (version-numbers common-lisp:nil :type
    (common-lisp:or registration-version-number-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or registration-version-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-versions-request
                    'make-describe-registration-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-numbers))
      (common-lisp:list
       (common-lisp:cons "VersionNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registration-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registration-versions-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-versions
    (common-lisp:error ":registration-versions is required") :type
    (common-lisp:or registration-version-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registration-versions-result
                    'make-describe-registration-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-versions))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registration-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registrations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registrations-request-"))
   (registration-ids common-lisp:nil :type
    (common-lisp:or registration-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or registration-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registrations-request
                    'make-describe-registrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registrations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-ids))
      (common-lisp:list
       (common-lisp:cons "RegistrationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-registrations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-registrations-result-"))
   (registrations (common-lisp:error ":registrations is required") :type
    (common-lisp:or registration-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-registrations-result
                    'make-describe-registrations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registrations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registrations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrations))
      (common-lisp:list
       (common-lisp:cons "Registrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registrations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-sender-ids-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-sender-ids-request-"))
   (sender-ids common-lisp:nil :type
    (common-lisp:or sender-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or sender-id-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-sender-ids-request
                    'make-describe-sender-ids-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ids))
      (common-lisp:list
       (common-lisp:cons "SenderIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-sender-ids-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-sender-ids-result-"))
   (sender-ids common-lisp:nil :type
    (common-lisp:or sender-id-information-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-sender-ids-result
                    'make-describe-sender-ids-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ids))
      (common-lisp:list
       (common-lisp:cons "SenderIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sender-ids-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spend-limits-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spend-limits-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spend-limits-request
                    'make-describe-spend-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spend-limits-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spend-limits-result-"))
   (spend-limits common-lisp:nil :type
    (common-lisp:or spend-limit-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spend-limits-result
                    'make-describe-spend-limits-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spend-limits))
      (common-lisp:list
       (common-lisp:cons "SpendLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spend-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-verified-destination-numbers-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-verified-destination-numbers-request-"))
   (verified-destination-number-ids common-lisp:nil :type
    (common-lisp:or verified-destination-number-id-list common-lisp:null))
   (destination-phone-numbers common-lisp:nil :type
    (common-lisp:or destination-phone-number-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or verified-destination-number-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-verified-destination-numbers-request
                    'make-describe-verified-destination-numbers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-verified-destination-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-verified-destination-numbers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-ids))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-numbers))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-verified-destination-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-verified-destination-numbers-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-verified-destination-numbers-result-"))
   (verified-destination-numbers
    (common-lisp:error ":verified-destination-numbers is required") :type
    (common-lisp:or verified-destination-number-information-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-verified-destination-numbers-result
                    'make-describe-verified-destination-numbers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-verified-destination-numbers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-verified-destination-numbers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-numbers))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-verified-destination-numbers-result))
   common-lisp:nil))
(common-lisp:deftype destination-country-parameter-key () 'common-lisp:string)
(common-lisp:deftype destination-country-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destination-country-parameters ()
   'common-lisp:hash-table)
 (common-lisp:defun make-destination-country-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype destination-phone-number-list ()
   '(trivial-types:proper-list phone-number))
 (common-lisp:defun make-destination-phone-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-origination-identity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-origination-identity-request-"))
   (pool-id (common-lisp:error ":pool-id is required") :type
    (common-lisp:or pool-id-or-arn common-lisp:null))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or phone-or-sender-id-or-arn common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-origination-identity-request
                    'make-disassociate-origination-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-origination-identity-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-origination-identity-result-"))
   (pool-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (origination-identity-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-origination-identity-result
                    'make-disassociate-origination-identity-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-origination-identity-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discard-registration-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-discard-registration-version-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discard-registration-version-request
                    'make-discard-registration-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discard-registration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discard-registration-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discard-registration-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discard-registration-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-discard-registration-version-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (registration-version-status
    (common-lisp:error ":registration-version-status is required") :type
    (common-lisp:or registration-version-status common-lisp:null))
   (registration-version-status-history
    (common-lisp:error ":registration-version-status-history is required")
    :type
    (common-lisp:or registration-version-status-history common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discard-registration-version-result
                    'make-discard-registration-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discard-registration-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discard-registration-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status-history))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatusHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discard-registration-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-destination-"))
   (event-destination-name
    (common-lisp:error ":event-destination-name is required") :type
    (common-lisp:or event-destination-name common-lisp:null))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (matching-event-types
    (common-lisp:error ":matching-event-types is required") :type
    (common-lisp:or event-type-list common-lisp:null))
   (cloud-watch-logs-destination common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination common-lisp:null))
   (kinesis-firehose-destination common-lisp:nil :type
    (common-lisp:or kinesis-firehose-destination common-lisp:null))
   (sns-destination common-lisp:nil :type
    (common-lisp:or sns-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-destination 'make-event-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-destination))
      (common-lisp:list
       (common-lisp:cons "SnsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-destination-list ()
   '(trivial-types:proper-list event-destination))
 (common-lisp:defun make-event-destination-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-destination-name () 'common-lisp:string)
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-type-list ()
   '(trivial-types:proper-list event-type))
 (common-lisp:defun make-event-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype field-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-path-list ()
   '(trivial-types:proper-list field-path))
 (common-lisp:defun make-field-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype field-requirement () 'common-lisp:string)
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-server-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-request-id)))
(common-lisp:deftype iso-country-code () 'common-lisp:string)
(common-lisp:deftype keyword () 'common-lisp:string)
(common-lisp:deftype keyword-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (keyword-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-keyword-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or keyword-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'keyword-filter 'make-keyword-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyword-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-filter-list ()
   '(trivial-types:proper-list keyword-filter))
 (common-lisp:defun make-keyword-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype keyword-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (keyword-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-keyword-information-"))
   (keyword (common-lisp:error ":keyword is required") :type
    (common-lisp:or keyword common-lisp:null))
   (keyword-message (common-lisp:error ":keyword-message is required") :type
    (common-lisp:or keyword-message common-lisp:null))
   (keyword-action (common-lisp:error ":keyword-action is required") :type
    (common-lisp:or keyword-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'keyword-information 'make-keyword-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyword-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyword-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyword-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-information-list ()
   '(trivial-types:proper-list keyword-information))
 (common-lisp:defun make-keyword-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype keyword-list () '(trivial-types:proper-list keyword))
 (common-lisp:defun make-keyword-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword))
   aws-sdk/generator/shape::members))
(common-lisp:deftype keyword-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-destination-"))
   (iam-role-arn (common-lisp:error ":iam-role-arn is required") :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (delivery-stream-arn (common-lisp:error ":delivery-stream-arn is required")
    :type (common-lisp:or delivery-stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-destination
                    'make-kinesis-firehose-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream-arn))
      (common-lisp:list
       (common-lisp:cons "DeliveryStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   common-lisp:nil))
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-pool-origination-identities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pool-origination-identities-request-"))
   (pool-id (common-lisp:error ":pool-id is required") :type
    (common-lisp:or pool-id-or-arn common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or pool-origination-identities-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pool-origination-identities-request
                    'make-list-pool-origination-identities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pool-origination-identities-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pool-origination-identities-result-"))
   (pool-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (origination-identities common-lisp:nil :type
    (common-lisp:or origination-identity-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pool-origination-identities-result
                    'make-list-pool-origination-identities-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identities))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pool-origination-identities-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-registration-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-registration-associations-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or registration-association-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-registration-associations-request
                    'make-list-registration-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-registration-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-registration-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-registration-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-registration-associations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-registration-associations-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (registration-associations
    (common-lisp:error ":registration-associations is required") :type
    (common-lisp:or registration-association-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-registration-associations-result
                    'make-list-registration-associations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-registration-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-registration-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-associations))
      (common-lisp:list
       (common-lisp:cons "RegistrationAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-registration-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-result-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:deftype max-price () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype message-type-list ()
   '(trivial-types:proper-list message-type))
 (common-lisp:defun make-message-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monthly-limit () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-non-empty-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype number-capability-list ()
   '(trivial-types:proper-list number-capability))
 (common-lisp:defun make-number-capability-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-status () 'common-lisp:string)
(common-lisp:deftype number-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (opt-out-list-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-opt-out-list-information-"))
   (opt-out-list-arn (common-lisp:error ":opt-out-list-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'opt-out-list-information 'make-opt-out-list-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-list-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-list-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-list-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype opt-out-list-information-list ()
   '(trivial-types:proper-list opt-out-list-information))
 (common-lisp:defun make-opt-out-list-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            opt-out-list-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype opt-out-list-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype opt-out-list-name-list ()
   '(trivial-types:proper-list opt-out-list-name-or-arn))
 (common-lisp:defun make-opt-out-list-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            opt-out-list-name-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype opt-out-list-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (opted-out-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-opted-out-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or opted-out-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'opted-out-filter 'make-opted-out-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input opted-out-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input opted-out-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input opted-out-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype opted-out-filter-list ()
   '(trivial-types:proper-list opted-out-filter))
 (common-lisp:defun make-opted-out-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list opted-out-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype opted-out-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (opted-out-number-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-opted-out-number-information-"))
   (opted-out-number (common-lisp:error ":opted-out-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (opted-out-timestamp (common-lisp:error ":opted-out-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (end-user-opted-out (common-lisp:error ":end-user-opted-out is required")
    :type (common-lisp:or primitive-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'opted-out-number-information
                    'make-opted-out-number-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opted-out-number-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opted-out-number-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-timestamp))
      (common-lisp:list
       (common-lisp:cons "OptedOutTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-user-opted-out))
      (common-lisp:list
       (common-lisp:cons "EndUserOptedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opted-out-number-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype opted-out-number-information-list ()
   '(trivial-types:proper-list opted-out-number-information))
 (common-lisp:defun make-opted-out-number-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            opted-out-number-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype opted-out-number-list ()
   '(trivial-types:proper-list phone-number))
 (common-lisp:defun make-opted-out-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (origination-identity-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-origination-identity-metadata-"))
   (origination-identity-arn
    (common-lisp:error ":origination-identity-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or string common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (number-capabilities (common-lisp:error ":number-capabilities is required")
    :type (common-lisp:or number-capability-list common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'origination-identity-metadata
                    'make-origination-identity-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origination-identity-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origination-identity-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origination-identity-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origination-identity-metadata-list ()
   '(trivial-types:proper-list origination-identity-metadata))
 (common-lisp:defun make-origination-identity-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            origination-identity-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or phone-number-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-filter 'make-phone-number-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-filter-list ()
   '(trivial-types:proper-list phone-number-filter))
 (common-lisp:defun make-phone-number-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phone-number-id-list ()
   '(trivial-types:proper-list phone-number-id-or-arn))
 (common-lisp:defun make-phone-number-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-information-"))
   (phone-number-arn (common-lisp:error ":phone-number-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number (common-lisp:error ":phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or number-status common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-type (common-lisp:error ":message-type is required") :type
    (common-lisp:or message-type common-lisp:null))
   (number-capabilities (common-lisp:error ":number-capabilities is required")
    :type (common-lisp:or number-capability-list common-lisp:null))
   (number-type (common-lisp:error ":number-type is required") :type
    (common-lisp:or number-type common-lisp:null))
   (monthly-leasing-price
    (common-lisp:error ":monthly-leasing-price is required") :type
    (common-lisp:or string common-lisp:null))
   (two-way-enabled (common-lisp:error ":two-way-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled
    (common-lisp:error ":self-managed-opt-outs-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name common-lisp:null))
   (deletion-protection-enabled
    (common-lisp:error ":deletion-protection-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-information 'make-phone-number-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-information-list ()
   '(trivial-types:proper-list phone-number-information))
 (common-lisp:defun make-phone-number-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            phone-number-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-or-pool-id-or-arn () 'common-lisp:string)
(common-lisp:deftype phone-or-sender-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pool-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-pool-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pool-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pool-filter 'make-pool-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pool-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pool-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pool-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pool-filter-list ()
   '(trivial-types:proper-list pool-filter))
 (common-lisp:defun make-pool-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pool-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pool-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pool-id-list ()
   '(trivial-types:proper-list pool-id-or-arn))
 (common-lisp:defun make-pool-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pool-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pool-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pool-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-pool-information-"))
   (pool-arn (common-lisp:error ":pool-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (pool-id (common-lisp:error ":pool-id is required") :type
    (common-lisp:or string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or pool-status common-lisp:null))
   (message-type (common-lisp:error ":message-type is required") :type
    (common-lisp:or message-type common-lisp:null))
   (two-way-enabled (common-lisp:error ":two-way-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled
    (common-lisp:error ":self-managed-opt-outs-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name common-lisp:null))
   (shared-routes-enabled
    (common-lisp:error ":shared-routes-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (deletion-protection-enabled
    (common-lisp:error ":deletion-protection-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pool-information 'make-pool-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pool-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pool-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pool-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pool-information-list ()
   '(trivial-types:proper-list pool-information))
 (common-lisp:defun make-pool-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pool-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pool-origination-identities-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-pool-origination-identities-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pool-origination-identities-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pool-origination-identities-filter
                    'make-pool-origination-identities-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pool-origination-identities-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pool-origination-identities-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pool-origination-identities-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pool-origination-identities-filter-list ()
   '(trivial-types:proper-list pool-origination-identities-filter))
 (common-lisp:defun make-pool-origination-identities-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pool-origination-identities-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pool-origination-identities-filter-name ()
  'common-lisp:string)
(common-lisp:deftype pool-status () 'common-lisp:string)
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:deftype primitive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (put-keyword-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-keyword-request-"))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or phone-or-pool-id-or-arn common-lisp:null))
   (keyword (common-lisp:error ":keyword is required") :type
    (common-lisp:or keyword common-lisp:null))
   (keyword-message (common-lisp:error ":keyword-message is required") :type
    (common-lisp:or keyword-message common-lisp:null))
   (keyword-action common-lisp:nil :type
    (common-lisp:or keyword-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-keyword-request 'make-put-keyword-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-keyword-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-keyword-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-keyword-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-keyword-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-keyword-result-"))
   (origination-identity-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (keyword common-lisp:nil :type (common-lisp:or keyword common-lisp:null))
   (keyword-message common-lisp:nil :type
    (common-lisp:or keyword-message common-lisp:null))
   (keyword-action common-lisp:nil :type
    (common-lisp:or keyword-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-keyword-result 'make-put-keyword-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-keyword-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-keyword-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity-arn))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-message))
      (common-lisp:list
       (common-lisp:cons "KeywordMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-action))
      (common-lisp:list
       (common-lisp:cons "KeywordAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-keyword-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-opted-out-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-opted-out-number-request-"))
   (opt-out-list-name (common-lisp:error ":opt-out-list-name is required")
    :type (common-lisp:or opt-out-list-name-or-arn common-lisp:null))
   (opted-out-number (common-lisp:error ":opted-out-number is required") :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-opted-out-number-request
                    'make-put-opted-out-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-opted-out-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-opted-out-number-result-"))
   (opt-out-list-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (opted-out-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (opted-out-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-user-opted-out common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-opted-out-number-result
                    'make-put-opted-out-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-arn))
      (common-lisp:list
       (common-lisp:cons "OptOutListArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-number))
      (common-lisp:list
       (common-lisp:cons "OptedOutNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opted-out-timestamp))
      (common-lisp:list
       (common-lisp:cons "OptedOutTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-user-opted-out))
      (common-lisp:list
       (common-lisp:cons "EndUserOptedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-opted-out-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-registration-field-value-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-registration-field-value-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (field-path (common-lisp:error ":field-path is required") :type
    (common-lisp:or field-path common-lisp:null))
   (select-choices common-lisp:nil :type
    (common-lisp:or select-choice-list common-lisp:null))
   (text-value common-lisp:nil :type
    (common-lisp:or text-value common-lisp:null))
   (registration-attachment-id common-lisp:nil :type
    (common-lisp:or registration-attachment-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-registration-field-value-request
                    'make-put-registration-field-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registration-field-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registration-field-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-path))
      (common-lisp:list
       (common-lisp:cons "FieldPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-choices))
      (common-lisp:list
       (common-lisp:cons "SelectChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-value))
      (common-lisp:list
       (common-lisp:cons "TextValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registration-field-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-registration-field-value-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-registration-field-value-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (field-path (common-lisp:error ":field-path is required") :type
    (common-lisp:or field-path common-lisp:null))
   (select-choices common-lisp:nil :type
    (common-lisp:or select-choice-list common-lisp:null))
   (text-value common-lisp:nil :type
    (common-lisp:or text-value common-lisp:null))
   (registration-attachment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-registration-field-value-result
                    'make-put-registration-field-value-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registration-field-value-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registration-field-value-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-path))
      (common-lisp:list
       (common-lisp:cons "FieldPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-choices))
      (common-lisp:list
       (common-lisp:cons "SelectChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-value))
      (common-lisp:list
       (common-lisp:cons "TextValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registration-field-value-result))
   common-lisp:nil))
(common-lisp:deftype registration-association-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-association-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-association-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or registration-association-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-association-filter
                    'make-registration-association-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-association-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-association-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-association-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-association-filter-list ()
   '(trivial-types:proper-list registration-association-filter))
 (common-lisp:defun make-registration-association-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-association-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-association-filter-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-association-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-association-metadata-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or string common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-association-metadata
                    'make-registration-association-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-association-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-association-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-association-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-association-metadata-list ()
   '(trivial-types:proper-list registration-association-metadata))
 (common-lisp:defun make-registration-association-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-association-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-attachment-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-attachment-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or registration-attachment-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-attachment-filter
                    'make-registration-attachment-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-attachment-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-attachment-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-attachment-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-attachment-filter-list ()
   '(trivial-types:proper-list registration-attachment-filter))
 (common-lisp:defun make-registration-attachment-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-attachment-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-attachment-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype registration-attachment-id-list ()
   '(trivial-types:proper-list registration-id-or-arn))
 (common-lisp:defun make-registration-attachment-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registration-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-attachment-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-attachments-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-attachments-information-"))
   (registration-attachment-arn
    (common-lisp:error ":registration-attachment-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-attachment-id
    (common-lisp:error ":registration-attachment-id is required") :type
    (common-lisp:or string common-lisp:null))
   (attachment-status (common-lisp:error ":attachment-status is required")
    :type (common-lisp:or attachment-status common-lisp:null))
   (attachment-upload-error-reason common-lisp:nil :type
    (common-lisp:or attachment-upload-error-reason common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-attachments-information
                    'make-registration-attachments-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-attachments-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-attachments-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-status))
      (common-lisp:list
       (common-lisp:cons "AttachmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-upload-error-reason))
      (common-lisp:list
       (common-lisp:cons "AttachmentUploadErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-attachments-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-attachments-information-list ()
   '(trivial-types:proper-list registration-attachments-information))
 (common-lisp:defun make-registration-attachments-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-attachments-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-denied-reason-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-denied-reason-information-"))
   (reason (common-lisp:error ":reason is required") :type
    (common-lisp:or string common-lisp:null))
   (short-description (common-lisp:error ":short-description is required")
    :type (common-lisp:or string common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-title common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-link common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-denied-reason-information
                    'make-registration-denied-reason-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-denied-reason-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-denied-reason-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "LongDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-title))
      (common-lisp:list
       (common-lisp:cons "DocumentationTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-link))
      (common-lisp:list
       (common-lisp:cons "DocumentationLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-denied-reason-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-denied-reason-information-list ()
   '(trivial-types:proper-list registration-denied-reason-information))
 (common-lisp:defun make-registration-denied-reason-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-denied-reason-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-disassociation-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-field-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-field-definition-"))
   (section-path (common-lisp:error ":section-path is required") :type
    (common-lisp:or section-path common-lisp:null))
   (field-path (common-lisp:error ":field-path is required") :type
    (common-lisp:or field-path common-lisp:null))
   (field-type (common-lisp:error ":field-type is required") :type
    (common-lisp:or field-type common-lisp:null))
   (field-requirement (common-lisp:error ":field-requirement is required")
    :type (common-lisp:or field-requirement common-lisp:null))
   (select-validation common-lisp:nil :type
    (common-lisp:or select-validation common-lisp:null))
   (text-validation common-lisp:nil :type
    (common-lisp:or text-validation common-lisp:null))
   (display-hints (common-lisp:error ":display-hints is required") :type
    (common-lisp:or registration-field-display-hints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-field-definition
                    'make-registration-field-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-path))
      (common-lisp:list
       (common-lisp:cons "SectionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-path))
      (common-lisp:list
       (common-lisp:cons "FieldPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-type))
      (common-lisp:list
       (common-lisp:cons "FieldType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-requirement))
      (common-lisp:list
       (common-lisp:cons "FieldRequirement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-validation))
      (common-lisp:list
       (common-lisp:cons "SelectValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-validation))
      (common-lisp:list
       (common-lisp:cons "TextValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-hints))
      (common-lisp:list
       (common-lisp:cons "DisplayHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-field-definition-list ()
   '(trivial-types:proper-list registration-field-definition))
 (common-lisp:defun make-registration-field-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-field-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-field-display-hints (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-field-display-hints-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or string common-lisp:null))
   (short-description (common-lisp:error ":short-description is required")
    :type (common-lisp:or string common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-title common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-link common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (select-option-descriptions common-lisp:nil :type
    (common-lisp:or select-option-descriptions-list common-lisp:null))
   (text-validation-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (example-text-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-field-display-hints
                    'make-registration-field-display-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-display-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-display-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "LongDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-title))
      (common-lisp:list
       (common-lisp:cons "DocumentationTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-link))
      (common-lisp:list
       (common-lisp:cons "DocumentationLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'select-option-descriptions))
      (common-lisp:list
       (common-lisp:cons "SelectOptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-validation-description))
      (common-lisp:list
       (common-lisp:cons "TextValidationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'example-text-value))
      (common-lisp:list
       (common-lisp:cons "ExampleTextValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-display-hints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-field-value-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-field-value-information-"))
   (field-path (common-lisp:error ":field-path is required") :type
    (common-lisp:or field-path common-lisp:null))
   (select-choices common-lisp:nil :type
    (common-lisp:or select-choice-list common-lisp:null))
   (text-value common-lisp:nil :type
    (common-lisp:or text-value common-lisp:null))
   (registration-attachment-id common-lisp:nil :type
    (common-lisp:or registration-attachment-id-or-arn common-lisp:null))
   (denied-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-field-value-information
                    'make-registration-field-value-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-value-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-value-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-path))
      (common-lisp:list
       (common-lisp:cons "FieldPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-choices))
      (common-lisp:list
       (common-lisp:cons "SelectChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-value))
      (common-lisp:list
       (common-lisp:cons "TextValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-attachment-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denied-reason))
      (common-lisp:list
       (common-lisp:cons "DeniedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-field-value-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-field-value-information-list ()
   '(trivial-types:proper-list registration-field-value-information))
 (common-lisp:defun make-registration-field-value-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-field-value-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or registration-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-filter 'make-registration-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registration-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-filter-list ()
   '(trivial-types:proper-list registration-filter))
 (common-lisp:defun make-registration-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registration-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype registration-id-list ()
   '(trivial-types:proper-list registration-id-or-arn))
 (common-lisp:defun make-registration-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registration-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-information-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (registration-status (common-lisp:error ":registration-status is required")
    :type (common-lisp:or registration-status common-lisp:null))
   (current-version-number
    (common-lisp:error ":current-version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (approved-version-number common-lisp:nil :type
    (common-lisp:or registration-version-number common-lisp:null))
   (latest-denied-version-number common-lisp:nil :type
    (common-lisp:or registration-version-number common-lisp:null))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-information 'make-registration-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-version-number))
      (common-lisp:list
       (common-lisp:cons "CurrentVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-version-number))
      (common-lisp:list
       (common-lisp:cons "ApprovedVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-denied-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestDeniedVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-information-list ()
   '(trivial-types:proper-list registration-information))
 (common-lisp:defun make-registration-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-section-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-section-definition-"))
   (section-path (common-lisp:error ":section-path is required") :type
    (common-lisp:or section-path common-lisp:null))
   (display-hints (common-lisp:error ":display-hints is required") :type
    (common-lisp:or registration-section-display-hints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-section-definition
                    'make-registration-section-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-section-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-section-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section-path))
      (common-lisp:list
       (common-lisp:cons "SectionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-hints))
      (common-lisp:list
       (common-lisp:cons "DisplayHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-section-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-section-definition-list ()
   '(trivial-types:proper-list registration-section-definition))
 (common-lisp:defun make-registration-section-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-section-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-section-display-hints (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-section-display-hints-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or string common-lisp:null))
   (short-description (common-lisp:error ":short-description is required")
    :type (common-lisp:or string common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-title common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-link common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-section-display-hints
                    'make-registration-section-display-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-section-display-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-section-display-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "LongDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-title))
      (common-lisp:list
       (common-lisp:cons "DocumentationTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-link))
      (common-lisp:list
       (common-lisp:cons "DocumentationLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-section-display-hints))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:deftype registration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-type-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-type-definition-"))
   (registration-type (common-lisp:error ":registration-type is required")
    :type (common-lisp:or registration-type common-lisp:null))
   (supported-associations common-lisp:nil :type
    (common-lisp:or supported-association-list common-lisp:null))
   (display-hints (common-lisp:error ":display-hints is required") :type
    (common-lisp:or registration-type-display-hints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-type-definition
                    'make-registration-type-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-type))
      (common-lisp:list
       (common-lisp:cons "RegistrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-associations))
      (common-lisp:list
       (common-lisp:cons "SupportedAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-hints))
      (common-lisp:list
       (common-lisp:cons "DisplayHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-type-definition-list ()
   '(trivial-types:proper-list registration-type-definition))
 (common-lisp:defun make-registration-type-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-type-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-type-display-hints (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-type-display-hints-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or string common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-title common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (documentation-link common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-type-display-hints
                    'make-registration-type-display-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-display-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-display-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "LongDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-title))
      (common-lisp:list
       (common-lisp:cons "DocumentationTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-link))
      (common-lisp:list
       (common-lisp:cons "DocumentationLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-display-hints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-type-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-type-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or registration-type-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-type-filter 'make-registration-type-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-type-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-type-filter-list ()
   '(trivial-types:proper-list registration-type-filter))
 (common-lisp:defun make-registration-type-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-type-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-type-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype registration-type-list ()
   '(trivial-types:proper-list registration-type))
 (common-lisp:defun make-registration-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registration-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registration-version-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-version-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or registration-version-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-version-filter
                    'make-registration-version-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-version-filter-list ()
   '(trivial-types:proper-list registration-version-filter))
 (common-lisp:defun make-registration-version-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-version-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-version-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-version-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-version-information-"))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (registration-version-status
    (common-lisp:error ":registration-version-status is required") :type
    (common-lisp:or registration-version-status common-lisp:null))
   (registration-version-status-history
    (common-lisp:error ":registration-version-status-history is required")
    :type
    (common-lisp:or registration-version-status-history common-lisp:null))
   (denied-reasons common-lisp:nil :type
    (common-lisp:or registration-denied-reason-information-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-version-information
                    'make-registration-version-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status-history))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatusHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denied-reasons))
      (common-lisp:list
       (common-lisp:cons "DeniedReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-version-information-list ()
   '(trivial-types:proper-list registration-version-information))
 (common-lisp:defun make-registration-version-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-version-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype registration-version-number-list ()
   '(trivial-types:proper-list registration-version-number))
 (common-lisp:defun make-registration-version-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-version-number))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-version-status-history (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-version-status-history-"))
   (draft-timestamp (common-lisp:error ":draft-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (submitted-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (reviewing-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (approved-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (discarded-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (denied-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (revoked-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (archived-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-version-status-history
                    'make-registration-version-status-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-status-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-status-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'draft-timestamp))
      (common-lisp:list
       (common-lisp:cons "DraftTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-timestamp))
      (common-lisp:list
       (common-lisp:cons "SubmittedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewing-timestamp))
      (common-lisp:list
       (common-lisp:cons "ReviewingTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-timestamp))
      (common-lisp:list
       (common-lisp:cons "ApprovedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discarded-timestamp))
      (common-lisp:list
       (common-lisp:cons "DiscardedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denied-timestamp))
      (common-lisp:list
       (common-lisp:cons "DeniedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-timestamp))
      (common-lisp:list
       (common-lisp:cons "RevokedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archived-timestamp))
      (common-lisp:list
       (common-lisp:cons "ArchivedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-version-status-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-phone-number-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-phone-number-request
                    'make-release-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-phone-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-phone-number-result-"))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or number-status common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (number-capabilities common-lisp:nil :type
    (common-lisp:or number-capability-list common-lisp:null))
   (number-type common-lisp:nil :type
    (common-lisp:or number-type common-lisp:null))
   (monthly-leasing-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-phone-number-result
                    'make-release-phone-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-sender-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-sender-id-request-"))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id-or-arn common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-sender-id-request
                    'make-release-sender-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-sender-id-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-sender-id-result-"))
   (sender-id-arn (common-lisp:error ":sender-id-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-types (common-lisp:error ":message-types is required") :type
    (common-lisp:or message-type-list common-lisp:null))
   (monthly-leasing-price
    (common-lisp:error ":monthly-leasing-price is required") :type
    (common-lisp:or string common-lisp:null))
   (registered (common-lisp:error ":registered is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-sender-id-result 'make-release-sender-id-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id-arn))
      (common-lisp:list
       (common-lisp:cons "SenderIdArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered))
      (common-lisp:list
       (common-lisp:cons "Registered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-sender-id-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-phone-number-request-"))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-type (common-lisp:error ":message-type is required") :type
    (common-lisp:or message-type common-lisp:null))
   (number-capabilities (common-lisp:error ":number-capabilities is required")
    :type (common-lisp:or number-capability-list common-lisp:null))
   (number-type (common-lisp:error ":number-type is required") :type
    (common-lisp:or requestable-number-type common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name-or-arn common-lisp:null))
   (pool-id common-lisp:nil :type
    (common-lisp:or pool-id-or-arn common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or registration-id-or-arn common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-phone-number-request
                    'make-request-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-phone-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-phone-number-result-"))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or number-status common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (number-capabilities common-lisp:nil :type
    (common-lisp:or number-capability-list common-lisp:null))
   (number-type common-lisp:nil :type
    (common-lisp:or requestable-number-type common-lisp:null))
   (monthly-leasing-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-phone-number-result
                    'make-request-phone-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-phone-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-sender-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-sender-id-request-"))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-types common-lisp:nil :type
    (common-lisp:or message-type-list common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-sender-id-request
                    'make-request-sender-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-sender-id-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-sender-id-result-"))
   (sender-id-arn (common-lisp:error ":sender-id-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-types (common-lisp:error ":message-types is required") :type
    (common-lisp:or message-type-list common-lisp:null))
   (monthly-leasing-price
    (common-lisp:error ":monthly-leasing-price is required") :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection-enabled
    (common-lisp:error ":deletion-protection-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registered (common-lisp:error ":registered is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-sender-id-result 'make-request-sender-id-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id-arn))
      (common-lisp:list
       (common-lisp:cons "SenderIdArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered))
      (common-lisp:list
       (common-lisp:cons "Registered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-sender-id-result))
   common-lisp:nil))
(common-lisp:deftype requestable-number-type () 'common-lisp:string)
(common-lisp:deftype resource-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-id)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype section-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype section-path-list ()
   '(trivial-types:proper-list section-path))
 (common-lisp:defun make-section-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list section-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype select-choice () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype select-choice-list ()
   '(trivial-types:proper-list select-choice))
 (common-lisp:defun make-select-choice-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list select-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (select-option-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-option-description-"))
   (option (common-lisp:error ":option is required") :type
    (common-lisp:or string common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-option-description
                    'make-select-option-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-option-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-option-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "Option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-option-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype select-option-descriptions-list ()
   '(trivial-types:proper-list select-option-description))
 (common-lisp:defun make-select-option-descriptions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            select-option-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (select-validation (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-validation-"))
   (min-choices (common-lisp:error ":min-choices is required") :type
    (common-lisp:or integer common-lisp:null))
   (max-choices (common-lisp:error ":max-choices is required") :type
    (common-lisp:or integer common-lisp:null))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-validation 'make-select-validation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-validation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-validation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-choices))
      (common-lisp:list
       (common-lisp:cons "MinChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-choices))
      (common-lisp:list
       (common-lisp:cons "MaxChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-validation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-destination-number-verification-code-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-send-destination-number-verification-code-request-"))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or verified-destination-number-id-or-arn common-lisp:null))
   (verification-channel
    (common-lisp:error ":verification-channel is required") :type
    (common-lisp:or verification-channel common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or verification-message-origination-identity
                    common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or context-map common-lisp:null))
   (destination-country-parameters common-lisp:nil :type
    (common-lisp:or destination-country-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-destination-number-verification-code-request
                    'make-send-destination-number-verification-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-destination-number-verification-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-destination-number-verification-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-channel))
      (common-lisp:list
       (common-lisp:cons "VerificationChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-country-parameters))
      (common-lisp:list
       (common-lisp:cons "DestinationCountryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-destination-number-verification-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-destination-number-verification-code-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-send-destination-number-verification-code-result-"))
   (message-id (common-lisp:error ":message-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-destination-number-verification-code-result
                    'make-send-destination-number-verification-code-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-destination-number-verification-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-destination-number-verification-code-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-destination-number-verification-code-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-text-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-text-message-request-"))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (origination-identity common-lisp:nil :type
    (common-lisp:or text-message-origination-identity common-lisp:null))
   (message-body common-lisp:nil :type
    (common-lisp:or text-message-body common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (keyword common-lisp:nil :type (common-lisp:or keyword common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (max-price common-lisp:nil :type
    (common-lisp:or max-price common-lisp:null))
   (time-to-live common-lisp:nil :type
    (common-lisp:or time-to-live common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or context-map common-lisp:null))
   (destination-country-parameters common-lisp:nil :type
    (common-lisp:or destination-country-parameters common-lisp:null))
   (dry-run common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-text-message-request
                    'make-send-text-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-price))
      (common-lisp:list
       (common-lisp:cons "MaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-country-parameters))
      (common-lisp:list
       (common-lisp:cons "DestinationCountryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-text-message-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-text-message-result-"))
   (message-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-text-message-result 'make-send-text-message-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-text-message-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-voice-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-voice-message-request-"))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or voice-message-origination-identity common-lisp:null))
   (message-body common-lisp:nil :type
    (common-lisp:or voice-message-body common-lisp:null))
   (message-body-text-type common-lisp:nil :type
    (common-lisp:or voice-message-body-text-type common-lisp:null))
   (voice-id common-lisp:nil :type (common-lisp:or voice-id common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (max-price-per-minute common-lisp:nil :type
    (common-lisp:or max-price common-lisp:null))
   (time-to-live common-lisp:nil :type
    (common-lisp:or time-to-live common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or context-map common-lisp:null))
   (dry-run common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-voice-message-request
                    'make-send-voice-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-body-text-type))
      (common-lisp:list
       (common-lisp:cons "MessageBodyTextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-price-per-minute))
      (common-lisp:list
       (common-lisp:cons "MaxPricePerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-voice-message-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-voice-message-result-"))
   (message-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-voice-message-result
                    'make-send-voice-message-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-voice-message-result))
   common-lisp:nil))
(common-lisp:deftype sender-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sender-id-and-country (:copier common-lisp:nil)
      (:conc-name "struct-shape-sender-id-and-country-"))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id-or-arn common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sender-id-and-country 'make-sender-id-and-country))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-and-country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-and-country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-and-country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sender-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-sender-id-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or sender-id-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sender-id-filter 'make-sender-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sender-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sender-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sender-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sender-id-filter-list ()
   '(trivial-types:proper-list sender-id-filter))
 (common-lisp:defun make-sender-id-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sender-id-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sender-id-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sender-id-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-sender-id-information-"))
   (sender-id-arn (common-lisp:error ":sender-id-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-types (common-lisp:error ":message-types is required") :type
    (common-lisp:or message-type-list common-lisp:null))
   (monthly-leasing-price
    (common-lisp:error ":monthly-leasing-price is required") :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection-enabled
    (common-lisp:error ":deletion-protection-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registered (common-lisp:error ":registered is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sender-id-information 'make-sender-id-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id-arn))
      (common-lisp:list
       (common-lisp:cons "SenderIdArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered))
      (common-lisp:list
       (common-lisp:cons "Registered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sender-id-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sender-id-information-list ()
   '(trivial-types:proper-list sender-id-information))
 (common-lisp:defun make-sender-id-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sender-id-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sender-id-list ()
   '(trivial-types:proper-list sender-id-and-country))
 (common-lisp:defun make-sender-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sender-id-and-country))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sender-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       service-quota-exceeded-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-reason)))
(common-lisp:deftype service-quota-exceeded-exception-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-message-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-message-type-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (message-type (common-lisp:error ":message-type is required") :type
    (common-lisp:or message-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-message-type-request
                    'make-set-default-message-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-message-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-message-type-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-message-type-result
                    'make-set-default-message-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-message-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-sender-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-sender-id-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-sender-id-request
                    'make-set-default-sender-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-sender-id-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-sender-id-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or sender-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-sender-id-result
                    'make-set-default-sender-id-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-sender-id-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-text-message-spend-limit-override-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-text-message-spend-limit-override-request-"))
   (monthly-limit (common-lisp:error ":monthly-limit is required") :type
    (common-lisp:or monthly-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-text-message-spend-limit-override-request
                    'make-set-text-message-spend-limit-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-text-message-spend-limit-override-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-text-message-spend-limit-override-result-"))
   (monthly-limit common-lisp:nil :type
    (common-lisp:or monthly-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-text-message-spend-limit-override-result
                    'make-set-text-message-spend-limit-override-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-text-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-voice-message-spend-limit-override-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-voice-message-spend-limit-override-request-"))
   (monthly-limit (common-lisp:error ":monthly-limit is required") :type
    (common-lisp:or monthly-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-voice-message-spend-limit-override-request
                    'make-set-voice-message-spend-limit-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-voice-message-spend-limit-override-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-voice-message-spend-limit-override-result-"))
   (monthly-limit common-lisp:nil :type
    (common-lisp:or monthly-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-voice-message-spend-limit-override-result
                    'make-set-voice-message-spend-limit-override-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-limit))
      (common-lisp:list
       (common-lisp:cons "MonthlyLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-voice-message-spend-limit-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sns-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-sns-destination-"))
   (topic-arn (common-lisp:error ":topic-arn is required") :type
    (common-lisp:or sns-topic-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sns-destination 'make-sns-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-destination))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (spend-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-spend-limit-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or spend-limit-name common-lisp:null))
   (enforced-limit (common-lisp:error ":enforced-limit is required") :type
    (common-lisp:or primitive-long common-lisp:null))
   (max-limit (common-lisp:error ":max-limit is required") :type
    (common-lisp:or primitive-long common-lisp:null))
   (overridden (common-lisp:error ":overridden is required") :type
    (common-lisp:or primitive-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spend-limit 'make-spend-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spend-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spend-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforced-limit))
      (common-lisp:list
       (common-lisp:cons "EnforcedLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-limit))
      (common-lisp:list
       (common-lisp:cons "MaxLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overridden))
      (common-lisp:list
       (common-lisp:cons "Overridden"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spend-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spend-limit-list ()
   '(trivial-types:proper-list spend-limit))
 (common-lisp:defun make-spend-limit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list spend-limit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype spend-limit-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (submit-registration-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-submit-registration-version-request-"))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or registration-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'submit-registration-version-request
                    'make-submit-registration-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-registration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-registration-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-registration-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (submit-registration-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-submit-registration-version-result-"))
   (registration-arn (common-lisp:error ":registration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (registration-id (common-lisp:error ":registration-id is required") :type
    (common-lisp:or string common-lisp:null))
   (version-number (common-lisp:error ":version-number is required") :type
    (common-lisp:or registration-version-number common-lisp:null))
   (registration-version-status
    (common-lisp:error ":registration-version-status is required") :type
    (common-lisp:or registration-version-status common-lisp:null))
   (registration-version-status-history
    (common-lisp:error ":registration-version-status-history is required")
    :type
    (common-lisp:or registration-version-status-history common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'submit-registration-version-result
                    'make-submit-registration-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-registration-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-registration-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-arn))
      (common-lisp:list
       (common-lisp:cons "RegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-version-status-history))
      (common-lisp:list
       (common-lisp:cons "RegistrationVersionStatusHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-registration-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (supported-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-supported-association-"))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or string common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null))
   (association-behavior
    (common-lisp:error ":association-behavior is required") :type
    (common-lisp:or registration-association-behavior common-lisp:null))
   (disassociation-behavior
    (common-lisp:error ":disassociation-behavior is required") :type
    (common-lisp:or registration-disassociation-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'supported-association 'make-supported-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          supported-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          supported-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-behavior))
      (common-lisp:list
       (common-lisp:cons "AssociationBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociation-behavior))
      (common-lisp:list
       (common-lisp:cons "DisassociationBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          supported-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-association-list ()
   '(trivial-types:proper-list supported-association))
 (common-lisp:defun make-supported-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or non-empty-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype text-message-body () 'common-lisp:string)
(common-lisp:deftype text-message-origination-identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-validation (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-validation-"))
   (min-length (common-lisp:error ":min-length is required") :type
    (common-lisp:or integer common-lisp:null))
   (max-length (common-lisp:error ":max-length is required") :type
    (common-lisp:or integer common-lisp:null))
   (pattern (common-lisp:error ":pattern is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'text-validation 'make-text-validation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-validation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-validation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-length))
      (common-lisp:list
       (common-lisp:cons "MinLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "MaxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-validation))
   common-lisp:nil))
(common-lisp:deftype text-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-to-live () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype two-way-channel-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-destination-request-"))
   (configuration-set-name
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name-or-arn common-lisp:null))
   (event-destination-name
    (common-lisp:error ":event-destination-name is required") :type
    (common-lisp:or event-destination-name common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (matching-event-types common-lisp:nil :type
    (common-lisp:or event-type-list common-lisp:null))
   (cloud-watch-logs-destination common-lisp:nil :type
    (common-lisp:or cloud-watch-logs-destination common-lisp:null))
   (kinesis-firehose-destination common-lisp:nil :type
    (common-lisp:or kinesis-firehose-destination common-lisp:null))
   (sns-destination common-lisp:nil :type
    (common-lisp:or sns-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-destination-request
                    'make-update-event-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-destination))
      (common-lisp:list
       (common-lisp:cons "SnsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-destination-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-destination-result-"))
   (configuration-set-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-set-name common-lisp:nil :type
    (common-lisp:or configuration-set-name common-lisp:null))
   (event-destination common-lisp:nil :type
    (common-lisp:or event-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-destination-result
                    'make-update-event-destination-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-destination-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-phone-number-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id-or-arn common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name-or-arn common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-phone-number-request
                    'make-update-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-phone-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-phone-number-result-"))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or number-status common-lisp:null))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (number-capabilities common-lisp:nil :type
    (common-lisp:or number-capability-list common-lisp:null))
   (number-type common-lisp:nil :type
    (common-lisp:or number-type common-lisp:null))
   (monthly-leasing-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-phone-number-result
                    'make-update-phone-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-capabilities))
      (common-lisp:list
       (common-lisp:cons "NumberCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-type))
      (common-lisp:list
       (common-lisp:cons "NumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pool-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pool-request-"))
   (pool-id (common-lisp:error ":pool-id is required") :type
    (common-lisp:or pool-id-or-arn common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name-or-arn common-lisp:null))
   (shared-routes-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pool-request 'make-update-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pool-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pool-result-"))
   (pool-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pool-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or pool-status common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (two-way-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (two-way-channel-arn common-lisp:nil :type
    (common-lisp:or two-way-channel-arn common-lisp:null))
   (two-way-channel-role common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (self-managed-opt-outs-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (opt-out-list-name common-lisp:nil :type
    (common-lisp:or opt-out-list-name common-lisp:null))
   (shared-routes-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pool-result 'make-update-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-enabled))
      (common-lisp:list
       (common-lisp:cons "TwoWayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'two-way-channel-arn))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'two-way-channel-role))
      (common-lisp:list
       (common-lisp:cons "TwoWayChannelRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-opt-outs-enabled))
      (common-lisp:list
       (common-lisp:cons "SelfManagedOptOutsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out-list-name))
      (common-lisp:list
       (common-lisp:cons "OptOutListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-routes-enabled))
      (common-lisp:list
       (common-lisp:cons "SharedRoutesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sender-id-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sender-id-request-"))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id-or-arn common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (deletion-protection-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sender-id-request 'make-update-sender-id-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sender-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sender-id-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sender-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sender-id-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sender-id-result-"))
   (sender-id-arn (common-lisp:error ":sender-id-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (sender-id (common-lisp:error ":sender-id is required") :type
    (common-lisp:or sender-id common-lisp:null))
   (iso-country-code (common-lisp:error ":iso-country-code is required") :type
    (common-lisp:or iso-country-code common-lisp:null))
   (message-types (common-lisp:error ":message-types is required") :type
    (common-lisp:or message-type-list common-lisp:null))
   (monthly-leasing-price
    (common-lisp:error ":monthly-leasing-price is required") :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection-enabled
    (common-lisp:error ":deletion-protection-enabled is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registered (common-lisp:error ":registered is required") :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (registration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sender-id-result 'make-update-sender-id-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sender-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sender-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id-arn))
      (common-lisp:list
       (common-lisp:cons "SenderIdArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-leasing-price))
      (common-lisp:list
       (common-lisp:cons "MonthlyLeasingPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deletion-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "DeletionProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered))
      (common-lisp:list
       (common-lisp:cons "Registered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-id))
      (common-lisp:list
       (common-lisp:cons "RegistrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sender-id-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (pinpoint-sms-voice-v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype verification-channel () 'common-lisp:string)
(common-lisp:deftype verification-code () 'common-lisp:string)
(common-lisp:deftype verification-message-origination-identity ()
  'common-lisp:string)
(common-lisp:deftype verification-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (verified-destination-number-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-verified-destination-number-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or verified-destination-number-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verified-destination-number-filter
                    'make-verified-destination-number-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verified-destination-number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verified-destination-number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verified-destination-number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype verified-destination-number-filter-list ()
   '(trivial-types:proper-list verified-destination-number-filter))
 (common-lisp:defun make-verified-destination-number-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            verified-destination-number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype verified-destination-number-filter-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype verified-destination-number-id-list ()
   '(trivial-types:proper-list verified-destination-number-id-or-arn))
 (common-lisp:defun make-verified-destination-number-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            verified-destination-number-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype verified-destination-number-id-or-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (verified-destination-number-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-verified-destination-number-information-"))
   (verified-destination-number-arn
    (common-lisp:error ":verified-destination-number-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or string common-lisp:null))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or verification-status common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verified-destination-number-information
                    'make-verified-destination-number-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verified-destination-number-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verified-destination-number-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-arn))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verified-destination-number-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype verified-destination-number-information-list ()
   '(trivial-types:proper-list verified-destination-number-information))
 (common-lisp:defun make-verified-destination-number-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            verified-destination-number-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-destination-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-destination-number-request-"))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or verified-destination-number-id-or-arn common-lisp:null))
   (verification-code (common-lisp:error ":verification-code is required")
    :type (common-lisp:or verification-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-destination-number-request
                    'make-verify-destination-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-destination-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-destination-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-code))
      (common-lisp:list
       (common-lisp:cons "VerificationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-destination-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-destination-number-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-destination-number-result-"))
   (verified-destination-number-arn
    (common-lisp:error ":verified-destination-number-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (verified-destination-number-id
    (common-lisp:error ":verified-destination-number-id is required") :type
    (common-lisp:or string common-lisp:null))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or verification-status common-lisp:null))
   (created-timestamp (common-lisp:error ":created-timestamp is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-destination-number-result
                    'make-verify-destination-number-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-destination-number-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-destination-number-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-arn))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-destination-number-id))
      (common-lisp:list
       (common-lisp:cons "VerifiedDestinationNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-destination-number-result))
   common-lisp:nil))
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:deftype voice-message-body () 'common-lisp:string)
(common-lisp:deftype voice-message-body-text-type () 'common-lisp:string)
(common-lisp:deftype voice-message-origination-identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-origination-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id origination-identity
                     iso-country-code client-token)
   (common-lisp:declare
    (common-lisp:ignorable pool-id origination-identity iso-country-code
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-origination-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "AssociateOriginationIdentity"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-origination-identity))
(common-lisp:progn
 (common-lisp:defun create-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configuration-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateConfigurationSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configuration-set))
(common-lisp:progn
 (common-lisp:defun create-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name matching-event-types
                     cloud-watch-logs-destination kinesis-firehose-destination
                     sns-destination client-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name
     matching-event-types cloud-watch-logs-destination
     kinesis-firehose-destination sns-destination client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-event-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateEventDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-event-destination))
(common-lisp:progn
 (common-lisp:defun create-opt-out-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-opt-out-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateOptOutList"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-opt-out-list))
(common-lisp:progn
 (common-lisp:defun create-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity iso-country-code
                     message-type deletion-protection-enabled tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable origination-identity iso-country-code message-type
     deletion-protection-enabled tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreatePool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pool))
(common-lisp:progn
 (common-lisp:defun create-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-type tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable registration-type tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-registration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateRegistration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-registration))
(common-lisp:progn
 (common-lisp:defun create-registration-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id resource-id)
   (common-lisp:declare (common-lisp:ignorable registration-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-registration-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateRegistrationAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-registration-association))
(common-lisp:progn
 (common-lisp:defun create-registration-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-body attachment-url tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable attachment-body attachment-url tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-registration-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateRegistrationAttachment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-registration-attachment))
(common-lisp:progn
 (common-lisp:defun create-registration-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id)
   (common-lisp:declare (common-lisp:ignorable registration-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-registration-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateRegistrationVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-registration-version))
(common-lisp:progn
 (common-lisp:defun create-verified-destination-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-phone-number tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable destination-phone-number tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-verified-destination-number-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateVerifiedDestinationNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-verified-destination-number))
(common-lisp:progn
 (common-lisp:defun delete-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configuration-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteConfigurationSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configuration-set))
(common-lisp:progn
 (common-lisp:defun delete-default-message-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-default-message-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteDefaultMessageType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-default-message-type))
(common-lisp:progn
 (common-lisp:defun delete-default-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-default-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteDefaultSenderId"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-default-sender-id))
(common-lisp:progn
 (common-lisp:defun delete-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteEventDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-destination))
(common-lisp:progn
 (common-lisp:defun delete-keyword
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity keyword)
   (common-lisp:declare (common-lisp:ignorable origination-identity keyword))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-keyword-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteKeyword"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-keyword))
(common-lisp:progn
 (common-lisp:defun delete-opt-out-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name)
   (common-lisp:declare (common-lisp:ignorable opt-out-list-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-opt-out-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteOptOutList"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-opt-out-list))
(common-lisp:progn
 (common-lisp:defun delete-opted-out-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name opted-out-number)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name opted-out-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-opted-out-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteOptedOutNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-opted-out-number))
(common-lisp:progn
 (common-lisp:defun delete-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id)
   (common-lisp:declare (common-lisp:ignorable pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeletePool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pool))
(common-lisp:progn
 (common-lisp:defun delete-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id)
   (common-lisp:declare (common-lisp:ignorable registration-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-registration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteRegistration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-registration))
(common-lisp:progn
 (common-lisp:defun delete-registration-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-attachment-id)
   (common-lisp:declare (common-lisp:ignorable registration-attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-registration-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteRegistrationAttachment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-registration-attachment))
(common-lisp:progn
 (common-lisp:defun delete-registration-field-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id field-path)
   (common-lisp:declare (common-lisp:ignorable registration-id field-path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-registration-field-value-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteRegistrationFieldValue"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-registration-field-value))
(common-lisp:progn
 (common-lisp:defun delete-text-message-spend-limit-override ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'pinpoint-sms-voice-v2-request :method "POST"
                                :path "/" :operation
                                "DeleteTextMessageSpendLimitOverride"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-text-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun delete-verified-destination-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key verified-destination-number-id)
   (common-lisp:declare (common-lisp:ignorable verified-destination-number-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-verified-destination-number-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteVerifiedDestinationNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-verified-destination-number))
(common-lisp:progn
 (common-lisp:defun delete-voice-message-spend-limit-override ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'pinpoint-sms-voice-v2-request :method "POST"
                                :path "/" :operation
                                "DeleteVoiceMessageSpendLimitOverride"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-voice-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeAccountAttributes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeAccountLimits"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-configuration-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-names filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-names filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeConfigurationSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-configuration-sets))
(common-lisp:progn
 (common-lisp:defun describe-keywords
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity keywords filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable origination-identity keywords filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-keywords-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeKeywords"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-keywords))
(common-lisp:progn
 (common-lisp:defun describe-opt-out-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-names next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-names next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-opt-out-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeOptOutLists"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-opt-out-lists))
(common-lisp:progn
 (common-lisp:defun describe-opted-out-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name opted-out-numbers
                     filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name opted-out-numbers filters
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-opted-out-numbers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeOptedOutNumbers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-opted-out-numbers))
(common-lisp:progn
 (common-lisp:defun describe-phone-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-ids filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable phone-number-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-phone-numbers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribePhoneNumbers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-phone-numbers))
(common-lisp:progn
 (common-lisp:defun describe-pools
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-ids filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable pool-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pools-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribePools"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pools))
(common-lisp:progn
 (common-lisp:defun describe-registration-attachments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-attachment-ids filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-attachment-ids filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-registration-attachments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrationAttachments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registration-attachments))
(common-lisp:progn
 (common-lisp:defun describe-registration-field-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-type section-path
                     field-paths next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-type section-path field-paths
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-registration-field-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrationFieldDefinitions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registration-field-definitions))
(common-lisp:progn
 (common-lisp:defun describe-registration-field-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id version-number
                     section-path field-paths next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-id version-number section-path
     field-paths next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-registration-field-values-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrationFieldValues"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registration-field-values))
(common-lisp:progn
 (common-lisp:defun describe-registration-section-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-type section-paths
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-type section-paths next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-registration-section-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrationSectionDefinitions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registration-section-definitions))
(common-lisp:progn
 (common-lisp:defun describe-registration-type-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-types filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-types filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-registration-type-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrationTypeDefinitions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registration-type-definitions))
(common-lisp:progn
 (common-lisp:defun describe-registration-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id version-numbers filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-id version-numbers filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-registration-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrationVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registration-versions))
(common-lisp:progn
 (common-lisp:defun describe-registrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-ids filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-registrations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRegistrations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-registrations))
(common-lisp:progn
 (common-lisp:defun describe-sender-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sender-ids filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable sender-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-sender-ids-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeSenderIds"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-sender-ids))
(common-lisp:progn
 (common-lisp:defun describe-spend-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-spend-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeSpendLimits"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-spend-limits))
(common-lisp:progn
 (common-lisp:defun describe-verified-destination-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key verified-destination-number-ids
                     destination-phone-numbers filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable verified-destination-number-ids
     destination-phone-numbers filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-verified-destination-numbers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeVerifiedDestinationNumbers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-verified-destination-numbers))
(common-lisp:progn
 (common-lisp:defun disassociate-origination-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id origination-identity
                     iso-country-code client-token)
   (common-lisp:declare
    (common-lisp:ignorable pool-id origination-identity iso-country-code
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-origination-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DisassociateOriginationIdentity"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-origination-identity))
(common-lisp:progn
 (common-lisp:defun discard-registration-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id)
   (common-lisp:declare (common-lisp:ignorable registration-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-discard-registration-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "DiscardRegistrationVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'discard-registration-version))
(common-lisp:progn
 (common-lisp:defun list-pool-origination-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable pool-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-pool-origination-identities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "ListPoolOriginationIdentities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pool-origination-identities))
(common-lisp:progn
 (common-lisp:defun list-registration-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable registration-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-registration-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "ListRegistrationAssociations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-registration-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-keyword
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origination-identity keyword
                     keyword-message keyword-action)
   (common-lisp:declare
    (common-lisp:ignorable origination-identity keyword keyword-message
     keyword-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-keyword-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "PutKeyword"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-keyword))
(common-lisp:progn
 (common-lisp:defun put-opted-out-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key opt-out-list-name opted-out-number)
   (common-lisp:declare
    (common-lisp:ignorable opt-out-list-name opted-out-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-opted-out-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "PutOptedOutNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-opted-out-number))
(common-lisp:progn
 (common-lisp:defun put-registration-field-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id field-path select-choices
                     text-value registration-attachment-id)
   (common-lisp:declare
    (common-lisp:ignorable registration-id field-path select-choices text-value
     registration-attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-registration-field-value-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "PutRegistrationFieldValue"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-registration-field-value))
(common-lisp:progn
 (common-lisp:defun release-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id)
   (common-lisp:declare (common-lisp:ignorable phone-number-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "ReleasePhoneNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'release-phone-number))
(common-lisp:progn
 (common-lisp:defun release-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sender-id iso-country-code)
   (common-lisp:declare (common-lisp:ignorable sender-id iso-country-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "ReleaseSenderId"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'release-sender-id))
(common-lisp:progn
 (common-lisp:defun request-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iso-country-code message-type
                     number-capabilities number-type opt-out-list-name pool-id
                     registration-id deletion-protection-enabled tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable iso-country-code message-type number-capabilities
     number-type opt-out-list-name pool-id registration-id
     deletion-protection-enabled tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "RequestPhoneNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-phone-number))
(common-lisp:progn
 (common-lisp:defun request-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sender-id iso-country-code message-types
                     deletion-protection-enabled tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable sender-id iso-country-code message-types
     deletion-protection-enabled tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "RequestSenderId"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-sender-id))
(common-lisp:progn
 (common-lisp:defun send-destination-number-verification-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key verified-destination-number-id
                     verification-channel language-code origination-identity
                     configuration-set-name context
                     destination-country-parameters)
   (common-lisp:declare
    (common-lisp:ignorable verified-destination-number-id verification-channel
     language-code origination-identity configuration-set-name context
     destination-country-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-destination-number-verification-code-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SendDestinationNumberVerificationCode"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-destination-number-verification-code))
(common-lisp:progn
 (common-lisp:defun send-text-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-phone-number
                     origination-identity message-body message-type keyword
                     configuration-set-name max-price time-to-live context
                     destination-country-parameters dry-run)
   (common-lisp:declare
    (common-lisp:ignorable destination-phone-number origination-identity
     message-body message-type keyword configuration-set-name max-price
     time-to-live context destination-country-parameters dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-text-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SendTextMessage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-text-message))
(common-lisp:progn
 (common-lisp:defun send-voice-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-phone-number
                     origination-identity message-body message-body-text-type
                     voice-id configuration-set-name max-price-per-minute
                     time-to-live context dry-run)
   (common-lisp:declare
    (common-lisp:ignorable destination-phone-number origination-identity
     message-body message-body-text-type voice-id configuration-set-name
     max-price-per-minute time-to-live context dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-voice-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SendVoiceMessage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-voice-message))
(common-lisp:progn
 (common-lisp:defun set-default-message-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name message-type)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name message-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-default-message-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SetDefaultMessageType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-message-type))
(common-lisp:progn
 (common-lisp:defun set-default-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name sender-id)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name sender-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-default-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SetDefaultSenderId"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-sender-id))
(common-lisp:progn
 (common-lisp:defun set-text-message-spend-limit-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monthly-limit)
   (common-lisp:declare (common-lisp:ignorable monthly-limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-text-message-spend-limit-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SetTextMessageSpendLimitOverride"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-text-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun set-voice-message-spend-limit-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monthly-limit)
   (common-lisp:declare (common-lisp:ignorable monthly-limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-voice-message-spend-limit-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SetVoiceMessageSpendLimitOverride"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-voice-message-spend-limit-override))
(common-lisp:progn
 (common-lisp:defun submit-registration-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-id)
   (common-lisp:declare (common-lisp:ignorable registration-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-registration-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "SubmitRegistrationVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-registration-version))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name enabled matching-event-types
                     cloud-watch-logs-destination kinesis-firehose-destination
                     sns-destination)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name
     enabled matching-event-types cloud-watch-logs-destination
     kinesis-firehose-destination sns-destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-event-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "UpdateEventDestination"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-destination))
(common-lisp:progn
 (common-lisp:defun update-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id two-way-enabled
                     two-way-channel-arn two-way-channel-role
                     self-managed-opt-outs-enabled opt-out-list-name
                     deletion-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable phone-number-id two-way-enabled two-way-channel-arn
     two-way-channel-role self-managed-opt-outs-enabled opt-out-list-name
     deletion-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "UpdatePhoneNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-phone-number))
(common-lisp:progn
 (common-lisp:defun update-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-id two-way-enabled
                     two-way-channel-arn two-way-channel-role
                     self-managed-opt-outs-enabled opt-out-list-name
                     shared-routes-enabled deletion-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable pool-id two-way-enabled two-way-channel-arn
     two-way-channel-role self-managed-opt-outs-enabled opt-out-list-name
     shared-routes-enabled deletion-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "UpdatePool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pool))
(common-lisp:progn
 (common-lisp:defun update-sender-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sender-id iso-country-code
                     deletion-protection-enabled)
   (common-lisp:declare
    (common-lisp:ignorable sender-id iso-country-code
     deletion-protection-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sender-id-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "UpdateSenderId"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sender-id))
(common-lisp:progn
 (common-lisp:defun verify-destination-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key verified-destination-number-id
                     verification-code)
   (common-lisp:declare
    (common-lisp:ignorable verified-destination-number-id verification-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-verify-destination-number-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pinpoint-sms-voice-v2-request aws-sdk/generator/operation::input
        "POST" "/" "VerifyDestinationNumber"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-destination-number))
